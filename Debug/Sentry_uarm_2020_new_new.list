
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b80  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df8  08004df8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040e4  20000010  08004e10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040f4  08004e10  000240f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a36  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e64  00000000  00000000  00034a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  000378e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  00038978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002471a  00000000  00000000  000398a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e808  00000000  00000000  0005dfc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de178  00000000  00000000  0006c7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004498  00000000  00000000  0014a9c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004d18 	.word	0x08004d18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004d18 	.word	0x08004d18

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b972 	b.w	8000cd8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9e08      	ldr	r6, [sp, #32]
 8000a12:	4604      	mov	r4, r0
 8000a14:	4688      	mov	r8, r1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d14b      	bne.n	8000ab2 <__udivmoddi4+0xa6>
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	4615      	mov	r5, r2
 8000a1e:	d967      	bls.n	8000af0 <__udivmoddi4+0xe4>
 8000a20:	fab2 f282 	clz	r2, r2
 8000a24:	b14a      	cbz	r2, 8000a3a <__udivmoddi4+0x2e>
 8000a26:	f1c2 0720 	rsb	r7, r2, #32
 8000a2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a32:	4095      	lsls	r5, r2
 8000a34:	ea47 0803 	orr.w	r8, r7, r3
 8000a38:	4094      	lsls	r4, r2
 8000a3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a3e:	0c23      	lsrs	r3, r4, #16
 8000a40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a44:	fa1f fc85 	uxth.w	ip, r5
 8000a48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a50:	fb07 f10c 	mul.w	r1, r7, ip
 8000a54:	4299      	cmp	r1, r3
 8000a56:	d909      	bls.n	8000a6c <__udivmoddi4+0x60>
 8000a58:	18eb      	adds	r3, r5, r3
 8000a5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a5e:	f080 811b 	bcs.w	8000c98 <__udivmoddi4+0x28c>
 8000a62:	4299      	cmp	r1, r3
 8000a64:	f240 8118 	bls.w	8000c98 <__udivmoddi4+0x28c>
 8000a68:	3f02      	subs	r7, #2
 8000a6a:	442b      	add	r3, r5
 8000a6c:	1a5b      	subs	r3, r3, r1
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a80:	45a4      	cmp	ip, r4
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x8c>
 8000a84:	192c      	adds	r4, r5, r4
 8000a86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a8a:	f080 8107 	bcs.w	8000c9c <__udivmoddi4+0x290>
 8000a8e:	45a4      	cmp	ip, r4
 8000a90:	f240 8104 	bls.w	8000c9c <__udivmoddi4+0x290>
 8000a94:	3802      	subs	r0, #2
 8000a96:	442c      	add	r4, r5
 8000a98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a9c:	eba4 040c 	sub.w	r4, r4, ip
 8000aa0:	2700      	movs	r7, #0
 8000aa2:	b11e      	cbz	r6, 8000aac <__udivmoddi4+0xa0>
 8000aa4:	40d4      	lsrs	r4, r2
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e9c6 4300 	strd	r4, r3, [r6]
 8000aac:	4639      	mov	r1, r7
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d909      	bls.n	8000aca <__udivmoddi4+0xbe>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	f000 80eb 	beq.w	8000c92 <__udivmoddi4+0x286>
 8000abc:	2700      	movs	r7, #0
 8000abe:	e9c6 0100 	strd	r0, r1, [r6]
 8000ac2:	4638      	mov	r0, r7
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	fab3 f783 	clz	r7, r3
 8000ace:	2f00      	cmp	r7, #0
 8000ad0:	d147      	bne.n	8000b62 <__udivmoddi4+0x156>
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d302      	bcc.n	8000adc <__udivmoddi4+0xd0>
 8000ad6:	4282      	cmp	r2, r0
 8000ad8:	f200 80fa 	bhi.w	8000cd0 <__udivmoddi4+0x2c4>
 8000adc:	1a84      	subs	r4, r0, r2
 8000ade:	eb61 0303 	sbc.w	r3, r1, r3
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	4698      	mov	r8, r3
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d0e0      	beq.n	8000aac <__udivmoddi4+0xa0>
 8000aea:	e9c6 4800 	strd	r4, r8, [r6]
 8000aee:	e7dd      	b.n	8000aac <__udivmoddi4+0xa0>
 8000af0:	b902      	cbnz	r2, 8000af4 <__udivmoddi4+0xe8>
 8000af2:	deff      	udf	#255	; 0xff
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	f040 808f 	bne.w	8000c1c <__udivmoddi4+0x210>
 8000afe:	1b49      	subs	r1, r1, r5
 8000b00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b04:	fa1f f885 	uxth.w	r8, r5
 8000b08:	2701      	movs	r7, #1
 8000b0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b18:	fb08 f10c 	mul.w	r1, r8, ip
 8000b1c:	4299      	cmp	r1, r3
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x124>
 8000b20:	18eb      	adds	r3, r5, r3
 8000b22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x122>
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	f200 80cd 	bhi.w	8000cc8 <__udivmoddi4+0x2bc>
 8000b2e:	4684      	mov	ip, r0
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	b2a3      	uxth	r3, r4
 8000b34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b40:	fb08 f800 	mul.w	r8, r8, r0
 8000b44:	45a0      	cmp	r8, r4
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x14c>
 8000b48:	192c      	adds	r4, r5, r4
 8000b4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x14a>
 8000b50:	45a0      	cmp	r8, r4
 8000b52:	f200 80b6 	bhi.w	8000cc2 <__udivmoddi4+0x2b6>
 8000b56:	4618      	mov	r0, r3
 8000b58:	eba4 0408 	sub.w	r4, r4, r8
 8000b5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b60:	e79f      	b.n	8000aa2 <__udivmoddi4+0x96>
 8000b62:	f1c7 0c20 	rsb	ip, r7, #32
 8000b66:	40bb      	lsls	r3, r7
 8000b68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b70:	fa01 f407 	lsl.w	r4, r1, r7
 8000b74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b80:	4325      	orrs	r5, r4
 8000b82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b86:	0c2c      	lsrs	r4, r5, #16
 8000b88:	fb08 3319 	mls	r3, r8, r9, r3
 8000b8c:	fa1f fa8e 	uxth.w	sl, lr
 8000b90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b94:	fb09 f40a 	mul.w	r4, r9, sl
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ba2:	d90b      	bls.n	8000bbc <__udivmoddi4+0x1b0>
 8000ba4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ba8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bac:	f080 8087 	bcs.w	8000cbe <__udivmoddi4+0x2b2>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f240 8084 	bls.w	8000cbe <__udivmoddi4+0x2b2>
 8000bb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bba:	4473      	add	r3, lr
 8000bbc:	1b1b      	subs	r3, r3, r4
 8000bbe:	b2ad      	uxth	r5, r5
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bd0:	45a2      	cmp	sl, r4
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x1da>
 8000bd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bdc:	d26b      	bcs.n	8000cb6 <__udivmoddi4+0x2aa>
 8000bde:	45a2      	cmp	sl, r4
 8000be0:	d969      	bls.n	8000cb6 <__udivmoddi4+0x2aa>
 8000be2:	3802      	subs	r0, #2
 8000be4:	4474      	add	r4, lr
 8000be6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bea:	fba0 8902 	umull	r8, r9, r0, r2
 8000bee:	eba4 040a 	sub.w	r4, r4, sl
 8000bf2:	454c      	cmp	r4, r9
 8000bf4:	46c2      	mov	sl, r8
 8000bf6:	464b      	mov	r3, r9
 8000bf8:	d354      	bcc.n	8000ca4 <__udivmoddi4+0x298>
 8000bfa:	d051      	beq.n	8000ca0 <__udivmoddi4+0x294>
 8000bfc:	2e00      	cmp	r6, #0
 8000bfe:	d069      	beq.n	8000cd4 <__udivmoddi4+0x2c8>
 8000c00:	ebb1 050a 	subs.w	r5, r1, sl
 8000c04:	eb64 0403 	sbc.w	r4, r4, r3
 8000c08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c0c:	40fd      	lsrs	r5, r7
 8000c0e:	40fc      	lsrs	r4, r7
 8000c10:	ea4c 0505 	orr.w	r5, ip, r5
 8000c14:	e9c6 5400 	strd	r5, r4, [r6]
 8000c18:	2700      	movs	r7, #0
 8000c1a:	e747      	b.n	8000aac <__udivmoddi4+0xa0>
 8000c1c:	f1c2 0320 	rsb	r3, r2, #32
 8000c20:	fa20 f703 	lsr.w	r7, r0, r3
 8000c24:	4095      	lsls	r5, r2
 8000c26:	fa01 f002 	lsl.w	r0, r1, r2
 8000c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c32:	4338      	orrs	r0, r7
 8000c34:	0c01      	lsrs	r1, r0, #16
 8000c36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c3a:	fa1f f885 	uxth.w	r8, r5
 8000c3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c46:	fb07 f308 	mul.w	r3, r7, r8
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x256>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c58:	d22f      	bcs.n	8000cba <__udivmoddi4+0x2ae>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d92d      	bls.n	8000cba <__udivmoddi4+0x2ae>
 8000c5e:	3f02      	subs	r7, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1acb      	subs	r3, r1, r3
 8000c64:	b281      	uxth	r1, r0
 8000c66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c72:	fb00 f308 	mul.w	r3, r0, r8
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x27e>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c80:	d217      	bcs.n	8000cb2 <__udivmoddi4+0x2a6>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d915      	bls.n	8000cb2 <__udivmoddi4+0x2a6>
 8000c86:	3802      	subs	r0, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1ac9      	subs	r1, r1, r3
 8000c8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c90:	e73b      	b.n	8000b0a <__udivmoddi4+0xfe>
 8000c92:	4637      	mov	r7, r6
 8000c94:	4630      	mov	r0, r6
 8000c96:	e709      	b.n	8000aac <__udivmoddi4+0xa0>
 8000c98:	4607      	mov	r7, r0
 8000c9a:	e6e7      	b.n	8000a6c <__udivmoddi4+0x60>
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	e6fb      	b.n	8000a98 <__udivmoddi4+0x8c>
 8000ca0:	4541      	cmp	r1, r8
 8000ca2:	d2ab      	bcs.n	8000bfc <__udivmoddi4+0x1f0>
 8000ca4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ca8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cac:	3801      	subs	r0, #1
 8000cae:	4613      	mov	r3, r2
 8000cb0:	e7a4      	b.n	8000bfc <__udivmoddi4+0x1f0>
 8000cb2:	4660      	mov	r0, ip
 8000cb4:	e7e9      	b.n	8000c8a <__udivmoddi4+0x27e>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	e795      	b.n	8000be6 <__udivmoddi4+0x1da>
 8000cba:	4667      	mov	r7, ip
 8000cbc:	e7d1      	b.n	8000c62 <__udivmoddi4+0x256>
 8000cbe:	4681      	mov	r9, r0
 8000cc0:	e77c      	b.n	8000bbc <__udivmoddi4+0x1b0>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	442c      	add	r4, r5
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0x14c>
 8000cc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ccc:	442b      	add	r3, r5
 8000cce:	e72f      	b.n	8000b30 <__udivmoddi4+0x124>
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	e708      	b.n	8000ae6 <__udivmoddi4+0xda>
 8000cd4:	4637      	mov	r7, r6
 8000cd6:	e6e9      	b.n	8000aac <__udivmoddi4+0xa0>

08000cd8 <__aeabi_idiv0>:
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <Chassis_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Chassis_Task_Func */
void Chassis_Task_Func(void const * argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	buzzer_play_mario(200);
 8000ce4:	20c8      	movs	r0, #200	; 0xc8
 8000ce6:	f000 f913 	bl	8000f10 <buzzer_play_mario>
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD_B_GPIO_Port,LD_B_Pin);
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <Chassis_Task_Func+0x28>)
 8000cee:	f001 fb90 	bl	8002412 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000cf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf6:	f002 fe2a 	bl	800394e <osDelay>
    osDelay(1);
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f002 fe27 	bl	800394e <osDelay>
	HAL_GPIO_TogglePin(LD_B_GPIO_Port,LD_B_Pin);
 8000d00:	e7f3      	b.n	8000cea <Chassis_Task_Func+0xe>
 8000d02:	bf00      	nop
 8000d04:	40021800 	.word	0x40021800

08000d08 <Gimbal_Task_Function>:

#include "Gimbal_App.h"


void Gimbal_Task_Function(void const * argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

	//buzzer_play_o_canada(200);

  for(;;)
  {
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <Gimbal_Task_Function+0x20>)
 8000d14:	f001 fb7d 	bl	8002412 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000d18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d1c:	f002 fe17 	bl	800394e <osDelay>
	  osDelay(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f002 fe14 	bl	800394e <osDelay>
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000d26:	e7f3      	b.n	8000d10 <Gimbal_Task_Function+0x8>
 8000d28:	40021800 	.word	0x40021800

08000d2c <Shoot_Task_Func>:
 */
#include "Shoot_App.h"
void shoot_init(void);

void Shoot_Task_Func(void const * argument)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000d34:	f000 f81c 	bl	8000d70 <shoot_init>
  for(;;)
  {
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <Shoot_Task_Func+0x3c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1500);
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <Shoot_Task_Func+0x3c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d4a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <Shoot_Task_Func+0x40>)
 8000d52:	f001 fb5e 	bl	8002412 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000d56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5a:	f002 fdf8 	bl	800394e <osDelay>
    osDelay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f002 fdf5 	bl	800394e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000d64:	e7e8      	b.n	8000d38 <Shoot_Task_Func+0xc>
 8000d66:	bf00      	nop
 8000d68:	20003fd0 	.word	0x20003fd0
 8000d6c:	40021800 	.word	0x40021800

08000d70 <shoot_init>:
  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000d74:	2100      	movs	r1, #0
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <shoot_init+0x50>)
 8000d78:	f002 f844 	bl	8002e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <shoot_init+0x50>)
 8000d80:	f002 f840 	bl	8002e04 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,2000);
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <shoot_init+0x50>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d8c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,2000);
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <shoot_init+0x50>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(2000);
 8000d98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d9c:	f002 fdd7 	bl	800394e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <shoot_init+0x50>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1000);
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <shoot_init+0x50>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000db4:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000db8:	f002 fdc9 	bl	800394e <osDelay>

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20003fd0 	.word	0x20003fd0

08000dc4 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <buzzer_init+0x10>)
 8000dcc:	f002 f81a 	bl	8002e04 <HAL_TIM_PWM_Start>

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20004060 	.word	0x20004060

08000dd8 <buzzer_play_g0>:

void buzzer_play_g0(int32_t duration){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <buzzer_play_g0+0x44>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,9523);
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <buzzer_play_g0+0x44>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f242 5233 	movw	r2, #9523	; 0x2533
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <buzzer_play_g0+0x44>)
 8000df4:	f242 5233 	movw	r2, #9523	; 0x2533
 8000df8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <buzzer_play_g0+0x44>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2264      	movs	r2, #100	; 0x64
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fda2 	bl	800394e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <buzzer_play_g0+0x44>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20004060 	.word	0x20004060

08000e20 <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <buzzer_play_c1+0x44>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,7135);
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <buzzer_play_c1+0x44>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <buzzer_play_c1+0x44>)
 8000e3c:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8000e40:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <buzzer_play_c1+0x44>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2264      	movs	r2, #100	; 0x64
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 fd7e 	bl	800394e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <buzzer_play_c1+0x44>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2200      	movs	r2, #0
 8000e58:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20004060 	.word	0x20004060

08000e68 <buzzer_play_e1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_e1(int32_t duration){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 25);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <buzzer_play_e1+0x44>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5662);
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <buzzer_play_e1+0x44>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f241 621e 	movw	r2, #5662	; 0x161e
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <buzzer_play_e1+0x44>)
 8000e84:	f241 621e 	movw	r2, #5662	; 0x161e
 8000e88:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <buzzer_play_e1+0x44>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2264      	movs	r2, #100	; 0x64
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 fd5a 	bl	800394e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <buzzer_play_e1+0x44>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20004060 	.word	0x20004060

08000eb0 <buzzer_play_g1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_g1(int32_t duration){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 21);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <buzzer_play_g1+0x44>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4761);
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <buzzer_play_g1+0x44>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f241 2299 	movw	r2, #4761	; 0x1299
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <buzzer_play_g1+0x44>)
 8000ecc:	f241 2299 	movw	r2, #4761	; 0x1299
 8000ed0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <buzzer_play_g1+0x44>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2264      	movs	r2, #100	; 0x64
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 fd36 	bl	800394e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <buzzer_play_g1+0x44>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20004060 	.word	0x20004060

08000ef8 <buzzer_rest>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_rest(int32_t duration){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	osDelay(duration);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 fd23 	bl	800394e <osDelay>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <buzzer_play_mario>:



}

void buzzer_play_mario(int32_t bpm){
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b08d      	sub	sp, #52	; 0x34
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fabb 	bl	8000494 <__aeabi_i2d>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460c      	mov	r4, r1
 8000f22:	461a      	mov	r2, r3
 8000f24:	4623      	mov	r3, r4
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	49bf      	ldr	r1, [pc, #764]	; (8001228 <buzzer_play_mario+0x318>)
 8000f2c:	f7ff fc46 	bl	80007bc <__aeabi_ddiv>
 8000f30:	4603      	mov	r3, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	4618      	mov	r0, r3
 8000f36:	4621      	mov	r1, r4
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4bbb      	ldr	r3, [pc, #748]	; (800122c <buzzer_play_mario+0x31c>)
 8000f3e:	f7ff fb13 	bl	8000568 <__aeabi_dmul>
 8000f42:	4603      	mov	r3, r0
 8000f44:	460c      	mov	r4, r1
 8000f46:	4618      	mov	r0, r3
 8000f48:	4621      	mov	r1, r4
 8000f4a:	f7ff fd1f 	bl	800098c <__aeabi_d2iz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t quarter_dot=(double)60/bpm*1000*1.5;
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fa9e 	bl	8000494 <__aeabi_i2d>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	460c      	mov	r4, r1
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4623      	mov	r3, r4
 8000f60:	f04f 0000 	mov.w	r0, #0
 8000f64:	49b0      	ldr	r1, [pc, #704]	; (8001228 <buzzer_play_mario+0x318>)
 8000f66:	f7ff fc29 	bl	80007bc <__aeabi_ddiv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460c      	mov	r4, r1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	4621      	mov	r1, r4
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4bad      	ldr	r3, [pc, #692]	; (800122c <buzzer_play_mario+0x31c>)
 8000f78:	f7ff faf6 	bl	8000568 <__aeabi_dmul>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	4618      	mov	r0, r3
 8000f82:	4621      	mov	r1, r4
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4ba9      	ldr	r3, [pc, #676]	; (8001230 <buzzer_play_mario+0x320>)
 8000f8a:	f7ff faed 	bl	8000568 <__aeabi_dmul>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460c      	mov	r4, r1
 8000f92:	4618      	mov	r0, r3
 8000f94:	4621      	mov	r1, r4
 8000f96:	f7ff fcf9 	bl	800098c <__aeabi_d2iz>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t eighth=(double)60/bpm*1000*0.5;
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fa78 	bl	8000494 <__aeabi_i2d>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4623      	mov	r3, r4
 8000fac:	f04f 0000 	mov.w	r0, #0
 8000fb0:	499d      	ldr	r1, [pc, #628]	; (8001228 <buzzer_play_mario+0x318>)
 8000fb2:	f7ff fc03 	bl	80007bc <__aeabi_ddiv>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460c      	mov	r4, r1
 8000fba:	4618      	mov	r0, r3
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	4b9a      	ldr	r3, [pc, #616]	; (800122c <buzzer_play_mario+0x31c>)
 8000fc4:	f7ff fad0 	bl	8000568 <__aeabi_dmul>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	460c      	mov	r4, r1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	4621      	mov	r1, r4
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4b97      	ldr	r3, [pc, #604]	; (8001234 <buzzer_play_mario+0x324>)
 8000fd6:	f7ff fac7 	bl	8000568 <__aeabi_dmul>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460c      	mov	r4, r1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	f7ff fcd3 	bl	800098c <__aeabi_d2iz>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t eighth_dot=(double)60/bpm*1000*0.5*1.5;
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fa52 	bl	8000494 <__aeabi_i2d>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4623      	mov	r3, r4
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	498a      	ldr	r1, [pc, #552]	; (8001228 <buzzer_play_mario+0x318>)
 8000ffe:	f7ff fbdd 	bl	80007bc <__aeabi_ddiv>
 8001002:	4603      	mov	r3, r0
 8001004:	460c      	mov	r4, r1
 8001006:	4618      	mov	r0, r3
 8001008:	4621      	mov	r1, r4
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b87      	ldr	r3, [pc, #540]	; (800122c <buzzer_play_mario+0x31c>)
 8001010:	f7ff faaa 	bl	8000568 <__aeabi_dmul>
 8001014:	4603      	mov	r3, r0
 8001016:	460c      	mov	r4, r1
 8001018:	4618      	mov	r0, r3
 800101a:	4621      	mov	r1, r4
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b84      	ldr	r3, [pc, #528]	; (8001234 <buzzer_play_mario+0x324>)
 8001022:	f7ff faa1 	bl	8000568 <__aeabi_dmul>
 8001026:	4603      	mov	r3, r0
 8001028:	460c      	mov	r4, r1
 800102a:	4618      	mov	r0, r3
 800102c:	4621      	mov	r1, r4
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <buzzer_play_mario+0x320>)
 8001034:	f7ff fa98 	bl	8000568 <__aeabi_dmul>
 8001038:	4603      	mov	r3, r0
 800103a:	460c      	mov	r4, r1
 800103c:	4618      	mov	r0, r3
 800103e:	4621      	mov	r1, r4
 8001040:	f7ff fca4 	bl	800098c <__aeabi_d2iz>
 8001044:	4603      	mov	r3, r0
 8001046:	623b      	str	r3, [r7, #32]
	int32_t sixteenth=(double)60/bpm*0.25*1000;
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fa23 	bl	8000494 <__aeabi_i2d>
 800104e:	4603      	mov	r3, r0
 8001050:	460c      	mov	r4, r1
 8001052:	461a      	mov	r2, r3
 8001054:	4623      	mov	r3, r4
 8001056:	f04f 0000 	mov.w	r0, #0
 800105a:	4973      	ldr	r1, [pc, #460]	; (8001228 <buzzer_play_mario+0x318>)
 800105c:	f7ff fbae 	bl	80007bc <__aeabi_ddiv>
 8001060:	4603      	mov	r3, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4618      	mov	r0, r3
 8001066:	4621      	mov	r1, r4
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b72      	ldr	r3, [pc, #456]	; (8001238 <buzzer_play_mario+0x328>)
 800106e:	f7ff fa7b 	bl	8000568 <__aeabi_dmul>
 8001072:	4603      	mov	r3, r0
 8001074:	460c      	mov	r4, r1
 8001076:	4618      	mov	r0, r3
 8001078:	4621      	mov	r1, r4
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b6b      	ldr	r3, [pc, #428]	; (800122c <buzzer_play_mario+0x31c>)
 8001080:	f7ff fa72 	bl	8000568 <__aeabi_dmul>
 8001084:	4603      	mov	r3, r0
 8001086:	460c      	mov	r4, r1
 8001088:	4618      	mov	r0, r3
 800108a:	4621      	mov	r1, r4
 800108c:	f7ff fc7e 	bl	800098c <__aeabi_d2iz>
 8001090:	4603      	mov	r3, r0
 8001092:	61fb      	str	r3, [r7, #28]
	int32_t sixteenth_dot=(double)60/bpm*0.25*1000*1.5;
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff f9fd 	bl	8000494 <__aeabi_i2d>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	461a      	mov	r2, r3
 80010a0:	4623      	mov	r3, r4
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4960      	ldr	r1, [pc, #384]	; (8001228 <buzzer_play_mario+0x318>)
 80010a8:	f7ff fb88 	bl	80007bc <__aeabi_ddiv>
 80010ac:	4603      	mov	r3, r0
 80010ae:	460c      	mov	r4, r1
 80010b0:	4618      	mov	r0, r3
 80010b2:	4621      	mov	r1, r4
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	4b5f      	ldr	r3, [pc, #380]	; (8001238 <buzzer_play_mario+0x328>)
 80010ba:	f7ff fa55 	bl	8000568 <__aeabi_dmul>
 80010be:	4603      	mov	r3, r0
 80010c0:	460c      	mov	r4, r1
 80010c2:	4618      	mov	r0, r3
 80010c4:	4621      	mov	r1, r4
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b58      	ldr	r3, [pc, #352]	; (800122c <buzzer_play_mario+0x31c>)
 80010cc:	f7ff fa4c 	bl	8000568 <__aeabi_dmul>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4618      	mov	r0, r3
 80010d6:	4621      	mov	r1, r4
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b54      	ldr	r3, [pc, #336]	; (8001230 <buzzer_play_mario+0x320>)
 80010de:	f7ff fa43 	bl	8000568 <__aeabi_dmul>
 80010e2:	4603      	mov	r3, r0
 80010e4:	460c      	mov	r4, r1
 80010e6:	4618      	mov	r0, r3
 80010e8:	4621      	mov	r1, r4
 80010ea:	f7ff fc4f 	bl	800098c <__aeabi_d2iz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	61bb      	str	r3, [r7, #24]
	int32_t half=(double)60/bpm*2*1000;
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff f9ce 	bl	8000494 <__aeabi_i2d>
 80010f8:	4603      	mov	r3, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	461a      	mov	r2, r3
 80010fe:	4623      	mov	r3, r4
 8001100:	f04f 0000 	mov.w	r0, #0
 8001104:	4948      	ldr	r1, [pc, #288]	; (8001228 <buzzer_play_mario+0x318>)
 8001106:	f7ff fb59 	bl	80007bc <__aeabi_ddiv>
 800110a:	4603      	mov	r3, r0
 800110c:	460c      	mov	r4, r1
 800110e:	4618      	mov	r0, r3
 8001110:	4621      	mov	r1, r4
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	f7ff f871 	bl	80001fc <__adddf3>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4618      	mov	r0, r3
 8001120:	4621      	mov	r1, r4
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <buzzer_play_mario+0x31c>)
 8001128:	f7ff fa1e 	bl	8000568 <__aeabi_dmul>
 800112c:	4603      	mov	r3, r0
 800112e:	460c      	mov	r4, r1
 8001130:	4618      	mov	r0, r3
 8001132:	4621      	mov	r1, r4
 8001134:	f7ff fc2a 	bl	800098c <__aeabi_d2iz>
 8001138:	4603      	mov	r3, r0
 800113a:	617b      	str	r3, [r7, #20]
	int32_t half_dot=(double)60/bpm*2*1000*1.5;
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff f9a9 	bl	8000494 <__aeabi_i2d>
 8001142:	4603      	mov	r3, r0
 8001144:	460c      	mov	r4, r1
 8001146:	461a      	mov	r2, r3
 8001148:	4623      	mov	r3, r4
 800114a:	f04f 0000 	mov.w	r0, #0
 800114e:	4936      	ldr	r1, [pc, #216]	; (8001228 <buzzer_play_mario+0x318>)
 8001150:	f7ff fb34 	bl	80007bc <__aeabi_ddiv>
 8001154:	4603      	mov	r3, r0
 8001156:	460c      	mov	r4, r1
 8001158:	4618      	mov	r0, r3
 800115a:	4621      	mov	r1, r4
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	f7ff f84c 	bl	80001fc <__adddf3>
 8001164:	4603      	mov	r3, r0
 8001166:	460c      	mov	r4, r1
 8001168:	4618      	mov	r0, r3
 800116a:	4621      	mov	r1, r4
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b2e      	ldr	r3, [pc, #184]	; (800122c <buzzer_play_mario+0x31c>)
 8001172:	f7ff f9f9 	bl	8000568 <__aeabi_dmul>
 8001176:	4603      	mov	r3, r0
 8001178:	460c      	mov	r4, r1
 800117a:	4618      	mov	r0, r3
 800117c:	4621      	mov	r1, r4
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <buzzer_play_mario+0x320>)
 8001184:	f7ff f9f0 	bl	8000568 <__aeabi_dmul>
 8001188:	4603      	mov	r3, r0
 800118a:	460c      	mov	r4, r1
 800118c:	4618      	mov	r0, r3
 800118e:	4621      	mov	r1, r4
 8001190:	f7ff fbfc 	bl	800098c <__aeabi_d2iz>
 8001194:	4603      	mov	r3, r0
 8001196:	613b      	str	r3, [r7, #16]
	int32_t whole=(double)60/bpm*4*1000;
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff f97b 	bl	8000494 <__aeabi_i2d>
 800119e:	4603      	mov	r3, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	461a      	mov	r2, r3
 80011a4:	4623      	mov	r3, r4
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	491f      	ldr	r1, [pc, #124]	; (8001228 <buzzer_play_mario+0x318>)
 80011ac:	f7ff fb06 	bl	80007bc <__aeabi_ddiv>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	4618      	mov	r0, r3
 80011b6:	4621      	mov	r1, r4
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <buzzer_play_mario+0x32c>)
 80011be:	f7ff f9d3 	bl	8000568 <__aeabi_dmul>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	4618      	mov	r0, r3
 80011c8:	4621      	mov	r1, r4
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <buzzer_play_mario+0x31c>)
 80011d0:	f7ff f9ca 	bl	8000568 <__aeabi_dmul>
 80011d4:	4603      	mov	r3, r0
 80011d6:	460c      	mov	r4, r1
 80011d8:	4618      	mov	r0, r3
 80011da:	4621      	mov	r1, r4
 80011dc:	f7ff fbd6 	bl	800098c <__aeabi_d2iz>
 80011e0:	4603      	mov	r3, r0
 80011e2:	60fb      	str	r3, [r7, #12]

	buzzer_play_e1(eighth);
 80011e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011e6:	f7ff fe3f 	bl	8000e68 <buzzer_play_e1>
	buzzer_play_e1(eighth);
 80011ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011ec:	f7ff fe3c 	bl	8000e68 <buzzer_play_e1>
	buzzer_rest(eighth);
 80011f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011f2:	f7ff fe81 	bl	8000ef8 <buzzer_rest>
	buzzer_play_e1(eighth);
 80011f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011f8:	f7ff fe36 	bl	8000e68 <buzzer_play_e1>
	buzzer_rest(eighth);
 80011fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011fe:	f7ff fe7b 	bl	8000ef8 <buzzer_rest>
	buzzer_play_c1(eighth);
 8001202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001204:	f7ff fe0c 	bl	8000e20 <buzzer_play_c1>
	buzzer_play_e1(quarter);
 8001208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800120a:	f7ff fe2d 	bl	8000e68 <buzzer_play_e1>
	buzzer_play_g1(quarter);
 800120e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001210:	f7ff fe4e 	bl	8000eb0 <buzzer_play_g1>
	buzzer_rest(quarter);
 8001214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001216:	f7ff fe6f 	bl	8000ef8 <buzzer_rest>
	buzzer_play_g0(quarter);
 800121a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800121c:	f7ff fddc 	bl	8000dd8 <buzzer_play_g0>


}
 8001220:	bf00      	nop
 8001222:	3734      	adds	r7, #52	; 0x34
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	404e0000 	.word	0x404e0000
 800122c:	408f4000 	.word	0x408f4000
 8001230:	3ff80000 	.word	0x3ff80000
 8001234:	3fe00000 	.word	0x3fe00000
 8001238:	3fd00000 	.word	0x3fd00000
 800123c:	40100000 	.word	0x40100000

08001240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4a07      	ldr	r2, [pc, #28]	; (800126c <vApplicationGetIdleTaskMemory+0x2c>)
 8001250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <vApplicationGetIdleTaskMemory+0x30>)
 8001256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2000002c 	.word	0x2000002c
 8001270:	20000080 	.word	0x20000080

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	b09c      	sub	sp, #112	; 0x70
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f000 fce7 	bl	8001c4c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f869 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001282:	f000 f9e7 	bl	8001654 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001286:	f000 f8cf 	bl	8001428 <MX_CAN1_Init>
  MX_CAN2_Init();
 800128a:	f000 f903 	bl	8001494 <MX_CAN2_Init>
  MX_TIM4_Init();
 800128e:	f000 f935 	bl	80014fc <MX_TIM4_Init>
  MX_TIM12_Init();
 8001292:	f000 f999 	bl	80015c8 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8001296:	f7ff fd95 	bl	8000dc4 <buzzer_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <main+0xc0>)
 800129c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80012a0:	461d      	mov	r5, r3
 80012a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 fafe 	bl	80038b6 <osThreadCreate>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <main+0xc4>)
 80012be:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <main+0xc8>)
 80012c2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012c6:	461d      	mov	r5, r3
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 80012d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 faeb 	bl	80038b6 <osThreadCreate>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <main+0xcc>)
 80012e4:	601a      	str	r2, [r3, #0]

  osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <main+0xd0>)
 80012e8:	f107 041c 	add.w	r4, r7, #28
 80012ec:	461d      	mov	r5, r3
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fad8 	bl	80038b6 <osThreadCreate>
 8001306:	4602      	mov	r2, r0
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <main+0xd4>)
 800130a:	601a      	str	r2, [r3, #0]

  osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <main+0xd8>)
 800130e:	463c      	mov	r4, r7
 8001310:	461d      	mov	r5, r3
 8001312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 800131e:	463b      	mov	r3, r7
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fac7 	bl	80038b6 <osThreadCreate>
 8001328:	4602      	mov	r2, r0
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <main+0xdc>)
 800132c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800132e:	f002 fabb 	bl	80038a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001332:	e7fe      	b.n	8001332 <main+0xbe>
 8001334:	08004d3c 	.word	0x08004d3c
 8001338:	200040a0 	.word	0x200040a0
 800133c:	08004d64 	.word	0x08004d64
 8001340:	200040a4 	.word	0x200040a4
 8001344:	08004d8c 	.word	0x08004d8c
 8001348:	200040ac 	.word	0x200040ac
 800134c:	08004db4 	.word	0x08004db4
 8001350:	200040a8 	.word	0x200040a8

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	; 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	; 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fcd0 	bl	8004d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <SystemClock_Config+0xcc>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a27      	ldr	r2, [pc, #156]	; (8001420 <SystemClock_Config+0xcc>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <SystemClock_Config+0xcc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <SystemClock_Config+0xd0>)
 800139e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <SystemClock_Config+0xd0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ba:	2302      	movs	r3, #2
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80013c4:	2306      	movs	r3, #6
 80013c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013c8:	23a8      	movs	r3, #168	; 0xa8
 80013ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 f835 	bl	8002448 <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013e4:	f000 fa0e 	bl	8001804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	230f      	movs	r3, #15
 80013ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ec:	2302      	movs	r3, #2
 80013ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2105      	movs	r1, #5
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fa8e 	bl	8002928 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001412:	f000 f9f7 	bl	8001804 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3750      	adds	r7, #80	; 0x50
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_CAN1_Init+0x64>)
 800142e:	4a18      	ldr	r2, [pc, #96]	; (8001490 <MX_CAN1_Init+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_CAN1_Init+0x64>)
 8001434:	2207      	movs	r2, #7
 8001436:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_CAN1_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_CAN1_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_CAN1_Init+0x64>)
 8001446:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800144a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_CAN1_Init+0x64>)
 800144e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001452:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MX_CAN1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_CAN1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_CAN1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_CAN1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MX_CAN1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_CAN1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_CAN1_Init+0x64>)
 800147a:	f000 fc29 	bl	8001cd0 <HAL_CAN_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001484:	f000 f9be 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20004038 	.word	0x20004038
 8001490:	40006400 	.word	0x40006400

08001494 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_CAN2_Init+0x60>)
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <MX_CAN2_Init+0x64>)
 800149c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014a0:	2210      	movs	r2, #16
 80014a2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014be:	2200      	movs	r2, #0
 80014c0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014dc:	2200      	movs	r2, #0
 80014de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_CAN2_Init+0x60>)
 80014e2:	f000 fbf5 	bl	8001cd0 <HAL_CAN_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80014ec:	f000 f98a 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20004010 	.word	0x20004010
 80014f8:	40006800 	.word	0x40006800

080014fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <MX_TIM4_Init+0xc4>)
 8001520:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <MX_TIM4_Init+0xc8>)
 8001522:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <MX_TIM4_Init+0xc4>)
 8001526:	2253      	movs	r2, #83	; 0x53
 8001528:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <MX_TIM4_Init+0xc4>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <MX_TIM4_Init+0xc4>)
 8001532:	f242 720f 	movw	r2, #9999	; 0x270f
 8001536:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <MX_TIM4_Init+0xc4>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <MX_TIM4_Init+0xc4>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001544:	481e      	ldr	r0, [pc, #120]	; (80015c0 <MX_TIM4_Init+0xc4>)
 8001546:	f001 fc32 	bl	8002dae <HAL_TIM_PWM_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001550:	f000 f958 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4619      	mov	r1, r3
 8001562:	4817      	ldr	r0, [pc, #92]	; (80015c0 <MX_TIM4_Init+0xc4>)
 8001564:	f002 f8f8 	bl	8003758 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800156e:	f000 f949 	bl	8001804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <MX_TIM4_Init+0xc4>)
 800158c:	f001 fd80 	bl	8003090 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001596:	f000 f935 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2208      	movs	r2, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	4807      	ldr	r0, [pc, #28]	; (80015c0 <MX_TIM4_Init+0xc4>)
 80015a2:	f001 fd75 	bl	8003090 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80015ac:	f000 f92a 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015b0:	4803      	ldr	r0, [pc, #12]	; (80015c0 <MX_TIM4_Init+0xc4>)
 80015b2:	f000 fa2f 	bl	8001a14 <HAL_TIM_MspPostInit>

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20003fd0 	.word	0x20003fd0
 80015c4:	40000800 	.word	0x40000800

080015c8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM12_Init+0x84>)
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <MX_TIM12_Init+0x88>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_TIM12_Init+0x84>)
 80015e8:	2223      	movs	r2, #35	; 0x23
 80015ea:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_TIM12_Init+0x84>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_TIM12_Init+0x84>)
 80015f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80015f8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_TIM12_Init+0x84>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_TIM12_Init+0x84>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001606:	4811      	ldr	r0, [pc, #68]	; (800164c <MX_TIM12_Init+0x84>)
 8001608:	f001 fbd1 	bl	8002dae <HAL_TIM_PWM_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001612:	f000 f8f7 	bl	8001804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001616:	2360      	movs	r3, #96	; 0x60
 8001618:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <MX_TIM12_Init+0x84>)
 800162e:	f001 fd2f 	bl	8003090 <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001638:	f000 f8e4 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <MX_TIM12_Init+0x84>)
 800163e:	f000 f9e9 	bl	8001a14 <HAL_TIM_MspPostInit>

}
 8001642:	bf00      	nop
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20004060 	.word	0x20004060
 8001650:	40001800 	.word	0x40001800

08001654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <MX_GPIO_Init+0x16c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a53      	ldr	r2, [pc, #332]	; (80017c0 <MX_GPIO_Init+0x16c>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <MX_GPIO_Init+0x16c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <MX_GPIO_Init+0x16c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <MX_GPIO_Init+0x16c>)
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <MX_GPIO_Init+0x16c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a45      	ldr	r2, [pc, #276]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a3e      	ldr	r2, [pc, #248]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a37      	ldr	r2, [pc, #220]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016e4:	f043 0310 	orr.w	r3, r3, #16
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <MX_GPIO_Init+0x16c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a30      	ldr	r2, [pc, #192]	; (80017c0 <MX_GPIO_Init+0x16c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <MX_GPIO_Init+0x16c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <MX_GPIO_Init+0x16c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <MX_GPIO_Init+0x16c>)
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <MX_GPIO_Init+0x16c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001734:	4823      	ldr	r0, [pc, #140]	; (80017c4 <MX_GPIO_Init+0x170>)
 8001736:	f000 fe53 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	211e      	movs	r1, #30
 800173e:	4821      	ldr	r0, [pc, #132]	; (80017c4 <MX_GPIO_Init+0x170>)
 8001740:	f000 fe4e 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174a:	481f      	ldr	r0, [pc, #124]	; (80017c8 <MX_GPIO_Init+0x174>)
 800174c:	f000 fe48 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001756:	481d      	ldr	r0, [pc, #116]	; (80017cc <MX_GPIO_Init+0x178>)
 8001758:	f000 fe42 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_A_Pin LD_B_Pin LD_C_Pin LD_D_Pin
                           LD_E_Pin LD_F_Pin LD_G_Pin LD_H_Pin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 800175c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001760:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <MX_GPIO_Init+0x170>)
 8001776:	f000 fc89 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 800177a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_GPIO_Init+0x174>)
 8001794:	f000 fc7a 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8001798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <MX_GPIO_Init+0x178>)
 80017b2:	f000 fc6b 	bl	800208c <HAL_GPIO_Init>

}
 80017b6:	bf00      	nop
 80017b8:	3730      	adds	r7, #48	; 0x30
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40021800 	.word	0x40021800
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40021400 	.word	0x40021400

080017d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
    osDelay(1);
 80017d8:	2001      	movs	r0, #1
 80017da:	f002 f8b8 	bl	800394e <osDelay>
 80017de:	e7fb      	b.n	80017d8 <StartDefaultTask+0x8>

080017e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017f2:	f000 fa4d 	bl	8001c90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40000c00 	.word	0x40000c00

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180a:	e7fe      	b.n	800180a <Error_Handler+0x6>

0800180c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_MspInit+0x54>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a11      	ldr	r2, [pc, #68]	; (8001860 <HAL_MspInit+0x54>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_MspInit+0x54>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_MspInit+0x54>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <HAL_MspInit+0x54>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_MspInit+0x54>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	210f      	movs	r1, #15
 800184e:	f06f 0001 	mvn.w	r0, #1
 8001852:	f000 fbf1 	bl	8002038 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a42      	ldr	r2, [pc, #264]	; (800198c <HAL_CAN_MspInit+0x128>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d135      	bne.n	80018f2 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_CAN_MspInit+0x12c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	4a40      	ldr	r2, [pc, #256]	; (8001990 <HAL_CAN_MspInit+0x12c>)
 800188e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_CAN_MspInit+0x12c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d10d      	bne.n	80018b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_CAN_MspInit+0x130>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4a3c      	ldr	r2, [pc, #240]	; (8001994 <HAL_CAN_MspInit+0x130>)
 80018a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a6:	6413      	str	r3, [r2, #64]	; 0x40
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_CAN_MspInit+0x130>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_CAN_MspInit+0x130>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a35      	ldr	r2, [pc, #212]	; (8001994 <HAL_CAN_MspInit+0x130>)
 80018be:	f043 0308 	orr.w	r3, r3, #8
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_CAN_MspInit+0x130>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d0:	2303      	movs	r3, #3
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018e0:	2309      	movs	r3, #9
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	482b      	ldr	r0, [pc, #172]	; (8001998 <HAL_CAN_MspInit+0x134>)
 80018ec:	f000 fbce 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80018f0:	e048      	b.n	8001984 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a29      	ldr	r2, [pc, #164]	; (800199c <HAL_CAN_MspInit+0x138>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d143      	bne.n	8001984 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_CAN_MspInit+0x130>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a23      	ldr	r2, [pc, #140]	; (8001994 <HAL_CAN_MspInit+0x130>)
 8001906:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_CAN_MspInit+0x130>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_CAN_MspInit+0x12c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <HAL_CAN_MspInit+0x12c>)
 8001920:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_CAN_MspInit+0x12c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10d      	bne.n	8001946 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_CAN_MspInit+0x130>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a18      	ldr	r2, [pc, #96]	; (8001994 <HAL_CAN_MspInit+0x130>)
 8001934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_CAN_MspInit+0x130>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_CAN_MspInit+0x130>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_CAN_MspInit+0x130>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_CAN_MspInit+0x130>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001962:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001974:	2309      	movs	r3, #9
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4808      	ldr	r0, [pc, #32]	; (80019a0 <HAL_CAN_MspInit+0x13c>)
 8001980:	f000 fb84 	bl	800208c <HAL_GPIO_Init>
}
 8001984:	bf00      	nop
 8001986:	3730      	adds	r7, #48	; 0x30
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40006400 	.word	0x40006400
 8001990:	20000280 	.word	0x20000280
 8001994:	40023800 	.word	0x40023800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40006800 	.word	0x40006800
 80019a0:	40020400 	.word	0x40020400

080019a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <HAL_TIM_PWM_MspInit+0x64>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10e      	bne.n	80019d4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_TIM_PWM_MspInit+0x68>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <HAL_TIM_PWM_MspInit+0x68>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_TIM_PWM_MspInit+0x68>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80019d2:	e012      	b.n	80019fa <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_TIM_PWM_MspInit+0x6c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10d      	bne.n	80019fa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_TIM_PWM_MspInit+0x68>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_TIM_PWM_MspInit+0x68>)
 80019e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_TIM_PWM_MspInit+0x68>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40000800 	.word	0x40000800
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40001800 	.word	0x40001800

08001a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <HAL_TIM_MspPostInit+0xb0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d11f      	bne.n	8001a76 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_TIM_MspPostInit+0xb4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_TIM_MspPostInit+0xb4>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_TIM_MspPostInit+0xb4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8001a52:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a64:	2302      	movs	r3, #2
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4817      	ldr	r0, [pc, #92]	; (8001acc <HAL_TIM_MspPostInit+0xb8>)
 8001a70:	f000 fb0c 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001a74:	e022      	b.n	8001abc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <HAL_TIM_MspPostInit+0xbc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d11d      	bne.n	8001abc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_TIM_MspPostInit+0xb4>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_TIM_MspPostInit+0xb4>)
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_TIM_MspPostInit+0xb4>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a9c:	2340      	movs	r3, #64	; 0x40
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001aac:	2309      	movs	r3, #9
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <HAL_TIM_MspPostInit+0xc0>)
 8001ab8:	f000 fae8 	bl	800208c <HAL_GPIO_Init>
}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40000800 	.word	0x40000800
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	40001800 	.word	0x40001800
 8001ad4:	40021c00 	.word	0x40021c00

08001ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	2032      	movs	r0, #50	; 0x32
 8001aee:	f000 faa3 	bl	8002038 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001af2:	2032      	movs	r0, #50	; 0x32
 8001af4:	f000 fabc 	bl	8002070 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <HAL_InitTick+0xa4>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_InitTick+0xa4>)
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_InitTick+0xa4>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b14:	f107 0210 	add.w	r2, r7, #16
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 f8ba 	bl	8002c98 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b24:	f001 f8a4 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <HAL_InitTick+0xa8>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_InitTick+0xac>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_InitTick+0xb0>)
 8001b40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_InitTick+0xac>)
 8001b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b48:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_InitTick+0xac>)
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_InitTick+0xac>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_InitTick+0xac>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001b5c:	4809      	ldr	r0, [pc, #36]	; (8001b84 <HAL_InitTick+0xac>)
 8001b5e:	f001 f8cd 	bl	8002cfc <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d104      	bne.n	8001b72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <HAL_InitTick+0xac>)
 8001b6a:	f001 f8fc 	bl	8002d66 <HAL_TIM_Base_Start_IT>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3730      	adds	r7, #48	; 0x30
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	431bde83 	.word	0x431bde83
 8001b84:	200040b0 	.word	0x200040b0
 8001b88:	40000c00 	.word	0x40000c00

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <TIM5_IRQHandler+0x10>)
 8001bbe:	f001 f95f 	bl	8002e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200040b0 	.word	0x200040b0

08001bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <SystemInit+0x28>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd6:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <SystemInit+0x28>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SystemInit+0x28>)
 8001be2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001be6:	609a      	str	r2, [r3, #8]
#endif
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bfe:	e003      	b.n	8001c08 <LoopCopyDataInit>

08001c00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c06:	3104      	adds	r1, #4

08001c08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c10:	d3f6      	bcc.n	8001c00 <CopyDataInit>
  ldr  r2, =_sbss
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c14:	e002      	b.n	8001c1c <LoopFillZerobss>

08001c16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c18:	f842 3b04 	str.w	r3, [r2], #4

08001c1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c20:	d3f9      	bcc.n	8001c16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c22:	f7ff ffd3 	bl	8001bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c26:	f003 f84b 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2a:	f7ff fb23 	bl	8001274 <main>
  bx  lr    
 8001c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c30:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c34:	08004e00 	.word	0x08004e00
  ldr  r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c3c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001c40:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001c44:	200040f4 	.word	0x200040f4

08001c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC_IRQHandler>
	...

08001c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_Init+0x40>)
 8001c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_Init+0x40>)
 8001c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_Init+0x40>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f9d4 	bl	8002022 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff ff2c 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c80:	f7ff fdc4 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	200040f0 	.word	0x200040f0

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	200040f0 	.word	0x200040f0

08001cd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0ed      	b.n	8001ebe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fdb8 	bl	8001864 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0202 	bic.w	r2, r2, #2
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d04:	f7ff ffd8 	bl	8001cb8 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d0a:	e012      	b.n	8001d32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d0c:	f7ff ffd4 	bl	8001cb8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b0a      	cmp	r3, #10
 8001d18:	d90b      	bls.n	8001d32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0c5      	b.n	8001ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e5      	bne.n	8001d0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d50:	f7ff ffb2 	bl	8001cb8 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d56:	e012      	b.n	8001d7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d58:	f7ff ffae 	bl	8001cb8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b0a      	cmp	r3, #10
 8001d64:	d90b      	bls.n	8001d7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e09f      	b.n	8001ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0e5      	beq.n	8001d58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7e1b      	ldrb	r3, [r3, #24]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d108      	bne.n	8001da6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e007      	b.n	8001db6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7e5b      	ldrb	r3, [r3, #25]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d108      	bne.n	8001dd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e007      	b.n	8001de0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e9b      	ldrb	r3, [r3, #26]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d108      	bne.n	8001dfa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e007      	b.n	8001e0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0220 	bic.w	r2, r2, #32
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7edb      	ldrb	r3, [r3, #27]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d108      	bne.n	8001e24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0210 	bic.w	r2, r2, #16
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e007      	b.n	8001e34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0210 	orr.w	r2, r2, #16
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7f1b      	ldrb	r3, [r3, #28]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d108      	bne.n	8001e4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0208 	orr.w	r2, r2, #8
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e007      	b.n	8001e5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0208 	bic.w	r2, r2, #8
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7f5b      	ldrb	r3, [r3, #29]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0204 	orr.w	r2, r2, #4
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e007      	b.n	8001e88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0204 	bic.w	r2, r2, #4
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	1e5a      	subs	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff4c 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204a:	f7ff ff61 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 800204e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	6978      	ldr	r0, [r7, #20]
 8002056:	f7ff ffb1 	bl	8001fbc <NVIC_EncodePriority>
 800205a:	4602      	mov	r2, r0
 800205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff80 	bl	8001f68 <__NVIC_SetPriority>
}
 8002068:	bf00      	nop
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff54 	bl	8001f2c <__NVIC_EnableIRQ>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e177      	b.n	8002398 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 8166 	bne.w	8002392 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d00b      	beq.n	80020e6 <HAL_GPIO_Init+0x5a>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020da:	2b11      	cmp	r3, #17
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	d130      	bne.n	8002148 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 0201 	and.w	r2, r3, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0xfc>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b12      	cmp	r3, #18
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80c0 	beq.w	8002392 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_GPIO_Init+0x320>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a64      	ldr	r2, [pc, #400]	; (80023ac <HAL_GPIO_Init+0x320>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_GPIO_Init+0x320>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222e:	4a60      	ldr	r2, [pc, #384]	; (80023b0 <HAL_GPIO_Init+0x324>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a57      	ldr	r2, [pc, #348]	; (80023b4 <HAL_GPIO_Init+0x328>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d037      	beq.n	80022ca <HAL_GPIO_Init+0x23e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <HAL_GPIO_Init+0x32c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d031      	beq.n	80022c6 <HAL_GPIO_Init+0x23a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a55      	ldr	r2, [pc, #340]	; (80023bc <HAL_GPIO_Init+0x330>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d02b      	beq.n	80022c2 <HAL_GPIO_Init+0x236>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a54      	ldr	r2, [pc, #336]	; (80023c0 <HAL_GPIO_Init+0x334>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d025      	beq.n	80022be <HAL_GPIO_Init+0x232>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a53      	ldr	r2, [pc, #332]	; (80023c4 <HAL_GPIO_Init+0x338>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <HAL_GPIO_Init+0x22e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_GPIO_Init+0x33c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d019      	beq.n	80022b6 <HAL_GPIO_Init+0x22a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a51      	ldr	r2, [pc, #324]	; (80023cc <HAL_GPIO_Init+0x340>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_GPIO_Init+0x226>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a50      	ldr	r2, [pc, #320]	; (80023d0 <HAL_GPIO_Init+0x344>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00d      	beq.n	80022ae <HAL_GPIO_Init+0x222>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4f      	ldr	r2, [pc, #316]	; (80023d4 <HAL_GPIO_Init+0x348>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_GPIO_Init+0x21e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4e      	ldr	r2, [pc, #312]	; (80023d8 <HAL_GPIO_Init+0x34c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_GPIO_Init+0x21a>
 80022a2:	2309      	movs	r3, #9
 80022a4:	e012      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022a6:	230a      	movs	r3, #10
 80022a8:	e010      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022aa:	2308      	movs	r3, #8
 80022ac:	e00e      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022ae:	2307      	movs	r3, #7
 80022b0:	e00c      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022b2:	2306      	movs	r3, #6
 80022b4:	e00a      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022b6:	2305      	movs	r3, #5
 80022b8:	e008      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022ba:	2304      	movs	r3, #4
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022be:	2303      	movs	r3, #3
 80022c0:	e004      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x240>
 80022ca:	2300      	movs	r3, #0
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	f002 0203 	and.w	r2, r2, #3
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	4093      	lsls	r3, r2
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022dc:	4934      	ldr	r1, [pc, #208]	; (80023b0 <HAL_GPIO_Init+0x324>)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ea:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <HAL_GPIO_Init+0x350>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230e:	4a33      	ldr	r2, [pc, #204]	; (80023dc <HAL_GPIO_Init+0x350>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_GPIO_Init+0x350>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002338:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_GPIO_Init+0x350>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800233e:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_GPIO_Init+0x350>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_GPIO_Init+0x350>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_GPIO_Init+0x350>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800238c:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_GPIO_Init+0x350>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b0f      	cmp	r3, #15
 800239c:	f67f ae84 	bls.w	80020a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	3724      	adds	r7, #36	; 0x24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021800 	.word	0x40021800
 80023d0:	40021c00 	.word	0x40021c00
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40022400 	.word	0x40022400
 80023dc:	40013c00 	.word	0x40013c00

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	401a      	ands	r2, r3
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	429a      	cmp	r2, r3
 800242a:	d104      	bne.n	8002436 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	041a      	lsls	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002434:	e002      	b.n	800243c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e25b      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d075      	beq.n	8002552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002466:	4ba3      	ldr	r3, [pc, #652]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4ba0      	ldr	r3, [pc, #640]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247a:	2b08      	cmp	r3, #8
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b9d      	ldr	r3, [pc, #628]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b99      	ldr	r3, [pc, #612]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05b      	beq.n	8002550 <HAL_RCC_OscConfig+0x108>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d157      	bne.n	8002550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e236      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x74>
 80024ae:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a90      	ldr	r2, [pc, #576]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x98>
 80024c6:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a8a      	ldr	r2, [pc, #552]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a87      	ldr	r2, [pc, #540]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024e0:	4b84      	ldr	r3, [pc, #528]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a83      	ldr	r2, [pc, #524]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b81      	ldr	r3, [pc, #516]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a80      	ldr	r2, [pc, #512]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff fbda 	bl	8001cb8 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff fbd6 	bl	8001cb8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1fb      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xc0>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff fbc6 	bl	8001cb8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff fbc2 	bl	8001cb8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1e7      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0xe8>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255e:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b5f      	ldr	r3, [pc, #380]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b5c      	ldr	r3, [pc, #368]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1bb      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4952      	ldr	r1, [pc, #328]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b4f      	ldr	r3, [pc, #316]	; (80026f8 <HAL_RCC_OscConfig+0x2b0>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7ff fb7b 	bl	8001cb8 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c6:	f7ff fb77 	bl	8001cb8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e19c      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4940      	ldr	r1, [pc, #256]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_RCC_OscConfig+0x2b0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff fb5a 	bl	8001cb8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002608:	f7ff fb56 	bl	8001cb8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e17b      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d030      	beq.n	8002694 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x2b4>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7ff fb3a 	bl	8001cb8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7ff fb36 	bl	8001cb8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e15b      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x200>
 8002666:	e015      	b.n	8002694 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_OscConfig+0x2b4>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7ff fb23 	bl	8001cb8 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002676:	f7ff fb1f 	bl	8001cb8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e144      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 800268a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a0 	beq.w	80027e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ce:	2301      	movs	r3, #1
 80026d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_OscConfig+0x2b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d121      	bne.n	8002722 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_RCC_OscConfig+0x2b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_RCC_OscConfig+0x2b8>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ea:	f7ff fae5 	bl	8001cb8 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	e011      	b.n	8002716 <HAL_RCC_OscConfig+0x2ce>
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	42470000 	.word	0x42470000
 80026fc:	42470e80 	.word	0x42470e80
 8002700:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002704:	f7ff fad8 	bl	8001cb8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0fd      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b81      	ldr	r3, [pc, #516]	; (800291c <HAL_RCC_OscConfig+0x4d4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d106      	bne.n	8002738 <HAL_RCC_OscConfig+0x2f0>
 800272a:	4b7d      	ldr	r3, [pc, #500]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a7c      	ldr	r2, [pc, #496]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
 8002736:	e01c      	b.n	8002772 <HAL_RCC_OscConfig+0x32a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x312>
 8002740:	4b77      	ldr	r3, [pc, #476]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a76      	ldr	r2, [pc, #472]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	4b74      	ldr	r3, [pc, #464]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a73      	ldr	r2, [pc, #460]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0x32a>
 800275a:	4b71      	ldr	r3, [pc, #452]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a70      	ldr	r2, [pc, #448]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
 8002766:	4b6e      	ldr	r3, [pc, #440]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a6d      	ldr	r2, [pc, #436]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d015      	beq.n	80027a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7ff fa9d 	bl	8001cb8 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7ff fa99 	bl	8001cb8 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e0bc      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	4b61      	ldr	r3, [pc, #388]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ee      	beq.n	8002782 <HAL_RCC_OscConfig+0x33a>
 80027a4:	e014      	b.n	80027d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7ff fa87 	bl	8001cb8 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7ff fa83 	bl	8001cb8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e0a6      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	4b56      	ldr	r3, [pc, #344]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ee      	bne.n	80027ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d6:	4b52      	ldr	r3, [pc, #328]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a51      	ldr	r2, [pc, #324]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 80027dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8092 	beq.w	8002910 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ec:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d05c      	beq.n	80028b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d141      	bne.n	8002884 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002800:	4b48      	ldr	r3, [pc, #288]	; (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7ff fa57 	bl	8001cb8 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280e:	f7ff fa53 	bl	8001cb8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e078      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f0      	bne.n	800280e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	019b      	lsls	r3, r3, #6
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	3b01      	subs	r3, #1
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	4933      	ldr	r1, [pc, #204]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002856:	4b33      	ldr	r3, [pc, #204]	; (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff fa2c 	bl	8001cb8 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff fa28 	bl	8001cb8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e04d      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x41c>
 8002882:	e045      	b.n	8002910 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7ff fa15 	bl	8001cb8 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002892:	f7ff fa11 	bl	8001cb8 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e036      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a4:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f0      	bne.n	8002892 <HAL_RCC_OscConfig+0x44a>
 80028b0:	e02e      	b.n	8002910 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e029      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_RCC_OscConfig+0x4d8>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d115      	bne.n	800290c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10d      	bne.n	800290c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40007000 	.word	0x40007000
 8002920:	40023800 	.word	0x40023800
 8002924:	42470060 	.word	0x42470060

08002928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0cc      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d90c      	bls.n	8002964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0b8      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800299e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	494d      	ldr	r1, [pc, #308]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d044      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d119      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e067      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4934      	ldr	r1, [pc, #208]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a18:	f7ff f94e 	bl	8001cb8 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7ff f94a 	bl	8001cb8 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e04f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d20c      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e032      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4916      	ldr	r1, [pc, #88]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aae:	f000 f821 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac6:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f802 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023c00 	.word	0x40023c00
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08004dd8 	.word	0x08004dd8
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000004 	.word	0x20000004

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	2300      	movs	r3, #0
 8002b04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0a:	4b50      	ldr	r3, [pc, #320]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d007      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x32>
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d008      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x38>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 808d 	bne.w	8002c3a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b22:	60bb      	str	r3, [r7, #8]
       break;
 8002b24:	e08c      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b26:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b28:	60bb      	str	r3, [r7, #8]
      break;
 8002b2a:	e089      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b2c:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b36:	4b45      	ldr	r3, [pc, #276]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d023      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	f04f 0400 	mov.w	r4, #0
 8002b4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	ea03 0501 	and.w	r5, r3, r1
 8002b58:	ea04 0602 	and.w	r6, r4, r2
 8002b5c:	4a3d      	ldr	r2, [pc, #244]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b5e:	fb02 f106 	mul.w	r1, r2, r6
 8002b62:	2200      	movs	r2, #0
 8002b64:	fb02 f205 	mul.w	r2, r2, r5
 8002b68:	440a      	add	r2, r1
 8002b6a:	493a      	ldr	r1, [pc, #232]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b6c:	fba5 0101 	umull	r0, r1, r5, r1
 8002b70:	1853      	adds	r3, r2, r1
 8002b72:	4619      	mov	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f04f 0400 	mov.w	r4, #0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	f7fd ff2d 	bl	80009dc <__aeabi_uldivmod>
 8002b82:	4603      	mov	r3, r0
 8002b84:	460c      	mov	r4, r1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e049      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8a:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	099b      	lsrs	r3, r3, #6
 8002b90:	f04f 0400 	mov.w	r4, #0
 8002b94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	ea03 0501 	and.w	r5, r3, r1
 8002ba0:	ea04 0602 	and.w	r6, r4, r2
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	f04f 0400 	mov.w	r4, #0
 8002bb0:	0154      	lsls	r4, r2, #5
 8002bb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bb6:	014b      	lsls	r3, r1, #5
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4622      	mov	r2, r4
 8002bbc:	1b49      	subs	r1, r1, r5
 8002bbe:	eb62 0206 	sbc.w	r2, r2, r6
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	f04f 0400 	mov.w	r4, #0
 8002bca:	0194      	lsls	r4, r2, #6
 8002bcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bd0:	018b      	lsls	r3, r1, #6
 8002bd2:	1a5b      	subs	r3, r3, r1
 8002bd4:	eb64 0402 	sbc.w	r4, r4, r2
 8002bd8:	f04f 0100 	mov.w	r1, #0
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	00e2      	lsls	r2, r4, #3
 8002be2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002be6:	00d9      	lsls	r1, r3, #3
 8002be8:	460b      	mov	r3, r1
 8002bea:	4614      	mov	r4, r2
 8002bec:	195b      	adds	r3, r3, r5
 8002bee:	eb44 0406 	adc.w	r4, r4, r6
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	02a2      	lsls	r2, r4, #10
 8002bfc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c00:	0299      	lsls	r1, r3, #10
 8002c02:	460b      	mov	r3, r1
 8002c04:	4614      	mov	r4, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	4621      	mov	r1, r4
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f04f 0400 	mov.w	r4, #0
 8002c10:	461a      	mov	r2, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	f7fd fee2 	bl	80009dc <__aeabi_uldivmod>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x158>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	0c1b      	lsrs	r3, r3, #16
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	60bb      	str	r3, [r7, #8]
      break;
 8002c38:	e002      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c3c:	60bb      	str	r3, [r7, #8]
      break;
 8002c3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c40:	68bb      	ldr	r3, [r7, #8]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	00b71b00 	.word	0x00b71b00

08002c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c74:	f7ff fff0 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0a9b      	lsrs	r3, r3, #10
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08004de8 	.word	0x08004de8

08002c98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0203 	and.w	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	08db      	lsrs	r3, r3, #3
 8002cd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_RCC_GetClockConfig+0x60>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	601a      	str	r2, [r3, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40023c00 	.word	0x40023c00

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e01d      	b.n	8002d4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f815 	bl	8002d52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fa96 	bl	800326c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e01d      	b.n	8002dfc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe fde5 	bl	80019a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f000 fa3d 	bl	800326c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2201      	movs	r2, #1
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fc78 	bl	800370c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <HAL_TIM_PWM_Start+0x74>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_TIM_PWM_Start+0x2c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <HAL_TIM_PWM_Start+0x78>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIM_PWM_Start+0x30>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_TIM_PWM_Start+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d007      	beq.n	8002e6c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	40010400 	.word	0x40010400

08002e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0202 	mvn.w	r2, #2
 8002eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f9b4 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f9a6 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f9b7 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d122      	bne.n	8002f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d11b      	bne.n	8002f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0204 	mvn.w	r2, #4
 8002f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2202      	movs	r2, #2
 8002f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f98a 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002f1c:	e005      	b.n	8002f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f97c 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f98d 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d122      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d11b      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0208 	mvn.w	r2, #8
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f960 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f952 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f963 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0210 	mvn.w	r2, #16
 8002fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2208      	movs	r2, #8
 8002fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f936 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f928 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f939 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0201 	mvn.w	r2, #1
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe fbee 	bl	80017e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fc1a 	bl	8003864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8fe 	bl	8003258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b20      	cmp	r3, #32
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0220 	mvn.w	r2, #32
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fbe4 	bl	8003850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0b4      	b.n	8003214 <HAL_TIM_PWM_ConfigChannel+0x184>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	f200 809f 	bhi.w	8003200 <HAL_TIM_PWM_ConfigChannel+0x170>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030fd 	.word	0x080030fd
 80030cc:	08003201 	.word	0x08003201
 80030d0:	08003201 	.word	0x08003201
 80030d4:	08003201 	.word	0x08003201
 80030d8:	0800313d 	.word	0x0800313d
 80030dc:	08003201 	.word	0x08003201
 80030e0:	08003201 	.word	0x08003201
 80030e4:	08003201 	.word	0x08003201
 80030e8:	0800317f 	.word	0x0800317f
 80030ec:	08003201 	.word	0x08003201
 80030f0:	08003201 	.word	0x08003201
 80030f4:	08003201 	.word	0x08003201
 80030f8:	080031bf 	.word	0x080031bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f952 	bl	80033ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0208 	orr.w	r2, r2, #8
 8003116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0204 	bic.w	r2, r2, #4
 8003126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6999      	ldr	r1, [r3, #24]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	619a      	str	r2, [r3, #24]
      break;
 800313a:	e062      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f9a2 	bl	800348c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6999      	ldr	r1, [r3, #24]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	021a      	lsls	r2, r3, #8
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	619a      	str	r2, [r3, #24]
      break;
 800317c:	e041      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f9f7 	bl	8003578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0208 	orr.w	r2, r2, #8
 8003198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0204 	bic.w	r2, r2, #4
 80031a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69d9      	ldr	r1, [r3, #28]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	61da      	str	r2, [r3, #28]
      break;
 80031bc:	e021      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fa4b 	bl	8003660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69d9      	ldr	r1, [r3, #28]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	021a      	lsls	r2, r3, #8
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	61da      	str	r2, [r3, #28]
      break;
 80031fe:	e000      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003200:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a40      	ldr	r2, [pc, #256]	; (8003380 <TIM_Base_SetConfig+0x114>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d00f      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3d      	ldr	r2, [pc, #244]	; (8003384 <TIM_Base_SetConfig+0x118>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3c      	ldr	r2, [pc, #240]	; (8003388 <TIM_Base_SetConfig+0x11c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3b      	ldr	r2, [pc, #236]	; (800338c <TIM_Base_SetConfig+0x120>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3a      	ldr	r2, [pc, #232]	; (8003390 <TIM_Base_SetConfig+0x124>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2f      	ldr	r2, [pc, #188]	; (8003380 <TIM_Base_SetConfig+0x114>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d027      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <TIM_Base_SetConfig+0x118>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d023      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2b      	ldr	r2, [pc, #172]	; (8003388 <TIM_Base_SetConfig+0x11c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01f      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2a      	ldr	r2, [pc, #168]	; (800338c <TIM_Base_SetConfig+0x120>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <TIM_Base_SetConfig+0x124>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d017      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a28      	ldr	r2, [pc, #160]	; (8003394 <TIM_Base_SetConfig+0x128>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a27      	ldr	r2, [pc, #156]	; (8003398 <TIM_Base_SetConfig+0x12c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00f      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <TIM_Base_SetConfig+0x130>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <TIM_Base_SetConfig+0x134>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <TIM_Base_SetConfig+0x138>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <TIM_Base_SetConfig+0x13c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <TIM_Base_SetConfig+0x114>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_Base_SetConfig+0xf8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <TIM_Base_SetConfig+0x124>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d103      	bne.n	800336c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	615a      	str	r2, [r3, #20]
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40010000 	.word	0x40010000
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800
 800338c:	40000c00 	.word	0x40000c00
 8003390:	40010400 	.word	0x40010400
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800
 80033a0:	40001800 	.word	0x40001800
 80033a4:	40001c00 	.word	0x40001c00
 80033a8:	40002000 	.word	0x40002000

080033ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0201 	bic.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0303 	bic.w	r3, r3, #3
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 0302 	bic.w	r3, r3, #2
 80033f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a20      	ldr	r2, [pc, #128]	; (8003484 <TIM_OC1_SetConfig+0xd8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d003      	beq.n	8003410 <TIM_OC1_SetConfig+0x64>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <TIM_OC1_SetConfig+0xdc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d10c      	bne.n	800342a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0308 	bic.w	r3, r3, #8
 8003416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f023 0304 	bic.w	r3, r3, #4
 8003428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <TIM_OC1_SetConfig+0xd8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d003      	beq.n	800343a <TIM_OC1_SetConfig+0x8e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a14      	ldr	r2, [pc, #80]	; (8003488 <TIM_OC1_SetConfig+0xdc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d111      	bne.n	800345e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40010000 	.word	0x40010000
 8003488:	40010400 	.word	0x40010400

0800348c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f023 0210 	bic.w	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0320 	bic.w	r3, r3, #32
 80034d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a22      	ldr	r2, [pc, #136]	; (8003570 <TIM_OC2_SetConfig+0xe4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_OC2_SetConfig+0x68>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <TIM_OC2_SetConfig+0xe8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10d      	bne.n	8003510 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a17      	ldr	r2, [pc, #92]	; (8003570 <TIM_OC2_SetConfig+0xe4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_OC2_SetConfig+0x94>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <TIM_OC2_SetConfig+0xe8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d113      	bne.n	8003548 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800352e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40010000 	.word	0x40010000
 8003574:	40010400 	.word	0x40010400

08003578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a21      	ldr	r2, [pc, #132]	; (8003658 <TIM_OC3_SetConfig+0xe0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_OC3_SetConfig+0x66>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a20      	ldr	r2, [pc, #128]	; (800365c <TIM_OC3_SetConfig+0xe4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10d      	bne.n	80035fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a16      	ldr	r2, [pc, #88]	; (8003658 <TIM_OC3_SetConfig+0xe0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_OC3_SetConfig+0x92>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <TIM_OC3_SetConfig+0xe4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d113      	bne.n	8003632 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	621a      	str	r2, [r3, #32]
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40010000 	.word	0x40010000
 800365c:	40010400 	.word	0x40010400

08003660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800368e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	031b      	lsls	r3, r3, #12
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a12      	ldr	r2, [pc, #72]	; (8003704 <TIM_OC4_SetConfig+0xa4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_OC4_SetConfig+0x68>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a11      	ldr	r2, [pc, #68]	; (8003708 <TIM_OC4_SetConfig+0xa8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d109      	bne.n	80036dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40010400 	.word	0x40010400

0800370c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2201      	movs	r2, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	43db      	mvns	r3, r3
 800372e:	401a      	ands	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	621a      	str	r2, [r3, #32]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800376c:	2302      	movs	r3, #2
 800376e:	e05a      	b.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a21      	ldr	r2, [pc, #132]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d022      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d01d      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d018      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1b      	ldr	r2, [pc, #108]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a18      	ldr	r2, [pc, #96]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d009      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a17      	ldr	r2, [pc, #92]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10c      	bne.n	8003814 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	4313      	orrs	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800
 8003840:	40000c00 	.word	0x40000c00
 8003844:	40010400 	.word	0x40010400
 8003848:	40014000 	.word	0x40014000
 800384c:	40001800 	.word	0x40001800

08003850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800388a:	2b84      	cmp	r3, #132	; 0x84
 800388c:	d005      	beq.n	800389a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800388e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	3303      	adds	r3, #3
 8003898:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800389a:	68fb      	ldr	r3, [r7, #12]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80038ac:	f000 fada 	bl	8003e64 <vTaskStartScheduler>
  
  return osOK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80038b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b8:	b089      	sub	sp, #36	; 0x24
 80038ba:	af04      	add	r7, sp, #16
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <osThreadCreate+0x54>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01c      	beq.n	800390a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685c      	ldr	r4, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681d      	ldr	r5, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691e      	ldr	r6, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ffc8 	bl	8003878 <makeFreeRtosPriority>
 80038e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038f2:	9202      	str	r2, [sp, #8]
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	9100      	str	r1, [sp, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4632      	mov	r2, r6
 80038fc:	4629      	mov	r1, r5
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 f8ed 	bl	8003ade <xTaskCreateStatic>
 8003904:	4603      	mov	r3, r0
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e01c      	b.n	8003944 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685c      	ldr	r4, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003916:	b29e      	uxth	r6, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ffaa 	bl	8003878 <makeFreeRtosPriority>
 8003924:	4602      	mov	r2, r0
 8003926:	f107 030c 	add.w	r3, r7, #12
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	9200      	str	r2, [sp, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	4632      	mov	r2, r6
 8003932:	4629      	mov	r1, r5
 8003934:	4620      	mov	r0, r4
 8003936:	f000 f92c 	bl	8003b92 <xTaskCreate>
 800393a:	4603      	mov	r3, r0
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003944:	68fb      	ldr	r3, [r7, #12]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800394e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <osDelay+0x16>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	e000      	b.n	8003966 <osDelay+0x18>
 8003964:	2301      	movs	r3, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fa48 	bl	8003dfc <vTaskDelay>
  
  return osOK;
 800396c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f103 0208 	add.w	r2, r3, #8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
 800398e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f103 0208 	add.w	r2, r3, #8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f103 0208 	add.w	r2, r3, #8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	601a      	str	r2, [r3, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d103      	bne.n	8003a38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e00c      	b.n	8003a52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e002      	b.n	8003a46 <vListInsert+0x2e>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d2f6      	bcs.n	8003a40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6892      	ldr	r2, [r2, #8]
 8003aa0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6852      	ldr	r2, [r2, #4]
 8003aaa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d103      	bne.n	8003abe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1e5a      	subs	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b08e      	sub	sp, #56	; 0x38
 8003ae2:	af04      	add	r7, sp, #16
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	e7fe      	b.n	8003b04 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <xTaskCreateStatic+0x42>
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e7fe      	b.n	8003b1e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b20:	2354      	movs	r3, #84	; 0x54
 8003b22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	2b54      	cmp	r3, #84	; 0x54
 8003b28:	d009      	beq.n	8003b3e <xTaskCreateStatic+0x60>
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e7fe      	b.n	8003b3c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01e      	beq.n	8003b84 <xTaskCreateStatic+0xa6>
 8003b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01b      	beq.n	8003b84 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9303      	str	r3, [sp, #12]
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	9302      	str	r3, [sp, #8]
 8003b66:	f107 0314 	add.w	r3, r7, #20
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f850 	bl	8003c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b7e:	f000 f8d3 	bl	8003d28 <prvAddNewTaskToReadyList>
 8003b82:	e001      	b.n	8003b88 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b88:	697b      	ldr	r3, [r7, #20]
	}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3728      	adds	r7, #40	; 0x28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b08c      	sub	sp, #48	; 0x30
 8003b96:	af04      	add	r7, sp, #16
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 feb4 	bl	8004914 <pvPortMalloc>
 8003bac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00e      	beq.n	8003bd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bb4:	2054      	movs	r0, #84	; 0x54
 8003bb6:	f000 fead 	bl	8004914 <pvPortMalloc>
 8003bba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc8:	e005      	b.n	8003bd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bca:	6978      	ldr	r0, [r7, #20]
 8003bcc:	f000 ff64 	bl	8004a98 <vPortFree>
 8003bd0:	e001      	b.n	8003bd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003be4:	88fa      	ldrh	r2, [r7, #6]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9303      	str	r3, [sp, #12]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	9302      	str	r3, [sp, #8]
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f80e 	bl	8003c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c00:	69f8      	ldr	r0, [r7, #28]
 8003c02:	f000 f891 	bl	8003d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e002      	b.n	8003c12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c12:	69bb      	ldr	r3, [r7, #24]
	}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c34:	3b01      	subs	r3, #1
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f023 0307 	bic.w	r3, r3, #7
 8003c42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <prvInitialiseNewTask+0x46>
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e7fe      	b.n	8003c60 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01f      	beq.n	8003ca8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	e012      	b.n	8003c94 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	4413      	add	r3, r2
 8003c74:	7819      	ldrb	r1, [r3, #0]
 8003c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3334      	adds	r3, #52	; 0x34
 8003c7e:	460a      	mov	r2, r1
 8003c80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3301      	adds	r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b0f      	cmp	r3, #15
 8003c98:	d9e9      	bls.n	8003c6e <prvInitialiseNewTask+0x52>
 8003c9a:	e000      	b.n	8003c9e <prvInitialiseNewTask+0x82>
			{
				break;
 8003c9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca6:	e003      	b.n	8003cb0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d901      	bls.n	8003cba <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cb6:	2306      	movs	r3, #6
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	2200      	movs	r2, #0
 8003cca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fe70 	bl	80039b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	3318      	adds	r3, #24
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fe6b 	bl	80039b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	f1c3 0207 	rsb	r2, r3, #7
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	69b8      	ldr	r0, [r7, #24]
 8003d0a:	f000 fbfd 	bl	8004508 <pxPortInitialiseStack>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d20:	bf00      	nop
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d30:	f000 fd14 	bl	800475c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d34:	4b2a      	ldr	r3, [pc, #168]	; (8003de0 <prvAddNewTaskToReadyList+0xb8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	4a29      	ldr	r2, [pc, #164]	; (8003de0 <prvAddNewTaskToReadyList+0xb8>)
 8003d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <prvAddNewTaskToReadyList+0xbc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d46:	4a27      	ldr	r2, [pc, #156]	; (8003de4 <prvAddNewTaskToReadyList+0xbc>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d4c:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <prvAddNewTaskToReadyList+0xb8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d110      	bne.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d54:	f000 fab8 	bl	80042c8 <prvInitialiseTaskLists>
 8003d58:	e00d      	b.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d5a:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <prvAddNewTaskToReadyList+0xc0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <prvAddNewTaskToReadyList+0xbc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d802      	bhi.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d70:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <prvAddNewTaskToReadyList+0xbc>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d76:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	2201      	movs	r2, #1
 8003d86:	409a      	lsls	r2, r3
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <prvAddNewTaskToReadyList+0xcc>)
 8003da0:	441a      	add	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f7ff fe11 	bl	80039d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dae:	f000 fd03 	bl	80047b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <prvAddNewTaskToReadyList+0xc0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00e      	beq.n	8003dd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <prvAddNewTaskToReadyList+0xbc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d207      	bcs.n	8003dd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <prvAddNewTaskToReadyList+0xd0>)
 8003dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000384 	.word	0x20000384
 8003de4:	20000284 	.word	0x20000284
 8003de8:	20000390 	.word	0x20000390
 8003dec:	200003a0 	.word	0x200003a0
 8003df0:	2000038c 	.word	0x2000038c
 8003df4:	20000288 	.word	0x20000288
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <vTaskDelay+0x60>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <vTaskDelay+0x2e>
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	e7fe      	b.n	8003e28 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e2a:	f000 f879 	bl	8003f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fb03 	bl	800443c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e36:	f000 f881 	bl	8003f3c <xTaskResumeAll>
 8003e3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <vTaskDelay+0x64>)
 8003e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200003ac 	.word	0x200003ac
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e72:	463a      	mov	r2, r7
 8003e74:	1d39      	adds	r1, r7, #4
 8003e76:	f107 0308 	add.w	r3, r7, #8
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd f9e0 	bl	8001240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	9202      	str	r2, [sp, #8]
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	460a      	mov	r2, r1
 8003e92:	491d      	ldr	r1, [pc, #116]	; (8003f08 <vTaskStartScheduler+0xa4>)
 8003e94:	481d      	ldr	r0, [pc, #116]	; (8003f0c <vTaskStartScheduler+0xa8>)
 8003e96:	f7ff fe22 	bl	8003ade <xTaskCreateStatic>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <vTaskStartScheduler+0xac>)
 8003e9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <vTaskStartScheduler+0xac>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	e001      	b.n	8003eb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d115      	bne.n	8003ee4 <vTaskStartScheduler+0x80>
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <vTaskStartScheduler+0xb0>)
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <vTaskStartScheduler+0xb4>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ed8:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <vTaskStartScheduler+0xb8>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ede:	f000 fb9f 	bl	8004620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ee2:	e00d      	b.n	8003f00 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d109      	bne.n	8003f00 <vTaskStartScheduler+0x9c>
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	e7fe      	b.n	8003efe <vTaskStartScheduler+0x9a>
}
 8003f00:	bf00      	nop
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	08004dd0 	.word	0x08004dd0
 8003f0c:	08004299 	.word	0x08004299
 8003f10:	200003a8 	.word	0x200003a8
 8003f14:	200003a4 	.word	0x200003a4
 8003f18:	20000390 	.word	0x20000390
 8003f1c:	20000388 	.word	0x20000388

08003f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <vTaskSuspendAll+0x18>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	4a03      	ldr	r2, [pc, #12]	; (8003f38 <vTaskSuspendAll+0x18>)
 8003f2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	200003ac 	.word	0x200003ac

08003f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f4a:	4b41      	ldr	r3, [pc, #260]	; (8004050 <xTaskResumeAll+0x114>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <xTaskResumeAll+0x2a>
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	e7fe      	b.n	8003f64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f66:	f000 fbf9 	bl	800475c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f6a:	4b39      	ldr	r3, [pc, #228]	; (8004050 <xTaskResumeAll+0x114>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	4a37      	ldr	r2, [pc, #220]	; (8004050 <xTaskResumeAll+0x114>)
 8003f72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f74:	4b36      	ldr	r3, [pc, #216]	; (8004050 <xTaskResumeAll+0x114>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d161      	bne.n	8004040 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f7c:	4b35      	ldr	r3, [pc, #212]	; (8004054 <xTaskResumeAll+0x118>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05d      	beq.n	8004040 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f84:	e02e      	b.n	8003fe4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <xTaskResumeAll+0x11c>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3318      	adds	r3, #24
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fd79 	bl	8003a8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fd74 	bl	8003a8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	4b2c      	ldr	r3, [pc, #176]	; (800405c <xTaskResumeAll+0x120>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	; (800405c <xTaskResumeAll+0x120>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4a27      	ldr	r2, [pc, #156]	; (8004060 <xTaskResumeAll+0x124>)
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f7ff fd00 	bl	80039d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <xTaskResumeAll+0x128>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003fde:	4b22      	ldr	r3, [pc, #136]	; (8004068 <xTaskResumeAll+0x12c>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fe4:	4b1c      	ldr	r3, [pc, #112]	; (8004058 <xTaskResumeAll+0x11c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1cc      	bne.n	8003f86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ff2:	f000 fa03 	bl	80043fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <xTaskResumeAll+0x130>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d010      	beq.n	8004024 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004002:	f000 f837 	bl	8004074 <xTaskIncrementTick>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800400c:	4b16      	ldr	r3, [pc, #88]	; (8004068 <xTaskResumeAll+0x12c>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3b01      	subs	r3, #1
 8004016:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f1      	bne.n	8004002 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <xTaskResumeAll+0x130>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <xTaskResumeAll+0x12c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <xTaskResumeAll+0x134>)
 8004032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004040:	f000 fbba 	bl	80047b8 <vPortExitCritical>

	return xAlreadyYielded;
 8004044:	68bb      	ldr	r3, [r7, #8]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200003ac 	.word	0x200003ac
 8004054:	20000384 	.word	0x20000384
 8004058:	20000344 	.word	0x20000344
 800405c:	2000038c 	.word	0x2000038c
 8004060:	20000288 	.word	0x20000288
 8004064:	20000284 	.word	0x20000284
 8004068:	20000398 	.word	0x20000398
 800406c:	20000394 	.word	0x20000394
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800407e:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <xTaskIncrementTick+0x144>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f040 8087 	bne.w	8004196 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004088:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <xTaskIncrementTick+0x148>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3301      	adds	r3, #1
 800408e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004090:	4a4a      	ldr	r2, [pc, #296]	; (80041bc <xTaskIncrementTick+0x148>)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d11f      	bne.n	80040dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800409c:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <xTaskIncrementTick+0x14c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <xTaskIncrementTick+0x46>
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	e7fe      	b.n	80040b8 <xTaskIncrementTick+0x44>
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <xTaskIncrementTick+0x14c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	4b40      	ldr	r3, [pc, #256]	; (80041c4 <xTaskIncrementTick+0x150>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a3e      	ldr	r2, [pc, #248]	; (80041c0 <xTaskIncrementTick+0x14c>)
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4a3e      	ldr	r2, [pc, #248]	; (80041c4 <xTaskIncrementTick+0x150>)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b3e      	ldr	r3, [pc, #248]	; (80041c8 <xTaskIncrementTick+0x154>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3301      	adds	r3, #1
 80040d4:	4a3c      	ldr	r2, [pc, #240]	; (80041c8 <xTaskIncrementTick+0x154>)
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	f000 f990 	bl	80043fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040dc:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <xTaskIncrementTick+0x158>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d348      	bcc.n	8004178 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040e6:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <xTaskIncrementTick+0x14c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f0:	4b36      	ldr	r3, [pc, #216]	; (80041cc <xTaskIncrementTick+0x158>)
 80040f2:	f04f 32ff 	mov.w	r2, #4294967295
 80040f6:	601a      	str	r2, [r3, #0]
					break;
 80040f8:	e03e      	b.n	8004178 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <xTaskIncrementTick+0x14c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d203      	bcs.n	800411a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004112:	4a2e      	ldr	r2, [pc, #184]	; (80041cc <xTaskIncrementTick+0x158>)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004118:	e02e      	b.n	8004178 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	3304      	adds	r3, #4
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fcb3 	bl	8003a8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	3318      	adds	r3, #24
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fcaa 	bl	8003a8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	2201      	movs	r2, #1
 800413c:	409a      	lsls	r2, r3
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <xTaskIncrementTick+0x15c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4313      	orrs	r3, r2
 8004144:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <xTaskIncrementTick+0x15c>)
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <xTaskIncrementTick+0x160>)
 8004156:	441a      	add	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f7ff fc36 	bl	80039d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <xTaskIncrementTick+0x164>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	429a      	cmp	r2, r3
 8004170:	d3b9      	bcc.n	80040e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004172:	2301      	movs	r3, #1
 8004174:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004176:	e7b6      	b.n	80040e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004178:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <xTaskIncrementTick+0x164>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	4915      	ldr	r1, [pc, #84]	; (80041d4 <xTaskIncrementTick+0x160>)
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d907      	bls.n	80041a0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e004      	b.n	80041a0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <xTaskIncrementTick+0x168>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	4a0f      	ldr	r2, [pc, #60]	; (80041dc <xTaskIncrementTick+0x168>)
 800419e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <xTaskIncrementTick+0x16c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80041ac:	697b      	ldr	r3, [r7, #20]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200003ac 	.word	0x200003ac
 80041bc:	20000388 	.word	0x20000388
 80041c0:	2000033c 	.word	0x2000033c
 80041c4:	20000340 	.word	0x20000340
 80041c8:	2000039c 	.word	0x2000039c
 80041cc:	200003a4 	.word	0x200003a4
 80041d0:	2000038c 	.word	0x2000038c
 80041d4:	20000288 	.word	0x20000288
 80041d8:	20000284 	.word	0x20000284
 80041dc:	20000394 	.word	0x20000394
 80041e0:	20000398 	.word	0x20000398

080041e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041ea:	4b26      	ldr	r3, [pc, #152]	; (8004284 <vTaskSwitchContext+0xa0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041f2:	4b25      	ldr	r3, [pc, #148]	; (8004288 <vTaskSwitchContext+0xa4>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041f8:	e03e      	b.n	8004278 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80041fa:	4b23      	ldr	r3, [pc, #140]	; (8004288 <vTaskSwitchContext+0xa4>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004200:	4b22      	ldr	r3, [pc, #136]	; (800428c <vTaskSwitchContext+0xa8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	fab3 f383 	clz	r3, r3
 800420c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	f1c3 031f 	rsb	r3, r3, #31
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	491e      	ldr	r1, [pc, #120]	; (8004290 <vTaskSwitchContext+0xac>)
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <vTaskSwitchContext+0x5a>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	e7fe      	b.n	800423c <vTaskSwitchContext+0x58>
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <vTaskSwitchContext+0xac>)
 800424a:	4413      	add	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3308      	adds	r3, #8
 8004260:	429a      	cmp	r2, r3
 8004262:	d104      	bne.n	800426e <vTaskSwitchContext+0x8a>
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a07      	ldr	r2, [pc, #28]	; (8004294 <vTaskSwitchContext+0xb0>)
 8004276:	6013      	str	r3, [r2, #0]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	200003ac 	.word	0x200003ac
 8004288:	20000398 	.word	0x20000398
 800428c:	2000038c 	.word	0x2000038c
 8004290:	20000288 	.word	0x20000288
 8004294:	20000284 	.word	0x20000284

08004298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042a0:	f000 f852 	bl	8004348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <prvIdleTask+0x28>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d9f9      	bls.n	80042a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <prvIdleTask+0x2c>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042bc:	e7f0      	b.n	80042a0 <prvIdleTask+0x8>
 80042be:	bf00      	nop
 80042c0:	20000288 	.word	0x20000288
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
 80042d2:	e00c      	b.n	80042ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <prvInitialiseTaskLists+0x60>)
 80042e0:	4413      	add	r3, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fb47 	bl	8003976 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3301      	adds	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b06      	cmp	r3, #6
 80042f2:	d9ef      	bls.n	80042d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042f4:	480d      	ldr	r0, [pc, #52]	; (800432c <prvInitialiseTaskLists+0x64>)
 80042f6:	f7ff fb3e 	bl	8003976 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042fa:	480d      	ldr	r0, [pc, #52]	; (8004330 <prvInitialiseTaskLists+0x68>)
 80042fc:	f7ff fb3b 	bl	8003976 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004300:	480c      	ldr	r0, [pc, #48]	; (8004334 <prvInitialiseTaskLists+0x6c>)
 8004302:	f7ff fb38 	bl	8003976 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004306:	480c      	ldr	r0, [pc, #48]	; (8004338 <prvInitialiseTaskLists+0x70>)
 8004308:	f7ff fb35 	bl	8003976 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800430c:	480b      	ldr	r0, [pc, #44]	; (800433c <prvInitialiseTaskLists+0x74>)
 800430e:	f7ff fb32 	bl	8003976 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <prvInitialiseTaskLists+0x78>)
 8004314:	4a05      	ldr	r2, [pc, #20]	; (800432c <prvInitialiseTaskLists+0x64>)
 8004316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <prvInitialiseTaskLists+0x7c>)
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <prvInitialiseTaskLists+0x68>)
 800431c:	601a      	str	r2, [r3, #0]
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000288 	.word	0x20000288
 800432c:	20000314 	.word	0x20000314
 8004330:	20000328 	.word	0x20000328
 8004334:	20000344 	.word	0x20000344
 8004338:	20000358 	.word	0x20000358
 800433c:	20000370 	.word	0x20000370
 8004340:	2000033c 	.word	0x2000033c
 8004344:	20000340 	.word	0x20000340

08004348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800434e:	e019      	b.n	8004384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004350:	f000 fa04 	bl	800475c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <prvCheckTasksWaitingTermination+0x4c>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fb92 	bl	8003a8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <prvCheckTasksWaitingTermination+0x50>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3b01      	subs	r3, #1
 800436c:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <prvCheckTasksWaitingTermination+0x50>)
 800436e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <prvCheckTasksWaitingTermination+0x54>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3b01      	subs	r3, #1
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <prvCheckTasksWaitingTermination+0x54>)
 8004378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800437a:	f000 fa1d 	bl	80047b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f80e 	bl	80043a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <prvCheckTasksWaitingTermination+0x54>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e1      	bne.n	8004350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000358 	.word	0x20000358
 8004398:	20000384 	.word	0x20000384
 800439c:	2000036c 	.word	0x2000036c

080043a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d108      	bne.n	80043c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fb6e 	bl	8004a98 <vPortFree>
				vPortFree( pxTCB );
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fb6b 	bl	8004a98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043c2:	e017      	b.n	80043f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d103      	bne.n	80043d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fb62 	bl	8004a98 <vPortFree>
	}
 80043d4:	e00e      	b.n	80043f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d009      	beq.n	80043f4 <prvDeleteTCB+0x54>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e7fe      	b.n	80043f2 <prvDeleteTCB+0x52>
	}
 80043f4:	bf00      	nop
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <prvResetNextTaskUnblockTime+0x38>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <prvResetNextTaskUnblockTime+0x3c>)
 800440e:	f04f 32ff 	mov.w	r2, #4294967295
 8004412:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004414:	e008      	b.n	8004428 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <prvResetNextTaskUnblockTime+0x38>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a04      	ldr	r2, [pc, #16]	; (8004438 <prvResetNextTaskUnblockTime+0x3c>)
 8004426:	6013      	str	r3, [r2, #0]
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	2000033c 	.word	0x2000033c
 8004438:	200003a4 	.word	0x200003a4

0800443c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800444c:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3304      	adds	r3, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fb19 	bl	8003a8a <uxListRemove>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800445e:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	2201      	movs	r2, #1
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43da      	mvns	r2, r3
 800446c:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4013      	ands	r3, r2
 8004472:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004474:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d10a      	bne.n	8004494 <prvAddCurrentTaskToDelayedList+0x58>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d007      	beq.n	8004494 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004484:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	481a      	ldr	r0, [pc, #104]	; (80044f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800448e:	f7ff fa9f 	bl	80039d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004492:	e026      	b.n	80044e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d209      	bcs.n	80044c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f7ff faad 	bl	8003a18 <vListInsert>
}
 80044be:	e010      	b.n	80044e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <prvAddCurrentTaskToDelayedList+0xc4>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7ff faa3 	bl	8003a18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044d2:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d202      	bcs.n	80044e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80044dc:	4a09      	ldr	r2, [pc, #36]	; (8004504 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	6013      	str	r3, [r2, #0]
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000388 	.word	0x20000388
 80044f0:	20000284 	.word	0x20000284
 80044f4:	2000038c 	.word	0x2000038c
 80044f8:	20000370 	.word	0x20000370
 80044fc:	20000340 	.word	0x20000340
 8004500:	2000033c 	.word	0x2000033c
 8004504:	200003a4 	.word	0x200003a4

08004508 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3b04      	subs	r3, #4
 8004518:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3b04      	subs	r3, #4
 8004526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3b04      	subs	r3, #4
 8004536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004538:	4a0c      	ldr	r2, [pc, #48]	; (800456c <pxPortInitialiseStack+0x64>)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3b14      	subs	r3, #20
 8004542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3b04      	subs	r3, #4
 800454e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f06f 0202 	mvn.w	r2, #2
 8004556:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3b20      	subs	r3, #32
 800455c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800455e:	68fb      	ldr	r3, [r7, #12]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	08004571 	.word	0x08004571

08004570 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800457a:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <prvTaskExitError+0x50>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d009      	beq.n	8004598 <prvTaskExitError+0x28>
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e7fe      	b.n	8004596 <prvTaskExitError+0x26>
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045aa:	bf00      	nop
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0fc      	beq.n	80045ac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	2000000c 	.word	0x2000000c
	...

080045d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <pxCurrentTCBConst2>)
 80045d2:	6819      	ldr	r1, [r3, #0]
 80045d4:	6808      	ldr	r0, [r1, #0]
 80045d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045da:	f380 8809 	msr	PSP, r0
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f380 8811 	msr	BASEPRI, r0
 80045ea:	4770      	bx	lr
 80045ec:	f3af 8000 	nop.w

080045f0 <pxCurrentTCBConst2>:
 80045f0:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop

080045f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80045f8:	4808      	ldr	r0, [pc, #32]	; (800461c <prvPortStartFirstTask+0x24>)
 80045fa:	6800      	ldr	r0, [r0, #0]
 80045fc:	6800      	ldr	r0, [r0, #0]
 80045fe:	f380 8808 	msr	MSP, r0
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f380 8814 	msr	CONTROL, r0
 800460a:	b662      	cpsie	i
 800460c:	b661      	cpsie	f
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	df00      	svc	0
 8004618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800461a:	bf00      	nop
 800461c:	e000ed08 	.word	0xe000ed08

08004620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004626:	4b44      	ldr	r3, [pc, #272]	; (8004738 <xPortStartScheduler+0x118>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a44      	ldr	r2, [pc, #272]	; (800473c <xPortStartScheduler+0x11c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d109      	bne.n	8004644 <xPortStartScheduler+0x24>
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	e7fe      	b.n	8004642 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004644:	4b3c      	ldr	r3, [pc, #240]	; (8004738 <xPortStartScheduler+0x118>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a3d      	ldr	r2, [pc, #244]	; (8004740 <xPortStartScheduler+0x120>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d109      	bne.n	8004662 <xPortStartScheduler+0x42>
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	e7fe      	b.n	8004660 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004662:	4b38      	ldr	r3, [pc, #224]	; (8004744 <xPortStartScheduler+0x124>)
 8004664:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	22ff      	movs	r2, #255	; 0xff
 8004672:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b30      	ldr	r3, [pc, #192]	; (8004748 <xPortStartScheduler+0x128>)
 8004688:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <xPortStartScheduler+0x12c>)
 800468c:	2207      	movs	r2, #7
 800468e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004690:	e009      	b.n	80046a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004692:	4b2e      	ldr	r3, [pc, #184]	; (800474c <xPortStartScheduler+0x12c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3b01      	subs	r3, #1
 8004698:	4a2c      	ldr	r2, [pc, #176]	; (800474c <xPortStartScheduler+0x12c>)
 800469a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ae:	2b80      	cmp	r3, #128	; 0x80
 80046b0:	d0ef      	beq.n	8004692 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <xPortStartScheduler+0x12c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1c3 0307 	rsb	r3, r3, #7
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d009      	beq.n	80046d2 <xPortStartScheduler+0xb2>
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	e7fe      	b.n	80046d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <xPortStartScheduler+0x12c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	4a1c      	ldr	r2, [pc, #112]	; (800474c <xPortStartScheduler+0x12c>)
 80046da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046dc:	4b1b      	ldr	r3, [pc, #108]	; (800474c <xPortStartScheduler+0x12c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e4:	4a19      	ldr	r2, [pc, #100]	; (800474c <xPortStartScheduler+0x12c>)
 80046e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046f0:	4b17      	ldr	r3, [pc, #92]	; (8004750 <xPortStartScheduler+0x130>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <xPortStartScheduler+0x130>)
 80046f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046fc:	4b14      	ldr	r3, [pc, #80]	; (8004750 <xPortStartScheduler+0x130>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a13      	ldr	r2, [pc, #76]	; (8004750 <xPortStartScheduler+0x130>)
 8004702:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004706:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004708:	f000 f8d6 	bl	80048b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <xPortStartScheduler+0x134>)
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004712:	f000 f8f5 	bl	8004900 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <xPortStartScheduler+0x138>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a0f      	ldr	r2, [pc, #60]	; (8004758 <xPortStartScheduler+0x138>)
 800471c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004720:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004722:	f7ff ff69 	bl	80045f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004726:	f7ff fd5d 	bl	80041e4 <vTaskSwitchContext>
	prvTaskExitError();
 800472a:	f7ff ff21 	bl	8004570 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	e000ed00 	.word	0xe000ed00
 800473c:	410fc271 	.word	0x410fc271
 8004740:	410fc270 	.word	0x410fc270
 8004744:	e000e400 	.word	0xe000e400
 8004748:	200003b0 	.word	0x200003b0
 800474c:	200003b4 	.word	0x200003b4
 8004750:	e000ed20 	.word	0xe000ed20
 8004754:	2000000c 	.word	0x2000000c
 8004758:	e000ef34 	.word	0xe000ef34

0800475c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <vPortEnterCritical+0x54>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <vPortEnterCritical+0x54>)
 800477c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <vPortEnterCritical+0x54>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10e      	bne.n	80047a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <vPortEnterCritical+0x58>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d009      	beq.n	80047a4 <vPortEnterCritical+0x48>
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	e7fe      	b.n	80047a2 <vPortEnterCritical+0x46>
	}
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <vPortExitCritical+0x4c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <vPortExitCritical+0x22>
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	607b      	str	r3, [r7, #4]
 80047d8:	e7fe      	b.n	80047d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80047da:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <vPortExitCritical+0x4c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3b01      	subs	r3, #1
 80047e0:	4a08      	ldr	r2, [pc, #32]	; (8004804 <vPortExitCritical+0x4c>)
 80047e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <vPortExitCritical+0x4c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <vPortExitCritical+0x3e>
 80047ec:	2300      	movs	r3, #0
 80047ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	2000000c 	.word	0x2000000c
	...

08004810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004810:	f3ef 8009 	mrs	r0, PSP
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	4b15      	ldr	r3, [pc, #84]	; (8004870 <pxCurrentTCBConst>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	f01e 0f10 	tst.w	lr, #16
 8004820:	bf08      	it	eq
 8004822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	6010      	str	r0, [r2, #0]
 800482c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004834:	f380 8811 	msr	BASEPRI, r0
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f7ff fcd0 	bl	80041e4 <vTaskSwitchContext>
 8004844:	f04f 0000 	mov.w	r0, #0
 8004848:	f380 8811 	msr	BASEPRI, r0
 800484c:	bc09      	pop	{r0, r3}
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	6808      	ldr	r0, [r1, #0]
 8004852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004856:	f01e 0f10 	tst.w	lr, #16
 800485a:	bf08      	it	eq
 800485c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004860:	f380 8809 	msr	PSP, r0
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	f3af 8000 	nop.w

08004870 <pxCurrentTCBConst>:
 8004870:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop

08004878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004890:	f7ff fbf0 	bl	8004074 <xTaskIncrementTick>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <SysTick_Handler+0x3c>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <vPortSetupTimerInterrupt+0x34>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <vPortSetupTimerInterrupt+0x38>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <vPortSetupTimerInterrupt+0x3c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <vPortSetupTimerInterrupt+0x40>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	099b      	lsrs	r3, r3, #6
 80048d4:	4a09      	ldr	r2, [pc, #36]	; (80048fc <vPortSetupTimerInterrupt+0x44>)
 80048d6:	3b01      	subs	r3, #1
 80048d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048da:	4b04      	ldr	r3, [pc, #16]	; (80048ec <vPortSetupTimerInterrupt+0x34>)
 80048dc:	2207      	movs	r2, #7
 80048de:	601a      	str	r2, [r3, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	e000e010 	.word	0xe000e010
 80048f0:	e000e018 	.word	0xe000e018
 80048f4:	20000000 	.word	0x20000000
 80048f8:	10624dd3 	.word	0x10624dd3
 80048fc:	e000e014 	.word	0xe000e014

08004900 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004900:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004910 <vPortEnableVFP+0x10>
 8004904:	6801      	ldr	r1, [r0, #0]
 8004906:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800490a:	6001      	str	r1, [r0, #0]
 800490c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800490e:	bf00      	nop
 8004910:	e000ed88 	.word	0xe000ed88

08004914 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004920:	f7ff fafe 	bl	8003f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004924:	4b57      	ldr	r3, [pc, #348]	; (8004a84 <pvPortMalloc+0x170>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800492c:	f000 f90c 	bl	8004b48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004930:	4b55      	ldr	r3, [pc, #340]	; (8004a88 <pvPortMalloc+0x174>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 808c 	bne.w	8004a56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01c      	beq.n	800497e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004944:	2208      	movs	r2, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	2b00      	cmp	r3, #0
 8004954:	d013      	beq.n	800497e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f023 0307 	bic.w	r3, r3, #7
 800495c:	3308      	adds	r3, #8
 800495e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <pvPortMalloc+0x6a>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e7fe      	b.n	800497c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d068      	beq.n	8004a56 <pvPortMalloc+0x142>
 8004984:	4b41      	ldr	r3, [pc, #260]	; (8004a8c <pvPortMalloc+0x178>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d863      	bhi.n	8004a56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800498e:	4b40      	ldr	r3, [pc, #256]	; (8004a90 <pvPortMalloc+0x17c>)
 8004990:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <pvPortMalloc+0x17c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004998:	e004      	b.n	80049a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d903      	bls.n	80049b6 <pvPortMalloc+0xa2>
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f1      	bne.n	800499a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049b6:	4b33      	ldr	r3, [pc, #204]	; (8004a84 <pvPortMalloc+0x170>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	429a      	cmp	r2, r3
 80049be:	d04a      	beq.n	8004a56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2208      	movs	r2, #8
 80049c6:	4413      	add	r3, r2
 80049c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	1ad2      	subs	r2, r2, r3
 80049da:	2308      	movs	r3, #8
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	429a      	cmp	r2, r3
 80049e0:	d91e      	bls.n	8004a20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d009      	beq.n	8004a08 <pvPortMalloc+0xf4>
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	e7fe      	b.n	8004a06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a1a:	69b8      	ldr	r0, [r7, #24]
 8004a1c:	f000 f8f6 	bl	8004c0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a20:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <pvPortMalloc+0x178>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <pvPortMalloc+0x178>)
 8004a2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a2e:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <pvPortMalloc+0x178>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <pvPortMalloc+0x180>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d203      	bcs.n	8004a42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a3a:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <pvPortMalloc+0x178>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a15      	ldr	r2, [pc, #84]	; (8004a94 <pvPortMalloc+0x180>)
 8004a40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <pvPortMalloc+0x174>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a56:	f7ff fa71 	bl	8003f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <pvPortMalloc+0x164>
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e7fe      	b.n	8004a76 <pvPortMalloc+0x162>
	return pvReturn;
 8004a78:	69fb      	ldr	r3, [r7, #28]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3728      	adds	r7, #40	; 0x28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20003fc0 	.word	0x20003fc0
 8004a88:	20003fcc 	.word	0x20003fcc
 8004a8c:	20003fc4 	.word	0x20003fc4
 8004a90:	20003fb8 	.word	0x20003fb8
 8004a94:	20003fc8 	.word	0x20003fc8

08004a98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d046      	beq.n	8004b38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004aaa:	2308      	movs	r3, #8
 8004aac:	425b      	negs	r3, r3
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <vPortFree+0xa8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <vPortFree+0x42>
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e7fe      	b.n	8004ad8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <vPortFree+0x5e>
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	e7fe      	b.n	8004af4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <vPortFree+0xa8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d019      	beq.n	8004b38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d115      	bne.n	8004b38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vPortFree+0xa8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	43db      	mvns	r3, r3
 8004b16:	401a      	ands	r2, r3
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b1c:	f7ff fa00 	bl	8003f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <vPortFree+0xac>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4413      	add	r3, r2
 8004b2a:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <vPortFree+0xac>)
 8004b2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b2e:	6938      	ldr	r0, [r7, #16]
 8004b30:	f000 f86c 	bl	8004c0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b34:	f7ff fa02 	bl	8003f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20003fcc 	.word	0x20003fcc
 8004b44:	20003fc4 	.word	0x20003fc4

08004b48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b54:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <prvHeapInit+0xac>)
 8004b56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3307      	adds	r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <prvHeapInit+0xac>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b80:	4a1d      	ldr	r2, [pc, #116]	; (8004bf8 <prvHeapInit+0xb0>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b86:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <prvHeapInit+0xb0>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4413      	add	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b94:	2208      	movs	r2, #8
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0307 	bic.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <prvHeapInit+0xb4>)
 8004ba8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <prvHeapInit+0xb4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <prvHeapInit+0xb4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <prvHeapInit+0xb4>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <prvHeapInit+0xb8>)
 8004bd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <prvHeapInit+0xbc>)
 8004bde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <prvHeapInit+0xc0>)
 8004be2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004be6:	601a      	str	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	200003b8 	.word	0x200003b8
 8004bf8:	20003fb8 	.word	0x20003fb8
 8004bfc:	20003fc0 	.word	0x20003fc0
 8004c00:	20003fc8 	.word	0x20003fc8
 8004c04:	20003fc4 	.word	0x20003fc4
 8004c08:	20003fcc 	.word	0x20003fcc

08004c0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c14:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <prvInsertBlockIntoFreeList+0xac>)
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e002      	b.n	8004c20 <prvInsertBlockIntoFreeList+0x14>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d8f7      	bhi.n	8004c1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d108      	bne.n	8004c4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	441a      	add	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	441a      	add	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d118      	bne.n	8004c94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <prvInsertBlockIntoFreeList+0xb0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d00d      	beq.n	8004c8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	441a      	add	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	e008      	b.n	8004c9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <prvInsertBlockIntoFreeList+0xb0>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e003      	b.n	8004c9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d002      	beq.n	8004caa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20003fb8 	.word	0x20003fb8
 8004cbc:	20003fc0 	.word	0x20003fc0

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4e0d      	ldr	r6, [pc, #52]	; (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	; (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1ba4      	subs	r4, r4, r6
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2500      	movs	r5, #0
 8004ccc:	42a5      	cmp	r5, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4e0b      	ldr	r6, [pc, #44]	; (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	; (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f000 f820 	bl	8004d18 <_init>
 8004cd8:	1ba4      	subs	r4, r4, r6
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2500      	movs	r5, #0
 8004cde:	42a5      	cmp	r5, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ce8:	4798      	blx	r3
 8004cea:	3501      	adds	r5, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cf2:	4798      	blx	r3
 8004cf4:	3501      	adds	r5, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08004df8 	.word	0x08004df8
 8004cfc:	08004df8 	.word	0x08004df8
 8004d00:	08004df8 	.word	0x08004df8
 8004d04:	08004dfc 	.word	0x08004dfc

08004d08 <memset>:
 8004d08:	4402      	add	r2, r0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d100      	bne.n	8004d12 <memset+0xa>
 8004d10:	4770      	bx	lr
 8004d12:	f803 1b01 	strb.w	r1, [r3], #1
 8004d16:	e7f9      	b.n	8004d0c <memset+0x4>

08004d18 <_init>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	bf00      	nop
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr

08004d24 <_fini>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr

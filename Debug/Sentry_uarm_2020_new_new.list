
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009274  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08009428  08009428  00019428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a8  080096a8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096b0  080096b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096b0  080096b0  000196b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096b4  080096b4  000196b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080096b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004328  20000078  08009730  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043a0  08009730  000243a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f3f3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000435f  00000000  00000000  0003f49b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001500  00000000  00000000  00043800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001308  00000000  00000000  00044d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000290cd  00000000  00000000  00046008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000138e4  00000000  00000000  0006f0d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e39ff  00000000  00000000  000829b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  001663b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff8  00000000  00000000  00166488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800940c 	.word	0x0800940c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800940c 	.word	0x0800940c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <Chassis_Task_Func>:
* @brief Function implementing the Chassis_Task thread.
* @param argument: Not used
* @retval None
*/
void Chassis_Task_Func(void const * argument)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	buzzer_play_mario(200);
 8000ed0:	20c8      	movs	r0, #200	; 0xc8
 8000ed2:	f000 fe3d 	bl	8001b50 <buzzer_play_mario>


  int32_t direction = CLOCKWISE; // direction of motor
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
  double vel = 1000; //Velocity of motor
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	4c06      	ldr	r4, [pc, #24]	; (8000ef8 <Chassis_Task_Func+0x30>)
 8000ee0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  uint32_t cycles_s=5; //Time period is 1 seconds per cycle, 5=5 cycles=5s, the timer is controlled by TIM13
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

	 // Forever loop
	  motor_move_period(cycles_s, vel, direction);
 8000ee8:	69f9      	ldr	r1, [r7, #28]
 8000eea:	ed97 0b04 	vldr	d0, [r7, #16]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f000 f804 	bl	8000efc <motor_move_period>
 8000ef4:	e7f8      	b.n	8000ee8 <Chassis_Task_Func+0x20>
 8000ef6:	bf00      	nop
 8000ef8:	408f4000 	.word	0x408f4000

08000efc <motor_move_period>:
 * 		initial_direction: initial direction for motors
 *
 * @ Return: Null
 * @ Author: Haoran, Adan
 */
void motor_move_period(uint32_t cycles, double vel, int32_t initial_direction){
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	ed87 0b00 	vstr	d0, [r7]
 8000f08:	60b9      	str	r1, [r7, #8]
	int32_t direction;

	//If first loop
	if (first_loop){
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <motor_move_period+0xac>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <motor_move_period+0x1a>
		direction = initial_direction;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	617b      	str	r3, [r7, #20]
	else{

	}
	//TIMEBASE = (APBxTIMCLK / (Prescaler + 1)) / (Period + 1) (Hertz)
	//currently set 1 Hz, if want 0.1s, set Prescaler of TIM13 to 839 (10 Hz)
	if(direction == CLOCKWISE){
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d115      	bne.n	8000f48 <motor_move_period+0x4c>
		HAL_GPIO_WritePin(LD_A_GPIO_Port,LD_A_Pin,GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	4822      	ldr	r0, [pc, #136]	; (8000fac <motor_move_period+0xb0>)
 8000f24:	f003 f8ce 	bl	80040c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_B_GPIO_Port,LD_B_Pin,GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <motor_move_period+0xb0>)
 8000f2e:	f003 f8c9 	bl	80040c4 <HAL_GPIO_WritePin>
		// Clockwise Direction
		// give time counter here
		if (period_counter >= cycles) {
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <motor_move_period+0xb4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d805      	bhi.n	8000f48 <motor_move_period+0x4c>
			period_counter = 0;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <motor_move_period+0xb4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
			direction = COUNTER_CLOCKWISE;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	617b      	str	r3, [r7, #20]
		}
	}
	if(direction == COUNTER_CLOCKWISE){
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4e:	d109      	bne.n	8000f64 <motor_move_period+0x68>
		// Counter Clockwise Direction
		if (period_counter >= cycles){
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <motor_move_period+0xb4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d804      	bhi.n	8000f64 <motor_move_period+0x68>
			period_counter = 0;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <motor_move_period+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
			direction = CLOCKWISE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
		}
	}
	//Calculate velocity via direction * speed
	vel = direction*vel;
 8000f64:	6978      	ldr	r0, [r7, #20]
 8000f66:	f7ff faed 	bl	8000544 <__aeabi_i2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f72:	f7ff fb51 	bl	8000618 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9c7 2300 	strd	r2, r3, [r7]

	//Send velocity to motor
	//and function should be written to control the RPM rather than just setting raw value
	Motor_set_raw_value(&motor_data[0], vel);
 8000f7e:	ed97 0b00 	vldr	d0, [r7]
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <motor_move_period+0xb8>)
 8000f84:	f000 fd22 	bl	80019cc <Motor_set_raw_value>
	Motor_set_raw_value(&motor_data[1], -vel);
 8000f88:	683c      	ldr	r4, [r7, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000f90:	ec45 4b10 	vmov	d0, r4, r5
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <motor_move_period+0xbc>)
 8000f96:	f000 fd19 	bl	80019cc <Motor_set_raw_value>
	osDelay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f005 f8bd 	bl	800611a <osDelay>
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa8:	2000418c 	.word	0x2000418c
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	200002e8 	.word	0x200002e8
 8000fb4:	20004084 	.word	0x20004084
 8000fb8:	200040a0 	.word	0x200040a0
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	ed2d 8b02 	vpush	{d8}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	61f8      	str	r0, [r7, #28]

  /* USER CODE BEGIN Gimbal_Task_Function */
  char *pdata; // data packet from computer
  double vmax=30000;
 8000fcc:	a465      	add	r4, pc, #404	; (adr r4, 8001164 <Gimbal_Task_Function+0x1a4>)
 8000fce:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000fd2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  double max_angle=4096;
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	4c59      	ldr	r4, [pc, #356]	; (8001140 <Gimbal_Task_Function+0x180>)
 8000fdc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  pdata = malloc(PACKLEN+1);
 8000fe0:	2011      	movs	r0, #17
 8000fe2:	f006 fa77 	bl	80074d4 <malloc>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24

  //Init comm pack
  comm_pack.yaw_data = 0;
 8000fea:	4b56      	ldr	r3, [pc, #344]	; (8001144 <Gimbal_Task_Function+0x184>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
  comm_pack.pitch_data = 0;
 8000ff0:	4b54      	ldr	r3, [pc, #336]	; (8001144 <Gimbal_Task_Function+0x184>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  comm_pack.dist_data = 0;
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <Gimbal_Task_Function+0x184>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  comm_pack.fire_cmd = 0;
 8000ffc:	4b51      	ldr	r3, [pc, #324]	; (8001144 <Gimbal_Task_Function+0x184>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  comm_pack.target_num = 0;
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <Gimbal_Task_Function+0x184>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
	//buzzer_play_chromatic(100);
	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001008:	2102      	movs	r1, #2
 800100a:	484f      	ldr	r0, [pc, #316]	; (8001148 <Gimbal_Task_Function+0x188>)
 800100c:	f002 fb7f 	bl	800370e <HAL_CAN_ActivateNotification>
	velocity=3000;
 8001010:	4b4e      	ldr	r3, [pc, #312]	; (800114c <Gimbal_Task_Function+0x18c>)
 8001012:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001016:	801a      	strh	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOG, LD_B_Pin, RESET);
	  }

	  //HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_RESET);
	  Motor_set_raw_value(&motor_data[0], comm_pack.yaw_data);*/
	  comm_pack.pack_cond=PACKERR;
 8001018:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <Gimbal_Task_Function+0x184>)
 800101a:	2201      	movs	r2, #1
 800101c:	615a      	str	r2, [r3, #20]
	  if (HAL_UART_Receive(&husart6, (char*)pdata, (PACKLEN+1), 3) == HAL_OK){
 800101e:	2303      	movs	r3, #3
 8001020:	2211      	movs	r2, #17
 8001022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001024:	484a      	ldr	r0, [pc, #296]	; (8001150 <Gimbal_Task_Function+0x190>)
 8001026:	f004 fba1 	bl	800576c <HAL_UART_Receive>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d136      	bne.n	800109e <Gimbal_Task_Function+0xde>
		  HAL_GPIO_TogglePin(GPIOG, LD_H_Pin);
 8001030:	2102      	movs	r1, #2
 8001032:	4848      	ldr	r0, [pc, #288]	; (8001154 <Gimbal_Task_Function+0x194>)
 8001034:	f003 f85f 	bl	80040f6 <HAL_GPIO_TogglePin>
		  comm_pack=parse_all(pdata);
 8001038:	4c42      	ldr	r4, [pc, #264]	; (8001144 <Gimbal_Task_Function+0x184>)
 800103a:	463b      	mov	r3, r7
 800103c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f962 	bl	8001308 <parse_all>
 8001044:	4625      	mov	r5, r4
 8001046:	463c      	mov	r4, r7
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001050:	e885 0003 	stmia.w	r5, {r0, r1}
//		  HAL_UART_Transmit(&husart6, (char*)pdata, (PACKLEN+1),50);
		  char* temp;
		  printf("Yaw: %d;\t Pitch: %d; \t%s\r\n", (int16_t)angle_preprocess(&motor_data[4], comm_pack.yaw_data), (int16_t)angle_preprocess(&motor_data[5], comm_pack.pitch_data), pdata);
 8001054:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <Gimbal_Task_Function+0x184>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4619      	mov	r1, r3
 800105c:	483e      	ldr	r0, [pc, #248]	; (8001158 <Gimbal_Task_Function+0x198>)
 800105e:	f000 f885 	bl	800116c <angle_preprocess>
 8001062:	ec54 3b10 	vmov	r3, r4, d0
 8001066:	4618      	mov	r0, r3
 8001068:	4621      	mov	r1, r4
 800106a:	f7ff fd85 	bl	8000b78 <__aeabi_d2iz>
 800106e:	4603      	mov	r3, r0
 8001070:	b21b      	sxth	r3, r3
 8001072:	461c      	mov	r4, r3
 8001074:	4b33      	ldr	r3, [pc, #204]	; (8001144 <Gimbal_Task_Function+0x184>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4619      	mov	r1, r3
 800107c:	4837      	ldr	r0, [pc, #220]	; (800115c <Gimbal_Task_Function+0x19c>)
 800107e:	f000 f875 	bl	800116c <angle_preprocess>
 8001082:	ec53 2b10 	vmov	r2, r3, d0
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fd75 	bl	8000b78 <__aeabi_d2iz>
 800108e:	4603      	mov	r3, r0
 8001090:	b21b      	sxth	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	4621      	mov	r1, r4
 8001098:	4831      	ldr	r0, [pc, #196]	; (8001160 <Gimbal_Task_Function+0x1a0>)
 800109a:	f006 fad3 	bl	8007644 <iprintf>
		  //HAL_UART_Transmit(&husart6, (char*)temp, 17,50);
	  }
	  if (comm_pack.pack_cond==PACKCOR){
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <Gimbal_Task_Function+0x184>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d103      	bne.n	80010ae <Gimbal_Task_Function+0xee>
		  buzzer_play_c1(500);
 80010a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010aa:	f000 fcd9 	bl	8001a60 <buzzer_play_c1>
	  }
	  else if (comm_pack.pack_cond==PACKERR){
		  //buzzer_play_mario(120);
	  }

	  Motor_pid_set_angle(&motor_data[4], angle_preprocess(&motor_data[4], comm_pack.yaw_data), vmax/max_angle,0,0);
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <Gimbal_Task_Function+0x184>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4619      	mov	r1, r3
 80010b6:	4828      	ldr	r0, [pc, #160]	; (8001158 <Gimbal_Task_Function+0x198>)
 80010b8:	f000 f858 	bl	800116c <angle_preprocess>
 80010bc:	eeb0 8a40 	vmov.f32	s16, s0
 80010c0:	eef0 8a60 	vmov.f32	s17, s1
 80010c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80010cc:	f7ff fbce 	bl	800086c <__aeabi_ddiv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4618      	mov	r0, r3
 80010d6:	4621      	mov	r1, r4
 80010d8:	f7ff fd4e 	bl	8000b78 <__aeabi_d2iz>
 80010dc:	4601      	mov	r1, r0
 80010de:	2300      	movs	r3, #0
 80010e0:	2200      	movs	r2, #0
 80010e2:	eeb0 0a48 	vmov.f32	s0, s16
 80010e6:	eef0 0a68 	vmov.f32	s1, s17
 80010ea:	481b      	ldr	r0, [pc, #108]	; (8001158 <Gimbal_Task_Function+0x198>)
 80010ec:	f000 fb6c 	bl	80017c8 <Motor_pid_set_angle>
	  Motor_pid_set_angle(&motor_data[5], angle_preprocess(&motor_data[5], comm_pack.pitch_data), vmax/max_angle,0,0);
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <Gimbal_Task_Function+0x184>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	4818      	ldr	r0, [pc, #96]	; (800115c <Gimbal_Task_Function+0x19c>)
 80010fa:	f000 f837 	bl	800116c <angle_preprocess>
 80010fe:	eeb0 8a40 	vmov.f32	s16, s0
 8001102:	eef0 8a60 	vmov.f32	s17, s1
 8001106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800110a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800110e:	f7ff fbad 	bl	800086c <__aeabi_ddiv>
 8001112:	4603      	mov	r3, r0
 8001114:	460c      	mov	r4, r1
 8001116:	4618      	mov	r0, r3
 8001118:	4621      	mov	r1, r4
 800111a:	f7ff fd2d 	bl	8000b78 <__aeabi_d2iz>
 800111e:	4601      	mov	r1, r0
 8001120:	2300      	movs	r3, #0
 8001122:	2200      	movs	r2, #0
 8001124:	eeb0 0a48 	vmov.f32	s0, s16
 8001128:	eef0 0a68 	vmov.f32	s1, s17
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <Gimbal_Task_Function+0x19c>)
 800112e:	f000 fb4b 	bl	80017c8 <Motor_pid_set_angle>
	  //Motor_pid_set_angle	(&motor_data[4], 0, vmax/max_angle,0,0);
	  //Motor_set_raw_value(&motor_data[4],-3000);
	  osDelay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f004 fff1 	bl	800611a <osDelay>
	  comm_pack.pack_cond=PACKERR;
 8001138:	e76e      	b.n	8001018 <Gimbal_Task_Function+0x58>
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	40b00000 	.word	0x40b00000
 8001144:	2000423c 	.word	0x2000423c
 8001148:	20004190 	.word	0x20004190
 800114c:	2000423a 	.word	0x2000423a
 8001150:	20004318 	.word	0x20004318
 8001154:	40021800 	.word	0x40021800
 8001158:	200040f4 	.word	0x200040f4
 800115c:	20004110 	.word	0x20004110
 8001160:	08009428 	.word	0x08009428
 8001164:	00000000 	.word	0x00000000
 8001168:	40dd4c00 	.word	0x40dd4c00

0800116c <angle_preprocess>:

  /* USER CODE END Gimbal_Task_Function */
}


double angle_preprocess(Motor* motor, int16_t recieved_angle){
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b08d      	sub	sp, #52	; 0x34
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
	Motor temp_motor_buffer;
	int16_t rx_angle;
	int16_t input_angle;
	int16_t target_angle;
	input_angle=round(recieved_angle*8192/360);
 8001178:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800117c:	035b      	lsls	r3, r3, #13
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <angle_preprocess+0x9c>)
 8001180:	fb82 1203 	smull	r1, r2, r2, r3
 8001184:	441a      	add	r2, r3
 8001186:	1212      	asrs	r2, r2, #8
 8001188:	17db      	asrs	r3, r3, #31
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9d9 	bl	8000544 <__aeabi_i2d>
 8001192:	4603      	mov	r3, r0
 8001194:	460c      	mov	r4, r1
 8001196:	4618      	mov	r0, r3
 8001198:	4621      	mov	r1, r4
 800119a:	f7ff fced 	bl	8000b78 <__aeabi_d2iz>
 800119e:	4603      	mov	r3, r0
 80011a0:	85fb      	strh	r3, [r7, #46]	; 0x2e

	get_Motor_buffer(motor, &temp_motor_buffer);
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fabf 	bl	800172c <get_Motor_buffer>
	rx_angle=temp_motor_buffer.motor_feedback.rx_angle;
 80011ae:	8bbb      	ldrh	r3, [r7, #28]
 80011b0:	85bb      	strh	r3, [r7, #44]	; 0x2c

	target_angle=input_angle + rx_angle;
 80011b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	857b      	strh	r3, [r7, #42]	; 0x2a
	target_angle=(8192+target_angle) % 8192;
 80011bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80011c4:	425a      	negs	r2, r3
 80011c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80011ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80011ce:	bf58      	it	pl
 80011d0:	4253      	negpl	r3, r2
 80011d2:	857b      	strh	r3, [r7, #42]	; 0x2a

	return (double)(target_angle*360/8192);
 80011d4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011d8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da02      	bge.n	80011ea <angle_preprocess+0x7e>
 80011e4:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80011e8:	331f      	adds	r3, #31
 80011ea:	135b      	asrs	r3, r3, #13
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9a9 	bl	8000544 <__aeabi_i2d>
 80011f2:	4603      	mov	r3, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	ec44 3b17 	vmov	d7, r3, r4
}
 80011fa:	eeb0 0a47 	vmov.f32	s0, s14
 80011fe:	eef0 0a67 	vmov.f32	s1, s15
 8001202:	3734      	adds	r7, #52	; 0x34
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	b60b60b7 	.word	0xb60b60b7
 800120c:	00000000 	.word	0x00000000

08001210 <parse_pack_indv>:
 * 			     pos: The position of the last byte of the currently extracted data, e.g. yaw.
 * 			     lens: the length of current data, e.g. yaw.
 * @ Return:
 * @ Author: Haoran Qi, Created on: Jan, 2022
 */
int32_t parse_pack_indv(char* pack, int pos, int lens){
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	466b      	mov	r3, sp
 800121e:	461e      	mov	r6, r3

    char pdata[(strlen(pack)+1)]; //pack content size + '\0'
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7fe ffe5 	bl	80001f0 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	1c58      	adds	r0, r3, #1
 800122a:	4603      	mov	r3, r0
 800122c:	3b01      	subs	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	4601      	mov	r1, r0
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	f04f 0400 	mov.w	r4, #0
 800123e:	00d4      	lsls	r4, r2, #3
 8001240:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001244:	00cb      	lsls	r3, r1, #3
 8001246:	4601      	mov	r1, r0
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	f04f 0400 	mov.w	r4, #0
 8001254:	00d4      	lsls	r4, r2, #3
 8001256:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800125a:	00cb      	lsls	r3, r1, #3
 800125c:	1dc3      	adds	r3, r0, #7
 800125e:	08db      	lsrs	r3, r3, #3
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	ebad 0d03 	sub.w	sp, sp, r3
 8001266:	466b      	mov	r3, sp
 8001268:	3300      	adds	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
    int32_t data = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
    strcpy(pdata, pack);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	68f9      	ldr	r1, [r7, #12]
 8001274:	4618      	mov	r0, r3
 8001276:	f006 fa0d 	bl	8007694 <strcpy>

    if (pdata[0] == 0x41){ //check received correct pack head frame， modify here to 0xAA in real world test
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b41      	cmp	r3, #65	; 0x41
 8001280:	d131      	bne.n	80012e6 <parse_pack_indv+0xd6>
		for(int i=0; i<lens; i++){
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e029      	b.n	80012dc <parse_pack_indv+0xcc>
            data += (int32_t)((pdata[pos-i-1] - '0')*pow(10,i)); // decoding, referring to the vision code.
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	3b01      	subs	r3, #1
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	3b30      	subs	r3, #48	; 0x30
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f954 	bl	8000544 <__aeabi_i2d>
 800129c:	4604      	mov	r4, r0
 800129e:	460d      	mov	r5, r1
 80012a0:	69f8      	ldr	r0, [r7, #28]
 80012a2:	f7ff f94f 	bl	8000544 <__aeabi_i2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	ec43 2b11 	vmov	d1, r2, r3
 80012ae:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001300 <parse_pack_indv+0xf0>
 80012b2:	f007 f855 	bl	8008360 <pow>
 80012b6:	ec53 2b10 	vmov	r2, r3, d0
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f9ab 	bl	8000618 <__aeabi_dmul>
 80012c2:	4603      	mov	r3, r0
 80012c4:	460c      	mov	r4, r1
 80012c6:	4618      	mov	r0, r3
 80012c8:	4621      	mov	r1, r4
 80012ca:	f7ff fc55 	bl	8000b78 <__aeabi_d2iz>
 80012ce:	4602      	mov	r2, r0
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	4413      	add	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
		for(int i=0; i<lens; i++){
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbd1      	blt.n	8001288 <parse_pack_indv+0x78>
 80012e4:	e002      	b.n	80012ec <parse_pack_indv+0xdc>
		}
    }
	else{
		data = -1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	61bb      	str	r3, [r7, #24]
	}
    osDelay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f004 ff14 	bl	800611a <osDelay>
    return data;
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	46b5      	mov	sp, r6
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fe:	bf00      	nop
 8001300:	00000000 	.word	0x00000000
 8001304:	40240000 	.word	0x40240000

08001308 <parse_all>:
    }
    return Sentry_Pack;
}

comm_rx_info parse_all(char* pack)
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
	comm_rx_info Sentry_Pack;
	Sentry_Pack.yaw_data = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
	Sentry_Pack.pitch_data = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
	Sentry_Pack.dist_data = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
	Sentry_Pack.fire_cmd = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
	Sentry_Pack.target_num = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
	Sentry_Pack.pack_cond=PACKERR;
 8001326:	2301      	movs	r3, #1
 8001328:	623b      	str	r3, [r7, #32]

	//int position = 6;
	//unsigned char data;
	//int power;

	if (strlen(pack) == PACKLEN)
 800132a:	6838      	ldr	r0, [r7, #0]
 800132c:	f7fe ff60 	bl	80001f0 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	2b10      	cmp	r3, #16
 8001334:	d166      	bne.n	8001404 <parse_all+0xfc>
	{
		if (pack[0] == 0x41) //start with 'A'
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b41      	cmp	r3, #65	; 0x41
 800133c:	d15a      	bne.n	80013f4 <parse_all+0xec>
		{
			for (int i = 2; i< PACKLEN-1; i++)
 800133e:	2302      	movs	r3, #2
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
 8001342:	e019      	b.n	8001378 <parse_all+0x70>
			{
				if(pack[i]>='0' && pack[i] <= '9') // make sure each number is 0~9
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b2f      	cmp	r3, #47	; 0x2f
 800134e:	d90b      	bls.n	8001368 <parse_all+0x60>
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b39      	cmp	r3, #57	; 0x39
 800135a:	d805      	bhi.n	8001368 <parse_all+0x60>
				{
					Sentry_Pack.pack_cond = PACKCOR;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
			for (int i = 2; i< PACKLEN-1; i++)
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	3301      	adds	r3, #1
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
 8001366:	e007      	b.n	8001378 <parse_all+0x70>
				}
				else
				{
					Sentry_Pack.pack_cond = PACKERR;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
					HAL_GPIO_WritePin(GPIOG, LD_D_Pin, RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2120      	movs	r1, #32
 8001370:	482f      	ldr	r0, [pc, #188]	; (8001430 <parse_all+0x128>)
 8001372:	f002 fea7 	bl	80040c4 <HAL_GPIO_WritePin>
					break;
 8001376:	e002      	b.n	800137e <parse_all+0x76>
			for (int i = 2; i< PACKLEN-1; i++)
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	2b0e      	cmp	r3, #14
 800137c:	dde2      	ble.n	8001344 <parse_all+0x3c>
				}
			}

			if(pack[PACKLEN-1]=='0' || pack[PACKLEN-1] == '1') {// fire command is '0' or '1'
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	330f      	adds	r3, #15
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b30      	cmp	r3, #48	; 0x30
 8001386:	d004      	beq.n	8001392 <parse_all+0x8a>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	330f      	adds	r3, #15
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b31      	cmp	r3, #49	; 0x31
 8001390:	d102      	bne.n	8001398 <parse_all+0x90>
				Sentry_Pack.pack_cond = PACKCOR;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	e006      	b.n	80013a6 <parse_all+0x9e>
			}
			else
			{
				Sentry_Pack.pack_cond = PACKERR;
 8001398:	2301      	movs	r3, #1
 800139a:	623b      	str	r3, [r7, #32]
				HAL_GPIO_WritePin(GPIOG, LD_E_Pin, RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2110      	movs	r1, #16
 80013a0:	4823      	ldr	r0, [pc, #140]	; (8001430 <parse_all+0x128>)
 80013a2:	f002 fe8f 	bl	80040c4 <HAL_GPIO_WritePin>
			}
			//only when the format is correct, parse the packet
			if(Sentry_Pack.pack_cond == PACKCOR)
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d132      	bne.n	8001412 <parse_all+0x10a>
			{
				Sentry_Pack.yaw_data=parse_pack_indv(pack,YAW_POS, DATALEN);
 80013ac:	2204      	movs	r2, #4
 80013ae:	2106      	movs	r1, #6
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7ff ff2d 	bl	8001210 <parse_pack_indv>
 80013b6:	4603      	mov	r3, r0
 80013b8:	60fb      	str	r3, [r7, #12]
				Sentry_Pack.pitch_data=parse_pack_indv(pack,PITCH_POS,DATALEN);
 80013ba:	2204      	movs	r2, #4
 80013bc:	210a      	movs	r1, #10
 80013be:	6838      	ldr	r0, [r7, #0]
 80013c0:	f7ff ff26 	bl	8001210 <parse_pack_indv>
 80013c4:	4603      	mov	r3, r0
 80013c6:	613b      	str	r3, [r7, #16]
				Sentry_Pack.dist_data=parse_pack_indv(pack,DIST_POS,DATALEN);
 80013c8:	2204      	movs	r2, #4
 80013ca:	210e      	movs	r1, #14
 80013cc:	6838      	ldr	r0, [r7, #0]
 80013ce:	f7ff ff1f 	bl	8001210 <parse_pack_indv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	617b      	str	r3, [r7, #20]
				Sentry_Pack.target_num=parse_pack_indv(pack,TARGET_POS,STATELEN);
 80013d6:	2201      	movs	r2, #1
 80013d8:	210f      	movs	r1, #15
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f7ff ff18 	bl	8001210 <parse_pack_indv>
 80013e0:	4603      	mov	r3, r0
 80013e2:	61bb      	str	r3, [r7, #24]
				Sentry_Pack.fire_cmd=parse_pack_indv(pack,FCMD_POS,STATELEN);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2110      	movs	r1, #16
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	f7ff ff11 	bl	8001210 <parse_pack_indv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e00e      	b.n	8001412 <parse_all+0x10a>
			}
		}
		else
		{
			Sentry_Pack.pack_cond = PACKERR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
			HAL_GPIO_WritePin(GPIOG, LD_F_Pin, RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2108      	movs	r1, #8
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <parse_all+0x128>)
 80013fe:	f002 fe61 	bl	80040c4 <HAL_GPIO_WritePin>
 8001402:	e006      	b.n	8001412 <parse_all+0x10a>
		}
	}
	else
	{
		Sentry_Pack.pack_cond = PACKERR;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
		HAL_GPIO_WritePin(GPIOG, LD_G_Pin, RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2104      	movs	r1, #4
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <parse_all+0x128>)
 800140e:	f002 fe59 	bl	80040c4 <HAL_GPIO_WritePin>
	}
	return Sentry_Pack;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	461d      	mov	r5, r3
 8001416:	f107 040c 	add.w	r4, r7, #12
 800141a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001422:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bdb0      	pop	{r4, r5, r7, pc}
 800142e:	bf00      	nop
 8001430:	40021800 	.word	0x40021800

08001434 <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 800143c:	f000 f818 	bl	8001470 <shoot_init>
  double fric_wheel_speed_percent=50;
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	4c08      	ldr	r4, [pc, #32]	; (8001468 <Shoot_Task_Func+0x34>)
 8001446:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double mag_load_speed_percent=10;
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	4c07      	ldr	r4, [pc, #28]	; (800146c <Shoot_Task_Func+0x38>)
 8001450:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8001454:	ed97 1b04 	vldr	d1, [r7, #16]
 8001458:	ed97 0b02 	vldr	d0, [r7, #8]
 800145c:	f000 f834 	bl	80014c8 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f004 fe5a 	bl	800611a <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8001466:	e7f5      	b.n	8001454 <Shoot_Task_Func+0x20>
 8001468:	40490000 	.word	0x40490000
 800146c:	40240000 	.word	0x40240000

08001470 <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001474:	2100      	movs	r1, #0
 8001476:	4812      	ldr	r0, [pc, #72]	; (80014c0 <shoot_init+0x50>)
 8001478:	f003 fb58 	bl	8004b2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 800147c:	2108      	movs	r1, #8
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <shoot_init+0x50>)
 8001480:	f003 fb54 	bl	8004b2c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <shoot_init+0x50>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f640 0298 	movw	r2, #2200	; 0x898
 800148c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <shoot_init+0x50>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f640 0298 	movw	r2, #2200	; 0x898
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 8001498:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800149c:	f004 fe3d 	bl	800611a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <shoot_init+0x50>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <shoot_init+0x50>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 80014b4:	f240 60d6 	movw	r0, #1750	; 0x6d6
 80014b8:	f004 fe2f 	bl	800611a <osDelay>

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20004044 	.word	0x20004044
 80014c4:	00000000 	.word	0x00000000

080014c8 <cmd_execute_shoot>:
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,input);
}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	ed87 0b02 	vstr	d0, [r7, #8]
 80014d2:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <cmd_execute_shoot+0x50>)
 80014dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014e0:	f7ff f9c4 	bl	800086c <__aeabi_ddiv>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4618      	mov	r0, r3
 80014ea:	4621      	mov	r1, r4
 80014ec:	a308      	add	r3, pc, #32	; (adr r3, 8001510 <cmd_execute_shoot+0x48>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f891 	bl	8000618 <__aeabi_dmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	460c      	mov	r4, r1
 80014fa:	e9c7 3404 	strd	r3, r4, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 80014fe:	ed97 0b04 	vldr	d0, [r7, #16]
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <cmd_execute_shoot+0x54>)
 8001504:	f000 fa62 	bl	80019cc <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	00000000 	.word	0x00000000
 8001514:	40c38800 	.word	0x40c38800
 8001518:	40590000 	.word	0x40590000
 800151c:	200040d8 	.word	0x200040d8

08001520 <Timer_Task_Func>:
 */

#include "Timer_App.h"


void Timer_Task_Func(void const * argument){
 8001520:	b580      	push	{r7, lr}
 8001522:	b090      	sub	sp, #64	; 0x40
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

	uint32_t tick;

	for (;;){

		Motor_Data_Read();
 8001528:	f000 f816 	bl	8001558 <Motor_Data_Read>
		Motor_Data_Sent();
 800152c:	f000 f87a 	bl	8001624 <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <Timer_Task_Func+0x30>)
 8001538:	f000 f8f8 	bl	800172c <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4619      	mov	r1, r3
 8001542:	4804      	ldr	r0, [pc, #16]	; (8001554 <Timer_Task_Func+0x34>)
 8001544:	f000 f8f2 	bl	800172c <get_Motor_buffer>
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
 8001548:	2001      	movs	r0, #1
 800154a:	f004 fde6 	bl	800611a <osDelay>
	for (;;){
 800154e:	e7eb      	b.n	8001528 <Timer_Task_Func+0x8>
 8001550:	200040f4 	.word	0x200040f4
 8001554:	20004084 	.word	0x20004084

08001558 <Motor_Data_Read>:


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e052      	b.n	800160a <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 8001564:	482c      	ldr	r0, [pc, #176]	; (8001618 <Motor_Data_Read+0xc0>)
 8001566:	f000 fd19 	bl	8001f9c <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4a2b      	ldr	r2, [pc, #172]	; (800161c <Motor_Data_Read+0xc4>)
 8001570:	441a      	add	r2, r3
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	6810      	ldr	r0, [r2, #0]
 8001576:	6851      	ldr	r1, [r2, #4]
 8001578:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 800157a:	793b      	ldrb	r3, [r7, #4]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	797b      	ldrb	r3, [r7, #5]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b218      	sxth	r0, r3
 8001588:	4925      	ldr	r1, [pc, #148]	; (8001620 <Motor_Data_Read+0xc8>)
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	3310      	adds	r3, #16
 8001598:	4602      	mov	r2, r0
 800159a:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b218      	sxth	r0, r3
 80015aa:	491d      	ldr	r1, [pc, #116]	; (8001620 <Motor_Data_Read+0xc8>)
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3312      	adds	r3, #18
 80015ba:	4602      	mov	r2, r0
 80015bc:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 80015be:	7a3b      	ldrb	r3, [r7, #8]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	7a7b      	ldrb	r3, [r7, #9]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b218      	sxth	r0, r3
 80015cc:	4914      	ldr	r1, [pc, #80]	; (8001620 <Motor_Data_Read+0xc8>)
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3314      	adds	r3, #20
 80015dc:	4602      	mov	r2, r0
 80015de:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 80015e0:	7abb      	ldrb	r3, [r7, #10]
 80015e2:	b218      	sxth	r0, r3
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <Motor_Data_Read+0xc8>)
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3316      	adds	r3, #22
 80015f4:	4602      	mov	r2, r0
 80015f6:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f004 fd8e 	bl	800611a <osDelay>

		can_filter_disable(&hcan1);
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <Motor_Data_Read+0xc0>)
 8001600:	f000 fcee 	bl	8001fe0 <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3301      	adds	r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b07      	cmp	r3, #7
 800160e:	dda9      	ble.n	8001564 <Motor_Data_Read+0xc>
	}
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20004190 	.word	0x20004190
 800161c:	200041b8 	.word	0x200041b8
 8001620:	20004084 	.word	0x20004084

08001624 <Motor_Data_Sent>:
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 8001632:	2308      	movs	r3, #8
 8001634:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
 800163a:	e06c      	b.n	8001716 <Motor_Data_Sent+0xf2>
		if (i == 0) {
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	2b00      	cmp	r3, #0
 8001640:	d12b      	bne.n	800169a <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 8001642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001646:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 8001648:	4b36      	ldr	r3, [pc, #216]	; (8001724 <Motor_Data_Sent+0x100>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	121b      	asrs	r3, r3, #8
 800164e:	b2db      	uxtb	r3, r3
 8001650:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 8001652:	4b34      	ldr	r3, [pc, #208]	; (8001724 <Motor_Data_Sent+0x100>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <Motor_Data_Sent+0x100>)
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165e:	121b      	asrs	r3, r3, #8
 8001660:	b2db      	uxtb	r3, r3
 8001662:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <Motor_Data_Sent+0x100>)
 8001666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001668:	b2db      	uxtb	r3, r3
 800166a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <Motor_Data_Sent+0x100>)
 800166e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001670:	121b      	asrs	r3, r3, #8
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <Motor_Data_Sent+0x100>)
 800167a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <Motor_Data_Sent+0x100>)
 8001684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001686:	121b      	asrs	r3, r3, #8
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <Motor_Data_Sent+0x100>)
 8001690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001698:	e032      	b.n	8001700 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 800169a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800169e:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <Motor_Data_Sent+0x100>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a6:	121b      	asrs	r3, r3, #8
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <Motor_Data_Sent+0x100>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 80016b6:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <Motor_Data_Sent+0x100>)
 80016b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016bc:	121b      	asrs	r3, r3, #8
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <Motor_Data_Sent+0x100>)
 80016c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <Motor_Data_Sent+0x100>)
 80016ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016d2:	121b      	asrs	r3, r3, #8
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <Motor_Data_Sent+0x100>)
 80016dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <Motor_Data_Sent+0x100>)
 80016e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80016ec:	121b      	asrs	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <Motor_Data_Sent+0x100>)
 80016f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8001700:	f107 0318 	add.w	r3, r7, #24
 8001704:	f107 021c 	add.w	r2, r7, #28
 8001708:	4639      	mov	r1, r7
 800170a:	4807      	ldr	r0, [pc, #28]	; (8001728 <Motor_Data_Sent+0x104>)
 800170c:	f001 fe12 	bl	8003334 <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	2b01      	cmp	r3, #1
 800171a:	dd8f      	ble.n	800163c <Motor_Data_Sent+0x18>
	}
}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20004084 	.word	0x20004084
 8001728:	20004190 	.word	0x20004190

0800172c <get_Motor_buffer>:

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8001736:	6839      	ldr	r1, [r7, #0]
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f811 	bl	8001760 <Motor_Data_Replacement>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8001750:	6839      	ldr	r1, [r7, #0]
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f804 	bl	8001760 <Motor_Data_Replacement>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	60da      	str	r2, [r3, #12]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <Motor_pid_set_angle>:


//PID Function, expects a POINTER to motor structure, target ABSOLUTE angle in DEGREES (between 0 and 360), and P/I/D parameters
void Motor_pid_set_angle(Motor* motor, double angle, int32_t p, int32_t i, int32_t d){
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b097      	sub	sp, #92	; 0x5c
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6178      	str	r0, [r7, #20]
 80017d0:	ed87 0b02 	vstr	d0, [r7, #8]
 80017d4:	6139      	str	r1, [r7, #16]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
	Motor temp_motor_buffer;
	int16_t rx_angle;
	int16_t input_angle;
	int16_t current_error;
	int16_t target_angle;
	int16_t min_speed=1000;
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t tolerance=20;
 80017e2:	2314      	movs	r3, #20
 80017e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t direction=1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	double velocity=0;
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double speed=0;
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	f04f 0400 	mov.w	r4, #0
 8001802:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	input_angle=round(angle/360*8192);
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	4b6e      	ldr	r3, [pc, #440]	; (80019c4 <Motor_pid_set_angle+0x1fc>)
 800180c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001810:	f7ff f82c 	bl	800086c <__aeabi_ddiv>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	4618      	mov	r0, r3
 800181a:	4621      	mov	r1, r4
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4b69      	ldr	r3, [pc, #420]	; (80019c8 <Motor_pid_set_angle+0x200>)
 8001822:	f7fe fef9 	bl	8000618 <__aeabi_dmul>
 8001826:	4603      	mov	r3, r0
 8001828:	460c      	mov	r4, r1
 800182a:	ec44 3b17 	vmov	d7, r3, r4
 800182e:	eeb0 0a47 	vmov.f32	s0, s14
 8001832:	eef0 0a67 	vmov.f32	s1, s15
 8001836:	f006 fd49 	bl	80082cc <round>
 800183a:	ec54 3b10 	vmov	r3, r4, d0
 800183e:	4618      	mov	r0, r3
 8001840:	4621      	mov	r1, r4
 8001842:	f7ff f999 	bl	8000b78 <__aeabi_d2iz>
 8001846:	4603      	mov	r3, r0
 8001848:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	get_Motor_buffer(motor, &temp_motor_buffer);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff6a 	bl	800172c <get_Motor_buffer>


	temp_motor_buffer.motor_info.P_parameter=p;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	623b      	str	r3, [r7, #32]
	temp_motor_buffer.motor_info.I_parameter=i;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
	temp_motor_buffer.motor_info.D_parameter=d;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
	rx_angle=temp_motor_buffer.motor_feedback.rx_angle;
 8001864:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001866:	87fb      	strh	r3, [r7, #62]	; 0x3e

	target_angle=input_angle;
 8001868:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800186c:	87bb      	strh	r3, [r7, #60]	; 0x3c
	/*if (target_angle % 8192 !=0){
		target_angle=target_angle%8192;
	}*/

	current_error=(target_angle-rx_angle+8192)%8192; //Use target - rx + 8192 to always make it positive, mod 8192 to make sure its within [0,8192]
 800186e:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8001872:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800187c:	425a      	negs	r2, r3
 800187e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001882:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001886:	bf58      	it	pl
 8001888:	4253      	negpl	r3, r2
 800188a:	877b      	strh	r3, [r7, #58]	; 0x3a
	//If error is not small, but motor turns less than 180 degrees, turn as per usual using p*error
	//If error is not small, but motor needs to turn more than 180 degrees, reverse direction, and error is the error "the other way"
	//In cases where error is not small, set minimum speed so that the motor doesnt stop turning due to friction

	////----------------------------This seciton will likely need to be modified if we try to add in I and D control--------------------////
	if (current_error<tolerance){
 800188c:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001890:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001894:	429a      	cmp	r2, r3
 8001896:	da06      	bge.n	80018a6 <Motor_pid_set_angle+0xde>
		velocity=0;
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	f04f 0400 	mov.w	r4, #0
 80018a0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 80018a4:	e07d      	b.n	80019a2 <Motor_pid_set_angle+0x1da>
	}
	else{
		if (current_error<=4096){ //If need to turn less than 180 degrees, go CW
 80018a6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80018aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ae:	dc39      	bgt.n	8001924 <Motor_pid_set_angle+0x15c>
			//HAL_GPIO_WritePin(GPIOG, LD_A_Pin, RESET);
			//HAL_GPIO_WritePin(GPIOG, LD_B_Pin, SET);
			direction=1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			speed=p*current_error;
 80018b6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe3f 	bl	8000544 <__aeabi_i2d>
 80018c6:	4603      	mov	r3, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

			if (speed<min_speed){
 80018ce:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe36 	bl	8000544 <__aeabi_i2d>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	461a      	mov	r2, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80018e4:	f7ff f90a 	bl	8000afc <__aeabi_dcmplt>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <Motor_pid_set_angle+0x138>
				speed=min_speed;
 80018ee:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe26 	bl	8000544 <__aeabi_i2d>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}

			velocity=direction*speed;
 8001900:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe1d 	bl	8000544 <__aeabi_i2d>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	461a      	mov	r2, r3
 8001910:	4623      	mov	r3, r4
 8001912:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001916:	f7fe fe7f 	bl	8000618 <__aeabi_dmul>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8001922:	e03e      	b.n	80019a2 <Motor_pid_set_angle+0x1da>
		}
		else{ //Otherwise, go CCW
			//HAL_GPIO_WritePin(GPIOG, LD_B_Pin, RESET);
			//HAL_GPIO_WritePin(GPIOG, LD_A_Pin, SET);
			current_error=(8192-current_error); //Error from "the other side" obtained by 8192-error if CCW
 8001924:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001926:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 800192a:	b29b      	uxth	r3, r3
 800192c:	877b      	strh	r3, [r7, #58]	; 0x3a
			direction=-1;
 800192e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001932:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			speed=p*current_error;
 8001936:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fdff 	bl	8000544 <__aeabi_i2d>
 8001946:	4603      	mov	r3, r0
 8001948:	460c      	mov	r4, r1
 800194a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

			if (speed<min_speed){
 800194e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fdf6 	bl	8000544 <__aeabi_i2d>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	461a      	mov	r2, r3
 800195e:	4623      	mov	r3, r4
 8001960:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001964:	f7ff f8ca 	bl	8000afc <__aeabi_dcmplt>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <Motor_pid_set_angle+0x1b8>
				speed=min_speed;
 800196e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fde6 	bl	8000544 <__aeabi_i2d>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}

			velocity=direction*speed;
 8001980:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddd 	bl	8000544 <__aeabi_i2d>
 800198a:	4603      	mov	r3, r0
 800198c:	460c      	mov	r4, r1
 800198e:	461a      	mov	r2, r3
 8001990:	4623      	mov	r3, r4
 8001992:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001996:	f7fe fe3f 	bl	8000618 <__aeabi_dmul>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	////----------------------------This seciton will likely need to be modified if we try to add in I and D control--------------------////
	//current_error=3000;



	temp_motor_buffer.tx_data=velocity;
 80019a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80019a6:	f7ff f8e7 	bl	8000b78 <__aeabi_d2iz>
 80019aa:	4603      	mov	r3, r0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
	set_Motor_buffer(&temp_motor_buffer,motor);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	6979      	ldr	r1, [r7, #20]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fec6 	bl	8001746 <set_Motor_buffer>

}
 80019ba:	bf00      	nop
 80019bc:	375c      	adds	r7, #92	; 0x5c
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40768000 	.word	0x40768000
 80019c8:	40c00000 	.word	0x40c00000

080019cc <Motor_set_raw_value>:

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff fea4 	bl	800172c <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 80019e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e8:	f7ff f8c6 	bl	8000b78 <__aeabi_d2iz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	68f9      	ldr	r1, [r7, #12]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fea5 	bl	8001746 <set_Motor_buffer>
}
 80019fc:	bf00      	nop
 80019fe:	3730      	adds	r7, #48	; 0x30
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4802      	ldr	r0, [pc, #8]	; (8001a14 <buzzer_init+0x10>)
 8001a0c:	f003 f88e 	bl	8004b2c <HAL_TIM_PWM_Start>

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200041f8 	.word	0x200041f8

08001a18 <buzzer_play_g0>:

void buzzer_play_g0(int32_t duration){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <buzzer_play_g0+0x44>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,9523);
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <buzzer_play_g0+0x44>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f242 5233 	movw	r2, #9523	; 0x2533
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <buzzer_play_g0+0x44>)
 8001a34:	f242 5233 	movw	r2, #9523	; 0x2533
 8001a38:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <buzzer_play_g0+0x44>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2264      	movs	r2, #100	; 0x64
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fb68 	bl	800611a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <buzzer_play_g0+0x44>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200041f8 	.word	0x200041f8

08001a60 <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <buzzer_play_c1+0x44>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,7135);
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <buzzer_play_c1+0x44>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <buzzer_play_c1+0x44>)
 8001a7c:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8001a80:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <buzzer_play_c1+0x44>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2264      	movs	r2, #100	; 0x64
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 fb44 	bl	800611a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <buzzer_play_c1+0x44>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200041f8 	.word	0x200041f8

08001aa8 <buzzer_play_e1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_e1(int32_t duration){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 25);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <buzzer_play_e1+0x44>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5662);
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <buzzer_play_e1+0x44>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f241 621e 	movw	r2, #5662	; 0x161e
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <buzzer_play_e1+0x44>)
 8001ac4:	f241 621e 	movw	r2, #5662	; 0x161e
 8001ac8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <buzzer_play_e1+0x44>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2264      	movs	r2, #100	; 0x64
 8001ad0:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fb20 	bl	800611a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <buzzer_play_e1+0x44>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200041f8 	.word	0x200041f8

08001af0 <buzzer_play_g1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_g1(int32_t duration){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 21);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <buzzer_play_g1+0x44>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4761);
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <buzzer_play_g1+0x44>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f241 2299 	movw	r2, #4761	; 0x1299
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <buzzer_play_g1+0x44>)
 8001b0c:	f241 2299 	movw	r2, #4761	; 0x1299
 8001b10:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <buzzer_play_g1+0x44>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2264      	movs	r2, #100	; 0x64
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f004 fafc 	bl	800611a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <buzzer_play_g1+0x44>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200041f8 	.word	0x200041f8

08001b38 <buzzer_rest>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_rest(int32_t duration){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	osDelay(duration);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fae9 	bl	800611a <osDelay>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <buzzer_play_mario>:



}

void buzzer_play_mario(int32_t bpm){
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b08d      	sub	sp, #52	; 0x34
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7fe fcf3 	bl	8000544 <__aeabi_i2d>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460c      	mov	r4, r1
 8001b62:	461a      	mov	r2, r3
 8001b64:	4623      	mov	r3, r4
 8001b66:	f04f 0000 	mov.w	r0, #0
 8001b6a:	49bf      	ldr	r1, [pc, #764]	; (8001e68 <buzzer_play_mario+0x318>)
 8001b6c:	f7fe fe7e 	bl	800086c <__aeabi_ddiv>
 8001b70:	4603      	mov	r3, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	4618      	mov	r0, r3
 8001b76:	4621      	mov	r1, r4
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4bbb      	ldr	r3, [pc, #748]	; (8001e6c <buzzer_play_mario+0x31c>)
 8001b7e:	f7fe fd4b 	bl	8000618 <__aeabi_dmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	460c      	mov	r4, r1
 8001b86:	4618      	mov	r0, r3
 8001b88:	4621      	mov	r1, r4
 8001b8a:	f7fe fff5 	bl	8000b78 <__aeabi_d2iz>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t quarter_dot=(double)60/bpm*1000*1.5;
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fcd6 	bl	8000544 <__aeabi_i2d>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	460c      	mov	r4, r1
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4623      	mov	r3, r4
 8001ba0:	f04f 0000 	mov.w	r0, #0
 8001ba4:	49b0      	ldr	r1, [pc, #704]	; (8001e68 <buzzer_play_mario+0x318>)
 8001ba6:	f7fe fe61 	bl	800086c <__aeabi_ddiv>
 8001baa:	4603      	mov	r3, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4bad      	ldr	r3, [pc, #692]	; (8001e6c <buzzer_play_mario+0x31c>)
 8001bb8:	f7fe fd2e 	bl	8000618 <__aeabi_dmul>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4ba9      	ldr	r3, [pc, #676]	; (8001e70 <buzzer_play_mario+0x320>)
 8001bca:	f7fe fd25 	bl	8000618 <__aeabi_dmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	f7fe ffcf 	bl	8000b78 <__aeabi_d2iz>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t eighth=(double)60/bpm*1000*0.5;
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fcb0 	bl	8000544 <__aeabi_i2d>
 8001be4:	4603      	mov	r3, r0
 8001be6:	460c      	mov	r4, r1
 8001be8:	461a      	mov	r2, r3
 8001bea:	4623      	mov	r3, r4
 8001bec:	f04f 0000 	mov.w	r0, #0
 8001bf0:	499d      	ldr	r1, [pc, #628]	; (8001e68 <buzzer_play_mario+0x318>)
 8001bf2:	f7fe fe3b 	bl	800086c <__aeabi_ddiv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b9a      	ldr	r3, [pc, #616]	; (8001e6c <buzzer_play_mario+0x31c>)
 8001c04:	f7fe fd08 	bl	8000618 <__aeabi_dmul>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4621      	mov	r1, r4
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b97      	ldr	r3, [pc, #604]	; (8001e74 <buzzer_play_mario+0x324>)
 8001c16:	f7fe fcff 	bl	8000618 <__aeabi_dmul>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460c      	mov	r4, r1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4621      	mov	r1, r4
 8001c22:	f7fe ffa9 	bl	8000b78 <__aeabi_d2iz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t eighth_dot=(double)60/bpm*1000*0.5*1.5;
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fc8a 	bl	8000544 <__aeabi_i2d>
 8001c30:	4603      	mov	r3, r0
 8001c32:	460c      	mov	r4, r1
 8001c34:	461a      	mov	r2, r3
 8001c36:	4623      	mov	r3, r4
 8001c38:	f04f 0000 	mov.w	r0, #0
 8001c3c:	498a      	ldr	r1, [pc, #552]	; (8001e68 <buzzer_play_mario+0x318>)
 8001c3e:	f7fe fe15 	bl	800086c <__aeabi_ddiv>
 8001c42:	4603      	mov	r3, r0
 8001c44:	460c      	mov	r4, r1
 8001c46:	4618      	mov	r0, r3
 8001c48:	4621      	mov	r1, r4
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	4b87      	ldr	r3, [pc, #540]	; (8001e6c <buzzer_play_mario+0x31c>)
 8001c50:	f7fe fce2 	bl	8000618 <__aeabi_dmul>
 8001c54:	4603      	mov	r3, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b84      	ldr	r3, [pc, #528]	; (8001e74 <buzzer_play_mario+0x324>)
 8001c62:	f7fe fcd9 	bl	8000618 <__aeabi_dmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b7f      	ldr	r3, [pc, #508]	; (8001e70 <buzzer_play_mario+0x320>)
 8001c74:	f7fe fcd0 	bl	8000618 <__aeabi_dmul>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4621      	mov	r1, r4
 8001c80:	f7fe ff7a 	bl	8000b78 <__aeabi_d2iz>
 8001c84:	4603      	mov	r3, r0
 8001c86:	623b      	str	r3, [r7, #32]
	int32_t sixteenth=(double)60/bpm*0.25*1000;
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7fe fc5b 	bl	8000544 <__aeabi_i2d>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	461a      	mov	r2, r3
 8001c94:	4623      	mov	r3, r4
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	4973      	ldr	r1, [pc, #460]	; (8001e68 <buzzer_play_mario+0x318>)
 8001c9c:	f7fe fde6 	bl	800086c <__aeabi_ddiv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b72      	ldr	r3, [pc, #456]	; (8001e78 <buzzer_play_mario+0x328>)
 8001cae:	f7fe fcb3 	bl	8000618 <__aeabi_dmul>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	4621      	mov	r1, r4
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	4b6b      	ldr	r3, [pc, #428]	; (8001e6c <buzzer_play_mario+0x31c>)
 8001cc0:	f7fe fcaa 	bl	8000618 <__aeabi_dmul>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	4621      	mov	r1, r4
 8001ccc:	f7fe ff54 	bl	8000b78 <__aeabi_d2iz>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	61fb      	str	r3, [r7, #28]
	int32_t sixteenth_dot=(double)60/bpm*0.25*1000*1.5;
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7fe fc35 	bl	8000544 <__aeabi_i2d>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	4960      	ldr	r1, [pc, #384]	; (8001e68 <buzzer_play_mario+0x318>)
 8001ce8:	f7fe fdc0 	bl	800086c <__aeabi_ddiv>
 8001cec:	4603      	mov	r3, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b5f      	ldr	r3, [pc, #380]	; (8001e78 <buzzer_play_mario+0x328>)
 8001cfa:	f7fe fc8d 	bl	8000618 <__aeabi_dmul>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460c      	mov	r4, r1
 8001d02:	4618      	mov	r0, r3
 8001d04:	4621      	mov	r1, r4
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <buzzer_play_mario+0x31c>)
 8001d0c:	f7fe fc84 	bl	8000618 <__aeabi_dmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	4618      	mov	r0, r3
 8001d16:	4621      	mov	r1, r4
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	4b54      	ldr	r3, [pc, #336]	; (8001e70 <buzzer_play_mario+0x320>)
 8001d1e:	f7fe fc7b 	bl	8000618 <__aeabi_dmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	460c      	mov	r4, r1
 8001d26:	4618      	mov	r0, r3
 8001d28:	4621      	mov	r1, r4
 8001d2a:	f7fe ff25 	bl	8000b78 <__aeabi_d2iz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	61bb      	str	r3, [r7, #24]
	int32_t half=(double)60/bpm*2*1000;
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7fe fc06 	bl	8000544 <__aeabi_i2d>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	f04f 0000 	mov.w	r0, #0
 8001d44:	4948      	ldr	r1, [pc, #288]	; (8001e68 <buzzer_play_mario+0x318>)
 8001d46:	f7fe fd91 	bl	800086c <__aeabi_ddiv>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4621      	mov	r1, r4
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	f7fe faa9 	bl	80002ac <__adddf3>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	4618      	mov	r0, r3
 8001d60:	4621      	mov	r1, r4
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <buzzer_play_mario+0x31c>)
 8001d68:	f7fe fc56 	bl	8000618 <__aeabi_dmul>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	4618      	mov	r0, r3
 8001d72:	4621      	mov	r1, r4
 8001d74:	f7fe ff00 	bl	8000b78 <__aeabi_d2iz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	617b      	str	r3, [r7, #20]
	int32_t half_dot=(double)60/bpm*2*1000*1.5;
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7fe fbe1 	bl	8000544 <__aeabi_i2d>
 8001d82:	4603      	mov	r3, r0
 8001d84:	460c      	mov	r4, r1
 8001d86:	461a      	mov	r2, r3
 8001d88:	4623      	mov	r3, r4
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	4936      	ldr	r1, [pc, #216]	; (8001e68 <buzzer_play_mario+0x318>)
 8001d90:	f7fe fd6c 	bl	800086c <__aeabi_ddiv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	f7fe fa84 	bl	80002ac <__adddf3>
 8001da4:	4603      	mov	r3, r0
 8001da6:	460c      	mov	r4, r1
 8001da8:	4618      	mov	r0, r3
 8001daa:	4621      	mov	r1, r4
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <buzzer_play_mario+0x31c>)
 8001db2:	f7fe fc31 	bl	8000618 <__aeabi_dmul>
 8001db6:	4603      	mov	r3, r0
 8001db8:	460c      	mov	r4, r1
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <buzzer_play_mario+0x320>)
 8001dc4:	f7fe fc28 	bl	8000618 <__aeabi_dmul>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	460c      	mov	r4, r1
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4621      	mov	r1, r4
 8001dd0:	f7fe fed2 	bl	8000b78 <__aeabi_d2iz>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	613b      	str	r3, [r7, #16]
	int32_t whole=(double)60/bpm*4*1000;
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7fe fbb3 	bl	8000544 <__aeabi_i2d>
 8001dde:	4603      	mov	r3, r0
 8001de0:	460c      	mov	r4, r1
 8001de2:	461a      	mov	r2, r3
 8001de4:	4623      	mov	r3, r4
 8001de6:	f04f 0000 	mov.w	r0, #0
 8001dea:	491f      	ldr	r1, [pc, #124]	; (8001e68 <buzzer_play_mario+0x318>)
 8001dec:	f7fe fd3e 	bl	800086c <__aeabi_ddiv>
 8001df0:	4603      	mov	r3, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	4618      	mov	r0, r3
 8001df6:	4621      	mov	r1, r4
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <buzzer_play_mario+0x32c>)
 8001dfe:	f7fe fc0b 	bl	8000618 <__aeabi_dmul>
 8001e02:	4603      	mov	r3, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	4618      	mov	r0, r3
 8001e08:	4621      	mov	r1, r4
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <buzzer_play_mario+0x31c>)
 8001e10:	f7fe fc02 	bl	8000618 <__aeabi_dmul>
 8001e14:	4603      	mov	r3, r0
 8001e16:	460c      	mov	r4, r1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	f7fe feac 	bl	8000b78 <__aeabi_d2iz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]

	buzzer_play_e1(eighth);
 8001e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e26:	f7ff fe3f 	bl	8001aa8 <buzzer_play_e1>
	buzzer_play_e1(eighth);
 8001e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e2c:	f7ff fe3c 	bl	8001aa8 <buzzer_play_e1>
	buzzer_rest(eighth);
 8001e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e32:	f7ff fe81 	bl	8001b38 <buzzer_rest>
	buzzer_play_e1(eighth);
 8001e36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e38:	f7ff fe36 	bl	8001aa8 <buzzer_play_e1>
	buzzer_rest(eighth);
 8001e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e3e:	f7ff fe7b 	bl	8001b38 <buzzer_rest>
	buzzer_play_c1(eighth);
 8001e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e44:	f7ff fe0c 	bl	8001a60 <buzzer_play_c1>
	buzzer_play_e1(quarter);
 8001e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e4a:	f7ff fe2d 	bl	8001aa8 <buzzer_play_e1>
	buzzer_play_g1(quarter);
 8001e4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e50:	f7ff fe4e 	bl	8001af0 <buzzer_play_g1>
	buzzer_rest(quarter);
 8001e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e56:	f7ff fe6f 	bl	8001b38 <buzzer_rest>
	buzzer_play_g0(quarter);
 8001e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e5c:	f7ff fddc 	bl	8001a18 <buzzer_play_g0>


}
 8001e60:	bf00      	nop
 8001e62:	3734      	adds	r7, #52	; 0x34
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}
 8001e68:	404e0000 	.word	0x404e0000
 8001e6c:	408f4000 	.word	0x408f4000
 8001e70:	3ff80000 	.word	0x3ff80000
 8001e74:	3fe00000 	.word	0x3fe00000
 8001e78:	3fd00000 	.word	0x3fd00000
 8001e7c:	40100000 	.word	0x40100000

08001e80 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e86:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <MX_CAN1_Init+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001e9e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001ea2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ea6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eaa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ed0:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MX_CAN1_Init+0x64>)
 8001ed2:	f001 f80f 	bl	8002ef4 <HAL_CAN_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001edc:	f000 fb38 	bl	8002550 <Error_Handler>
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20004190 	.word	0x20004190
 8001ee8:	40006400 	.word	0x40006400

08001eec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <HAL_CAN_MspInit+0xa4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d13b      	bne.n	8001f86 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_CAN_MspInit+0xa8>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_CAN_MspInit+0xa8>)
 8001f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_CAN_MspInit+0xa8>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_CAN_MspInit+0xa8>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_CAN_MspInit+0xa8>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_CAN_MspInit+0xa8>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f46:	2303      	movs	r3, #3
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f56:	2309      	movs	r3, #9
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <HAL_CAN_MspInit+0xac>)
 8001f62:	f001 ff05 	bl	8003d70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	2013      	movs	r0, #19
 8001f6c:	f001 fed6 	bl	8003d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001f70:	2013      	movs	r0, #19
 8001f72:	f001 feef 	bl	8003d54 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2105      	movs	r1, #5
 8001f7a:	2014      	movs	r0, #20
 8001f7c:	f001 fece 	bl	8003d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001f80:	2014      	movs	r0, #20
 8001f82:	f001 fee7 	bl	8003d54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001f86:	bf00      	nop
 8001f88:	3728      	adds	r7, #40	; 0x28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40006400 	.word	0x40006400
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020c00 	.word	0x40020c00

08001f9c <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	; 0x30
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001fc4:	231b      	movs	r3, #27
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f001 f88a 	bl	80030ec <HAL_CAN_ConfigFilter>
}
 8001fd8:	bf00      	nop
 8001fda:	3730      	adds	r7, #48	; 0x30
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8002000:	2301      	movs	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8002008:	231b      	movs	r3, #27
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8002010:	f107 0308 	add.w	r3, r7, #8
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f001 f868 	bl	80030ec <HAL_CAN_ConfigFilter>
}
 800201c:	bf00      	nop
 800201e:	3730      	adds	r7, #48	; 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002034:	0d5b      	lsrs	r3, r3, #21
 8002036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800203a:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 8002046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4a05      	ldr	r2, [pc, #20]	; (8002064 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800204e:	4413      	add	r3, r2
 8002050:	f107 0208 	add.w	r2, r7, #8
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f001 fa47 	bl	80034ea <HAL_CAN_GetRxMessage>
}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200041b8 	.word	0x200041b8

08002068 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a07      	ldr	r2, [pc, #28]	; (8002094 <vApplicationGetIdleTaskMemory+0x2c>)
 8002078:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <vApplicationGetIdleTaskMemory+0x30>)
 800207e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000094 	.word	0x20000094
 8002098:	200000e8 	.word	0x200000e8

0800209c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800209c:	b5b0      	push	{r4, r5, r7, lr}
 800209e:	b0a8      	sub	sp, #160	; 0xa0
 80020a0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <MX_FREERTOS_Init+0xc0>)
 80020a4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80020a8:	461d      	mov	r5, r3
 80020aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80020b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 ffe0 	bl	8006082 <osThreadCreate>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <MX_FREERTOS_Init+0xc4>)
 80020c6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <MX_FREERTOS_Init+0xc8>)
 80020ca:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80020ce:	461d      	mov	r5, r3
 80020d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 80020dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 ffcd 	bl	8006082 <osThreadCreate>
 80020e8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 80020ec:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <MX_FREERTOS_Init+0xcc>)
 80020ee:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80020f2:	461d      	mov	r5, r3
 80020f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8002100:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f003 ffbb 	bl	8006082 <osThreadCreate>
 800210c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <MX_FREERTOS_Init+0xd0>)
 8002112:	f107 0420 	add.w	r4, r7, #32
 8002116:	461d      	mov	r5, r3
 8002118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800211a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800211c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8002124:	f107 0320 	add.w	r3, r7, #32
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f003 ffa9 	bl	8006082 <osThreadCreate>
 8002130:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_FREERTOS_Init+0xd4>)
 8002136:	1d3c      	adds	r4, r7, #4
 8002138:	461d      	mov	r5, r3
 800213a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f003 ff99 	bl	8006082 <osThreadCreate>
 8002150:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002154:	bf00      	nop
 8002156:	37a0      	adds	r7, #160	; 0xa0
 8002158:	46bd      	mov	sp, r7
 800215a:	bdb0      	pop	{r4, r5, r7, pc}
 800215c:	08009450 	.word	0x08009450
 8002160:	20004254 	.word	0x20004254
 8002164:	08009478 	.word	0x08009478
 8002168:	080094a0 	.word	0x080094a0
 800216c:	080094c8 	.word	0x080094c8
 8002170:	080094f0 	.word	0x080094f0

08002174 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f003 ffcc 	bl	800611a <osDelay>
 8002182:	e7fb      	b.n	800217c <StartDefaultTask+0x8>

08002184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a69      	ldr	r2, [pc, #420]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a62      	ldr	r2, [pc, #392]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021c0:	f043 0310 	orr.w	r3, r3, #16
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b60      	ldr	r3, [pc, #384]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b5c      	ldr	r3, [pc, #368]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a5b      	ldr	r2, [pc, #364]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b59      	ldr	r3, [pc, #356]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b55      	ldr	r3, [pc, #340]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a54      	ldr	r2, [pc, #336]	; (8002348 <MX_GPIO_Init+0x1c4>)
 80021f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b52      	ldr	r3, [pc, #328]	; (8002348 <MX_GPIO_Init+0x1c4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b4e      	ldr	r3, [pc, #312]	; (8002348 <MX_GPIO_Init+0x1c4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a4d      	ldr	r2, [pc, #308]	; (8002348 <MX_GPIO_Init+0x1c4>)
 8002214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <MX_GPIO_Init+0x1c4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <MX_GPIO_Init+0x1c4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a46      	ldr	r2, [pc, #280]	; (8002348 <MX_GPIO_Init+0x1c4>)
 8002230:	f043 0320 	orr.w	r3, r3, #32
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <MX_GPIO_Init+0x1c4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <MX_GPIO_Init+0x1c4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a3f      	ldr	r2, [pc, #252]	; (8002348 <MX_GPIO_Init+0x1c4>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <MX_GPIO_Init+0x1c4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002264:	4839      	ldr	r0, [pc, #228]	; (800234c <MX_GPIO_Init+0x1c8>)
 8002266:	f001 ff2d 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 800226a:	2201      	movs	r2, #1
 800226c:	211e      	movs	r1, #30
 800226e:	4837      	ldr	r0, [pc, #220]	; (800234c <MX_GPIO_Init+0x1c8>)
 8002270:	f001 ff28 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800227a:	4835      	ldr	r0, [pc, #212]	; (8002350 <MX_GPIO_Init+0x1cc>)
 800227c:	f001 ff22 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002286:	4833      	ldr	r0, [pc, #204]	; (8002354 <MX_GPIO_Init+0x1d0>)
 8002288:	f001 ff1c 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 800228c:	2320      	movs	r3, #32
 800228e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002294:	2301      	movs	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	482c      	ldr	r0, [pc, #176]	; (8002350 <MX_GPIO_Init+0x1cc>)
 80022a0:	f001 fd66 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 80022a4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80022a8:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	4619      	mov	r1, r3
 80022bc:	4823      	ldr	r0, [pc, #140]	; (800234c <MX_GPIO_Init+0x1c8>)
 80022be:	f001 fd57 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 80022c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022cc:	2301      	movs	r3, #1
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	481f      	ldr	r0, [pc, #124]	; (8002354 <MX_GPIO_Init+0x1d0>)
 80022d8:	f001 fd4a 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80022dc:	2304      	movs	r3, #4
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <MX_GPIO_Init+0x1d4>)
 80022e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4619      	mov	r1, r3
 80022ee:	481b      	ldr	r0, [pc, #108]	; (800235c <MX_GPIO_Init+0x1d8>)
 80022f0:	f001 fd3e 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 80022f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fa:	2301      	movs	r3, #1
 80022fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	4810      	ldr	r0, [pc, #64]	; (8002350 <MX_GPIO_Init+0x1cc>)
 800230e:	f001 fd2f 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8002312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	4619      	mov	r1, r3
 800232a:	480a      	ldr	r0, [pc, #40]	; (8002354 <MX_GPIO_Init+0x1d0>)
 800232c:	f001 fd20 	bl	8003d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2105      	movs	r1, #5
 8002334:	2008      	movs	r0, #8
 8002336:	f001 fcf1 	bl	8003d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800233a:	2008      	movs	r0, #8
 800233c:	f001 fd0a 	bl	8003d54 <HAL_NVIC_EnableIRQ>

}
 8002340:	bf00      	nop
 8002342:	3730      	adds	r7, #48	; 0x30
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	40021800 	.word	0x40021800
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	10110000 	.word	0x10110000
 800235c:	40020400 	.word	0x40020400

08002360 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af02      	add	r7, sp, #8
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b04      	cmp	r3, #4
 800236e:	d12b      	bne.n	80023c8 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8002370:	4817      	ldr	r0, [pc, #92]	; (80023d0 <HAL_GPIO_EXTI_Callback+0x70>)
 8002372:	f7ff fe13 	bl	8001f9c <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8002376:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	6810      	ldr	r0, [r2, #0]
 800237e:	6851      	ldr	r1, [r2, #4]
 8002380:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002382:	7a3b      	ldrb	r3, [r7, #8]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	b21a      	sxth	r2, r3
 8002388:	7a7b      	ldrb	r3, [r7, #9]
 800238a:	b21b      	sxth	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002390:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002392:	7abb      	ldrb	r3, [r7, #10]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b21a      	sxth	r2, r3
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	b21b      	sxth	r3, r3
 800239c:	4313      	orrs	r3, r2
 800239e:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 80023a0:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 80023a2:	7b3b      	ldrb	r3, [r7, #12]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	7b7b      	ldrb	r3, [r7, #13]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 80023b2:	9201      	str	r2, [sp, #4]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	4603      	mov	r3, r0
 80023b8:	460a      	mov	r2, r1
 80023ba:	2101      	movs	r1, #1
 80023bc:	4806      	ldr	r0, [pc, #24]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x78>)
 80023be:	f005 f941 	bl	8007644 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 80023c2:	4803      	ldr	r0, [pc, #12]	; (80023d0 <HAL_GPIO_EXTI_Callback+0x70>)
 80023c4:	f7ff fe0c 	bl	8001fe0 <can_filter_disable>


	}
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20004190 	.word	0x20004190
 80023d4:	200041b8 	.word	0x200041b8
 80023d8:	0800950c 	.word	0x0800950c

080023dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e0:	f000 fd46 	bl	8002e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e4:	f000 f822 	bl	800242c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e8:	f7ff fecc 	bl	8002184 <MX_GPIO_Init>
  MX_CAN1_Init();
 80023ec:	f7ff fd48 	bl	8001e80 <MX_CAN1_Init>
  MX_TIM4_Init();
 80023f0:	f000 fa42 	bl	8002878 <MX_TIM4_Init>
  MX_TIM12_Init();
 80023f4:	f000 faa6 	bl	8002944 <MX_TIM12_Init>
  MX_UART7_Init();
 80023f8:	f000 fc3e 	bl	8002c78 <MX_UART7_Init>
  MX_USART6_Init();
 80023fc:	f000 fc66 	bl	8002ccc <MX_USART6_Init>
  MX_TIM14_Init();
 8002400:	f000 fb0a 	bl	8002a18 <MX_TIM14_Init>
  MX_TIM13_Init();
 8002404:	f000 fae4 	bl	80029d0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8002408:	f7ff fafc 	bl	8001a04 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <main+0x48>)
 800240e:	f000 ff4d 	bl	80032ac <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <main+0x4c>)
 8002414:	f002 fb3b 	bl	8004a8e <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002418:	f7ff fe40 	bl	800209c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800241c:	f003 fe2a 	bl	8006074 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002420:	e7fe      	b.n	8002420 <main+0x44>
 8002422:	bf00      	nop
 8002424:	20004190 	.word	0x20004190
 8002428:	20004298 	.word	0x20004298

0800242c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b094      	sub	sp, #80	; 0x50
 8002430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002432:	f107 0320 	add.w	r3, r7, #32
 8002436:	2230      	movs	r2, #48	; 0x30
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f005 f852 	bl	80074e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	4b29      	ldr	r3, [pc, #164]	; (80024fc <SystemClock_Config+0xd0>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	4a28      	ldr	r2, [pc, #160]	; (80024fc <SystemClock_Config+0xd0>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245e:	6413      	str	r3, [r2, #64]	; 0x40
 8002460:	4b26      	ldr	r3, [pc, #152]	; (80024fc <SystemClock_Config+0xd0>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800246c:	2300      	movs	r3, #0
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <SystemClock_Config+0xd4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002478:	4a21      	ldr	r2, [pc, #132]	; (8002500 <SystemClock_Config+0xd4>)
 800247a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <SystemClock_Config+0xd4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800248c:	2301      	movs	r3, #1
 800248e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002496:	2302      	movs	r3, #2
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800249a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80024a0:	2306      	movs	r3, #6
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024a4:	23a8      	movs	r3, #168	; 0xa8
 80024a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a8:	2302      	movs	r3, #2
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024ac:	2304      	movs	r3, #4
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b0:	f107 0320 	add.w	r3, r7, #32
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fe51 	bl	800415c <HAL_RCC_OscConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80024c0:	f000 f846 	bl	8002550 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c4:	230f      	movs	r3, #15
 80024c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c8:	2302      	movs	r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 f8aa 	bl	800463c <HAL_RCC_ClockConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80024ee:	f000 f82f 	bl	8002550 <Error_Handler>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3750      	adds	r7, #80	; 0x50
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000

08002504 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d109      	bne.n	800252a <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	4a09      	ldr	r2, [pc, #36]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800251e:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8002520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002524:	4808      	ldr	r0, [pc, #32]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002526:	f001 fde6 	bl	80040f6 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8002534:	f000 fcbe 	bl	8002eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40001c00 	.word	0x40001c00
 8002544:	200002e8 	.word	0x200002e8
 8002548:	40021000 	.word	0x40021000
 800254c:	40000c00 	.word	0x40000c00

08002550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002554:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002556:	e7fe      	b.n	8002556 <Error_Handler+0x6>

08002558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_MspInit+0x54>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_MspInit+0x54>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_MspInit+0x54>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_MspInit+0x54>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_MspInit+0x54>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_MspInit+0x54>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	210f      	movs	r1, #15
 800259a:	f06f 0001 	mvn.w	r0, #1
 800259e:	f001 fbbd 	bl	8003d1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80025c0:	2200      	movs	r2, #0
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	2032      	movs	r0, #50	; 0x32
 80025c6:	f001 fba9 	bl	8003d1c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80025ca:	2032      	movs	r0, #50	; 0x32
 80025cc:	f001 fbc2 	bl	8003d54 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <HAL_InitTick+0xa4>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <HAL_InitTick+0xa4>)
 80025da:	f043 0308 	orr.w	r3, r3, #8
 80025de:	6413      	str	r3, [r2, #64]	; 0x40
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_InitTick+0xa4>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025ec:	f107 0210 	add.w	r2, r7, #16
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 f9ec 	bl	80049d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80025fc:	f002 f9c2 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8002600:	4603      	mov	r3, r0
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	4a13      	ldr	r2, [pc, #76]	; (8002658 <HAL_InitTick+0xa8>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	3b01      	subs	r3, #1
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_InitTick+0xac>)
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_InitTick+0xb0>)
 8002618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_InitTick+0xac>)
 800261c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002620:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <HAL_InitTick+0xac>)
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_InitTick+0xac>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_InitTick+0xac>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002634:	4809      	ldr	r0, [pc, #36]	; (800265c <HAL_InitTick+0xac>)
 8002636:	f002 f9ff 	bl	8004a38 <HAL_TIM_Base_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002640:	4806      	ldr	r0, [pc, #24]	; (800265c <HAL_InitTick+0xac>)
 8002642:	f002 fa24 	bl	8004a8e <HAL_TIM_Base_Start_IT>
 8002646:	4603      	mov	r3, r0
 8002648:	e000      	b.n	800264c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3730      	adds	r7, #48	; 0x30
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40023800 	.word	0x40023800
 8002658:	431bde83 	.word	0x431bde83
 800265c:	20004258 	.word	0x20004258
 8002660:	40000c00 	.word	0x40000c00

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <NMI_Handler+0x4>

0800266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler+0x4>

08002676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <UsageFault_Handler+0x4>

08002682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002694:	2004      	movs	r0, #4
 8002696:	f001 fd49 	bl	800412c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <CAN1_TX_IRQHandler+0x10>)
 80026a6:	f001 f858 	bl	800375a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20004190 	.word	0x20004190

080026b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <CAN1_RX0_IRQHandler+0x10>)
 80026ba:	f001 f84e 	bl	800375a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20004190 	.word	0x20004190

080026c8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80026ce:	f002 fa6b 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20004298 	.word	0x20004298

080026dc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80026e2:	f002 fa61 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200042d8 	.word	0x200042d8

080026f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <TIM5_IRQHandler+0x10>)
 80026f6:	f002 fa57 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20004258 	.word	0x20004258

08002704 <_read>:
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e00a      	b.n	800272c <_read+0x28>
 8002716:	f3af 8000 	nop.w
 800271a:	4601      	mov	r1, r0
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	60ba      	str	r2, [r7, #8]
 8002722:	b2ca      	uxtb	r2, r1
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	429a      	cmp	r2, r3
 8002732:	dbf0      	blt.n	8002716 <_read+0x12>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <_write>:
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e009      	b.n	8002764 <_write+0x26>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	60ba      	str	r2, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fa7b 	bl	8002c54 <__io_putchar>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	dbf1      	blt.n	8002750 <_write+0x12>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_close>:
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_fstat>:
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	2300      	movs	r3, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <_isatty>:
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	2301      	movs	r3, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_lseek>:
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	2300      	movs	r3, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <_sbrk>:
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
 8002810:	f004 fe36 	bl	8007480 <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20030000 	.word	0x20030000
 8002840:	00000400 	.word	0x00000400
 8002844:	200002ec 	.word	0x200002ec
 8002848:	200043a0 	.word	0x200043a0

0800284c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <SystemInit+0x28>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <SystemInit+0x28>)
 8002858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800285c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SystemInit+0x28>)
 8002862:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002866:	609a      	str	r2, [r3, #8]
#endif
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287e:	f107 0320 	add.w	r3, r7, #32
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	60da      	str	r2, [r3, #12]
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	615a      	str	r2, [r3, #20]
 8002898:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800289a:	4b28      	ldr	r3, [pc, #160]	; (800293c <MX_TIM4_Init+0xc4>)
 800289c:	4a28      	ldr	r2, [pc, #160]	; (8002940 <MX_TIM4_Init+0xc8>)
 800289e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80028a0:	4b26      	ldr	r3, [pc, #152]	; (800293c <MX_TIM4_Init+0xc4>)
 80028a2:	2253      	movs	r2, #83	; 0x53
 80028a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <MX_TIM4_Init+0xc4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <MX_TIM4_Init+0xc4>)
 80028ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80028b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b4:	4b21      	ldr	r3, [pc, #132]	; (800293c <MX_TIM4_Init+0xc4>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <MX_TIM4_Init+0xc4>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80028c0:	481e      	ldr	r0, [pc, #120]	; (800293c <MX_TIM4_Init+0xc4>)
 80028c2:	f002 f908 	bl	8004ad6 <HAL_TIM_PWM_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80028cc:	f7ff fe40 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028d8:	f107 0320 	add.w	r3, r7, #32
 80028dc:	4619      	mov	r1, r3
 80028de:	4817      	ldr	r0, [pc, #92]	; (800293c <MX_TIM4_Init+0xc4>)
 80028e0:	f002 fdce 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80028ea:	f7ff fe31 	bl	8002550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ee:	2360      	movs	r3, #96	; 0x60
 80028f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80028f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2200      	movs	r2, #0
 8002904:	4619      	mov	r1, r3
 8002906:	480d      	ldr	r0, [pc, #52]	; (800293c <MX_TIM4_Init+0xc4>)
 8002908:	f002 fa56 	bl	8004db8 <HAL_TIM_PWM_ConfigChannel>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002912:	f7ff fe1d 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	2208      	movs	r2, #8
 800291a:	4619      	mov	r1, r3
 800291c:	4807      	ldr	r0, [pc, #28]	; (800293c <MX_TIM4_Init+0xc4>)
 800291e:	f002 fa4b 	bl	8004db8 <HAL_TIM_PWM_ConfigChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002928:	f7ff fe12 	bl	8002550 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800292c:	4803      	ldr	r0, [pc, #12]	; (800293c <MX_TIM4_Init+0xc4>)
 800292e:	f000 f92f 	bl	8002b90 <HAL_TIM_MspPostInit>

}
 8002932:	bf00      	nop
 8002934:	3728      	adds	r7, #40	; 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20004044 	.word	0x20004044
 8002940:	40000800 	.word	0x40000800

08002944 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
 8002958:	615a      	str	r2, [r3, #20]
 800295a:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_TIM12_Init+0x84>)
 800295e:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <MX_TIM12_Init+0x88>)
 8002960:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <MX_TIM12_Init+0x84>)
 8002964:	2223      	movs	r2, #35	; 0x23
 8002966:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <MX_TIM12_Init+0x84>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_TIM12_Init+0x84>)
 8002970:	f242 720f 	movw	r2, #9999	; 0x270f
 8002974:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_TIM12_Init+0x84>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <MX_TIM12_Init+0x84>)
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002982:	4811      	ldr	r0, [pc, #68]	; (80029c8 <MX_TIM12_Init+0x84>)
 8002984:	f002 f8a7 	bl	8004ad6 <HAL_TIM_PWM_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800298e:	f7ff fddf 	bl	8002550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002992:	2360      	movs	r3, #96	; 0x60
 8002994:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	2200      	movs	r2, #0
 80029a6:	4619      	mov	r1, r3
 80029a8:	4807      	ldr	r0, [pc, #28]	; (80029c8 <MX_TIM12_Init+0x84>)
 80029aa:	f002 fa05 	bl	8004db8 <HAL_TIM_PWM_ConfigChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80029b4:	f7ff fdcc 	bl	8002550 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80029b8:	4803      	ldr	r0, [pc, #12]	; (80029c8 <MX_TIM12_Init+0x84>)
 80029ba:	f000 f8e9 	bl	8002b90 <HAL_TIM_MspPostInit>

}
 80029be:	bf00      	nop
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200041f8 	.word	0x200041f8
 80029cc:	40001800 	.word	0x40001800

080029d0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <MX_TIM13_Init+0x40>)
 80029d6:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <MX_TIM13_Init+0x44>)
 80029d8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <MX_TIM13_Init+0x40>)
 80029dc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80029e0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <MX_TIM13_Init+0x40>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <MX_TIM13_Init+0x40>)
 80029ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80029ee:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <MX_TIM13_Init+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <MX_TIM13_Init+0x40>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80029fc:	4804      	ldr	r0, [pc, #16]	; (8002a10 <MX_TIM13_Init+0x40>)
 80029fe:	f002 f81b 	bl	8004a38 <HAL_TIM_Base_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002a08:	f7ff fda2 	bl	8002550 <Error_Handler>
  }

}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20004298 	.word	0x20004298
 8002a14:	40001c00 	.word	0x40001c00

08002a18 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_TIM14_Init+0x40>)
 8002a1e:	4a0f      	ldr	r2, [pc, #60]	; (8002a5c <MX_TIM14_Init+0x44>)
 8002a20:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <MX_TIM14_Init+0x40>)
 8002a24:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002a28:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_TIM14_Init+0x40>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_TIM14_Init+0x40>)
 8002a32:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a36:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <MX_TIM14_Init+0x40>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_TIM14_Init+0x40>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a44:	4804      	ldr	r0, [pc, #16]	; (8002a58 <MX_TIM14_Init+0x40>)
 8002a46:	f001 fff7 	bl	8004a38 <HAL_TIM_Base_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8002a50:	f7ff fd7e 	bl	8002550 <Error_Handler>
  }

}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200042d8 	.word	0x200042d8
 8002a5c:	40002000 	.word	0x40002000

08002a60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <HAL_TIM_PWM_MspInit+0x64>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_TIM_PWM_MspInit+0x68>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <HAL_TIM_PWM_MspInit+0x68>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_TIM_PWM_MspInit+0x68>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002a8e:	e012      	b.n	8002ab6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_TIM_PWM_MspInit+0x6c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10d      	bne.n	8002ab6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_TIM_PWM_MspInit+0x68>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_TIM_PWM_MspInit+0x68>)
 8002aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_TIM_PWM_MspInit+0x68>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40001800 	.word	0x40001800

08002ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a29      	ldr	r2, [pc, #164]	; (8002b84 <HAL_TIM_Base_MspInit+0xb4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d116      	bne.n	8002b10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_TIM_Base_MspInit+0xb8>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <HAL_TIM_Base_MspInit+0xb8>)
 8002aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_TIM_Base_MspInit+0xb8>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2105      	movs	r1, #5
 8002b02:	202c      	movs	r0, #44	; 0x2c
 8002b04:	f001 f90a 	bl	8003d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002b08:	202c      	movs	r0, #44	; 0x2c
 8002b0a:	f001 f923 	bl	8003d54 <HAL_NVIC_EnableIRQ>
 8002b0e:	e01a      	b.n	8002b46 <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_TIM_Base_MspInit+0xbc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d115      	bne.n	8002b46 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_TIM_Base_MspInit+0xb8>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <HAL_TIM_Base_MspInit+0xb8>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2a:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_TIM_Base_MspInit+0xb8>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2105      	movs	r1, #5
 8002b3a:	202d      	movs	r0, #45	; 0x2d
 8002b3c:	f001 f8ee 	bl	8003d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002b40:	202d      	movs	r0, #45	; 0x2d
 8002b42:	f001 f907 	bl	8003d54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <HAL_TIM_Base_MspInit+0xb4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d115      	bne.n	8002b7c <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_TIM_Base_MspInit+0xb8>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <HAL_TIM_Base_MspInit+0xb8>)
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_TIM_Base_MspInit+0xb8>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2101      	movs	r1, #1
 8002b70:	202c      	movs	r0, #44	; 0x2c
 8002b72:	f001 f8d3 	bl	8003d1c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002b76:	202c      	movs	r0, #44	; 0x2c
 8002b78:	f001 f8ec 	bl	8003d54 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40001c00 	.word	0x40001c00
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40002000 	.word	0x40002000

08002b90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <HAL_TIM_MspPostInit+0xb0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d11f      	bne.n	8002bf2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <HAL_TIM_MspPostInit+0xb4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <HAL_TIM_MspPostInit+0xb4>)
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_TIM_MspPostInit+0xb4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8002bce:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002be0:	2302      	movs	r3, #2
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	4619      	mov	r1, r3
 8002bea:	4817      	ldr	r0, [pc, #92]	; (8002c48 <HAL_TIM_MspPostInit+0xb8>)
 8002bec:	f001 f8c0 	bl	8003d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002bf0:	e022      	b.n	8002c38 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a15      	ldr	r2, [pc, #84]	; (8002c4c <HAL_TIM_MspPostInit+0xbc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d11d      	bne.n	8002c38 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <HAL_TIM_MspPostInit+0xb4>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_TIM_MspPostInit+0xb4>)
 8002c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_TIM_MspPostInit+0xb4>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c18:	2340      	movs	r3, #64	; 0x40
 8002c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002c28:	2309      	movs	r3, #9
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4619      	mov	r1, r3
 8002c32:	4807      	ldr	r0, [pc, #28]	; (8002c50 <HAL_TIM_MspPostInit+0xc0>)
 8002c34:	f001 f89c 	bl	8003d70 <HAL_GPIO_Init>
}
 8002c38:	bf00      	nop
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40020c00 	.word	0x40020c00
 8002c4c:	40001800 	.word	0x40001800
 8002c50:	40021c00 	.word	0x40021c00

08002c54 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&husart6, (uint8_t *)&ch, 1, 0xFFFF);
 8002c5c:	1d39      	adds	r1, r7, #4
 8002c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c62:	2201      	movs	r2, #1
 8002c64:	4803      	ldr	r0, [pc, #12]	; (8002c74 <__io_putchar+0x20>)
 8002c66:	f002 fce8 	bl	800563a <HAL_UART_Transmit>

  return ch;
 8002c6a:	687b      	ldr	r3, [r7, #4]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20004318 	.word	0x20004318

08002c78 <MX_UART7_Init>:
// For RM competition and latest A type board, use huart7
UART_HandleTypeDef husart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <MX_UART7_Init+0x4c>)
 8002c7e:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <MX_UART7_Init+0x50>)
 8002c80:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <MX_UART7_Init+0x4c>)
 8002c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c88:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <MX_UART7_Init+0x4c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <MX_UART7_Init+0x4c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <MX_UART7_Init+0x4c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <MX_UART7_Init+0x4c>)
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <MX_UART7_Init+0x4c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <MX_UART7_Init+0x4c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <MX_UART7_Init+0x4c>)
 8002cb0:	f002 fc76 	bl	80055a0 <HAL_UART_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002cba:	f7ff fc49 	bl	8002550 <Error_Handler>
  }

}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20004358 	.word	0x20004358
 8002cc8:	40007800 	.word	0x40007800

08002ccc <MX_USART6_Init>:

/* USART6 init function */
void MX_USART6_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0

  husart6.Instance = USART6;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <MX_USART6_Init+0x4c>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <MX_USART6_Init+0x50>)
 8002cd4:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <MX_USART6_Init+0x4c>)
 8002cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cdc:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <MX_USART6_Init+0x4c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = UART_STOPBITS_1;
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <MX_USART6_Init+0x4c>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = UART_PARITY_NONE;
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <MX_USART6_Init+0x4c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = UART_MODE_TX_RX;
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_USART6_Init+0x4c>)
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	615a      	str	r2, [r3, #20]
  husart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cf6:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <MX_USART6_Init+0x4c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
  husart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <MX_USART6_Init+0x4c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&husart6) != HAL_OK)
 8002d02:	4805      	ldr	r0, [pc, #20]	; (8002d18 <MX_USART6_Init+0x4c>)
 8002d04:	f002 fc4c 	bl	80055a0 <HAL_UART_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_USART6_Init+0x46>
  {
    Error_Handler();
 8002d0e:	f7ff fc1f 	bl	8002550 <Error_Handler>
  }

}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20004318 	.word	0x20004318
 8002d1c:	40011400 	.word	0x40011400

08002d20 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	; 0x30
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a32      	ldr	r2, [pc, #200]	; (8002e08 <HAL_UART_MspInit+0xe8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d12c      	bne.n	8002d9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a30      	ldr	r2, [pc, #192]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002d68:	f043 0310 	orr.w	r3, r3, #16
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002d7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d84:	2301      	movs	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	4619      	mov	r1, r3
 8002d96:	481e      	ldr	r0, [pc, #120]	; (8002e10 <HAL_UART_MspInit+0xf0>)
 8002d98:	f000 ffea 	bl	8003d70 <HAL_GPIO_Init>
  }

  if(uartHandle->Instance==USART6)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <HAL_UART_MspInit+0xf4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d12c      	bne.n	8002e00 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
	/* UART7 clock enable */
	__HAL_RCC_USART6_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002db0:	f043 0320 	orr.w	r3, r3, #32
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_UART_MspInit+0xec>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
	/**USART6 GPIO Configuration
	  PG14     ------> USART6_TX
	  PG9     ------> USART6_RX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002dde:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002de2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de8:	2301      	movs	r3, #1
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002df0:	2308      	movs	r3, #8
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4807      	ldr	r0, [pc, #28]	; (8002e18 <HAL_UART_MspInit+0xf8>)
 8002dfc:	f000 ffb8 	bl	8003d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002e00:	bf00      	nop
 8002e02:	3730      	adds	r7, #48	; 0x30
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40007800 	.word	0x40007800
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40011400 	.word	0x40011400
 8002e18:	40021800 	.word	0x40021800

08002e1c <Reset_Handler>:
 8002e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e54 <LoopFillZerobss+0x14>
 8002e20:	2100      	movs	r1, #0
 8002e22:	e003      	b.n	8002e2c <LoopCopyDataInit>

08002e24 <CopyDataInit>:
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <LoopFillZerobss+0x18>)
 8002e26:	585b      	ldr	r3, [r3, r1]
 8002e28:	5043      	str	r3, [r0, r1]
 8002e2a:	3104      	adds	r1, #4

08002e2c <LoopCopyDataInit>:
 8002e2c:	480b      	ldr	r0, [pc, #44]	; (8002e5c <LoopFillZerobss+0x1c>)
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <LoopFillZerobss+0x20>)
 8002e30:	1842      	adds	r2, r0, r1
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3f6      	bcc.n	8002e24 <CopyDataInit>
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <LoopFillZerobss+0x24>)
 8002e38:	e002      	b.n	8002e40 <LoopFillZerobss>

08002e3a <FillZerobss>:
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f842 3b04 	str.w	r3, [r2], #4

08002e40 <LoopFillZerobss>:
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <LoopFillZerobss+0x28>)
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d3f9      	bcc.n	8002e3a <FillZerobss>
 8002e46:	f7ff fd01 	bl	800284c <SystemInit>
 8002e4a:	f004 fb1f 	bl	800748c <__libc_init_array>
 8002e4e:	f7ff fac5 	bl	80023dc <main>
 8002e52:	4770      	bx	lr
 8002e54:	20030000 	.word	0x20030000
 8002e58:	080096b8 	.word	0x080096b8
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000078 	.word	0x20000078
 8002e64:	20000078 	.word	0x20000078
 8002e68:	200043a0 	.word	0x200043a0

08002e6c <ADC_IRQHandler>:
 8002e6c:	e7fe      	b.n	8002e6c <ADC_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <HAL_Init+0x40>)
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_Init+0x40>)
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_Init+0x40>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f000 ff34 	bl	8003d06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7ff fb86 	bl	80025b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea4:	f7ff fb58 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00

08002eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_IncTick+0x20>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_IncTick+0x24>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <HAL_IncTick+0x24>)
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000008 	.word	0x20000008
 8002ed8:	20004398 	.word	0x20004398

08002edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_GetTick+0x14>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20004398 	.word	0x20004398

08002ef4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0ed      	b.n	80030e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe ffea 	bl	8001eec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0202 	bic.w	r2, r2, #2
 8002f26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f28:	f7ff ffd8 	bl	8002edc <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f2e:	e012      	b.n	8002f56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f30:	f7ff ffd4 	bl	8002edc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b0a      	cmp	r3, #10
 8002f3c:	d90b      	bls.n	8002f56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2205      	movs	r2, #5
 8002f4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0c5      	b.n	80030e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e5      	bne.n	8002f30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f74:	f7ff ffb2 	bl	8002edc <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f7a:	e012      	b.n	8002fa2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f7c:	f7ff ffae 	bl	8002edc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b0a      	cmp	r3, #10
 8002f88:	d90b      	bls.n	8002fa2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2205      	movs	r2, #5
 8002f9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e09f      	b.n	80030e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0e5      	beq.n	8002f7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7e1b      	ldrb	r3, [r3, #24]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e007      	b.n	8002fda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7e5b      	ldrb	r3, [r3, #25]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7e9b      	ldrb	r3, [r3, #26]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e007      	b.n	800302e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0220 	bic.w	r2, r2, #32
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7edb      	ldrb	r3, [r3, #27]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0210 	bic.w	r2, r2, #16
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e007      	b.n	8003058 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0210 	orr.w	r2, r2, #16
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7f1b      	ldrb	r3, [r3, #28]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d108      	bne.n	8003072 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0208 	orr.w	r2, r2, #8
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e007      	b.n	8003082 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0208 	bic.w	r2, r2, #8
 8003080:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7f5b      	ldrb	r3, [r3, #29]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d108      	bne.n	800309c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0204 	orr.w	r2, r2, #4
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e007      	b.n	80030ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0204 	bic.w	r2, r2, #4
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	ea42 0103 	orr.w	r1, r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003102:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d003      	beq.n	8003112 <HAL_CAN_ConfigFilter+0x26>
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b02      	cmp	r3, #2
 800310e:	f040 80be 	bne.w	800328e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003112:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003114:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800312c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	431a      	orrs	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2201      	movs	r2, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	43db      	mvns	r3, r3
 8003164:	401a      	ands	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d123      	bne.n	80031bc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43db      	mvns	r3, r3
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003196:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3248      	adds	r2, #72	; 0x48
 800319c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	3348      	adds	r3, #72	; 0x48
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d122      	bne.n	800320a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3248      	adds	r2, #72	; 0x48
 80031ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	3348      	adds	r3, #72	; 0x48
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	401a      	ands	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003224:	e007      	b.n	8003236 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	431a      	orrs	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	43db      	mvns	r3, r3
 8003248:	401a      	ands	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003250:	e007      	b.n	8003262 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	431a      	orrs	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	431a      	orrs	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003280:	f023 0201 	bic.w	r2, r3, #1
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e006      	b.n	800329c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
  }
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40006400 	.word	0x40006400

080032ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d12e      	bne.n	800331e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032d8:	f7ff fe00 	bl	8002edc <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032de:	e012      	b.n	8003306 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032e0:	f7ff fdfc 	bl	8002edc <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b0a      	cmp	r3, #10
 80032ec:	d90b      	bls.n	8003306 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2205      	movs	r2, #5
 80032fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e012      	b.n	800332c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e5      	bne.n	80032e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	e006      	b.n	800332c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003348:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d003      	beq.n	8003360 <HAL_CAN_AddTxMessage+0x2c>
 8003358:	7ffb      	ldrb	r3, [r7, #31]
 800335a:	2b02      	cmp	r3, #2
 800335c:	f040 80b8 	bne.w	80034d0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80a0 	beq.w	80034c0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	0e1b      	lsrs	r3, r3, #24
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d907      	bls.n	80033a0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e09e      	b.n	80034de <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033a0:	2201      	movs	r2, #1
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	409a      	lsls	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033bc:	68f9      	ldr	r1, [r7, #12]
 80033be:	6809      	ldr	r1, [r1, #0]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3318      	adds	r3, #24
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	440b      	add	r3, r1
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e00f      	b.n	80033ee <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3318      	adds	r3, #24
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	440b      	add	r3, r1
 80033ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3318      	adds	r3, #24
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	440b      	add	r3, r1
 80033fe:	3304      	adds	r3, #4
 8003400:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	7d1b      	ldrb	r3, [r3, #20]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d111      	bne.n	800342e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	3318      	adds	r3, #24
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	3304      	adds	r3, #4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	6811      	ldr	r1, [r2, #0]
 800341e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3318      	adds	r3, #24
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	440b      	add	r3, r1
 800342a:	3304      	adds	r3, #4
 800342c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3307      	adds	r3, #7
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	061a      	lsls	r2, r3, #24
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3306      	adds	r3, #6
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3305      	adds	r3, #5
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	4313      	orrs	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	3204      	adds	r2, #4
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	4610      	mov	r0, r2
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	6811      	ldr	r1, [r2, #0]
 8003456:	ea43 0200 	orr.w	r2, r3, r0
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	440b      	add	r3, r1
 8003460:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003464:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3303      	adds	r3, #3
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	061a      	lsls	r2, r3, #24
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3302      	adds	r3, #2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3301      	adds	r3, #1
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	4313      	orrs	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	4610      	mov	r0, r2
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	6811      	ldr	r1, [r2, #0]
 800348c:	ea43 0200 	orr.w	r2, r3, r0
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	440b      	add	r3, r1
 8003496:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800349a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3318      	adds	r3, #24
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	4413      	add	r3, r2
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	6811      	ldr	r1, [r2, #0]
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3318      	adds	r3, #24
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	440b      	add	r3, r1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e00e      	b.n	80034de <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e006      	b.n	80034de <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d003      	beq.n	800350e <HAL_CAN_GetRxMessage+0x24>
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b02      	cmp	r3, #2
 800350a:	f040 80f3 	bne.w	80036f4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10e      	bne.n	8003532 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0e7      	b.n	8003702 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0d8      	b.n	8003702 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	331b      	adds	r3, #27
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	4413      	add	r3, r2
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0204 	and.w	r2, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	331b      	adds	r3, #27
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	4413      	add	r3, r2
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0d5b      	lsrs	r3, r3, #21
 800357e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	331b      	adds	r3, #27
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	4413      	add	r3, r2
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	08db      	lsrs	r3, r3, #3
 8003598:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	331b      	adds	r3, #27
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0202 	and.w	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	331b      	adds	r3, #27
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 020f 	and.w	r2, r3, #15
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	331b      	adds	r3, #27
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	331b      	adds	r3, #27
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	0c1b      	lsrs	r3, r3, #16
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	4413      	add	r3, r2
 8003608:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	4413      	add	r3, r2
 800361e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0a1a      	lsrs	r2, r3, #8
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	4413      	add	r3, r2
 8003638:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	0c1a      	lsrs	r2, r3, #16
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	3302      	adds	r3, #2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0e1a      	lsrs	r2, r3, #24
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	3303      	adds	r3, #3
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	4413      	add	r3, r2
 800366c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	3304      	adds	r3, #4
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0a1a      	lsrs	r2, r3, #8
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	3305      	adds	r3, #5
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0c1a      	lsrs	r2, r3, #16
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	3306      	adds	r3, #6
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0e1a      	lsrs	r2, r3, #24
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	3307      	adds	r3, #7
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d108      	bne.n	80036e0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0220 	orr.w	r2, r2, #32
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	e007      	b.n	80036f0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0220 	orr.w	r2, r2, #32
 80036ee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e006      	b.n	8003702 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d002      	beq.n	800372c <HAL_CAN_ActivateNotification+0x1e>
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d109      	bne.n	8003740 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6959      	ldr	r1, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e006      	b.n	800374e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
  }
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b08a      	sub	sp, #40	; 0x28
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d07c      	beq.n	800389a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d023      	beq.n	80037f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2201      	movs	r2, #1
 80037b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f97d 	bl	8003abc <HAL_CAN_TxMailbox0CompleteCallback>
 80037c2:	e016      	b.n	80037f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	e00c      	b.n	80037f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	e002      	b.n	80037f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f983 	bl	8003af8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d024      	beq.n	8003846 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f95d 	bl	8003ad0 <HAL_CAN_TxMailbox1CompleteCallback>
 8003816:	e016      	b.n	8003846 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	e00c      	b.n	8003846 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	e002      	b.n	8003846 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f963 	bl	8003b0c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d024      	beq.n	800389a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003858:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f93d 	bl	8003ae4 <HAL_CAN_TxMailbox2CompleteCallback>
 800386a:	e016      	b.n	800389a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	e00c      	b.n	800389a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	e002      	b.n	800389a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f943 	bl	8003b20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00c      	beq.n	80038be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2210      	movs	r2, #16
 80038bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2208      	movs	r2, #8
 80038d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f92a 	bl	8003b34 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7fe fb93 	bl	8002024 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003918:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2210      	movs	r2, #16
 8003920:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d006      	beq.n	8003944 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2208      	movs	r2, #8
 800393c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f90c 	bl	8003b5c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f8f3 	bl	8003b48 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	d006      	beq.n	8003984 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2210      	movs	r2, #16
 800397c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8f6 	bl	8003b70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d006      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2208      	movs	r2, #8
 800399e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f8ef 	bl	8003b84 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d075      	beq.n	8003a9c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d06c      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d03d      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d038      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a28:	2b30      	cmp	r3, #48	; 0x30
 8003a2a:	d017      	beq.n	8003a5c <HAL_CAN_IRQHandler+0x302>
 8003a2c:	2b30      	cmp	r3, #48	; 0x30
 8003a2e:	d804      	bhi.n	8003a3a <HAL_CAN_IRQHandler+0x2e0>
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d009      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x2ee>
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d00c      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a38:	e024      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003a3a:	2b50      	cmp	r3, #80	; 0x50
 8003a3c:	d018      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x316>
 8003a3e:	2b60      	cmp	r3, #96	; 0x60
 8003a40:	d01b      	beq.n	8003a7a <HAL_CAN_IRQHandler+0x320>
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d00f      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003a46:	e01d      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f043 0308 	orr.w	r3, r3, #8
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a50:	e018      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f043 0310 	orr.w	r3, r3, #16
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a5a:	e013      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f043 0320 	orr.w	r3, r3, #32
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a64:	e00e      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a6e:	e009      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a78:	e004      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a82:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f872 	bl	8003b98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	3728      	adds	r7, #40	; 0x28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bde:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	60d3      	str	r3, [r2, #12]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <__NVIC_GetPriorityGrouping+0x18>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	f003 0307 	and.w	r3, r3, #7
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	db0b      	blt.n	8003c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	f003 021f 	and.w	r2, r3, #31
 8003c28:	4907      	ldr	r1, [pc, #28]	; (8003c48 <__NVIC_EnableIRQ+0x38>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2001      	movs	r0, #1
 8003c32:	fa00 f202 	lsl.w	r2, r0, r2
 8003c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100

08003c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	db0a      	blt.n	8003c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	490c      	ldr	r1, [pc, #48]	; (8003c98 <__NVIC_SetPriority+0x4c>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c74:	e00a      	b.n	8003c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4908      	ldr	r1, [pc, #32]	; (8003c9c <__NVIC_SetPriority+0x50>)
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	3b04      	subs	r3, #4
 8003c84:	0112      	lsls	r2, r2, #4
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	440b      	add	r3, r1
 8003c8a:	761a      	strb	r2, [r3, #24]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000e100 	.word	0xe000e100
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f1c3 0307 	rsb	r3, r3, #7
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	bf28      	it	cs
 8003cbe:	2304      	movcs	r3, #4
 8003cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d902      	bls.n	8003cd0 <NVIC_EncodePriority+0x30>
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3b03      	subs	r3, #3
 8003cce:	e000      	b.n	8003cd2 <NVIC_EncodePriority+0x32>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	43d9      	mvns	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf8:	4313      	orrs	r3, r2
         );
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3724      	adds	r7, #36	; 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ff4c 	bl	8003bac <__NVIC_SetPriorityGrouping>
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d2e:	f7ff ff61 	bl	8003bf4 <__NVIC_GetPriorityGrouping>
 8003d32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	6978      	ldr	r0, [r7, #20]
 8003d3a:	f7ff ffb1 	bl	8003ca0 <NVIC_EncodePriority>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff80 	bl	8003c4c <__NVIC_SetPriority>
}
 8003d4c:	bf00      	nop
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff54 	bl	8003c10 <__NVIC_EnableIRQ>
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b089      	sub	sp, #36	; 0x24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	e177      	b.n	800407c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	f040 8166 	bne.w	8004076 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d00b      	beq.n	8003dca <HAL_GPIO_Init+0x5a>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d007      	beq.n	8003dca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dbe:	2b11      	cmp	r3, #17
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b12      	cmp	r3, #18
 8003dc8:	d130      	bne.n	8003e2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e00:	2201      	movs	r2, #1
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 0201 	and.w	r2, r3, #1
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d003      	beq.n	8003e6c <HAL_GPIO_Init+0xfc>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b12      	cmp	r3, #18
 8003e6a:	d123      	bne.n	8003eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	08da      	lsrs	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3208      	adds	r2, #8
 8003e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	220f      	movs	r2, #15
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	08da      	lsrs	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3208      	adds	r2, #8
 8003eae:	69b9      	ldr	r1, [r7, #24]
 8003eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0203 	and.w	r2, r3, #3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80c0 	beq.w	8004076 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_GPIO_Init+0x320>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	4a64      	ldr	r2, [pc, #400]	; (8004090 <HAL_GPIO_Init+0x320>)
 8003f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f04:	6453      	str	r3, [r2, #68]	; 0x44
 8003f06:	4b62      	ldr	r3, [pc, #392]	; (8004090 <HAL_GPIO_Init+0x320>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f12:	4a60      	ldr	r2, [pc, #384]	; (8004094 <HAL_GPIO_Init+0x324>)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	3302      	adds	r3, #2
 8003f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	220f      	movs	r2, #15
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a57      	ldr	r2, [pc, #348]	; (8004098 <HAL_GPIO_Init+0x328>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d037      	beq.n	8003fae <HAL_GPIO_Init+0x23e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a56      	ldr	r2, [pc, #344]	; (800409c <HAL_GPIO_Init+0x32c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d031      	beq.n	8003faa <HAL_GPIO_Init+0x23a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a55      	ldr	r2, [pc, #340]	; (80040a0 <HAL_GPIO_Init+0x330>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d02b      	beq.n	8003fa6 <HAL_GPIO_Init+0x236>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a54      	ldr	r2, [pc, #336]	; (80040a4 <HAL_GPIO_Init+0x334>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d025      	beq.n	8003fa2 <HAL_GPIO_Init+0x232>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a53      	ldr	r2, [pc, #332]	; (80040a8 <HAL_GPIO_Init+0x338>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01f      	beq.n	8003f9e <HAL_GPIO_Init+0x22e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a52      	ldr	r2, [pc, #328]	; (80040ac <HAL_GPIO_Init+0x33c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d019      	beq.n	8003f9a <HAL_GPIO_Init+0x22a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a51      	ldr	r2, [pc, #324]	; (80040b0 <HAL_GPIO_Init+0x340>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_GPIO_Init+0x226>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a50      	ldr	r2, [pc, #320]	; (80040b4 <HAL_GPIO_Init+0x344>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00d      	beq.n	8003f92 <HAL_GPIO_Init+0x222>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4f      	ldr	r2, [pc, #316]	; (80040b8 <HAL_GPIO_Init+0x348>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <HAL_GPIO_Init+0x21e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4e      	ldr	r2, [pc, #312]	; (80040bc <HAL_GPIO_Init+0x34c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <HAL_GPIO_Init+0x21a>
 8003f86:	2309      	movs	r3, #9
 8003f88:	e012      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003f8a:	230a      	movs	r3, #10
 8003f8c:	e010      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003f8e:	2308      	movs	r3, #8
 8003f90:	e00e      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003f92:	2307      	movs	r3, #7
 8003f94:	e00c      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003f96:	2306      	movs	r3, #6
 8003f98:	e00a      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003f9a:	2305      	movs	r3, #5
 8003f9c:	e008      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	e006      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e004      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e002      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_GPIO_Init+0x240>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	f002 0203 	and.w	r2, r2, #3
 8003fb6:	0092      	lsls	r2, r2, #2
 8003fb8:	4093      	lsls	r3, r2
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc0:	4934      	ldr	r1, [pc, #208]	; (8004094 <HAL_GPIO_Init+0x324>)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fce:	4b3c      	ldr	r3, [pc, #240]	; (80040c0 <HAL_GPIO_Init+0x350>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff2:	4a33      	ldr	r2, [pc, #204]	; (80040c0 <HAL_GPIO_Init+0x350>)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_GPIO_Init+0x350>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800401c:	4a28      	ldr	r2, [pc, #160]	; (80040c0 <HAL_GPIO_Init+0x350>)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_GPIO_Init+0x350>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004046:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <HAL_GPIO_Init+0x350>)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800404c:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <HAL_GPIO_Init+0x350>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004070:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <HAL_GPIO_Init+0x350>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3301      	adds	r3, #1
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b0f      	cmp	r3, #15
 8004080:	f67f ae84 	bls.w	8003d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004084:	bf00      	nop
 8004086:	3724      	adds	r7, #36	; 0x24
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40023800 	.word	0x40023800
 8004094:	40013800 	.word	0x40013800
 8004098:	40020000 	.word	0x40020000
 800409c:	40020400 	.word	0x40020400
 80040a0:	40020800 	.word	0x40020800
 80040a4:	40020c00 	.word	0x40020c00
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40021400 	.word	0x40021400
 80040b0:	40021800 	.word	0x40021800
 80040b4:	40021c00 	.word	0x40021c00
 80040b8:	40022000 	.word	0x40022000
 80040bc:	40022400 	.word	0x40022400
 80040c0:	40013c00 	.word	0x40013c00

080040c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
 80040d0:	4613      	mov	r3, r2
 80040d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040d4:	787b      	ldrb	r3, [r7, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040e0:	e003      	b.n	80040ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040e2:	887b      	ldrh	r3, [r7, #2]
 80040e4:	041a      	lsls	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	619a      	str	r2, [r3, #24]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	887b      	ldrh	r3, [r7, #2]
 8004108:	401a      	ands	r2, r3
 800410a:	887b      	ldrh	r3, [r7, #2]
 800410c:	429a      	cmp	r2, r3
 800410e:	d104      	bne.n	800411a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004110:	887b      	ldrh	r3, [r7, #2]
 8004112:	041a      	lsls	r2, r3, #16
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004118:	e002      	b.n	8004120 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	619a      	str	r2, [r3, #24]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004142:	4a05      	ldr	r2, [pc, #20]	; (8004158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe f908 	bl	8002360 <HAL_GPIO_EXTI_Callback>
  }
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40013c00 	.word	0x40013c00

0800415c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e25b      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d075      	beq.n	8004266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417a:	4ba3      	ldr	r3, [pc, #652]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004186:	4ba0      	ldr	r3, [pc, #640]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418e:	2b08      	cmp	r3, #8
 8004190:	d112      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4b9d      	ldr	r3, [pc, #628]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419e:	d10b      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	4b99      	ldr	r3, [pc, #612]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d05b      	beq.n	8004264 <HAL_RCC_OscConfig+0x108>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d157      	bne.n	8004264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e236      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d106      	bne.n	80041d0 <HAL_RCC_OscConfig+0x74>
 80041c2:	4b91      	ldr	r3, [pc, #580]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a90      	ldr	r2, [pc, #576]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e01d      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x98>
 80041da:	4b8b      	ldr	r3, [pc, #556]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a8a      	ldr	r2, [pc, #552]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b88      	ldr	r3, [pc, #544]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a87      	ldr	r2, [pc, #540]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041f4:	4b84      	ldr	r3, [pc, #528]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a83      	ldr	r2, [pc, #524]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b81      	ldr	r3, [pc, #516]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a80      	ldr	r2, [pc, #512]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fe fe62 	bl	8002edc <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421c:	f7fe fe5e 	bl	8002edc <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e1fb      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	4b76      	ldr	r3, [pc, #472]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0xc0>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe fe4e 	bl	8002edc <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fe fe4a 	bl	8002edc <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e1e7      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004256:	4b6c      	ldr	r3, [pc, #432]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0xe8>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d063      	beq.n	800433a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004272:	4b65      	ldr	r3, [pc, #404]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427e:	4b62      	ldr	r3, [pc, #392]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004286:	2b08      	cmp	r3, #8
 8004288:	d11c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d116      	bne.n	80042c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004296:	4b5c      	ldr	r3, [pc, #368]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_RCC_OscConfig+0x152>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e1bb      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ae:	4b56      	ldr	r3, [pc, #344]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4952      	ldr	r1, [pc, #328]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c2:	e03a      	b.n	800433a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042cc:	4b4f      	ldr	r3, [pc, #316]	; (800440c <HAL_RCC_OscConfig+0x2b0>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fe fe03 	bl	8002edc <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042da:	f7fe fdff 	bl	8002edc <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e19c      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ec:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4940      	ldr	r1, [pc, #256]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
 800430c:	e015      	b.n	800433a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCC_OscConfig+0x2b0>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe fde2 	bl	8002edc <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431c:	f7fe fdde 	bl	8002edc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e17b      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d030      	beq.n	80043a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d016      	beq.n	800437c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_RCC_OscConfig+0x2b4>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fe fdc2 	bl	8002edc <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435c:	f7fe fdbe 	bl	8002edc <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e15b      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x200>
 800437a:	e015      	b.n	80043a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_OscConfig+0x2b4>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004382:	f7fe fdab 	bl	8002edc <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438a:	f7fe fda7 	bl	8002edc <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e144      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 800439e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80a0 	beq.w	80044f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10f      	bne.n	80043e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d4:	6413      	str	r3, [r2, #64]	; 0x40
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x2b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d121      	bne.n	8004436 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_RCC_OscConfig+0x2b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a07      	ldr	r2, [pc, #28]	; (8004414 <HAL_RCC_OscConfig+0x2b8>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fe:	f7fe fd6d 	bl	8002edc <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	e011      	b.n	800442a <HAL_RCC_OscConfig+0x2ce>
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	42470000 	.word	0x42470000
 8004410:	42470e80 	.word	0x42470e80
 8004414:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004418:	f7fe fd60 	bl	8002edc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e0fd      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	4b81      	ldr	r3, [pc, #516]	; (8004630 <HAL_RCC_OscConfig+0x4d4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d106      	bne.n	800444c <HAL_RCC_OscConfig+0x2f0>
 800443e:	4b7d      	ldr	r3, [pc, #500]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a7c      	ldr	r2, [pc, #496]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
 800444a:	e01c      	b.n	8004486 <HAL_RCC_OscConfig+0x32a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b05      	cmp	r3, #5
 8004452:	d10c      	bne.n	800446e <HAL_RCC_OscConfig+0x312>
 8004454:	4b77      	ldr	r3, [pc, #476]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	4a76      	ldr	r2, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 800445a:	f043 0304 	orr.w	r3, r3, #4
 800445e:	6713      	str	r3, [r2, #112]	; 0x70
 8004460:	4b74      	ldr	r3, [pc, #464]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a73      	ldr	r2, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
 800446c:	e00b      	b.n	8004486 <HAL_RCC_OscConfig+0x32a>
 800446e:	4b71      	ldr	r3, [pc, #452]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	4a70      	ldr	r2, [pc, #448]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	6713      	str	r3, [r2, #112]	; 0x70
 800447a:	4b6e      	ldr	r3, [pc, #440]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a6d      	ldr	r2, [pc, #436]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004480:	f023 0304 	bic.w	r3, r3, #4
 8004484:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d015      	beq.n	80044ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f7fe fd25 	bl	8002edc <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004494:	e00a      	b.n	80044ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fe fd21 	bl	8002edc <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e0bc      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ac:	4b61      	ldr	r3, [pc, #388]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ee      	beq.n	8004496 <HAL_RCC_OscConfig+0x33a>
 80044b8:	e014      	b.n	80044e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ba:	f7fe fd0f 	bl	8002edc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fe fd0b 	bl	8002edc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e0a6      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d8:	4b56      	ldr	r3, [pc, #344]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1ee      	bne.n	80044c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d105      	bne.n	80044f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ea:	4b52      	ldr	r3, [pc, #328]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	4a51      	ldr	r2, [pc, #324]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 80044f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8092 	beq.w	8004624 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004500:	4b4c      	ldr	r3, [pc, #304]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b08      	cmp	r3, #8
 800450a:	d05c      	beq.n	80045c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d141      	bne.n	8004598 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004514:	4b48      	ldr	r3, [pc, #288]	; (8004638 <HAL_RCC_OscConfig+0x4dc>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451a:	f7fe fcdf 	bl	8002edc <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004522:	f7fe fcdb 	bl	8002edc <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e078      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004534:	4b3f      	ldr	r3, [pc, #252]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	019b      	lsls	r3, r3, #6
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	3b01      	subs	r3, #1
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	061b      	lsls	r3, r3, #24
 8004564:	4933      	ldr	r1, [pc, #204]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800456a:	4b33      	ldr	r3, [pc, #204]	; (8004638 <HAL_RCC_OscConfig+0x4dc>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fe fcb4 	bl	8002edc <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004578:	f7fe fcb0 	bl	8002edc <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e04d      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458a:	4b2a      	ldr	r3, [pc, #168]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x41c>
 8004596:	e045      	b.n	8004624 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004598:	4b27      	ldr	r3, [pc, #156]	; (8004638 <HAL_RCC_OscConfig+0x4dc>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fe fc9d 	bl	8002edc <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fe fc99 	bl	8002edc <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e036      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b8:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x44a>
 80045c4:	e02e      	b.n	8004624 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e029      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045d2:	4b18      	ldr	r3, [pc, #96]	; (8004634 <HAL_RCC_OscConfig+0x4d8>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d11c      	bne.n	8004620 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d115      	bne.n	8004620 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004600:	4293      	cmp	r3, r2
 8004602:	d10d      	bne.n	8004620 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d106      	bne.n	8004620 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40007000 	.word	0x40007000
 8004634:	40023800 	.word	0x40023800
 8004638:	42470060 	.word	0x42470060

0800463c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0cc      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004650:	4b68      	ldr	r3, [pc, #416]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d90c      	bls.n	8004678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b63      	ldr	r3, [pc, #396]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0b8      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004690:	4b59      	ldr	r3, [pc, #356]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4a58      	ldr	r2, [pc, #352]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800469a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a8:	4b53      	ldr	r3, [pc, #332]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a52      	ldr	r2, [pc, #328]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b4:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	494d      	ldr	r1, [pc, #308]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d044      	beq.n	800475c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046da:	4b47      	ldr	r3, [pc, #284]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d119      	bne.n	800471a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e07f      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d003      	beq.n	80046fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e06f      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470a:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e067      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800471a:	4b37      	ldr	r3, [pc, #220]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 0203 	bic.w	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4934      	ldr	r1, [pc, #208]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800472c:	f7fe fbd6 	bl	8002edc <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	e00a      	b.n	800474a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004734:	f7fe fbd2 	bl	8002edc <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e04f      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 020c 	and.w	r2, r3, #12
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	429a      	cmp	r2, r3
 800475a:	d1eb      	bne.n	8004734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800475c:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d20c      	bcs.n	8004784 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e032      	b.n	80047ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004790:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4916      	ldr	r1, [pc, #88]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	490e      	ldr	r1, [pc, #56]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047c2:	f000 f821 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 80047c6:	4601      	mov	r1, r0
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	5cd3      	ldrb	r3, [r2, r3]
 80047d6:	fa21 f303 	lsr.w	r3, r1, r3
 80047da:	4a09      	ldr	r2, [pc, #36]	; (8004800 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_RCC_ClockConfig+0x1c8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd fee4 	bl	80025b0 <HAL_InitTick>

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023c00 	.word	0x40023c00
 80047f8:	40023800 	.word	0x40023800
 80047fc:	080095b4 	.word	0x080095b4
 8004800:	20000000 	.word	0x20000000
 8004804:	20000004 	.word	0x20000004

08004808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	2300      	movs	r3, #0
 8004818:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800481e:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCC_GetSysClockFreq+0x158>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b04      	cmp	r3, #4
 8004828:	d007      	beq.n	800483a <HAL_RCC_GetSysClockFreq+0x32>
 800482a:	2b08      	cmp	r3, #8
 800482c:	d008      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x38>
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 808d 	bne.w	800494e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004834:	4b4b      	ldr	r3, [pc, #300]	; (8004964 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004836:	60bb      	str	r3, [r7, #8]
       break;
 8004838:	e08c      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800483a:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <HAL_RCC_GetSysClockFreq+0x160>)
 800483c:	60bb      	str	r3, [r7, #8]
      break;
 800483e:	e089      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004840:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCC_GetSysClockFreq+0x158>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004848:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800484a:	4b45      	ldr	r3, [pc, #276]	; (8004960 <HAL_RCC_GetSysClockFreq+0x158>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d023      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004856:	4b42      	ldr	r3, [pc, #264]	; (8004960 <HAL_RCC_GetSysClockFreq+0x158>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	099b      	lsrs	r3, r3, #6
 800485c:	f04f 0400 	mov.w	r4, #0
 8004860:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	ea03 0501 	and.w	r5, r3, r1
 800486c:	ea04 0602 	and.w	r6, r4, r2
 8004870:	4a3d      	ldr	r2, [pc, #244]	; (8004968 <HAL_RCC_GetSysClockFreq+0x160>)
 8004872:	fb02 f106 	mul.w	r1, r2, r6
 8004876:	2200      	movs	r2, #0
 8004878:	fb02 f205 	mul.w	r2, r2, r5
 800487c:	440a      	add	r2, r1
 800487e:	493a      	ldr	r1, [pc, #232]	; (8004968 <HAL_RCC_GetSysClockFreq+0x160>)
 8004880:	fba5 0101 	umull	r0, r1, r5, r1
 8004884:	1853      	adds	r3, r2, r1
 8004886:	4619      	mov	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f04f 0400 	mov.w	r4, #0
 800488e:	461a      	mov	r2, r3
 8004890:	4623      	mov	r3, r4
 8004892:	f7fc f999 	bl	8000bc8 <__aeabi_uldivmod>
 8004896:	4603      	mov	r3, r0
 8004898:	460c      	mov	r4, r1
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e049      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <HAL_RCC_GetSysClockFreq+0x158>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	099b      	lsrs	r3, r3, #6
 80048a4:	f04f 0400 	mov.w	r4, #0
 80048a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	ea03 0501 	and.w	r5, r3, r1
 80048b4:	ea04 0602 	and.w	r6, r4, r2
 80048b8:	4629      	mov	r1, r5
 80048ba:	4632      	mov	r2, r6
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	f04f 0400 	mov.w	r4, #0
 80048c4:	0154      	lsls	r4, r2, #5
 80048c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048ca:	014b      	lsls	r3, r1, #5
 80048cc:	4619      	mov	r1, r3
 80048ce:	4622      	mov	r2, r4
 80048d0:	1b49      	subs	r1, r1, r5
 80048d2:	eb62 0206 	sbc.w	r2, r2, r6
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	f04f 0400 	mov.w	r4, #0
 80048de:	0194      	lsls	r4, r2, #6
 80048e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048e4:	018b      	lsls	r3, r1, #6
 80048e6:	1a5b      	subs	r3, r3, r1
 80048e8:	eb64 0402 	sbc.w	r4, r4, r2
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	00e2      	lsls	r2, r4, #3
 80048f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048fa:	00d9      	lsls	r1, r3, #3
 80048fc:	460b      	mov	r3, r1
 80048fe:	4614      	mov	r4, r2
 8004900:	195b      	adds	r3, r3, r5
 8004902:	eb44 0406 	adc.w	r4, r4, r6
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	02a2      	lsls	r2, r4, #10
 8004910:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004914:	0299      	lsls	r1, r3, #10
 8004916:	460b      	mov	r3, r1
 8004918:	4614      	mov	r4, r2
 800491a:	4618      	mov	r0, r3
 800491c:	4621      	mov	r1, r4
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f04f 0400 	mov.w	r4, #0
 8004924:	461a      	mov	r2, r3
 8004926:	4623      	mov	r3, r4
 8004928:	f7fc f94e 	bl	8000bc8 <__aeabi_uldivmod>
 800492c:	4603      	mov	r3, r0
 800492e:	460c      	mov	r4, r1
 8004930:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_GetSysClockFreq+0x158>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	3301      	adds	r3, #1
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	60bb      	str	r3, [r7, #8]
      break;
 800494c:	e002      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004950:	60bb      	str	r3, [r7, #8]
      break;
 8004952:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004954:	68bb      	ldr	r3, [r7, #8]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400
 8004968:	00b71b00 	.word	0x00b71b00

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000000 	.word	0x20000000

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4601      	mov	r1, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4a03      	ldr	r2, [pc, #12]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499a:	5cd3      	ldrb	r3, [r2, r3]
 800499c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	080095c4 	.word	0x080095c4

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049b0:	f7ff ffdc 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b4:	4601      	mov	r1, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0b5b      	lsrs	r3, r3, #13
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4a03      	ldr	r2, [pc, #12]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c2:	5cd3      	ldrb	r3, [r2, r3]
 80049c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	080095c4 	.word	0x080095c4

080049d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	220f      	movs	r2, #15
 80049e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0203 	and.w	r2, r3, #3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	08db      	lsrs	r3, r3, #3
 8004a0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <HAL_RCC_GetClockConfig+0x60>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 020f 	and.w	r2, r3, #15
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40023c00 	.word	0x40023c00

08004a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e01d      	b.n	8004a86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fe f836 	bl	8002ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f000 fa8c 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0201 	orr.w	r2, r2, #1
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b06      	cmp	r3, #6
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e01d      	b.n	8004b24 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fd ffaf 	bl	8002a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 fa3d 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	6839      	ldr	r1, [r7, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fc78 	bl	8005434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <HAL_TIM_PWM_Start+0x74>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_TIM_PWM_Start+0x2c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a14      	ldr	r2, [pc, #80]	; (8004ba4 <HAL_TIM_PWM_Start+0x78>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <HAL_TIM_PWM_Start+0x30>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <HAL_TIM_PWM_Start+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b06      	cmp	r3, #6
 8004b82:	d007      	beq.n	8004b94 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40010400 	.word	0x40010400

08004ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d122      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d11b      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0202 	mvn.w	r2, #2
 8004bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f9b4 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f9a6 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f9b7 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0204 	mvn.w	r2, #4
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f98a 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f97c 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f98d 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d122      	bne.n	8004cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d11b      	bne.n	8004cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0208 	mvn.w	r2, #8
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2204      	movs	r2, #4
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f960 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f952 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f963 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0210 	mvn.w	r2, #16
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f936 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f928 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f939 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10e      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d107      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0201 	mvn.w	r2, #1
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fd fbec 	bl	8002504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d10e      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d44:	2b80      	cmp	r3, #128	; 0x80
 8004d46:	d107      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fc1a 	bl	800558c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d10e      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d107      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8fe 	bl	8004f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d10e      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0220 	mvn.w	r2, #32
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fbe4 	bl	8005578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e0b4      	b.n	8004f3c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	f200 809f 	bhi.w	8004f28 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e25 	.word	0x08004e25
 8004df4:	08004f29 	.word	0x08004f29
 8004df8:	08004f29 	.word	0x08004f29
 8004dfc:	08004f29 	.word	0x08004f29
 8004e00:	08004e65 	.word	0x08004e65
 8004e04:	08004f29 	.word	0x08004f29
 8004e08:	08004f29 	.word	0x08004f29
 8004e0c:	08004f29 	.word	0x08004f29
 8004e10:	08004ea7 	.word	0x08004ea7
 8004e14:	08004f29 	.word	0x08004f29
 8004e18:	08004f29 	.word	0x08004f29
 8004e1c:	08004f29 	.word	0x08004f29
 8004e20:	08004ee7 	.word	0x08004ee7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f952 	bl	80050d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0208 	orr.w	r2, r2, #8
 8004e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0204 	bic.w	r2, r2, #4
 8004e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6999      	ldr	r1, [r3, #24]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	619a      	str	r2, [r3, #24]
      break;
 8004e62:	e062      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f9a2 	bl	80051b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6999      	ldr	r1, [r3, #24]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	021a      	lsls	r2, r3, #8
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	619a      	str	r2, [r3, #24]
      break;
 8004ea4:	e041      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f9f7 	bl	80052a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0208 	orr.w	r2, r2, #8
 8004ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0204 	bic.w	r2, r2, #4
 8004ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69d9      	ldr	r1, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	61da      	str	r2, [r3, #28]
      break;
 8004ee4:	e021      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fa4b 	bl	8005388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69d9      	ldr	r1, [r3, #28]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	021a      	lsls	r2, r3, #8
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	61da      	str	r2, [r3, #28]
      break;
 8004f26:	e000      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004f28:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a40      	ldr	r2, [pc, #256]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d00f      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3d      	ldr	r2, [pc, #244]	; (80050ac <TIM_Base_SetConfig+0x118>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a3c      	ldr	r2, [pc, #240]	; (80050b0 <TIM_Base_SetConfig+0x11c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d007      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a3b      	ldr	r2, [pc, #236]	; (80050b4 <TIM_Base_SetConfig+0x120>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a3a      	ldr	r2, [pc, #232]	; (80050b8 <TIM_Base_SetConfig+0x124>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d108      	bne.n	8004fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2f      	ldr	r2, [pc, #188]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d02b      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d027      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2c      	ldr	r2, [pc, #176]	; (80050ac <TIM_Base_SetConfig+0x118>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d023      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2b      	ldr	r2, [pc, #172]	; (80050b0 <TIM_Base_SetConfig+0x11c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01f      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2a      	ldr	r2, [pc, #168]	; (80050b4 <TIM_Base_SetConfig+0x120>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01b      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a29      	ldr	r2, [pc, #164]	; (80050b8 <TIM_Base_SetConfig+0x124>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d017      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a28      	ldr	r2, [pc, #160]	; (80050bc <TIM_Base_SetConfig+0x128>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a27      	ldr	r2, [pc, #156]	; (80050c0 <TIM_Base_SetConfig+0x12c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00f      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a26      	ldr	r2, [pc, #152]	; (80050c4 <TIM_Base_SetConfig+0x130>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00b      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a25      	ldr	r2, [pc, #148]	; (80050c8 <TIM_Base_SetConfig+0x134>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d007      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a24      	ldr	r2, [pc, #144]	; (80050cc <TIM_Base_SetConfig+0x138>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a23      	ldr	r2, [pc, #140]	; (80050d0 <TIM_Base_SetConfig+0x13c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d108      	bne.n	8005058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <TIM_Base_SetConfig+0x114>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_Base_SetConfig+0xf8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <TIM_Base_SetConfig+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d103      	bne.n	8005094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	615a      	str	r2, [r3, #20]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40010400 	.word	0x40010400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	40001800 	.word	0x40001800
 80050cc:	40001c00 	.word	0x40001c00
 80050d0:	40002000 	.word	0x40002000

080050d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f023 0201 	bic.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 0302 	bic.w	r3, r3, #2
 800511c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a20      	ldr	r2, [pc, #128]	; (80051ac <TIM_OC1_SetConfig+0xd8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC1_SetConfig+0x64>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <TIM_OC1_SetConfig+0xdc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10c      	bne.n	8005152 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0308 	bic.w	r3, r3, #8
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a15      	ldr	r2, [pc, #84]	; (80051ac <TIM_OC1_SetConfig+0xd8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_OC1_SetConfig+0x8e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a14      	ldr	r2, [pc, #80]	; (80051b0 <TIM_OC1_SetConfig+0xdc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d111      	bne.n	8005186 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40010400 	.word	0x40010400

080051b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0210 	bic.w	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0320 	bic.w	r3, r3, #32
 80051fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a22      	ldr	r2, [pc, #136]	; (8005298 <TIM_OC2_SetConfig+0xe4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_OC2_SetConfig+0x68>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a21      	ldr	r2, [pc, #132]	; (800529c <TIM_OC2_SetConfig+0xe8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d10d      	bne.n	8005238 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <TIM_OC2_SetConfig+0xe4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC2_SetConfig+0x94>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <TIM_OC2_SetConfig+0xe8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d113      	bne.n	8005270 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800524e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40010400 	.word	0x40010400

080052a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a21      	ldr	r2, [pc, #132]	; (8005380 <TIM_OC3_SetConfig+0xe0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d003      	beq.n	8005306 <TIM_OC3_SetConfig+0x66>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a20      	ldr	r2, [pc, #128]	; (8005384 <TIM_OC3_SetConfig+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d10d      	bne.n	8005322 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800530c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a16      	ldr	r2, [pc, #88]	; (8005380 <TIM_OC3_SetConfig+0xe0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_OC3_SetConfig+0x92>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a15      	ldr	r2, [pc, #84]	; (8005384 <TIM_OC3_SetConfig+0xe4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d113      	bne.n	800535a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	621a      	str	r2, [r3, #32]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40010000 	.word	0x40010000
 8005384:	40010400 	.word	0x40010400

08005388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	031b      	lsls	r3, r3, #12
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a12      	ldr	r2, [pc, #72]	; (800542c <TIM_OC4_SetConfig+0xa4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_OC4_SetConfig+0x68>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a11      	ldr	r2, [pc, #68]	; (8005430 <TIM_OC4_SetConfig+0xa8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d109      	bne.n	8005404 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40010000 	.word	0x40010000
 8005430:	40010400 	.word	0x40010400

08005434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	2201      	movs	r2, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1a      	ldr	r2, [r3, #32]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	43db      	mvns	r3, r3
 8005456:	401a      	ands	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	fa01 f303 	lsl.w	r3, r1, r3
 800546c:	431a      	orrs	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005494:	2302      	movs	r3, #2
 8005496:	e05a      	b.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d01d      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1a      	ldr	r2, [pc, #104]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a17      	ldr	r2, [pc, #92]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a15      	ldr	r2, [pc, #84]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d10c      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	4313      	orrs	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40010400 	.word	0x40010400
 8005570:	40014000 	.word	0x40014000
 8005574:	40001800 	.word	0x40001800

08005578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e03f      	b.n	8005632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fd fbaa 	bl	8002d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	; 0x24
 80055d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f9b1 	bl	800594c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b088      	sub	sp, #32
 800563e:	af02      	add	r7, sp, #8
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b20      	cmp	r3, #32
 8005658:	f040 8083 	bne.w	8005762 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_UART_Transmit+0x2e>
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e07b      	b.n	8005764 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_UART_Transmit+0x40>
 8005676:	2302      	movs	r3, #2
 8005678:	e074      	b.n	8005764 <HAL_UART_Transmit+0x12a>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2221      	movs	r2, #33	; 0x21
 800568c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005690:	f7fd fc24 	bl	8002edc <HAL_GetTick>
 8005694:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	88fa      	ldrh	r2, [r7, #6]
 800569a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80056aa:	e042      	b.n	8005732 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c2:	d122      	bne.n	800570a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	2180      	movs	r1, #128	; 0x80
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f8f2 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e042      	b.n	8005764 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d103      	bne.n	8005702 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	3302      	adds	r3, #2
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	e017      	b.n	8005732 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	3301      	adds	r3, #1
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	e013      	b.n	8005732 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2200      	movs	r2, #0
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f8cf 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e01f      	b.n	8005764 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	60ba      	str	r2, [r7, #8]
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1b7      	bne.n	80056ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2200      	movs	r2, #0
 8005744:	2140      	movs	r1, #64	; 0x40
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f8b6 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e006      	b.n	8005764 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 8090 	bne.w	80058ae <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_UART_Receive+0x2e>
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e088      	b.n	80058b0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Receive+0x40>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e081      	b.n	80058b0 <HAL_UART_Receive+0x144>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2222      	movs	r2, #34	; 0x22
 80057be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80057c2:	f7fd fb8b 	bl	8002edc <HAL_GetTick>
 80057c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80057dc:	e05c      	b.n	8005898 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f4:	d12b      	bne.n	800584e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2200      	movs	r2, #0
 80057fe:	2120      	movs	r1, #32
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f859 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e04f      	b.n	80058b0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10c      	bne.n	8005836 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005828:	b29a      	uxth	r2, r3
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3302      	adds	r3, #2
 8005832:	60bb      	str	r3, [r7, #8]
 8005834:	e030      	b.n	8005898 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	b29b      	uxth	r3, r3
 800583e:	b2db      	uxtb	r3, r3
 8005840:	b29a      	uxth	r2, r3
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	3301      	adds	r3, #1
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	e024      	b.n	8005898 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	2120      	movs	r1, #32
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f82d 	bl	80058b8 <UART_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e023      	b.n	80058b0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	60ba      	str	r2, [r7, #8]
 800587c:	b2ca      	uxtb	r2, r1
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	e00a      	b.n	8005898 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	1c59      	adds	r1, r3, #1
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d19d      	bne.n	80057de <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	4613      	mov	r3, r2
 80058c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c8:	e02c      	b.n	8005924 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d028      	beq.n	8005924 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80058d8:	f7fd fb00 	bl	8002edc <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d21d      	bcs.n	8005924 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e00f      	b.n	8005944 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	429a      	cmp	r2, r3
 8005940:	d0c3      	beq.n	80058ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800598e:	f023 030c 	bic.w	r3, r3, #12
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	68f9      	ldr	r1, [r7, #12]
 8005998:	430b      	orrs	r3, r1
 800599a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ba:	f040 818b 	bne.w	8005cd4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4ac1      	ldr	r2, [pc, #772]	; (8005cc8 <UART_SetConfig+0x37c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d005      	beq.n	80059d4 <UART_SetConfig+0x88>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4abf      	ldr	r2, [pc, #764]	; (8005ccc <UART_SetConfig+0x380>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f040 80bd 	bne.w	8005b4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059d4:	f7fe ffea 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 80059d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	461d      	mov	r5, r3
 80059de:	f04f 0600 	mov.w	r6, #0
 80059e2:	46a8      	mov	r8, r5
 80059e4:	46b1      	mov	r9, r6
 80059e6:	eb18 0308 	adds.w	r3, r8, r8
 80059ea:	eb49 0409 	adc.w	r4, r9, r9
 80059ee:	4698      	mov	r8, r3
 80059f0:	46a1      	mov	r9, r4
 80059f2:	eb18 0805 	adds.w	r8, r8, r5
 80059f6:	eb49 0906 	adc.w	r9, r9, r6
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a0e:	4688      	mov	r8, r1
 8005a10:	4691      	mov	r9, r2
 8005a12:	eb18 0005 	adds.w	r0, r8, r5
 8005a16:	eb49 0106 	adc.w	r1, r9, r6
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	461d      	mov	r5, r3
 8005a20:	f04f 0600 	mov.w	r6, #0
 8005a24:	196b      	adds	r3, r5, r5
 8005a26:	eb46 0406 	adc.w	r4, r6, r6
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4623      	mov	r3, r4
 8005a2e:	f7fb f8cb 	bl	8000bc8 <__aeabi_uldivmod>
 8005a32:	4603      	mov	r3, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	461a      	mov	r2, r3
 8005a38:	4ba5      	ldr	r3, [pc, #660]	; (8005cd0 <UART_SetConfig+0x384>)
 8005a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	461d      	mov	r5, r3
 8005a48:	f04f 0600 	mov.w	r6, #0
 8005a4c:	46a9      	mov	r9, r5
 8005a4e:	46b2      	mov	sl, r6
 8005a50:	eb19 0309 	adds.w	r3, r9, r9
 8005a54:	eb4a 040a 	adc.w	r4, sl, sl
 8005a58:	4699      	mov	r9, r3
 8005a5a:	46a2      	mov	sl, r4
 8005a5c:	eb19 0905 	adds.w	r9, r9, r5
 8005a60:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a78:	4689      	mov	r9, r1
 8005a7a:	4692      	mov	sl, r2
 8005a7c:	eb19 0005 	adds.w	r0, r9, r5
 8005a80:	eb4a 0106 	adc.w	r1, sl, r6
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	461d      	mov	r5, r3
 8005a8a:	f04f 0600 	mov.w	r6, #0
 8005a8e:	196b      	adds	r3, r5, r5
 8005a90:	eb46 0406 	adc.w	r4, r6, r6
 8005a94:	461a      	mov	r2, r3
 8005a96:	4623      	mov	r3, r4
 8005a98:	f7fb f896 	bl	8000bc8 <__aeabi_uldivmod>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4b8b      	ldr	r3, [pc, #556]	; (8005cd0 <UART_SetConfig+0x384>)
 8005aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	2164      	movs	r1, #100	; 0x64
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	3332      	adds	r3, #50	; 0x32
 8005ab6:	4a86      	ldr	r2, [pc, #536]	; (8005cd0 <UART_SetConfig+0x384>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ac4:	4498      	add	r8, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	461d      	mov	r5, r3
 8005aca:	f04f 0600 	mov.w	r6, #0
 8005ace:	46a9      	mov	r9, r5
 8005ad0:	46b2      	mov	sl, r6
 8005ad2:	eb19 0309 	adds.w	r3, r9, r9
 8005ad6:	eb4a 040a 	adc.w	r4, sl, sl
 8005ada:	4699      	mov	r9, r3
 8005adc:	46a2      	mov	sl, r4
 8005ade:	eb19 0905 	adds.w	r9, r9, r5
 8005ae2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ae6:	f04f 0100 	mov.w	r1, #0
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005af2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005af6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005afa:	4689      	mov	r9, r1
 8005afc:	4692      	mov	sl, r2
 8005afe:	eb19 0005 	adds.w	r0, r9, r5
 8005b02:	eb4a 0106 	adc.w	r1, sl, r6
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	f04f 0600 	mov.w	r6, #0
 8005b10:	196b      	adds	r3, r5, r5
 8005b12:	eb46 0406 	adc.w	r4, r6, r6
 8005b16:	461a      	mov	r2, r3
 8005b18:	4623      	mov	r3, r4
 8005b1a:	f7fb f855 	bl	8000bc8 <__aeabi_uldivmod>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	460c      	mov	r4, r1
 8005b22:	461a      	mov	r2, r3
 8005b24:	4b6a      	ldr	r3, [pc, #424]	; (8005cd0 <UART_SetConfig+0x384>)
 8005b26:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	2164      	movs	r1, #100	; 0x64
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	3332      	adds	r3, #50	; 0x32
 8005b38:	4a65      	ldr	r2, [pc, #404]	; (8005cd0 <UART_SetConfig+0x384>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	f003 0207 	and.w	r2, r3, #7
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4442      	add	r2, r8
 8005b4a:	609a      	str	r2, [r3, #8]
 8005b4c:	e26f      	b.n	800602e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b4e:	f7fe ff19 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8005b52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	461d      	mov	r5, r3
 8005b58:	f04f 0600 	mov.w	r6, #0
 8005b5c:	46a8      	mov	r8, r5
 8005b5e:	46b1      	mov	r9, r6
 8005b60:	eb18 0308 	adds.w	r3, r8, r8
 8005b64:	eb49 0409 	adc.w	r4, r9, r9
 8005b68:	4698      	mov	r8, r3
 8005b6a:	46a1      	mov	r9, r4
 8005b6c:	eb18 0805 	adds.w	r8, r8, r5
 8005b70:	eb49 0906 	adc.w	r9, r9, r6
 8005b74:	f04f 0100 	mov.w	r1, #0
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b88:	4688      	mov	r8, r1
 8005b8a:	4691      	mov	r9, r2
 8005b8c:	eb18 0005 	adds.w	r0, r8, r5
 8005b90:	eb49 0106 	adc.w	r1, r9, r6
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	461d      	mov	r5, r3
 8005b9a:	f04f 0600 	mov.w	r6, #0
 8005b9e:	196b      	adds	r3, r5, r5
 8005ba0:	eb46 0406 	adc.w	r4, r6, r6
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	f7fb f80e 	bl	8000bc8 <__aeabi_uldivmod>
 8005bac:	4603      	mov	r3, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <UART_SetConfig+0x384>)
 8005bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	461d      	mov	r5, r3
 8005bc2:	f04f 0600 	mov.w	r6, #0
 8005bc6:	46a9      	mov	r9, r5
 8005bc8:	46b2      	mov	sl, r6
 8005bca:	eb19 0309 	adds.w	r3, r9, r9
 8005bce:	eb4a 040a 	adc.w	r4, sl, sl
 8005bd2:	4699      	mov	r9, r3
 8005bd4:	46a2      	mov	sl, r4
 8005bd6:	eb19 0905 	adds.w	r9, r9, r5
 8005bda:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bde:	f04f 0100 	mov.w	r1, #0
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bf2:	4689      	mov	r9, r1
 8005bf4:	4692      	mov	sl, r2
 8005bf6:	eb19 0005 	adds.w	r0, r9, r5
 8005bfa:	eb4a 0106 	adc.w	r1, sl, r6
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	461d      	mov	r5, r3
 8005c04:	f04f 0600 	mov.w	r6, #0
 8005c08:	196b      	adds	r3, r5, r5
 8005c0a:	eb46 0406 	adc.w	r4, r6, r6
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4623      	mov	r3, r4
 8005c12:	f7fa ffd9 	bl	8000bc8 <__aeabi_uldivmod>
 8005c16:	4603      	mov	r3, r0
 8005c18:	460c      	mov	r4, r1
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <UART_SetConfig+0x384>)
 8005c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	2164      	movs	r1, #100	; 0x64
 8005c26:	fb01 f303 	mul.w	r3, r1, r3
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	3332      	adds	r3, #50	; 0x32
 8005c30:	4a27      	ldr	r2, [pc, #156]	; (8005cd0 <UART_SetConfig+0x384>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c3e:	4498      	add	r8, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	461d      	mov	r5, r3
 8005c44:	f04f 0600 	mov.w	r6, #0
 8005c48:	46a9      	mov	r9, r5
 8005c4a:	46b2      	mov	sl, r6
 8005c4c:	eb19 0309 	adds.w	r3, r9, r9
 8005c50:	eb4a 040a 	adc.w	r4, sl, sl
 8005c54:	4699      	mov	r9, r3
 8005c56:	46a2      	mov	sl, r4
 8005c58:	eb19 0905 	adds.w	r9, r9, r5
 8005c5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c60:	f04f 0100 	mov.w	r1, #0
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c74:	4689      	mov	r9, r1
 8005c76:	4692      	mov	sl, r2
 8005c78:	eb19 0005 	adds.w	r0, r9, r5
 8005c7c:	eb4a 0106 	adc.w	r1, sl, r6
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	461d      	mov	r5, r3
 8005c86:	f04f 0600 	mov.w	r6, #0
 8005c8a:	196b      	adds	r3, r5, r5
 8005c8c:	eb46 0406 	adc.w	r4, r6, r6
 8005c90:	461a      	mov	r2, r3
 8005c92:	4623      	mov	r3, r4
 8005c94:	f7fa ff98 	bl	8000bc8 <__aeabi_uldivmod>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <UART_SetConfig+0x384>)
 8005ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	2164      	movs	r1, #100	; 0x64
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	3332      	adds	r3, #50	; 0x32
 8005cb2:	4a07      	ldr	r2, [pc, #28]	; (8005cd0 <UART_SetConfig+0x384>)
 8005cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	f003 0207 	and.w	r2, r3, #7
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4442      	add	r2, r8
 8005cc4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005cc6:	e1b2      	b.n	800602e <UART_SetConfig+0x6e2>
 8005cc8:	40011000 	.word	0x40011000
 8005ccc:	40011400 	.word	0x40011400
 8005cd0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4ad7      	ldr	r2, [pc, #860]	; (8006038 <UART_SetConfig+0x6ec>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d005      	beq.n	8005cea <UART_SetConfig+0x39e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4ad6      	ldr	r2, [pc, #856]	; (800603c <UART_SetConfig+0x6f0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	f040 80d1 	bne.w	8005e8c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cea:	f7fe fe5f 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8005cee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	469a      	mov	sl, r3
 8005cf4:	f04f 0b00 	mov.w	fp, #0
 8005cf8:	46d0      	mov	r8, sl
 8005cfa:	46d9      	mov	r9, fp
 8005cfc:	eb18 0308 	adds.w	r3, r8, r8
 8005d00:	eb49 0409 	adc.w	r4, r9, r9
 8005d04:	4698      	mov	r8, r3
 8005d06:	46a1      	mov	r9, r4
 8005d08:	eb18 080a 	adds.w	r8, r8, sl
 8005d0c:	eb49 090b 	adc.w	r9, r9, fp
 8005d10:	f04f 0100 	mov.w	r1, #0
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d24:	4688      	mov	r8, r1
 8005d26:	4691      	mov	r9, r2
 8005d28:	eb1a 0508 	adds.w	r5, sl, r8
 8005d2c:	eb4b 0609 	adc.w	r6, fp, r9
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4619      	mov	r1, r3
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	f04f 0400 	mov.w	r4, #0
 8005d42:	0094      	lsls	r4, r2, #2
 8005d44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d48:	008b      	lsls	r3, r1, #2
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4623      	mov	r3, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	4631      	mov	r1, r6
 8005d52:	f7fa ff39 	bl	8000bc8 <__aeabi_uldivmod>
 8005d56:	4603      	mov	r3, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4bb8      	ldr	r3, [pc, #736]	; (8006040 <UART_SetConfig+0x6f4>)
 8005d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	469b      	mov	fp, r3
 8005d6c:	f04f 0c00 	mov.w	ip, #0
 8005d70:	46d9      	mov	r9, fp
 8005d72:	46e2      	mov	sl, ip
 8005d74:	eb19 0309 	adds.w	r3, r9, r9
 8005d78:	eb4a 040a 	adc.w	r4, sl, sl
 8005d7c:	4699      	mov	r9, r3
 8005d7e:	46a2      	mov	sl, r4
 8005d80:	eb19 090b 	adds.w	r9, r9, fp
 8005d84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d88:	f04f 0100 	mov.w	r1, #0
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d9c:	4689      	mov	r9, r1
 8005d9e:	4692      	mov	sl, r2
 8005da0:	eb1b 0509 	adds.w	r5, fp, r9
 8005da4:	eb4c 060a 	adc.w	r6, ip, sl
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	4619      	mov	r1, r3
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	f04f 0400 	mov.w	r4, #0
 8005dba:	0094      	lsls	r4, r2, #2
 8005dbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dc0:	008b      	lsls	r3, r1, #2
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	4631      	mov	r1, r6
 8005dca:	f7fa fefd 	bl	8000bc8 <__aeabi_uldivmod>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4b9a      	ldr	r3, [pc, #616]	; (8006040 <UART_SetConfig+0x6f4>)
 8005dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	2164      	movs	r1, #100	; 0x64
 8005dde:	fb01 f303 	mul.w	r3, r1, r3
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	3332      	adds	r3, #50	; 0x32
 8005de8:	4a95      	ldr	r2, [pc, #596]	; (8006040 <UART_SetConfig+0x6f4>)
 8005dea:	fba2 2303 	umull	r2, r3, r2, r3
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005df4:	4498      	add	r8, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	469b      	mov	fp, r3
 8005dfa:	f04f 0c00 	mov.w	ip, #0
 8005dfe:	46d9      	mov	r9, fp
 8005e00:	46e2      	mov	sl, ip
 8005e02:	eb19 0309 	adds.w	r3, r9, r9
 8005e06:	eb4a 040a 	adc.w	r4, sl, sl
 8005e0a:	4699      	mov	r9, r3
 8005e0c:	46a2      	mov	sl, r4
 8005e0e:	eb19 090b 	adds.w	r9, r9, fp
 8005e12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e16:	f04f 0100 	mov.w	r1, #0
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e2a:	4689      	mov	r9, r1
 8005e2c:	4692      	mov	sl, r2
 8005e2e:	eb1b 0509 	adds.w	r5, fp, r9
 8005e32:	eb4c 060a 	adc.w	r6, ip, sl
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	f04f 0400 	mov.w	r4, #0
 8005e48:	0094      	lsls	r4, r2, #2
 8005e4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e4e:	008b      	lsls	r3, r1, #2
 8005e50:	461a      	mov	r2, r3
 8005e52:	4623      	mov	r3, r4
 8005e54:	4628      	mov	r0, r5
 8005e56:	4631      	mov	r1, r6
 8005e58:	f7fa feb6 	bl	8000bc8 <__aeabi_uldivmod>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b77      	ldr	r3, [pc, #476]	; (8006040 <UART_SetConfig+0x6f4>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	2164      	movs	r1, #100	; 0x64
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	3332      	adds	r3, #50	; 0x32
 8005e76:	4a72      	ldr	r2, [pc, #456]	; (8006040 <UART_SetConfig+0x6f4>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	f003 020f 	and.w	r2, r3, #15
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4442      	add	r2, r8
 8005e88:	609a      	str	r2, [r3, #8]
 8005e8a:	e0d0      	b.n	800602e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8c:	f7fe fd7a 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8005e90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	469a      	mov	sl, r3
 8005e96:	f04f 0b00 	mov.w	fp, #0
 8005e9a:	46d0      	mov	r8, sl
 8005e9c:	46d9      	mov	r9, fp
 8005e9e:	eb18 0308 	adds.w	r3, r8, r8
 8005ea2:	eb49 0409 	adc.w	r4, r9, r9
 8005ea6:	4698      	mov	r8, r3
 8005ea8:	46a1      	mov	r9, r4
 8005eaa:	eb18 080a 	adds.w	r8, r8, sl
 8005eae:	eb49 090b 	adc.w	r9, r9, fp
 8005eb2:	f04f 0100 	mov.w	r1, #0
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ebe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ec2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ec6:	4688      	mov	r8, r1
 8005ec8:	4691      	mov	r9, r2
 8005eca:	eb1a 0508 	adds.w	r5, sl, r8
 8005ece:	eb4b 0609 	adc.w	r6, fp, r9
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	f04f 0400 	mov.w	r4, #0
 8005ee4:	0094      	lsls	r4, r2, #2
 8005ee6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005eea:	008b      	lsls	r3, r1, #2
 8005eec:	461a      	mov	r2, r3
 8005eee:	4623      	mov	r3, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	f7fa fe68 	bl	8000bc8 <__aeabi_uldivmod>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	461a      	mov	r2, r3
 8005efe:	4b50      	ldr	r3, [pc, #320]	; (8006040 <UART_SetConfig+0x6f4>)
 8005f00:	fba3 2302 	umull	r2, r3, r3, r2
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	469b      	mov	fp, r3
 8005f0e:	f04f 0c00 	mov.w	ip, #0
 8005f12:	46d9      	mov	r9, fp
 8005f14:	46e2      	mov	sl, ip
 8005f16:	eb19 0309 	adds.w	r3, r9, r9
 8005f1a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f1e:	4699      	mov	r9, r3
 8005f20:	46a2      	mov	sl, r4
 8005f22:	eb19 090b 	adds.w	r9, r9, fp
 8005f26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f2a:	f04f 0100 	mov.w	r1, #0
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f3e:	4689      	mov	r9, r1
 8005f40:	4692      	mov	sl, r2
 8005f42:	eb1b 0509 	adds.w	r5, fp, r9
 8005f46:	eb4c 060a 	adc.w	r6, ip, sl
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	f04f 0400 	mov.w	r4, #0
 8005f5c:	0094      	lsls	r4, r2, #2
 8005f5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f62:	008b      	lsls	r3, r1, #2
 8005f64:	461a      	mov	r2, r3
 8005f66:	4623      	mov	r3, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	f7fa fe2c 	bl	8000bc8 <__aeabi_uldivmod>
 8005f70:	4603      	mov	r3, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	461a      	mov	r2, r3
 8005f76:	4b32      	ldr	r3, [pc, #200]	; (8006040 <UART_SetConfig+0x6f4>)
 8005f78:	fba3 1302 	umull	r1, r3, r3, r2
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	2164      	movs	r1, #100	; 0x64
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	3332      	adds	r3, #50	; 0x32
 8005f8a:	4a2d      	ldr	r2, [pc, #180]	; (8006040 <UART_SetConfig+0x6f4>)
 8005f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f96:	4498      	add	r8, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	469b      	mov	fp, r3
 8005f9c:	f04f 0c00 	mov.w	ip, #0
 8005fa0:	46d9      	mov	r9, fp
 8005fa2:	46e2      	mov	sl, ip
 8005fa4:	eb19 0309 	adds.w	r3, r9, r9
 8005fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8005fac:	4699      	mov	r9, r3
 8005fae:	46a2      	mov	sl, r4
 8005fb0:	eb19 090b 	adds.w	r9, r9, fp
 8005fb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fcc:	4689      	mov	r9, r1
 8005fce:	4692      	mov	sl, r2
 8005fd0:	eb1b 0509 	adds.w	r5, fp, r9
 8005fd4:	eb4c 060a 	adc.w	r6, ip, sl
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	f04f 0400 	mov.w	r4, #0
 8005fea:	0094      	lsls	r4, r2, #2
 8005fec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ff0:	008b      	lsls	r3, r1, #2
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4623      	mov	r3, r4
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	f7fa fde5 	bl	8000bc8 <__aeabi_uldivmod>
 8005ffe:	4603      	mov	r3, r0
 8006000:	460c      	mov	r4, r1
 8006002:	461a      	mov	r2, r3
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <UART_SetConfig+0x6f4>)
 8006006:	fba3 1302 	umull	r1, r3, r3, r2
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	2164      	movs	r1, #100	; 0x64
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	3332      	adds	r3, #50	; 0x32
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <UART_SetConfig+0x6f4>)
 800601a:	fba2 2303 	umull	r2, r3, r2, r3
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	f003 020f 	and.w	r2, r3, #15
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4442      	add	r2, r8
 800602a:	609a      	str	r2, [r3, #8]
}
 800602c:	e7ff      	b.n	800602e <UART_SetConfig+0x6e2>
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006038:	40011000 	.word	0x40011000
 800603c:	40011400 	.word	0x40011400
 8006040:	51eb851f 	.word	0x51eb851f

08006044 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006056:	2b84      	cmp	r3, #132	; 0x84
 8006058:	d005      	beq.n	8006066 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800605a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	3303      	adds	r3, #3
 8006064:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006066:	68fb      	ldr	r3, [r7, #12]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006078:	f000 fada 	bl	8006630 <vTaskStartScheduler>
  
  return osOK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	bd80      	pop	{r7, pc}

08006082 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006084:	b089      	sub	sp, #36	; 0x24
 8006086:	af04      	add	r7, sp, #16
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d020      	beq.n	80060d6 <osThreadCreate+0x54>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01c      	beq.n	80060d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685c      	ldr	r4, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681d      	ldr	r5, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691e      	ldr	r6, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff ffc8 	bl	8006044 <makeFreeRtosPriority>
 80060b4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060be:	9202      	str	r2, [sp, #8]
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	9100      	str	r1, [sp, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	4632      	mov	r2, r6
 80060c8:	4629      	mov	r1, r5
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 f8ed 	bl	80062aa <xTaskCreateStatic>
 80060d0:	4603      	mov	r3, r0
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e01c      	b.n	8006110 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685c      	ldr	r4, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060e2:	b29e      	uxth	r6, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff ffaa 	bl	8006044 <makeFreeRtosPriority>
 80060f0:	4602      	mov	r2, r0
 80060f2:	f107 030c 	add.w	r3, r7, #12
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	9200      	str	r2, [sp, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	4632      	mov	r2, r6
 80060fe:	4629      	mov	r1, r5
 8006100:	4620      	mov	r0, r4
 8006102:	f000 f92c 	bl	800635e <xTaskCreate>
 8006106:	4603      	mov	r3, r0
 8006108:	2b01      	cmp	r3, #1
 800610a:	d001      	beq.n	8006110 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	e000      	b.n	8006112 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800611a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <osDelay+0x16>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	e000      	b.n	8006132 <osDelay+0x18>
 8006130:	2301      	movs	r3, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fa48 	bl	80065c8 <vTaskDelay>
  
  return osOK;
 8006138:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <vListInitialise>:
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f103 0208 	add.w	r2, r3, #8
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	605a      	str	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f04f 32ff 	mov.w	r2, #4294967295
 800615a:	609a      	str	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f103 0208 	add.w	r2, r3, #8
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f103 0208 	add.w	r2, r3, #8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	611a      	str	r2, [r3, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <vListInitialiseItem>:
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	611a      	str	r2, [r3, #16]
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <vListInsertEnd>:
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	609a      	str	r2, [r3, #8]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	609a      	str	r2, [r3, #8]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	611a      	str	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <vListInsert>:
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60bb      	str	r3, [r7, #8]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fa:	d103      	bne.n	8006204 <vListInsert+0x20>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	e00c      	b.n	800621e <vListInsert+0x3a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3308      	adds	r3, #8
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	e002      	b.n	8006212 <vListInsert+0x2e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	429a      	cmp	r2, r3
 800621c:	d2f6      	bcs.n	800620c <vListInsert+0x28>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	609a      	str	r2, [r3, #8]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	609a      	str	r2, [r3, #8]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	611a      	str	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <uxListRemove>:
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6892      	ldr	r2, [r2, #8]
 800626c:	609a      	str	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6852      	ldr	r2, [r2, #4]
 8006276:	605a      	str	r2, [r3, #4]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	429a      	cmp	r2, r3
 8006280:	d103      	bne.n	800628a <uxListRemove+0x34>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	611a      	str	r2, [r3, #16]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	1e5a      	subs	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <xTaskCreateStatic>:
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b08e      	sub	sp, #56	; 0x38
 80062ae:	af04      	add	r7, sp, #16
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <xTaskCreateStatic+0x28>
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	623b      	str	r3, [r7, #32]
 80062d0:	e7fe      	b.n	80062d0 <xTaskCreateStatic+0x26>
 80062d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d109      	bne.n	80062ec <xTaskCreateStatic+0x42>
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	61fb      	str	r3, [r7, #28]
 80062ea:	e7fe      	b.n	80062ea <xTaskCreateStatic+0x40>
 80062ec:	2354      	movs	r3, #84	; 0x54
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2b54      	cmp	r3, #84	; 0x54
 80062f4:	d009      	beq.n	800630a <xTaskCreateStatic+0x60>
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e7fe      	b.n	8006308 <xTaskCreateStatic+0x5e>
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01e      	beq.n	8006350 <xTaskCreateStatic+0xa6>
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <xTaskCreateStatic+0xa6>
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	2202      	movs	r2, #2
 8006326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800632a:	2300      	movs	r3, #0
 800632c:	9303      	str	r3, [sp, #12]
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	9302      	str	r3, [sp, #8]
 8006332:	f107 0314 	add.w	r3, r7, #20
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f850 	bl	80063e8 <prvInitialiseNewTask>
 8006348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800634a:	f000 f8d3 	bl	80064f4 <prvAddNewTaskToReadyList>
 800634e:	e001      	b.n	8006354 <xTaskCreateStatic+0xaa>
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4618      	mov	r0, r3
 8006358:	3728      	adds	r7, #40	; 0x28
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <xTaskCreate>:
 800635e:	b580      	push	{r7, lr}
 8006360:	b08c      	sub	sp, #48	; 0x30
 8006362:	af04      	add	r7, sp, #16
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	603b      	str	r3, [r7, #0]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4618      	mov	r0, r3
 8006374:	f000 feae 	bl	80070d4 <pvPortMalloc>
 8006378:	6178      	str	r0, [r7, #20]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00e      	beq.n	800639e <xTaskCreate+0x40>
 8006380:	2054      	movs	r0, #84	; 0x54
 8006382:	f000 fea7 	bl	80070d4 <pvPortMalloc>
 8006386:	61f8      	str	r0, [r7, #28]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <xTaskCreate+0x38>
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
 8006394:	e005      	b.n	80063a2 <xTaskCreate+0x44>
 8006396:	6978      	ldr	r0, [r7, #20]
 8006398:	f000 ff5e 	bl	8007258 <vPortFree>
 800639c:	e001      	b.n	80063a2 <xTaskCreate+0x44>
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d017      	beq.n	80063d8 <xTaskCreate+0x7a>
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80063b0:	88fa      	ldrh	r2, [r7, #6]
 80063b2:	2300      	movs	r3, #0
 80063b4:	9303      	str	r3, [sp, #12]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	9302      	str	r3, [sp, #8]
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f80e 	bl	80063e8 <prvInitialiseNewTask>
 80063cc:	69f8      	ldr	r0, [r7, #28]
 80063ce:	f000 f891 	bl	80064f4 <prvAddNewTaskToReadyList>
 80063d2:	2301      	movs	r3, #1
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	e002      	b.n	80063de <xTaskCreate+0x80>
 80063d8:	f04f 33ff 	mov.w	r3, #4294967295
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4618      	mov	r0, r3
 80063e2:	3720      	adds	r7, #32
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <prvInitialiseNewTask>:
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006400:	3b01      	subs	r3, #1
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	f023 0307 	bic.w	r3, r3, #7
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <prvInitialiseNewTask+0x46>
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e7fe      	b.n	800642c <prvInitialiseNewTask+0x44>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01f      	beq.n	8006474 <prvInitialiseNewTask+0x8c>
 8006434:	2300      	movs	r3, #0
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	e012      	b.n	8006460 <prvInitialiseNewTask+0x78>
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	7819      	ldrb	r1, [r3, #0]
 8006442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	3334      	adds	r3, #52	; 0x34
 800644a:	460a      	mov	r2, r1
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d006      	beq.n	8006468 <prvInitialiseNewTask+0x80>
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3301      	adds	r3, #1
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b0f      	cmp	r3, #15
 8006464:	d9e9      	bls.n	800643a <prvInitialiseNewTask+0x52>
 8006466:	e000      	b.n	800646a <prvInitialiseNewTask+0x82>
 8006468:	bf00      	nop
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006472:	e003      	b.n	800647c <prvInitialiseNewTask+0x94>
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	2b06      	cmp	r3, #6
 8006480:	d901      	bls.n	8006486 <prvInitialiseNewTask+0x9e>
 8006482:	2306      	movs	r3, #6
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800648a:	62da      	str	r2, [r3, #44]	; 0x2c
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006490:	645a      	str	r2, [r3, #68]	; 0x44
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2200      	movs	r2, #0
 8006496:	649a      	str	r2, [r3, #72]	; 0x48
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	3304      	adds	r3, #4
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff fe70 	bl	8006182 <vListInitialiseItem>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	3318      	adds	r3, #24
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fe6b 	bl	8006182 <vListInitialiseItem>
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b0:	611a      	str	r2, [r3, #16]
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	f1c3 0207 	rsb	r2, r3, #7
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	619a      	str	r2, [r3, #24]
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	2200      	movs	r2, #0
 80064c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	68f9      	ldr	r1, [r7, #12]
 80064d4:	69b8      	ldr	r0, [r7, #24]
 80064d6:	f000 fbfd 	bl	8006cd4 <pxPortInitialiseStack>
 80064da:	4602      	mov	r2, r0
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <prvInitialiseNewTask+0x104>
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	bf00      	nop
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <prvAddNewTaskToReadyList>:
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	f000 fd0e 	bl	8006f1c <vPortEnterCritical>
 8006500:	4b2a      	ldr	r3, [pc, #168]	; (80065ac <prvAddNewTaskToReadyList+0xb8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	4a29      	ldr	r2, [pc, #164]	; (80065ac <prvAddNewTaskToReadyList+0xb8>)
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	4b29      	ldr	r3, [pc, #164]	; (80065b0 <prvAddNewTaskToReadyList+0xbc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <prvAddNewTaskToReadyList+0x32>
 8006512:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <prvAddNewTaskToReadyList+0xbc>)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	4b24      	ldr	r3, [pc, #144]	; (80065ac <prvAddNewTaskToReadyList+0xb8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d110      	bne.n	8006542 <prvAddNewTaskToReadyList+0x4e>
 8006520:	f000 fab8 	bl	8006a94 <prvInitialiseTaskLists>
 8006524:	e00d      	b.n	8006542 <prvAddNewTaskToReadyList+0x4e>
 8006526:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <prvAddNewTaskToReadyList+0xc0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <prvAddNewTaskToReadyList+0x4e>
 800652e:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <prvAddNewTaskToReadyList+0xbc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	429a      	cmp	r2, r3
 800653a:	d802      	bhi.n	8006542 <prvAddNewTaskToReadyList+0x4e>
 800653c:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <prvAddNewTaskToReadyList+0xbc>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <prvAddNewTaskToReadyList+0xc4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3301      	adds	r3, #1
 8006548:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <prvAddNewTaskToReadyList+0xc4>)
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	2201      	movs	r2, #1
 8006552:	409a      	lsls	r2, r3
 8006554:	4b19      	ldr	r3, [pc, #100]	; (80065bc <prvAddNewTaskToReadyList+0xc8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4313      	orrs	r3, r2
 800655a:	4a18      	ldr	r2, [pc, #96]	; (80065bc <prvAddNewTaskToReadyList+0xc8>)
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <prvAddNewTaskToReadyList+0xcc>)
 800656c:	441a      	add	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f7ff fe11 	bl	800619c <vListInsertEnd>
 800657a:	f000 fcfd 	bl	8006f78 <vPortExitCritical>
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <prvAddNewTaskToReadyList+0xc0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00e      	beq.n	80065a4 <prvAddNewTaskToReadyList+0xb0>
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <prvAddNewTaskToReadyList+0xbc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	429a      	cmp	r2, r3
 8006592:	d207      	bcs.n	80065a4 <prvAddNewTaskToReadyList+0xb0>
 8006594:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <prvAddNewTaskToReadyList+0xd0>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	200003f0 	.word	0x200003f0
 80065b0:	200002f0 	.word	0x200002f0
 80065b4:	200003fc 	.word	0x200003fc
 80065b8:	2000040c 	.word	0x2000040c
 80065bc:	200003f8 	.word	0x200003f8
 80065c0:	200002f4 	.word	0x200002f4
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <vTaskDelay>:
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d016      	beq.n	8006608 <vTaskDelay+0x40>
 80065da:	4b13      	ldr	r3, [pc, #76]	; (8006628 <vTaskDelay+0x60>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d009      	beq.n	80065f6 <vTaskDelay+0x2e>
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	e7fe      	b.n	80065f4 <vTaskDelay+0x2c>
 80065f6:	f000 f879 	bl	80066ec <vTaskSuspendAll>
 80065fa:	2100      	movs	r1, #0
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fb03 	bl	8006c08 <prvAddCurrentTaskToDelayedList>
 8006602:	f000 f881 	bl	8006708 <xTaskResumeAll>
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d107      	bne.n	800661e <vTaskDelay+0x56>
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <vTaskDelay+0x64>)
 8006610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000418 	.word	0x20000418
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <vTaskStartScheduler>:
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af04      	add	r7, sp, #16
 8006636:	2300      	movs	r3, #0
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	463a      	mov	r2, r7
 8006640:	1d39      	adds	r1, r7, #4
 8006642:	f107 0308 	add.w	r3, r7, #8
 8006646:	4618      	mov	r0, r3
 8006648:	f7fb fd0e 	bl	8002068 <vApplicationGetIdleTaskMemory>
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	9202      	str	r2, [sp, #8]
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	2300      	movs	r3, #0
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	460a      	mov	r2, r1
 800665e:	491d      	ldr	r1, [pc, #116]	; (80066d4 <vTaskStartScheduler+0xa4>)
 8006660:	481d      	ldr	r0, [pc, #116]	; (80066d8 <vTaskStartScheduler+0xa8>)
 8006662:	f7ff fe22 	bl	80062aa <xTaskCreateStatic>
 8006666:	4602      	mov	r2, r0
 8006668:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <vTaskStartScheduler+0xac>)
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <vTaskStartScheduler+0xac>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <vTaskStartScheduler+0x4a>
 8006674:	2301      	movs	r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e001      	b.n	800667e <vTaskStartScheduler+0x4e>
 800667a:	2300      	movs	r3, #0
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d115      	bne.n	80066b0 <vTaskStartScheduler+0x80>
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <vTaskStartScheduler+0xb0>)
 8006698:	f04f 32ff 	mov.w	r2, #4294967295
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	4b11      	ldr	r3, [pc, #68]	; (80066e4 <vTaskStartScheduler+0xb4>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <vTaskStartScheduler+0xb8>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	f000 fb99 	bl	8006de0 <xPortStartScheduler>
 80066ae:	e00d      	b.n	80066cc <vTaskStartScheduler+0x9c>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d109      	bne.n	80066cc <vTaskStartScheduler+0x9c>
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	e7fe      	b.n	80066ca <vTaskStartScheduler+0x9a>
 80066cc:	bf00      	nop
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	080095ac 	.word	0x080095ac
 80066d8:	08006a65 	.word	0x08006a65
 80066dc:	20000414 	.word	0x20000414
 80066e0:	20000410 	.word	0x20000410
 80066e4:	200003fc 	.word	0x200003fc
 80066e8:	200003f4 	.word	0x200003f4

080066ec <vTaskSuspendAll>:
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	4b04      	ldr	r3, [pc, #16]	; (8006704 <vTaskSuspendAll+0x18>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3301      	adds	r3, #1
 80066f6:	4a03      	ldr	r2, [pc, #12]	; (8006704 <vTaskSuspendAll+0x18>)
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	bf00      	nop
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	20000418 	.word	0x20000418

08006708 <xTaskResumeAll>:
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	4b41      	ldr	r3, [pc, #260]	; (800681c <xTaskResumeAll+0x114>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <xTaskResumeAll+0x2a>
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	e7fe      	b.n	8006730 <xTaskResumeAll+0x28>
 8006732:	f000 fbf3 	bl	8006f1c <vPortEnterCritical>
 8006736:	4b39      	ldr	r3, [pc, #228]	; (800681c <xTaskResumeAll+0x114>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3b01      	subs	r3, #1
 800673c:	4a37      	ldr	r2, [pc, #220]	; (800681c <xTaskResumeAll+0x114>)
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	4b36      	ldr	r3, [pc, #216]	; (800681c <xTaskResumeAll+0x114>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d161      	bne.n	800680c <xTaskResumeAll+0x104>
 8006748:	4b35      	ldr	r3, [pc, #212]	; (8006820 <xTaskResumeAll+0x118>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d05d      	beq.n	800680c <xTaskResumeAll+0x104>
 8006750:	e02e      	b.n	80067b0 <xTaskResumeAll+0xa8>
 8006752:	4b34      	ldr	r3, [pc, #208]	; (8006824 <xTaskResumeAll+0x11c>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3318      	adds	r3, #24
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fd79 	bl	8006256 <uxListRemove>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3304      	adds	r3, #4
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff fd74 	bl	8006256 <uxListRemove>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	2201      	movs	r2, #1
 8006774:	409a      	lsls	r2, r3
 8006776:	4b2c      	ldr	r3, [pc, #176]	; (8006828 <xTaskResumeAll+0x120>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4313      	orrs	r3, r2
 800677c:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <xTaskResumeAll+0x120>)
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4a27      	ldr	r2, [pc, #156]	; (800682c <xTaskResumeAll+0x124>)
 800678e:	441a      	add	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7ff fd00 	bl	800619c <vListInsertEnd>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	4b23      	ldr	r3, [pc, #140]	; (8006830 <xTaskResumeAll+0x128>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d302      	bcc.n	80067b0 <xTaskResumeAll+0xa8>
 80067aa:	4b22      	ldr	r3, [pc, #136]	; (8006834 <xTaskResumeAll+0x12c>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	4b1c      	ldr	r3, [pc, #112]	; (8006824 <xTaskResumeAll+0x11c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1cc      	bne.n	8006752 <xTaskResumeAll+0x4a>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <xTaskResumeAll+0xba>
 80067be:	f000 fa03 	bl	8006bc8 <prvResetNextTaskUnblockTime>
 80067c2:	4b1d      	ldr	r3, [pc, #116]	; (8006838 <xTaskResumeAll+0x130>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d010      	beq.n	80067f0 <xTaskResumeAll+0xe8>
 80067ce:	f000 f837 	bl	8006840 <xTaskIncrementTick>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <xTaskResumeAll+0xd6>
 80067d8:	4b16      	ldr	r3, [pc, #88]	; (8006834 <xTaskResumeAll+0x12c>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f1      	bne.n	80067ce <xTaskResumeAll+0xc6>
 80067ea:	4b13      	ldr	r3, [pc, #76]	; (8006838 <xTaskResumeAll+0x130>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	4b10      	ldr	r3, [pc, #64]	; (8006834 <xTaskResumeAll+0x12c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d009      	beq.n	800680c <xTaskResumeAll+0x104>
 80067f8:	2301      	movs	r3, #1
 80067fa:	60bb      	str	r3, [r7, #8]
 80067fc:	4b0f      	ldr	r3, [pc, #60]	; (800683c <xTaskResumeAll+0x134>)
 80067fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f000 fbb4 	bl	8006f78 <vPortExitCritical>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000418 	.word	0x20000418
 8006820:	200003f0 	.word	0x200003f0
 8006824:	200003b0 	.word	0x200003b0
 8006828:	200003f8 	.word	0x200003f8
 800682c:	200002f4 	.word	0x200002f4
 8006830:	200002f0 	.word	0x200002f0
 8006834:	20000404 	.word	0x20000404
 8006838:	20000400 	.word	0x20000400
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <xTaskIncrementTick>:
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	4b4e      	ldr	r3, [pc, #312]	; (8006984 <xTaskIncrementTick+0x144>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f040 8087 	bne.w	8006962 <xTaskIncrementTick+0x122>
 8006854:	4b4c      	ldr	r3, [pc, #304]	; (8006988 <xTaskIncrementTick+0x148>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3301      	adds	r3, #1
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	4a4a      	ldr	r2, [pc, #296]	; (8006988 <xTaskIncrementTick+0x148>)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11f      	bne.n	80068a8 <xTaskIncrementTick+0x68>
 8006868:	4b48      	ldr	r3, [pc, #288]	; (800698c <xTaskIncrementTick+0x14c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <xTaskIncrementTick+0x46>
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	e7fe      	b.n	8006884 <xTaskIncrementTick+0x44>
 8006886:	4b41      	ldr	r3, [pc, #260]	; (800698c <xTaskIncrementTick+0x14c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	4b40      	ldr	r3, [pc, #256]	; (8006990 <xTaskIncrementTick+0x150>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a3e      	ldr	r2, [pc, #248]	; (800698c <xTaskIncrementTick+0x14c>)
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	4a3e      	ldr	r2, [pc, #248]	; (8006990 <xTaskIncrementTick+0x150>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	4b3e      	ldr	r3, [pc, #248]	; (8006994 <xTaskIncrementTick+0x154>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3301      	adds	r3, #1
 80068a0:	4a3c      	ldr	r2, [pc, #240]	; (8006994 <xTaskIncrementTick+0x154>)
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	f000 f990 	bl	8006bc8 <prvResetNextTaskUnblockTime>
 80068a8:	4b3b      	ldr	r3, [pc, #236]	; (8006998 <xTaskIncrementTick+0x158>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d348      	bcc.n	8006944 <xTaskIncrementTick+0x104>
 80068b2:	4b36      	ldr	r3, [pc, #216]	; (800698c <xTaskIncrementTick+0x14c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <xTaskIncrementTick+0x86>
 80068bc:	4b36      	ldr	r3, [pc, #216]	; (8006998 <xTaskIncrementTick+0x158>)
 80068be:	f04f 32ff 	mov.w	r2, #4294967295
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	e03e      	b.n	8006944 <xTaskIncrementTick+0x104>
 80068c6:	4b31      	ldr	r3, [pc, #196]	; (800698c <xTaskIncrementTick+0x14c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d203      	bcs.n	80068e6 <xTaskIncrementTick+0xa6>
 80068de:	4a2e      	ldr	r2, [pc, #184]	; (8006998 <xTaskIncrementTick+0x158>)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e02e      	b.n	8006944 <xTaskIncrementTick+0x104>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	3304      	adds	r3, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fcb3 	bl	8006256 <uxListRemove>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d004      	beq.n	8006902 <xTaskIncrementTick+0xc2>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	3318      	adds	r3, #24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff fcaa 	bl	8006256 <uxListRemove>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	2201      	movs	r2, #1
 8006908:	409a      	lsls	r2, r3
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <xTaskIncrementTick+0x15c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4313      	orrs	r3, r2
 8006910:	4a22      	ldr	r2, [pc, #136]	; (800699c <xTaskIncrementTick+0x15c>)
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <xTaskIncrementTick+0x160>)
 8006922:	441a      	add	r2, r3
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	3304      	adds	r3, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f7ff fc36 	bl	800619c <vListInsertEnd>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <xTaskIncrementTick+0x164>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	429a      	cmp	r2, r3
 800693c:	d3b9      	bcc.n	80068b2 <xTaskIncrementTick+0x72>
 800693e:	2301      	movs	r3, #1
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	e7b6      	b.n	80068b2 <xTaskIncrementTick+0x72>
 8006944:	4b17      	ldr	r3, [pc, #92]	; (80069a4 <xTaskIncrementTick+0x164>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694a:	4915      	ldr	r1, [pc, #84]	; (80069a0 <xTaskIncrementTick+0x160>)
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d907      	bls.n	800696c <xTaskIncrementTick+0x12c>
 800695c:	2301      	movs	r3, #1
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e004      	b.n	800696c <xTaskIncrementTick+0x12c>
 8006962:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <xTaskIncrementTick+0x168>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3301      	adds	r3, #1
 8006968:	4a0f      	ldr	r2, [pc, #60]	; (80069a8 <xTaskIncrementTick+0x168>)
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <xTaskIncrementTick+0x16c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <xTaskIncrementTick+0x138>
 8006974:	2301      	movs	r3, #1
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000418 	.word	0x20000418
 8006988:	200003f4 	.word	0x200003f4
 800698c:	200003a8 	.word	0x200003a8
 8006990:	200003ac 	.word	0x200003ac
 8006994:	20000408 	.word	0x20000408
 8006998:	20000410 	.word	0x20000410
 800699c:	200003f8 	.word	0x200003f8
 80069a0:	200002f4 	.word	0x200002f4
 80069a4:	200002f0 	.word	0x200002f0
 80069a8:	20000400 	.word	0x20000400
 80069ac:	20000404 	.word	0x20000404

080069b0 <vTaskSwitchContext>:
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4b26      	ldr	r3, [pc, #152]	; (8006a50 <vTaskSwitchContext+0xa0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <vTaskSwitchContext+0x16>
 80069be:	4b25      	ldr	r3, [pc, #148]	; (8006a54 <vTaskSwitchContext+0xa4>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	e03e      	b.n	8006a44 <vTaskSwitchContext+0x94>
 80069c6:	4b23      	ldr	r3, [pc, #140]	; (8006a54 <vTaskSwitchContext+0xa4>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	4b22      	ldr	r3, [pc, #136]	; (8006a58 <vTaskSwitchContext+0xa8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	fab3 f383 	clz	r3, r3
 80069d8:	72fb      	strb	r3, [r7, #11]
 80069da:	7afb      	ldrb	r3, [r7, #11]
 80069dc:	f1c3 031f 	rsb	r3, r3, #31
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	491e      	ldr	r1, [pc, #120]	; (8006a5c <vTaskSwitchContext+0xac>)
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <vTaskSwitchContext+0x5a>
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	607b      	str	r3, [r7, #4]
 8006a08:	e7fe      	b.n	8006a08 <vTaskSwitchContext+0x58>
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4a11      	ldr	r2, [pc, #68]	; (8006a5c <vTaskSwitchContext+0xac>)
 8006a16:	4413      	add	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	605a      	str	r2, [r3, #4]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d104      	bne.n	8006a3a <vTaskSwitchContext+0x8a>
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4a07      	ldr	r2, [pc, #28]	; (8006a60 <vTaskSwitchContext+0xb0>)
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	bf00      	nop
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20000418 	.word	0x20000418
 8006a54:	20000404 	.word	0x20000404
 8006a58:	200003f8 	.word	0x200003f8
 8006a5c:	200002f4 	.word	0x200002f4
 8006a60:	200002f0 	.word	0x200002f0

08006a64 <prvIdleTask>:
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	f000 f852 	bl	8006b14 <prvCheckTasksWaitingTermination>
 8006a70:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <prvIdleTask+0x28>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d9f9      	bls.n	8006a6c <prvIdleTask+0x8>
 8006a78:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <prvIdleTask+0x2c>)
 8006a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	e7f0      	b.n	8006a6c <prvIdleTask+0x8>
 8006a8a:	bf00      	nop
 8006a8c:	200002f4 	.word	0x200002f4
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <prvInitialiseTaskLists>:
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	607b      	str	r3, [r7, #4]
 8006a9e:	e00c      	b.n	8006aba <prvInitialiseTaskLists+0x26>
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4a12      	ldr	r2, [pc, #72]	; (8006af4 <prvInitialiseTaskLists+0x60>)
 8006aac:	4413      	add	r3, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fb47 	bl	8006142 <vListInitialise>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	d9ef      	bls.n	8006aa0 <prvInitialiseTaskLists+0xc>
 8006ac0:	480d      	ldr	r0, [pc, #52]	; (8006af8 <prvInitialiseTaskLists+0x64>)
 8006ac2:	f7ff fb3e 	bl	8006142 <vListInitialise>
 8006ac6:	480d      	ldr	r0, [pc, #52]	; (8006afc <prvInitialiseTaskLists+0x68>)
 8006ac8:	f7ff fb3b 	bl	8006142 <vListInitialise>
 8006acc:	480c      	ldr	r0, [pc, #48]	; (8006b00 <prvInitialiseTaskLists+0x6c>)
 8006ace:	f7ff fb38 	bl	8006142 <vListInitialise>
 8006ad2:	480c      	ldr	r0, [pc, #48]	; (8006b04 <prvInitialiseTaskLists+0x70>)
 8006ad4:	f7ff fb35 	bl	8006142 <vListInitialise>
 8006ad8:	480b      	ldr	r0, [pc, #44]	; (8006b08 <prvInitialiseTaskLists+0x74>)
 8006ada:	f7ff fb32 	bl	8006142 <vListInitialise>
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <prvInitialiseTaskLists+0x78>)
 8006ae0:	4a05      	ldr	r2, [pc, #20]	; (8006af8 <prvInitialiseTaskLists+0x64>)
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <prvInitialiseTaskLists+0x7c>)
 8006ae6:	4a05      	ldr	r2, [pc, #20]	; (8006afc <prvInitialiseTaskLists+0x68>)
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200002f4 	.word	0x200002f4
 8006af8:	20000380 	.word	0x20000380
 8006afc:	20000394 	.word	0x20000394
 8006b00:	200003b0 	.word	0x200003b0
 8006b04:	200003c4 	.word	0x200003c4
 8006b08:	200003dc 	.word	0x200003dc
 8006b0c:	200003a8 	.word	0x200003a8
 8006b10:	200003ac 	.word	0x200003ac

08006b14 <prvCheckTasksWaitingTermination>:
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	e019      	b.n	8006b50 <prvCheckTasksWaitingTermination+0x3c>
 8006b1c:	f000 f9fe 	bl	8006f1c <vPortEnterCritical>
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <prvCheckTasksWaitingTermination+0x4c>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	607b      	str	r3, [r7, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff fb92 	bl	8006256 <uxListRemove>
 8006b32:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <prvCheckTasksWaitingTermination+0x50>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	4a0a      	ldr	r2, [pc, #40]	; (8006b64 <prvCheckTasksWaitingTermination+0x50>)
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <prvCheckTasksWaitingTermination+0x54>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <prvCheckTasksWaitingTermination+0x54>)
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	f000 fa17 	bl	8006f78 <vPortExitCritical>
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f80e 	bl	8006b6c <prvDeleteTCB>
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <prvCheckTasksWaitingTermination+0x54>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e1      	bne.n	8006b1c <prvCheckTasksWaitingTermination+0x8>
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	200003c4 	.word	0x200003c4
 8006b64:	200003f0 	.word	0x200003f0
 8006b68:	200003d8 	.word	0x200003d8

08006b6c <prvDeleteTCB>:
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d108      	bne.n	8006b90 <prvDeleteTCB+0x24>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fb68 	bl	8007258 <vPortFree>
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fb65 	bl	8007258 <vPortFree>
 8006b8e:	e017      	b.n	8006bc0 <prvDeleteTCB+0x54>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d103      	bne.n	8006ba2 <prvDeleteTCB+0x36>
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fb5c 	bl	8007258 <vPortFree>
 8006ba0:	e00e      	b.n	8006bc0 <prvDeleteTCB+0x54>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d009      	beq.n	8006bc0 <prvDeleteTCB+0x54>
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	e7fe      	b.n	8006bbe <prvDeleteTCB+0x52>
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <prvResetNextTaskUnblockTime>:
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <prvResetNextTaskUnblockTime+0x38>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <prvResetNextTaskUnblockTime+0x1a>
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <prvResetNextTaskUnblockTime+0x3c>)
 8006bda:	f04f 32ff 	mov.w	r2, #4294967295
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	e008      	b.n	8006bf4 <prvResetNextTaskUnblockTime+0x2c>
 8006be2:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <prvResetNextTaskUnblockTime+0x38>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	607b      	str	r3, [r7, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <prvResetNextTaskUnblockTime+0x3c>)
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	200003a8 	.word	0x200003a8
 8006c04:	20000410 	.word	0x20000410

08006c08 <prvAddCurrentTaskToDelayedList>:
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
 8006c12:	4b29      	ldr	r3, [pc, #164]	; (8006cb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	4b28      	ldr	r3, [pc, #160]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fb19 	bl	8006256 <uxListRemove>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c2a:	4b24      	ldr	r3, [pc, #144]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	2201      	movs	r2, #1
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	43da      	mvns	r2, r3
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	4a20      	ldr	r2, [pc, #128]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d10a      	bne.n	8006c60 <prvAddCurrentTaskToDelayedList+0x58>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <prvAddCurrentTaskToDelayedList+0x58>
 8006c50:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	481a      	ldr	r0, [pc, #104]	; (8006cc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c5a:	f7ff fa9f 	bl	800619c <vListInsertEnd>
 8006c5e:	e026      	b.n	8006cae <prvAddCurrentTaskToDelayedList+0xa6>
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]
 8006c68:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	605a      	str	r2, [r3, #4]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d209      	bcs.n	8006c8c <prvAddCurrentTaskToDelayedList+0x84>
 8006c78:	4b13      	ldr	r3, [pc, #76]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7ff faad 	bl	80061e4 <vListInsert>
 8006c8a:	e010      	b.n	8006cae <prvAddCurrentTaskToDelayedList+0xa6>
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	4610      	mov	r0, r2
 8006c9a:	f7ff faa3 	bl	80061e4 <vListInsert>
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d202      	bcs.n	8006cae <prvAddCurrentTaskToDelayedList+0xa6>
 8006ca8:	4a09      	ldr	r2, [pc, #36]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	200003f4 	.word	0x200003f4
 8006cbc:	200002f0 	.word	0x200002f0
 8006cc0:	200003f8 	.word	0x200003f8
 8006cc4:	200003dc 	.word	0x200003dc
 8006cc8:	200003ac 	.word	0x200003ac
 8006ccc:	200003a8 	.word	0x200003a8
 8006cd0:	20000410 	.word	0x20000410

08006cd4 <pxPortInitialiseStack>:
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3b04      	subs	r3, #4
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3b04      	subs	r3, #4
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3b04      	subs	r3, #4
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <pxPortInitialiseStack+0x64>)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b14      	subs	r3, #20
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3b04      	subs	r3, #4
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f06f 0202 	mvn.w	r2, #2
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3b20      	subs	r3, #32
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	08006d3d 	.word	0x08006d3d

08006d3c <prvTaskExitError>:
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	2300      	movs	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <prvTaskExitError+0x50>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d009      	beq.n	8006d64 <prvTaskExitError+0x28>
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	e7fe      	b.n	8006d62 <prvTaskExitError+0x26>
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	60bb      	str	r3, [r7, #8]
 8006d76:	bf00      	nop
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0fc      	beq.n	8006d78 <prvTaskExitError+0x3c>
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	2000000c 	.word	0x2000000c

08006d90 <SVC_Handler>:
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <pxCurrentTCBConst2>)
 8006d92:	6819      	ldr	r1, [r3, #0]
 8006d94:	6808      	ldr	r0, [r1, #0]
 8006d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9a:	f380 8809 	msr	PSP, r0
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8811 	msr	BASEPRI, r0
 8006daa:	4770      	bx	lr
 8006dac:	f3af 8000 	nop.w

08006db0 <pxCurrentTCBConst2>:
 8006db0:	200002f0 	.word	0x200002f0
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop

08006db8 <prvPortStartFirstTask>:
 8006db8:	4808      	ldr	r0, [pc, #32]	; (8006ddc <prvPortStartFirstTask+0x24>)
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	6800      	ldr	r0, [r0, #0]
 8006dbe:	f380 8808 	msr	MSP, r0
 8006dc2:	f04f 0000 	mov.w	r0, #0
 8006dc6:	f380 8814 	msr	CONTROL, r0
 8006dca:	b662      	cpsie	i
 8006dcc:	b661      	cpsie	f
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	df00      	svc	0
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	e000ed08 	.word	0xe000ed08

08006de0 <xPortStartScheduler>:
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4b44      	ldr	r3, [pc, #272]	; (8006ef8 <xPortStartScheduler+0x118>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a44      	ldr	r2, [pc, #272]	; (8006efc <xPortStartScheduler+0x11c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d109      	bne.n	8006e04 <xPortStartScheduler+0x24>
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e7fe      	b.n	8006e02 <xPortStartScheduler+0x22>
 8006e04:	4b3c      	ldr	r3, [pc, #240]	; (8006ef8 <xPortStartScheduler+0x118>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3d      	ldr	r2, [pc, #244]	; (8006f00 <xPortStartScheduler+0x120>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d109      	bne.n	8006e22 <xPortStartScheduler+0x42>
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e7fe      	b.n	8006e20 <xPortStartScheduler+0x40>
 8006e22:	4b38      	ldr	r3, [pc, #224]	; (8006f04 <xPortStartScheduler+0x124>)
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	22ff      	movs	r2, #255	; 0xff
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	70fb      	strb	r3, [r7, #3]
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	4b30      	ldr	r3, [pc, #192]	; (8006f08 <xPortStartScheduler+0x128>)
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	4b30      	ldr	r3, [pc, #192]	; (8006f0c <xPortStartScheduler+0x12c>)
 8006e4c:	2207      	movs	r2, #7
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	e009      	b.n	8006e66 <xPortStartScheduler+0x86>
 8006e52:	4b2e      	ldr	r3, [pc, #184]	; (8006f0c <xPortStartScheduler+0x12c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <xPortStartScheduler+0x12c>)
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	70fb      	strb	r3, [r7, #3]
 8006e66:	78fb      	ldrb	r3, [r7, #3]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6e:	2b80      	cmp	r3, #128	; 0x80
 8006e70:	d0ef      	beq.n	8006e52 <xPortStartScheduler+0x72>
 8006e72:	4b26      	ldr	r3, [pc, #152]	; (8006f0c <xPortStartScheduler+0x12c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f1c3 0307 	rsb	r3, r3, #7
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d009      	beq.n	8006e92 <xPortStartScheduler+0xb2>
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60bb      	str	r3, [r7, #8]
 8006e90:	e7fe      	b.n	8006e90 <xPortStartScheduler+0xb0>
 8006e92:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <xPortStartScheduler+0x12c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <xPortStartScheduler+0x12c>)
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	4b1b      	ldr	r3, [pc, #108]	; (8006f0c <xPortStartScheduler+0x12c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ea4:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <xPortStartScheduler+0x12c>)
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	4b17      	ldr	r3, [pc, #92]	; (8006f10 <xPortStartScheduler+0x130>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a16      	ldr	r2, [pc, #88]	; (8006f10 <xPortStartScheduler+0x130>)
 8006eb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <xPortStartScheduler+0x130>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a13      	ldr	r2, [pc, #76]	; (8006f10 <xPortStartScheduler+0x130>)
 8006ec2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f000 f8d6 	bl	8007078 <vPortSetupTimerInterrupt>
 8006ecc:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <xPortStartScheduler+0x134>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f000 f8f5 	bl	80070c0 <vPortEnableVFP>
 8006ed6:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <xPortStartScheduler+0x138>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a0f      	ldr	r2, [pc, #60]	; (8006f18 <xPortStartScheduler+0x138>)
 8006edc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	f7ff ff69 	bl	8006db8 <prvPortStartFirstTask>
 8006ee6:	f7ff fd63 	bl	80069b0 <vTaskSwitchContext>
 8006eea:	f7ff ff27 	bl	8006d3c <prvTaskExitError>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	e000ed00 	.word	0xe000ed00
 8006efc:	410fc271 	.word	0x410fc271
 8006f00:	410fc270 	.word	0x410fc270
 8006f04:	e000e400 	.word	0xe000e400
 8006f08:	2000041c 	.word	0x2000041c
 8006f0c:	20000420 	.word	0x20000420
 8006f10:	e000ed20 	.word	0xe000ed20
 8006f14:	2000000c 	.word	0x2000000c
 8006f18:	e000ef34 	.word	0xe000ef34

08006f1c <vPortEnterCritical>:
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	607b      	str	r3, [r7, #4]
 8006f34:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <vPortEnterCritical+0x54>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	4a0d      	ldr	r2, [pc, #52]	; (8006f70 <vPortEnterCritical+0x54>)
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <vPortEnterCritical+0x54>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d10e      	bne.n	8006f64 <vPortEnterCritical+0x48>
 8006f46:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <vPortEnterCritical+0x58>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <vPortEnterCritical+0x48>
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	e7fe      	b.n	8006f62 <vPortEnterCritical+0x46>
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	2000000c 	.word	0x2000000c
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <vPortExitCritical>:
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <vPortExitCritical+0x4c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d109      	bne.n	8006f9a <vPortExitCritical+0x22>
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	607b      	str	r3, [r7, #4]
 8006f98:	e7fe      	b.n	8006f98 <vPortExitCritical+0x20>
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <vPortExitCritical+0x4c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	4a08      	ldr	r2, [pc, #32]	; (8006fc4 <vPortExitCritical+0x4c>)
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <vPortExitCritical+0x4c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d104      	bne.n	8006fb6 <vPortExitCritical+0x3e>
 8006fac:	2300      	movs	r3, #0
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	2000000c 	.word	0x2000000c
	...

08006fd0 <PendSV_Handler>:
 8006fd0:	f3ef 8009 	mrs	r0, PSP
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	4b15      	ldr	r3, [pc, #84]	; (8007030 <pxCurrentTCBConst>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	f01e 0f10 	tst.w	lr, #16
 8006fe0:	bf08      	it	eq
 8006fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fea:	6010      	str	r0, [r2, #0]
 8006fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ff4:	f380 8811 	msr	BASEPRI, r0
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f7ff fcd6 	bl	80069b0 <vTaskSwitchContext>
 8007004:	f04f 0000 	mov.w	r0, #0
 8007008:	f380 8811 	msr	BASEPRI, r0
 800700c:	bc09      	pop	{r0, r3}
 800700e:	6819      	ldr	r1, [r3, #0]
 8007010:	6808      	ldr	r0, [r1, #0]
 8007012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007016:	f01e 0f10 	tst.w	lr, #16
 800701a:	bf08      	it	eq
 800701c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007020:	f380 8809 	msr	PSP, r0
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	f3af 8000 	nop.w

08007030 <pxCurrentTCBConst>:
 8007030:	200002f0 	.word	0x200002f0
 8007034:	bf00      	nop
 8007036:	bf00      	nop

08007038 <SysTick_Handler>:
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	607b      	str	r3, [r7, #4]
 8007050:	f7ff fbf6 	bl	8006840 <xTaskIncrementTick>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <SysTick_Handler+0x2a>
 800705a:	4b06      	ldr	r3, [pc, #24]	; (8007074 <SysTick_Handler+0x3c>)
 800705c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	2300      	movs	r3, #0
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <vPortSetupTimerInterrupt>:
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <vPortSetupTimerInterrupt+0x34>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <vPortSetupTimerInterrupt+0x38>)
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <vPortSetupTimerInterrupt+0x3c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <vPortSetupTimerInterrupt+0x40>)
 800708e:	fba2 2303 	umull	r2, r3, r2, r3
 8007092:	099b      	lsrs	r3, r3, #6
 8007094:	4a09      	ldr	r2, [pc, #36]	; (80070bc <vPortSetupTimerInterrupt+0x44>)
 8007096:	3b01      	subs	r3, #1
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	4b04      	ldr	r3, [pc, #16]	; (80070ac <vPortSetupTimerInterrupt+0x34>)
 800709c:	2207      	movs	r2, #7
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	bf00      	nop
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	e000e010 	.word	0xe000e010
 80070b0:	e000e018 	.word	0xe000e018
 80070b4:	20000000 	.word	0x20000000
 80070b8:	10624dd3 	.word	0x10624dd3
 80070bc:	e000e014 	.word	0xe000e014

080070c0 <vPortEnableVFP>:
 80070c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070d0 <vPortEnableVFP+0x10>
 80070c4:	6801      	ldr	r1, [r0, #0]
 80070c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070ca:	6001      	str	r1, [r0, #0]
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	e000ed88 	.word	0xe000ed88

080070d4 <pvPortMalloc>:
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	2300      	movs	r3, #0
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	f7ff fb04 	bl	80066ec <vTaskSuspendAll>
 80070e4:	4b57      	ldr	r3, [pc, #348]	; (8007244 <pvPortMalloc+0x170>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <pvPortMalloc+0x1c>
 80070ec:	f000 f90c 	bl	8007308 <prvHeapInit>
 80070f0:	4b55      	ldr	r3, [pc, #340]	; (8007248 <pvPortMalloc+0x174>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4013      	ands	r3, r2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f040 808c 	bne.w	8007216 <pvPortMalloc+0x142>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01c      	beq.n	800713e <pvPortMalloc+0x6a>
 8007104:	2208      	movs	r2, #8
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4413      	add	r3, r2
 800710a:	607b      	str	r3, [r7, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	2b00      	cmp	r3, #0
 8007114:	d013      	beq.n	800713e <pvPortMalloc+0x6a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f023 0307 	bic.w	r3, r3, #7
 800711c:	3308      	adds	r3, #8
 800711e:	607b      	str	r3, [r7, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <pvPortMalloc+0x6a>
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e7fe      	b.n	800713c <pvPortMalloc+0x68>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d068      	beq.n	8007216 <pvPortMalloc+0x142>
 8007144:	4b41      	ldr	r3, [pc, #260]	; (800724c <pvPortMalloc+0x178>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	429a      	cmp	r2, r3
 800714c:	d863      	bhi.n	8007216 <pvPortMalloc+0x142>
 800714e:	4b40      	ldr	r3, [pc, #256]	; (8007250 <pvPortMalloc+0x17c>)
 8007150:	623b      	str	r3, [r7, #32]
 8007152:	4b3f      	ldr	r3, [pc, #252]	; (8007250 <pvPortMalloc+0x17c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
 8007158:	e004      	b.n	8007164 <pvPortMalloc+0x90>
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	623b      	str	r3, [r7, #32]
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	429a      	cmp	r2, r3
 800716c:	d903      	bls.n	8007176 <pvPortMalloc+0xa2>
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1f1      	bne.n	800715a <pvPortMalloc+0x86>
 8007176:	4b33      	ldr	r3, [pc, #204]	; (8007244 <pvPortMalloc+0x170>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717c:	429a      	cmp	r2, r3
 800717e:	d04a      	beq.n	8007216 <pvPortMalloc+0x142>
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2208      	movs	r2, #8
 8007186:	4413      	add	r3, r2
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	1ad2      	subs	r2, r2, r3
 800719a:	2308      	movs	r3, #8
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	429a      	cmp	r2, r3
 80071a0:	d91e      	bls.n	80071e0 <pvPortMalloc+0x10c>
 80071a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4413      	add	r3, r2
 80071a8:	61bb      	str	r3, [r7, #24]
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d009      	beq.n	80071c8 <pvPortMalloc+0xf4>
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	e7fe      	b.n	80071c6 <pvPortMalloc+0xf2>
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	1ad2      	subs	r2, r2, r3
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	605a      	str	r2, [r3, #4]
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]
 80071da:	69b8      	ldr	r0, [r7, #24]
 80071dc:	f000 f8f6 	bl	80073cc <prvInsertBlockIntoFreeList>
 80071e0:	4b1a      	ldr	r3, [pc, #104]	; (800724c <pvPortMalloc+0x178>)
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	4a18      	ldr	r2, [pc, #96]	; (800724c <pvPortMalloc+0x178>)
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	4b17      	ldr	r3, [pc, #92]	; (800724c <pvPortMalloc+0x178>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b18      	ldr	r3, [pc, #96]	; (8007254 <pvPortMalloc+0x180>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d203      	bcs.n	8007202 <pvPortMalloc+0x12e>
 80071fa:	4b14      	ldr	r3, [pc, #80]	; (800724c <pvPortMalloc+0x178>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a15      	ldr	r2, [pc, #84]	; (8007254 <pvPortMalloc+0x180>)
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	4b10      	ldr	r3, [pc, #64]	; (8007248 <pvPortMalloc+0x174>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	431a      	orrs	r2, r3
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	605a      	str	r2, [r3, #4]
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	f7ff fa77 	bl	8006708 <xTaskResumeAll>
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	2b00      	cmp	r3, #0
 8007222:	d009      	beq.n	8007238 <pvPortMalloc+0x164>
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	e7fe      	b.n	8007236 <pvPortMalloc+0x162>
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	4618      	mov	r0, r3
 800723c:	3728      	adds	r7, #40	; 0x28
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	2000402c 	.word	0x2000402c
 8007248:	20004038 	.word	0x20004038
 800724c:	20004030 	.word	0x20004030
 8007250:	20004024 	.word	0x20004024
 8007254:	20004034 	.word	0x20004034

08007258 <vPortFree>:
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d046      	beq.n	80072f8 <vPortFree+0xa0>
 800726a:	2308      	movs	r3, #8
 800726c:	425b      	negs	r3, r3
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4413      	add	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4b20      	ldr	r3, [pc, #128]	; (8007300 <vPortFree+0xa8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4013      	ands	r3, r2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <vPortFree+0x42>
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e7fe      	b.n	8007298 <vPortFree+0x40>
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <vPortFree+0x5e>
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	60bb      	str	r3, [r7, #8]
 80072b4:	e7fe      	b.n	80072b4 <vPortFree+0x5c>
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	4b11      	ldr	r3, [pc, #68]	; (8007300 <vPortFree+0xa8>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4013      	ands	r3, r2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d019      	beq.n	80072f8 <vPortFree+0xa0>
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d115      	bne.n	80072f8 <vPortFree+0xa0>
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <vPortFree+0xa8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	43db      	mvns	r3, r3
 80072d6:	401a      	ands	r2, r3
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	605a      	str	r2, [r3, #4]
 80072dc:	f7ff fa06 	bl	80066ec <vTaskSuspendAll>
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	4b07      	ldr	r3, [pc, #28]	; (8007304 <vPortFree+0xac>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4413      	add	r3, r2
 80072ea:	4a06      	ldr	r2, [pc, #24]	; (8007304 <vPortFree+0xac>)
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	6938      	ldr	r0, [r7, #16]
 80072f0:	f000 f86c 	bl	80073cc <prvInsertBlockIntoFreeList>
 80072f4:	f7ff fa08 	bl	8006708 <xTaskResumeAll>
 80072f8:	bf00      	nop
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20004038 	.word	0x20004038
 8007304:	20004030 	.word	0x20004030

08007308 <prvHeapInit>:
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	4b27      	ldr	r3, [pc, #156]	; (80073b4 <prvHeapInit+0xac>)
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00c      	beq.n	800733c <prvHeapInit+0x34>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3307      	adds	r3, #7
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0307 	bic.w	r3, r3, #7
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	4a1f      	ldr	r2, [pc, #124]	; (80073b4 <prvHeapInit+0xac>)
 8007338:	4413      	add	r3, r2
 800733a:	60bb      	str	r3, [r7, #8]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	607b      	str	r3, [r7, #4]
 8007340:	4a1d      	ldr	r2, [pc, #116]	; (80073b8 <prvHeapInit+0xb0>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	4b1c      	ldr	r3, [pc, #112]	; (80073b8 <prvHeapInit+0xb0>)
 8007348:	2200      	movs	r2, #0
 800734a:	605a      	str	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4413      	add	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	2208      	movs	r2, #8
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0307 	bic.w	r3, r3, #7
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4a15      	ldr	r2, [pc, #84]	; (80073bc <prvHeapInit+0xb4>)
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4b14      	ldr	r3, [pc, #80]	; (80073bc <prvHeapInit+0xb4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2200      	movs	r2, #0
 8007370:	605a      	str	r2, [r3, #4]
 8007372:	4b12      	ldr	r3, [pc, #72]	; (80073bc <prvHeapInit+0xb4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	605a      	str	r2, [r3, #4]
 8007388:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <prvHeapInit+0xb4>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	4a0a      	ldr	r2, [pc, #40]	; (80073c0 <prvHeapInit+0xb8>)
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <prvHeapInit+0xbc>)
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <prvHeapInit+0xc0>)
 80073a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	20000424 	.word	0x20000424
 80073b8:	20004024 	.word	0x20004024
 80073bc:	2000402c 	.word	0x2000402c
 80073c0:	20004034 	.word	0x20004034
 80073c4:	20004030 	.word	0x20004030
 80073c8:	20004038 	.word	0x20004038

080073cc <prvInsertBlockIntoFreeList>:
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	4b28      	ldr	r3, [pc, #160]	; (8007478 <prvInsertBlockIntoFreeList+0xac>)
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e002      	b.n	80073e0 <prvInsertBlockIntoFreeList+0x14>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d8f7      	bhi.n	80073da <prvInsertBlockIntoFreeList+0xe>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	60bb      	str	r3, [r7, #8]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	4413      	add	r3, r2
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d108      	bne.n	800740e <prvInsertBlockIntoFreeList+0x42>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	441a      	add	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	607b      	str	r3, [r7, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	441a      	add	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d118      	bne.n	8007454 <prvInsertBlockIntoFreeList+0x88>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b15      	ldr	r3, [pc, #84]	; (800747c <prvInsertBlockIntoFreeList+0xb0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d00d      	beq.n	800744a <prvInsertBlockIntoFreeList+0x7e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	441a      	add	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	e008      	b.n	800745c <prvInsertBlockIntoFreeList+0x90>
 800744a:	4b0c      	ldr	r3, [pc, #48]	; (800747c <prvInsertBlockIntoFreeList+0xb0>)
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	e003      	b.n	800745c <prvInsertBlockIntoFreeList+0x90>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d002      	beq.n	800746a <prvInsertBlockIntoFreeList+0x9e>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20004024 	.word	0x20004024
 800747c:	2000402c 	.word	0x2000402c

08007480 <__errno>:
 8007480:	4b01      	ldr	r3, [pc, #4]	; (8007488 <__errno+0x8>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000010 	.word	0x20000010

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4e0d      	ldr	r6, [pc, #52]	; (80074c4 <__libc_init_array+0x38>)
 8007490:	4c0d      	ldr	r4, [pc, #52]	; (80074c8 <__libc_init_array+0x3c>)
 8007492:	1ba4      	subs	r4, r4, r6
 8007494:	10a4      	asrs	r4, r4, #2
 8007496:	2500      	movs	r5, #0
 8007498:	42a5      	cmp	r5, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	4e0b      	ldr	r6, [pc, #44]	; (80074cc <__libc_init_array+0x40>)
 800749e:	4c0c      	ldr	r4, [pc, #48]	; (80074d0 <__libc_init_array+0x44>)
 80074a0:	f001 ffb4 	bl	800940c <_init>
 80074a4:	1ba4      	subs	r4, r4, r6
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	2500      	movs	r5, #0
 80074aa:	42a5      	cmp	r5, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074b4:	4798      	blx	r3
 80074b6:	3501      	adds	r5, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074be:	4798      	blx	r3
 80074c0:	3501      	adds	r5, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	080096b0 	.word	0x080096b0
 80074c8:	080096b0 	.word	0x080096b0
 80074cc:	080096b0 	.word	0x080096b0
 80074d0:	080096b4 	.word	0x080096b4

080074d4 <malloc>:
 80074d4:	4b02      	ldr	r3, [pc, #8]	; (80074e0 <malloc+0xc>)
 80074d6:	4601      	mov	r1, r0
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	f000 b859 	b.w	8007590 <_malloc_r>
 80074de:	bf00      	nop
 80074e0:	20000010 	.word	0x20000010

080074e4 <memset>:
 80074e4:	4402      	add	r2, r0
 80074e6:	4603      	mov	r3, r0
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d100      	bne.n	80074ee <memset+0xa>
 80074ec:	4770      	bx	lr
 80074ee:	f803 1b01 	strb.w	r1, [r3], #1
 80074f2:	e7f9      	b.n	80074e8 <memset+0x4>

080074f4 <_free_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4605      	mov	r5, r0
 80074f8:	2900      	cmp	r1, #0
 80074fa:	d045      	beq.n	8007588 <_free_r+0x94>
 80074fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007500:	1f0c      	subs	r4, r1, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	bfb8      	it	lt
 8007506:	18e4      	addlt	r4, r4, r3
 8007508:	f000 f996 	bl	8007838 <__malloc_lock>
 800750c:	4a1f      	ldr	r2, [pc, #124]	; (800758c <_free_r+0x98>)
 800750e:	6813      	ldr	r3, [r2, #0]
 8007510:	4610      	mov	r0, r2
 8007512:	b933      	cbnz	r3, 8007522 <_free_r+0x2e>
 8007514:	6063      	str	r3, [r4, #4]
 8007516:	6014      	str	r4, [r2, #0]
 8007518:	4628      	mov	r0, r5
 800751a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800751e:	f000 b98c 	b.w	800783a <__malloc_unlock>
 8007522:	42a3      	cmp	r3, r4
 8007524:	d90c      	bls.n	8007540 <_free_r+0x4c>
 8007526:	6821      	ldr	r1, [r4, #0]
 8007528:	1862      	adds	r2, r4, r1
 800752a:	4293      	cmp	r3, r2
 800752c:	bf04      	itt	eq
 800752e:	681a      	ldreq	r2, [r3, #0]
 8007530:	685b      	ldreq	r3, [r3, #4]
 8007532:	6063      	str	r3, [r4, #4]
 8007534:	bf04      	itt	eq
 8007536:	1852      	addeq	r2, r2, r1
 8007538:	6022      	streq	r2, [r4, #0]
 800753a:	6004      	str	r4, [r0, #0]
 800753c:	e7ec      	b.n	8007518 <_free_r+0x24>
 800753e:	4613      	mov	r3, r2
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	b10a      	cbz	r2, 8007548 <_free_r+0x54>
 8007544:	42a2      	cmp	r2, r4
 8007546:	d9fa      	bls.n	800753e <_free_r+0x4a>
 8007548:	6819      	ldr	r1, [r3, #0]
 800754a:	1858      	adds	r0, r3, r1
 800754c:	42a0      	cmp	r0, r4
 800754e:	d10b      	bne.n	8007568 <_free_r+0x74>
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	4401      	add	r1, r0
 8007554:	1858      	adds	r0, r3, r1
 8007556:	4282      	cmp	r2, r0
 8007558:	6019      	str	r1, [r3, #0]
 800755a:	d1dd      	bne.n	8007518 <_free_r+0x24>
 800755c:	6810      	ldr	r0, [r2, #0]
 800755e:	6852      	ldr	r2, [r2, #4]
 8007560:	605a      	str	r2, [r3, #4]
 8007562:	4401      	add	r1, r0
 8007564:	6019      	str	r1, [r3, #0]
 8007566:	e7d7      	b.n	8007518 <_free_r+0x24>
 8007568:	d902      	bls.n	8007570 <_free_r+0x7c>
 800756a:	230c      	movs	r3, #12
 800756c:	602b      	str	r3, [r5, #0]
 800756e:	e7d3      	b.n	8007518 <_free_r+0x24>
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	1821      	adds	r1, r4, r0
 8007574:	428a      	cmp	r2, r1
 8007576:	bf04      	itt	eq
 8007578:	6811      	ldreq	r1, [r2, #0]
 800757a:	6852      	ldreq	r2, [r2, #4]
 800757c:	6062      	str	r2, [r4, #4]
 800757e:	bf04      	itt	eq
 8007580:	1809      	addeq	r1, r1, r0
 8007582:	6021      	streq	r1, [r4, #0]
 8007584:	605c      	str	r4, [r3, #4]
 8007586:	e7c7      	b.n	8007518 <_free_r+0x24>
 8007588:	bd38      	pop	{r3, r4, r5, pc}
 800758a:	bf00      	nop
 800758c:	2000403c 	.word	0x2000403c

08007590 <_malloc_r>:
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	1ccd      	adds	r5, r1, #3
 8007594:	f025 0503 	bic.w	r5, r5, #3
 8007598:	3508      	adds	r5, #8
 800759a:	2d0c      	cmp	r5, #12
 800759c:	bf38      	it	cc
 800759e:	250c      	movcc	r5, #12
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	4606      	mov	r6, r0
 80075a4:	db01      	blt.n	80075aa <_malloc_r+0x1a>
 80075a6:	42a9      	cmp	r1, r5
 80075a8:	d903      	bls.n	80075b2 <_malloc_r+0x22>
 80075aa:	230c      	movs	r3, #12
 80075ac:	6033      	str	r3, [r6, #0]
 80075ae:	2000      	movs	r0, #0
 80075b0:	bd70      	pop	{r4, r5, r6, pc}
 80075b2:	f000 f941 	bl	8007838 <__malloc_lock>
 80075b6:	4a21      	ldr	r2, [pc, #132]	; (800763c <_malloc_r+0xac>)
 80075b8:	6814      	ldr	r4, [r2, #0]
 80075ba:	4621      	mov	r1, r4
 80075bc:	b991      	cbnz	r1, 80075e4 <_malloc_r+0x54>
 80075be:	4c20      	ldr	r4, [pc, #128]	; (8007640 <_malloc_r+0xb0>)
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	b91b      	cbnz	r3, 80075cc <_malloc_r+0x3c>
 80075c4:	4630      	mov	r0, r6
 80075c6:	f000 f855 	bl	8007674 <_sbrk_r>
 80075ca:	6020      	str	r0, [r4, #0]
 80075cc:	4629      	mov	r1, r5
 80075ce:	4630      	mov	r0, r6
 80075d0:	f000 f850 	bl	8007674 <_sbrk_r>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d124      	bne.n	8007622 <_malloc_r+0x92>
 80075d8:	230c      	movs	r3, #12
 80075da:	6033      	str	r3, [r6, #0]
 80075dc:	4630      	mov	r0, r6
 80075de:	f000 f92c 	bl	800783a <__malloc_unlock>
 80075e2:	e7e4      	b.n	80075ae <_malloc_r+0x1e>
 80075e4:	680b      	ldr	r3, [r1, #0]
 80075e6:	1b5b      	subs	r3, r3, r5
 80075e8:	d418      	bmi.n	800761c <_malloc_r+0x8c>
 80075ea:	2b0b      	cmp	r3, #11
 80075ec:	d90f      	bls.n	800760e <_malloc_r+0x7e>
 80075ee:	600b      	str	r3, [r1, #0]
 80075f0:	50cd      	str	r5, [r1, r3]
 80075f2:	18cc      	adds	r4, r1, r3
 80075f4:	4630      	mov	r0, r6
 80075f6:	f000 f920 	bl	800783a <__malloc_unlock>
 80075fa:	f104 000b 	add.w	r0, r4, #11
 80075fe:	1d23      	adds	r3, r4, #4
 8007600:	f020 0007 	bic.w	r0, r0, #7
 8007604:	1ac3      	subs	r3, r0, r3
 8007606:	d0d3      	beq.n	80075b0 <_malloc_r+0x20>
 8007608:	425a      	negs	r2, r3
 800760a:	50e2      	str	r2, [r4, r3]
 800760c:	e7d0      	b.n	80075b0 <_malloc_r+0x20>
 800760e:	428c      	cmp	r4, r1
 8007610:	684b      	ldr	r3, [r1, #4]
 8007612:	bf16      	itet	ne
 8007614:	6063      	strne	r3, [r4, #4]
 8007616:	6013      	streq	r3, [r2, #0]
 8007618:	460c      	movne	r4, r1
 800761a:	e7eb      	b.n	80075f4 <_malloc_r+0x64>
 800761c:	460c      	mov	r4, r1
 800761e:	6849      	ldr	r1, [r1, #4]
 8007620:	e7cc      	b.n	80075bc <_malloc_r+0x2c>
 8007622:	1cc4      	adds	r4, r0, #3
 8007624:	f024 0403 	bic.w	r4, r4, #3
 8007628:	42a0      	cmp	r0, r4
 800762a:	d005      	beq.n	8007638 <_malloc_r+0xa8>
 800762c:	1a21      	subs	r1, r4, r0
 800762e:	4630      	mov	r0, r6
 8007630:	f000 f820 	bl	8007674 <_sbrk_r>
 8007634:	3001      	adds	r0, #1
 8007636:	d0cf      	beq.n	80075d8 <_malloc_r+0x48>
 8007638:	6025      	str	r5, [r4, #0]
 800763a:	e7db      	b.n	80075f4 <_malloc_r+0x64>
 800763c:	2000403c 	.word	0x2000403c
 8007640:	20004040 	.word	0x20004040

08007644 <iprintf>:
 8007644:	b40f      	push	{r0, r1, r2, r3}
 8007646:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <iprintf+0x2c>)
 8007648:	b513      	push	{r0, r1, r4, lr}
 800764a:	681c      	ldr	r4, [r3, #0]
 800764c:	b124      	cbz	r4, 8007658 <iprintf+0x14>
 800764e:	69a3      	ldr	r3, [r4, #24]
 8007650:	b913      	cbnz	r3, 8007658 <iprintf+0x14>
 8007652:	4620      	mov	r0, r4
 8007654:	f000 f866 	bl	8007724 <__sinit>
 8007658:	ab05      	add	r3, sp, #20
 800765a:	9a04      	ldr	r2, [sp, #16]
 800765c:	68a1      	ldr	r1, [r4, #8]
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	4620      	mov	r0, r4
 8007662:	f000 f915 	bl	8007890 <_vfiprintf_r>
 8007666:	b002      	add	sp, #8
 8007668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800766c:	b004      	add	sp, #16
 800766e:	4770      	bx	lr
 8007670:	20000010 	.word	0x20000010

08007674 <_sbrk_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4c06      	ldr	r4, [pc, #24]	; (8007690 <_sbrk_r+0x1c>)
 8007678:	2300      	movs	r3, #0
 800767a:	4605      	mov	r5, r0
 800767c:	4608      	mov	r0, r1
 800767e:	6023      	str	r3, [r4, #0]
 8007680:	f7fb f8ae 	bl	80027e0 <_sbrk>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d102      	bne.n	800768e <_sbrk_r+0x1a>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	b103      	cbz	r3, 800768e <_sbrk_r+0x1a>
 800768c:	602b      	str	r3, [r5, #0]
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	2000439c 	.word	0x2000439c

08007694 <strcpy>:
 8007694:	4603      	mov	r3, r0
 8007696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800769a:	f803 2b01 	strb.w	r2, [r3], #1
 800769e:	2a00      	cmp	r2, #0
 80076a0:	d1f9      	bne.n	8007696 <strcpy+0x2>
 80076a2:	4770      	bx	lr

080076a4 <std>:
 80076a4:	2300      	movs	r3, #0
 80076a6:	b510      	push	{r4, lr}
 80076a8:	4604      	mov	r4, r0
 80076aa:	e9c0 3300 	strd	r3, r3, [r0]
 80076ae:	6083      	str	r3, [r0, #8]
 80076b0:	8181      	strh	r1, [r0, #12]
 80076b2:	6643      	str	r3, [r0, #100]	; 0x64
 80076b4:	81c2      	strh	r2, [r0, #14]
 80076b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ba:	6183      	str	r3, [r0, #24]
 80076bc:	4619      	mov	r1, r3
 80076be:	2208      	movs	r2, #8
 80076c0:	305c      	adds	r0, #92	; 0x5c
 80076c2:	f7ff ff0f 	bl	80074e4 <memset>
 80076c6:	4b05      	ldr	r3, [pc, #20]	; (80076dc <std+0x38>)
 80076c8:	6263      	str	r3, [r4, #36]	; 0x24
 80076ca:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <std+0x3c>)
 80076cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <std+0x40>)
 80076d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <std+0x44>)
 80076d4:	6224      	str	r4, [r4, #32]
 80076d6:	6323      	str	r3, [r4, #48]	; 0x30
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	bf00      	nop
 80076dc:	08007dcd 	.word	0x08007dcd
 80076e0:	08007def 	.word	0x08007def
 80076e4:	08007e27 	.word	0x08007e27
 80076e8:	08007e4b 	.word	0x08007e4b

080076ec <_cleanup_r>:
 80076ec:	4901      	ldr	r1, [pc, #4]	; (80076f4 <_cleanup_r+0x8>)
 80076ee:	f000 b885 	b.w	80077fc <_fwalk_reent>
 80076f2:	bf00      	nop
 80076f4:	08008125 	.word	0x08008125

080076f8 <__sfmoreglue>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	1e4a      	subs	r2, r1, #1
 80076fc:	2568      	movs	r5, #104	; 0x68
 80076fe:	4355      	muls	r5, r2
 8007700:	460e      	mov	r6, r1
 8007702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007706:	f7ff ff43 	bl	8007590 <_malloc_r>
 800770a:	4604      	mov	r4, r0
 800770c:	b140      	cbz	r0, 8007720 <__sfmoreglue+0x28>
 800770e:	2100      	movs	r1, #0
 8007710:	e9c0 1600 	strd	r1, r6, [r0]
 8007714:	300c      	adds	r0, #12
 8007716:	60a0      	str	r0, [r4, #8]
 8007718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800771c:	f7ff fee2 	bl	80074e4 <memset>
 8007720:	4620      	mov	r0, r4
 8007722:	bd70      	pop	{r4, r5, r6, pc}

08007724 <__sinit>:
 8007724:	6983      	ldr	r3, [r0, #24]
 8007726:	b510      	push	{r4, lr}
 8007728:	4604      	mov	r4, r0
 800772a:	bb33      	cbnz	r3, 800777a <__sinit+0x56>
 800772c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007730:	6503      	str	r3, [r0, #80]	; 0x50
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <__sinit+0x58>)
 8007734:	4a12      	ldr	r2, [pc, #72]	; (8007780 <__sinit+0x5c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6282      	str	r2, [r0, #40]	; 0x28
 800773a:	4298      	cmp	r0, r3
 800773c:	bf04      	itt	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	6183      	streq	r3, [r0, #24]
 8007742:	f000 f81f 	bl	8007784 <__sfp>
 8007746:	6060      	str	r0, [r4, #4]
 8007748:	4620      	mov	r0, r4
 800774a:	f000 f81b 	bl	8007784 <__sfp>
 800774e:	60a0      	str	r0, [r4, #8]
 8007750:	4620      	mov	r0, r4
 8007752:	f000 f817 	bl	8007784 <__sfp>
 8007756:	2200      	movs	r2, #0
 8007758:	60e0      	str	r0, [r4, #12]
 800775a:	2104      	movs	r1, #4
 800775c:	6860      	ldr	r0, [r4, #4]
 800775e:	f7ff ffa1 	bl	80076a4 <std>
 8007762:	2201      	movs	r2, #1
 8007764:	2109      	movs	r1, #9
 8007766:	68a0      	ldr	r0, [r4, #8]
 8007768:	f7ff ff9c 	bl	80076a4 <std>
 800776c:	2202      	movs	r2, #2
 800776e:	2112      	movs	r1, #18
 8007770:	68e0      	ldr	r0, [r4, #12]
 8007772:	f7ff ff97 	bl	80076a4 <std>
 8007776:	2301      	movs	r3, #1
 8007778:	61a3      	str	r3, [r4, #24]
 800777a:	bd10      	pop	{r4, pc}
 800777c:	080095cc 	.word	0x080095cc
 8007780:	080076ed 	.word	0x080076ed

08007784 <__sfp>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	4b1b      	ldr	r3, [pc, #108]	; (80077f4 <__sfp+0x70>)
 8007788:	681e      	ldr	r6, [r3, #0]
 800778a:	69b3      	ldr	r3, [r6, #24]
 800778c:	4607      	mov	r7, r0
 800778e:	b913      	cbnz	r3, 8007796 <__sfp+0x12>
 8007790:	4630      	mov	r0, r6
 8007792:	f7ff ffc7 	bl	8007724 <__sinit>
 8007796:	3648      	adds	r6, #72	; 0x48
 8007798:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800779c:	3b01      	subs	r3, #1
 800779e:	d503      	bpl.n	80077a8 <__sfp+0x24>
 80077a0:	6833      	ldr	r3, [r6, #0]
 80077a2:	b133      	cbz	r3, 80077b2 <__sfp+0x2e>
 80077a4:	6836      	ldr	r6, [r6, #0]
 80077a6:	e7f7      	b.n	8007798 <__sfp+0x14>
 80077a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077ac:	b16d      	cbz	r5, 80077ca <__sfp+0x46>
 80077ae:	3468      	adds	r4, #104	; 0x68
 80077b0:	e7f4      	b.n	800779c <__sfp+0x18>
 80077b2:	2104      	movs	r1, #4
 80077b4:	4638      	mov	r0, r7
 80077b6:	f7ff ff9f 	bl	80076f8 <__sfmoreglue>
 80077ba:	6030      	str	r0, [r6, #0]
 80077bc:	2800      	cmp	r0, #0
 80077be:	d1f1      	bne.n	80077a4 <__sfp+0x20>
 80077c0:	230c      	movs	r3, #12
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	4604      	mov	r4, r0
 80077c6:	4620      	mov	r0, r4
 80077c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <__sfp+0x74>)
 80077cc:	6665      	str	r5, [r4, #100]	; 0x64
 80077ce:	e9c4 5500 	strd	r5, r5, [r4]
 80077d2:	60a5      	str	r5, [r4, #8]
 80077d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80077d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80077dc:	2208      	movs	r2, #8
 80077de:	4629      	mov	r1, r5
 80077e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077e4:	f7ff fe7e 	bl	80074e4 <memset>
 80077e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077f0:	e7e9      	b.n	80077c6 <__sfp+0x42>
 80077f2:	bf00      	nop
 80077f4:	080095cc 	.word	0x080095cc
 80077f8:	ffff0001 	.word	0xffff0001

080077fc <_fwalk_reent>:
 80077fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007800:	4680      	mov	r8, r0
 8007802:	4689      	mov	r9, r1
 8007804:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007808:	2600      	movs	r6, #0
 800780a:	b914      	cbnz	r4, 8007812 <_fwalk_reent+0x16>
 800780c:	4630      	mov	r0, r6
 800780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007812:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007816:	3f01      	subs	r7, #1
 8007818:	d501      	bpl.n	800781e <_fwalk_reent+0x22>
 800781a:	6824      	ldr	r4, [r4, #0]
 800781c:	e7f5      	b.n	800780a <_fwalk_reent+0xe>
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d907      	bls.n	8007834 <_fwalk_reent+0x38>
 8007824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007828:	3301      	adds	r3, #1
 800782a:	d003      	beq.n	8007834 <_fwalk_reent+0x38>
 800782c:	4629      	mov	r1, r5
 800782e:	4640      	mov	r0, r8
 8007830:	47c8      	blx	r9
 8007832:	4306      	orrs	r6, r0
 8007834:	3568      	adds	r5, #104	; 0x68
 8007836:	e7ee      	b.n	8007816 <_fwalk_reent+0x1a>

08007838 <__malloc_lock>:
 8007838:	4770      	bx	lr

0800783a <__malloc_unlock>:
 800783a:	4770      	bx	lr

0800783c <__sfputc_r>:
 800783c:	6893      	ldr	r3, [r2, #8]
 800783e:	3b01      	subs	r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	b410      	push	{r4}
 8007844:	6093      	str	r3, [r2, #8]
 8007846:	da08      	bge.n	800785a <__sfputc_r+0x1e>
 8007848:	6994      	ldr	r4, [r2, #24]
 800784a:	42a3      	cmp	r3, r4
 800784c:	db01      	blt.n	8007852 <__sfputc_r+0x16>
 800784e:	290a      	cmp	r1, #10
 8007850:	d103      	bne.n	800785a <__sfputc_r+0x1e>
 8007852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007856:	f000 bafd 	b.w	8007e54 <__swbuf_r>
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	1c58      	adds	r0, r3, #1
 800785e:	6010      	str	r0, [r2, #0]
 8007860:	7019      	strb	r1, [r3, #0]
 8007862:	4608      	mov	r0, r1
 8007864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007868:	4770      	bx	lr

0800786a <__sfputs_r>:
 800786a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786c:	4606      	mov	r6, r0
 800786e:	460f      	mov	r7, r1
 8007870:	4614      	mov	r4, r2
 8007872:	18d5      	adds	r5, r2, r3
 8007874:	42ac      	cmp	r4, r5
 8007876:	d101      	bne.n	800787c <__sfputs_r+0x12>
 8007878:	2000      	movs	r0, #0
 800787a:	e007      	b.n	800788c <__sfputs_r+0x22>
 800787c:	463a      	mov	r2, r7
 800787e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007882:	4630      	mov	r0, r6
 8007884:	f7ff ffda 	bl	800783c <__sfputc_r>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d1f3      	bne.n	8007874 <__sfputs_r+0xa>
 800788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007890 <_vfiprintf_r>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	460c      	mov	r4, r1
 8007896:	b09d      	sub	sp, #116	; 0x74
 8007898:	4617      	mov	r7, r2
 800789a:	461d      	mov	r5, r3
 800789c:	4606      	mov	r6, r0
 800789e:	b118      	cbz	r0, 80078a8 <_vfiprintf_r+0x18>
 80078a0:	6983      	ldr	r3, [r0, #24]
 80078a2:	b90b      	cbnz	r3, 80078a8 <_vfiprintf_r+0x18>
 80078a4:	f7ff ff3e 	bl	8007724 <__sinit>
 80078a8:	4b7c      	ldr	r3, [pc, #496]	; (8007a9c <_vfiprintf_r+0x20c>)
 80078aa:	429c      	cmp	r4, r3
 80078ac:	d158      	bne.n	8007960 <_vfiprintf_r+0xd0>
 80078ae:	6874      	ldr	r4, [r6, #4]
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	0718      	lsls	r0, r3, #28
 80078b4:	d55e      	bpl.n	8007974 <_vfiprintf_r+0xe4>
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d05b      	beq.n	8007974 <_vfiprintf_r+0xe4>
 80078bc:	2300      	movs	r3, #0
 80078be:	9309      	str	r3, [sp, #36]	; 0x24
 80078c0:	2320      	movs	r3, #32
 80078c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078c6:	2330      	movs	r3, #48	; 0x30
 80078c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078cc:	9503      	str	r5, [sp, #12]
 80078ce:	f04f 0b01 	mov.w	fp, #1
 80078d2:	46b8      	mov	r8, r7
 80078d4:	4645      	mov	r5, r8
 80078d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078da:	b10b      	cbz	r3, 80078e0 <_vfiprintf_r+0x50>
 80078dc:	2b25      	cmp	r3, #37	; 0x25
 80078de:	d154      	bne.n	800798a <_vfiprintf_r+0xfa>
 80078e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80078e4:	d00b      	beq.n	80078fe <_vfiprintf_r+0x6e>
 80078e6:	4653      	mov	r3, sl
 80078e8:	463a      	mov	r2, r7
 80078ea:	4621      	mov	r1, r4
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7ff ffbc 	bl	800786a <__sfputs_r>
 80078f2:	3001      	adds	r0, #1
 80078f4:	f000 80c2 	beq.w	8007a7c <_vfiprintf_r+0x1ec>
 80078f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fa:	4453      	add	r3, sl
 80078fc:	9309      	str	r3, [sp, #36]	; 0x24
 80078fe:	f898 3000 	ldrb.w	r3, [r8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80ba 	beq.w	8007a7c <_vfiprintf_r+0x1ec>
 8007908:	2300      	movs	r3, #0
 800790a:	f04f 32ff 	mov.w	r2, #4294967295
 800790e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	9307      	str	r3, [sp, #28]
 8007916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800791a:	931a      	str	r3, [sp, #104]	; 0x68
 800791c:	46a8      	mov	r8, r5
 800791e:	2205      	movs	r2, #5
 8007920:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007924:	485e      	ldr	r0, [pc, #376]	; (8007aa0 <_vfiprintf_r+0x210>)
 8007926:	f7f8 fc6b 	bl	8000200 <memchr>
 800792a:	9b04      	ldr	r3, [sp, #16]
 800792c:	bb78      	cbnz	r0, 800798e <_vfiprintf_r+0xfe>
 800792e:	06d9      	lsls	r1, r3, #27
 8007930:	bf44      	itt	mi
 8007932:	2220      	movmi	r2, #32
 8007934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007938:	071a      	lsls	r2, r3, #28
 800793a:	bf44      	itt	mi
 800793c:	222b      	movmi	r2, #43	; 0x2b
 800793e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007942:	782a      	ldrb	r2, [r5, #0]
 8007944:	2a2a      	cmp	r2, #42	; 0x2a
 8007946:	d02a      	beq.n	800799e <_vfiprintf_r+0x10e>
 8007948:	9a07      	ldr	r2, [sp, #28]
 800794a:	46a8      	mov	r8, r5
 800794c:	2000      	movs	r0, #0
 800794e:	250a      	movs	r5, #10
 8007950:	4641      	mov	r1, r8
 8007952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007956:	3b30      	subs	r3, #48	; 0x30
 8007958:	2b09      	cmp	r3, #9
 800795a:	d969      	bls.n	8007a30 <_vfiprintf_r+0x1a0>
 800795c:	b360      	cbz	r0, 80079b8 <_vfiprintf_r+0x128>
 800795e:	e024      	b.n	80079aa <_vfiprintf_r+0x11a>
 8007960:	4b50      	ldr	r3, [pc, #320]	; (8007aa4 <_vfiprintf_r+0x214>)
 8007962:	429c      	cmp	r4, r3
 8007964:	d101      	bne.n	800796a <_vfiprintf_r+0xda>
 8007966:	68b4      	ldr	r4, [r6, #8]
 8007968:	e7a2      	b.n	80078b0 <_vfiprintf_r+0x20>
 800796a:	4b4f      	ldr	r3, [pc, #316]	; (8007aa8 <_vfiprintf_r+0x218>)
 800796c:	429c      	cmp	r4, r3
 800796e:	bf08      	it	eq
 8007970:	68f4      	ldreq	r4, [r6, #12]
 8007972:	e79d      	b.n	80078b0 <_vfiprintf_r+0x20>
 8007974:	4621      	mov	r1, r4
 8007976:	4630      	mov	r0, r6
 8007978:	f000 fad0 	bl	8007f1c <__swsetup_r>
 800797c:	2800      	cmp	r0, #0
 800797e:	d09d      	beq.n	80078bc <_vfiprintf_r+0x2c>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	b01d      	add	sp, #116	; 0x74
 8007986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798a:	46a8      	mov	r8, r5
 800798c:	e7a2      	b.n	80078d4 <_vfiprintf_r+0x44>
 800798e:	4a44      	ldr	r2, [pc, #272]	; (8007aa0 <_vfiprintf_r+0x210>)
 8007990:	1a80      	subs	r0, r0, r2
 8007992:	fa0b f000 	lsl.w	r0, fp, r0
 8007996:	4318      	orrs	r0, r3
 8007998:	9004      	str	r0, [sp, #16]
 800799a:	4645      	mov	r5, r8
 800799c:	e7be      	b.n	800791c <_vfiprintf_r+0x8c>
 800799e:	9a03      	ldr	r2, [sp, #12]
 80079a0:	1d11      	adds	r1, r2, #4
 80079a2:	6812      	ldr	r2, [r2, #0]
 80079a4:	9103      	str	r1, [sp, #12]
 80079a6:	2a00      	cmp	r2, #0
 80079a8:	db01      	blt.n	80079ae <_vfiprintf_r+0x11e>
 80079aa:	9207      	str	r2, [sp, #28]
 80079ac:	e004      	b.n	80079b8 <_vfiprintf_r+0x128>
 80079ae:	4252      	negs	r2, r2
 80079b0:	f043 0302 	orr.w	r3, r3, #2
 80079b4:	9207      	str	r2, [sp, #28]
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	f898 3000 	ldrb.w	r3, [r8]
 80079bc:	2b2e      	cmp	r3, #46	; 0x2e
 80079be:	d10e      	bne.n	80079de <_vfiprintf_r+0x14e>
 80079c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079c4:	2b2a      	cmp	r3, #42	; 0x2a
 80079c6:	d138      	bne.n	8007a3a <_vfiprintf_r+0x1aa>
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	9203      	str	r2, [sp, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bfb8      	it	lt
 80079d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079d8:	f108 0802 	add.w	r8, r8, #2
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	4d33      	ldr	r5, [pc, #204]	; (8007aac <_vfiprintf_r+0x21c>)
 80079e0:	f898 1000 	ldrb.w	r1, [r8]
 80079e4:	2203      	movs	r2, #3
 80079e6:	4628      	mov	r0, r5
 80079e8:	f7f8 fc0a 	bl	8000200 <memchr>
 80079ec:	b140      	cbz	r0, 8007a00 <_vfiprintf_r+0x170>
 80079ee:	2340      	movs	r3, #64	; 0x40
 80079f0:	1b40      	subs	r0, r0, r5
 80079f2:	fa03 f000 	lsl.w	r0, r3, r0
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	4303      	orrs	r3, r0
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	9304      	str	r3, [sp, #16]
 8007a00:	f898 1000 	ldrb.w	r1, [r8]
 8007a04:	482a      	ldr	r0, [pc, #168]	; (8007ab0 <_vfiprintf_r+0x220>)
 8007a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a0a:	2206      	movs	r2, #6
 8007a0c:	f108 0701 	add.w	r7, r8, #1
 8007a10:	f7f8 fbf6 	bl	8000200 <memchr>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d037      	beq.n	8007a88 <_vfiprintf_r+0x1f8>
 8007a18:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <_vfiprintf_r+0x224>)
 8007a1a:	bb1b      	cbnz	r3, 8007a64 <_vfiprintf_r+0x1d4>
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	3307      	adds	r3, #7
 8007a20:	f023 0307 	bic.w	r3, r3, #7
 8007a24:	3308      	adds	r3, #8
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2a:	444b      	add	r3, r9
 8007a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2e:	e750      	b.n	80078d2 <_vfiprintf_r+0x42>
 8007a30:	fb05 3202 	mla	r2, r5, r2, r3
 8007a34:	2001      	movs	r0, #1
 8007a36:	4688      	mov	r8, r1
 8007a38:	e78a      	b.n	8007950 <_vfiprintf_r+0xc0>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f108 0801 	add.w	r8, r8, #1
 8007a40:	9305      	str	r3, [sp, #20]
 8007a42:	4619      	mov	r1, r3
 8007a44:	250a      	movs	r5, #10
 8007a46:	4640      	mov	r0, r8
 8007a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a4c:	3a30      	subs	r2, #48	; 0x30
 8007a4e:	2a09      	cmp	r2, #9
 8007a50:	d903      	bls.n	8007a5a <_vfiprintf_r+0x1ca>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0c3      	beq.n	80079de <_vfiprintf_r+0x14e>
 8007a56:	9105      	str	r1, [sp, #20]
 8007a58:	e7c1      	b.n	80079de <_vfiprintf_r+0x14e>
 8007a5a:	fb05 2101 	mla	r1, r5, r1, r2
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4680      	mov	r8, r0
 8007a62:	e7f0      	b.n	8007a46 <_vfiprintf_r+0x1b6>
 8007a64:	ab03      	add	r3, sp, #12
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	4622      	mov	r2, r4
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <_vfiprintf_r+0x228>)
 8007a6c:	a904      	add	r1, sp, #16
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f3af 8000 	nop.w
 8007a74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a78:	4681      	mov	r9, r0
 8007a7a:	d1d5      	bne.n	8007a28 <_vfiprintf_r+0x198>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	065b      	lsls	r3, r3, #25
 8007a80:	f53f af7e 	bmi.w	8007980 <_vfiprintf_r+0xf0>
 8007a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a86:	e77d      	b.n	8007984 <_vfiprintf_r+0xf4>
 8007a88:	ab03      	add	r3, sp, #12
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <_vfiprintf_r+0x228>)
 8007a90:	a904      	add	r1, sp, #16
 8007a92:	4630      	mov	r0, r6
 8007a94:	f000 f888 	bl	8007ba8 <_printf_i>
 8007a98:	e7ec      	b.n	8007a74 <_vfiprintf_r+0x1e4>
 8007a9a:	bf00      	nop
 8007a9c:	080095f0 	.word	0x080095f0
 8007aa0:	08009630 	.word	0x08009630
 8007aa4:	08009610 	.word	0x08009610
 8007aa8:	080095d0 	.word	0x080095d0
 8007aac:	08009636 	.word	0x08009636
 8007ab0:	0800963a 	.word	0x0800963a
 8007ab4:	00000000 	.word	0x00000000
 8007ab8:	0800786b 	.word	0x0800786b

08007abc <_printf_common>:
 8007abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac0:	4691      	mov	r9, r2
 8007ac2:	461f      	mov	r7, r3
 8007ac4:	688a      	ldr	r2, [r1, #8]
 8007ac6:	690b      	ldr	r3, [r1, #16]
 8007ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	bfb8      	it	lt
 8007ad0:	4613      	movlt	r3, r2
 8007ad2:	f8c9 3000 	str.w	r3, [r9]
 8007ad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ada:	4606      	mov	r6, r0
 8007adc:	460c      	mov	r4, r1
 8007ade:	b112      	cbz	r2, 8007ae6 <_printf_common+0x2a>
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f8c9 3000 	str.w	r3, [r9]
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	0699      	lsls	r1, r3, #26
 8007aea:	bf42      	ittt	mi
 8007aec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007af0:	3302      	addmi	r3, #2
 8007af2:	f8c9 3000 	strmi.w	r3, [r9]
 8007af6:	6825      	ldr	r5, [r4, #0]
 8007af8:	f015 0506 	ands.w	r5, r5, #6
 8007afc:	d107      	bne.n	8007b0e <_printf_common+0x52>
 8007afe:	f104 0a19 	add.w	sl, r4, #25
 8007b02:	68e3      	ldr	r3, [r4, #12]
 8007b04:	f8d9 2000 	ldr.w	r2, [r9]
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	42ab      	cmp	r3, r5
 8007b0c:	dc28      	bgt.n	8007b60 <_printf_common+0xa4>
 8007b0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	3300      	adds	r3, #0
 8007b16:	bf18      	it	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	0692      	lsls	r2, r2, #26
 8007b1c:	d42d      	bmi.n	8007b7a <_printf_common+0xbe>
 8007b1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b22:	4639      	mov	r1, r7
 8007b24:	4630      	mov	r0, r6
 8007b26:	47c0      	blx	r8
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d020      	beq.n	8007b6e <_printf_common+0xb2>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	68e5      	ldr	r5, [r4, #12]
 8007b30:	f8d9 2000 	ldr.w	r2, [r9]
 8007b34:	f003 0306 	and.w	r3, r3, #6
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	bf08      	it	eq
 8007b3c:	1aad      	subeq	r5, r5, r2
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	6922      	ldr	r2, [r4, #16]
 8007b42:	bf0c      	ite	eq
 8007b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b48:	2500      	movne	r5, #0
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	bfc4      	itt	gt
 8007b4e:	1a9b      	subgt	r3, r3, r2
 8007b50:	18ed      	addgt	r5, r5, r3
 8007b52:	f04f 0900 	mov.w	r9, #0
 8007b56:	341a      	adds	r4, #26
 8007b58:	454d      	cmp	r5, r9
 8007b5a:	d11a      	bne.n	8007b92 <_printf_common+0xd6>
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	e008      	b.n	8007b72 <_printf_common+0xb6>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4652      	mov	r2, sl
 8007b64:	4639      	mov	r1, r7
 8007b66:	4630      	mov	r0, r6
 8007b68:	47c0      	blx	r8
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d103      	bne.n	8007b76 <_printf_common+0xba>
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b76:	3501      	adds	r5, #1
 8007b78:	e7c3      	b.n	8007b02 <_printf_common+0x46>
 8007b7a:	18e1      	adds	r1, r4, r3
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	2030      	movs	r0, #48	; 0x30
 8007b80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b84:	4422      	add	r2, r4
 8007b86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b8e:	3302      	adds	r3, #2
 8007b90:	e7c5      	b.n	8007b1e <_printf_common+0x62>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4622      	mov	r2, r4
 8007b96:	4639      	mov	r1, r7
 8007b98:	4630      	mov	r0, r6
 8007b9a:	47c0      	blx	r8
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d0e6      	beq.n	8007b6e <_printf_common+0xb2>
 8007ba0:	f109 0901 	add.w	r9, r9, #1
 8007ba4:	e7d8      	b.n	8007b58 <_printf_common+0x9c>
	...

08007ba8 <_printf_i>:
 8007ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	7e09      	ldrb	r1, [r1, #24]
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	296e      	cmp	r1, #110	; 0x6e
 8007bb8:	4617      	mov	r7, r2
 8007bba:	4606      	mov	r6, r0
 8007bbc:	4698      	mov	r8, r3
 8007bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bc0:	f000 80b3 	beq.w	8007d2a <_printf_i+0x182>
 8007bc4:	d822      	bhi.n	8007c0c <_printf_i+0x64>
 8007bc6:	2963      	cmp	r1, #99	; 0x63
 8007bc8:	d036      	beq.n	8007c38 <_printf_i+0x90>
 8007bca:	d80a      	bhi.n	8007be2 <_printf_i+0x3a>
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	f000 80b9 	beq.w	8007d44 <_printf_i+0x19c>
 8007bd2:	2958      	cmp	r1, #88	; 0x58
 8007bd4:	f000 8083 	beq.w	8007cde <_printf_i+0x136>
 8007bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007be0:	e032      	b.n	8007c48 <_printf_i+0xa0>
 8007be2:	2964      	cmp	r1, #100	; 0x64
 8007be4:	d001      	beq.n	8007bea <_printf_i+0x42>
 8007be6:	2969      	cmp	r1, #105	; 0x69
 8007be8:	d1f6      	bne.n	8007bd8 <_printf_i+0x30>
 8007bea:	6820      	ldr	r0, [r4, #0]
 8007bec:	6813      	ldr	r3, [r2, #0]
 8007bee:	0605      	lsls	r5, r0, #24
 8007bf0:	f103 0104 	add.w	r1, r3, #4
 8007bf4:	d52a      	bpl.n	8007c4c <_printf_i+0xa4>
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6011      	str	r1, [r2, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da03      	bge.n	8007c06 <_printf_i+0x5e>
 8007bfe:	222d      	movs	r2, #45	; 0x2d
 8007c00:	425b      	negs	r3, r3
 8007c02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c06:	486f      	ldr	r0, [pc, #444]	; (8007dc4 <_printf_i+0x21c>)
 8007c08:	220a      	movs	r2, #10
 8007c0a:	e039      	b.n	8007c80 <_printf_i+0xd8>
 8007c0c:	2973      	cmp	r1, #115	; 0x73
 8007c0e:	f000 809d 	beq.w	8007d4c <_printf_i+0x1a4>
 8007c12:	d808      	bhi.n	8007c26 <_printf_i+0x7e>
 8007c14:	296f      	cmp	r1, #111	; 0x6f
 8007c16:	d020      	beq.n	8007c5a <_printf_i+0xb2>
 8007c18:	2970      	cmp	r1, #112	; 0x70
 8007c1a:	d1dd      	bne.n	8007bd8 <_printf_i+0x30>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	f043 0320 	orr.w	r3, r3, #32
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	e003      	b.n	8007c2e <_printf_i+0x86>
 8007c26:	2975      	cmp	r1, #117	; 0x75
 8007c28:	d017      	beq.n	8007c5a <_printf_i+0xb2>
 8007c2a:	2978      	cmp	r1, #120	; 0x78
 8007c2c:	d1d4      	bne.n	8007bd8 <_printf_i+0x30>
 8007c2e:	2378      	movs	r3, #120	; 0x78
 8007c30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c34:	4864      	ldr	r0, [pc, #400]	; (8007dc8 <_printf_i+0x220>)
 8007c36:	e055      	b.n	8007ce4 <_printf_i+0x13c>
 8007c38:	6813      	ldr	r3, [r2, #0]
 8007c3a:	1d19      	adds	r1, r3, #4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6011      	str	r1, [r2, #0]
 8007c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e08c      	b.n	8007d66 <_printf_i+0x1be>
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6011      	str	r1, [r2, #0]
 8007c50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c54:	bf18      	it	ne
 8007c56:	b21b      	sxthne	r3, r3
 8007c58:	e7cf      	b.n	8007bfa <_printf_i+0x52>
 8007c5a:	6813      	ldr	r3, [r2, #0]
 8007c5c:	6825      	ldr	r5, [r4, #0]
 8007c5e:	1d18      	adds	r0, r3, #4
 8007c60:	6010      	str	r0, [r2, #0]
 8007c62:	0628      	lsls	r0, r5, #24
 8007c64:	d501      	bpl.n	8007c6a <_printf_i+0xc2>
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	e002      	b.n	8007c70 <_printf_i+0xc8>
 8007c6a:	0668      	lsls	r0, r5, #25
 8007c6c:	d5fb      	bpl.n	8007c66 <_printf_i+0xbe>
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	4854      	ldr	r0, [pc, #336]	; (8007dc4 <_printf_i+0x21c>)
 8007c72:	296f      	cmp	r1, #111	; 0x6f
 8007c74:	bf14      	ite	ne
 8007c76:	220a      	movne	r2, #10
 8007c78:	2208      	moveq	r2, #8
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c80:	6865      	ldr	r5, [r4, #4]
 8007c82:	60a5      	str	r5, [r4, #8]
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	f2c0 8095 	blt.w	8007db4 <_printf_i+0x20c>
 8007c8a:	6821      	ldr	r1, [r4, #0]
 8007c8c:	f021 0104 	bic.w	r1, r1, #4
 8007c90:	6021      	str	r1, [r4, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d13d      	bne.n	8007d12 <_printf_i+0x16a>
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	f040 808e 	bne.w	8007db8 <_printf_i+0x210>
 8007c9c:	4665      	mov	r5, ip
 8007c9e:	2a08      	cmp	r2, #8
 8007ca0:	d10b      	bne.n	8007cba <_printf_i+0x112>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	07db      	lsls	r3, r3, #31
 8007ca6:	d508      	bpl.n	8007cba <_printf_i+0x112>
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	6862      	ldr	r2, [r4, #4]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	bfde      	ittt	le
 8007cb0:	2330      	movle	r3, #48	; 0x30
 8007cb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cba:	ebac 0305 	sub.w	r3, ip, r5
 8007cbe:	6123      	str	r3, [r4, #16]
 8007cc0:	f8cd 8000 	str.w	r8, [sp]
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	aa03      	add	r2, sp, #12
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7ff fef6 	bl	8007abc <_printf_common>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d14d      	bne.n	8007d70 <_printf_i+0x1c8>
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	b005      	add	sp, #20
 8007cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cde:	4839      	ldr	r0, [pc, #228]	; (8007dc4 <_printf_i+0x21c>)
 8007ce0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ce4:	6813      	ldr	r3, [r2, #0]
 8007ce6:	6821      	ldr	r1, [r4, #0]
 8007ce8:	1d1d      	adds	r5, r3, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6015      	str	r5, [r2, #0]
 8007cee:	060a      	lsls	r2, r1, #24
 8007cf0:	d50b      	bpl.n	8007d0a <_printf_i+0x162>
 8007cf2:	07ca      	lsls	r2, r1, #31
 8007cf4:	bf44      	itt	mi
 8007cf6:	f041 0120 	orrmi.w	r1, r1, #32
 8007cfa:	6021      	strmi	r1, [r4, #0]
 8007cfc:	b91b      	cbnz	r3, 8007d06 <_printf_i+0x15e>
 8007cfe:	6822      	ldr	r2, [r4, #0]
 8007d00:	f022 0220 	bic.w	r2, r2, #32
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	2210      	movs	r2, #16
 8007d08:	e7b7      	b.n	8007c7a <_printf_i+0xd2>
 8007d0a:	064d      	lsls	r5, r1, #25
 8007d0c:	bf48      	it	mi
 8007d0e:	b29b      	uxthmi	r3, r3
 8007d10:	e7ef      	b.n	8007cf2 <_printf_i+0x14a>
 8007d12:	4665      	mov	r5, ip
 8007d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d18:	fb02 3311 	mls	r3, r2, r1, r3
 8007d1c:	5cc3      	ldrb	r3, [r0, r3]
 8007d1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d22:	460b      	mov	r3, r1
 8007d24:	2900      	cmp	r1, #0
 8007d26:	d1f5      	bne.n	8007d14 <_printf_i+0x16c>
 8007d28:	e7b9      	b.n	8007c9e <_printf_i+0xf6>
 8007d2a:	6813      	ldr	r3, [r2, #0]
 8007d2c:	6825      	ldr	r5, [r4, #0]
 8007d2e:	6961      	ldr	r1, [r4, #20]
 8007d30:	1d18      	adds	r0, r3, #4
 8007d32:	6010      	str	r0, [r2, #0]
 8007d34:	0628      	lsls	r0, r5, #24
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	d501      	bpl.n	8007d3e <_printf_i+0x196>
 8007d3a:	6019      	str	r1, [r3, #0]
 8007d3c:	e002      	b.n	8007d44 <_printf_i+0x19c>
 8007d3e:	066a      	lsls	r2, r5, #25
 8007d40:	d5fb      	bpl.n	8007d3a <_printf_i+0x192>
 8007d42:	8019      	strh	r1, [r3, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	4665      	mov	r5, ip
 8007d4a:	e7b9      	b.n	8007cc0 <_printf_i+0x118>
 8007d4c:	6813      	ldr	r3, [r2, #0]
 8007d4e:	1d19      	adds	r1, r3, #4
 8007d50:	6011      	str	r1, [r2, #0]
 8007d52:	681d      	ldr	r5, [r3, #0]
 8007d54:	6862      	ldr	r2, [r4, #4]
 8007d56:	2100      	movs	r1, #0
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f7f8 fa51 	bl	8000200 <memchr>
 8007d5e:	b108      	cbz	r0, 8007d64 <_printf_i+0x1bc>
 8007d60:	1b40      	subs	r0, r0, r5
 8007d62:	6060      	str	r0, [r4, #4]
 8007d64:	6863      	ldr	r3, [r4, #4]
 8007d66:	6123      	str	r3, [r4, #16]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6e:	e7a7      	b.n	8007cc0 <_printf_i+0x118>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	462a      	mov	r2, r5
 8007d74:	4639      	mov	r1, r7
 8007d76:	4630      	mov	r0, r6
 8007d78:	47c0      	blx	r8
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d0aa      	beq.n	8007cd4 <_printf_i+0x12c>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	079b      	lsls	r3, r3, #30
 8007d82:	d413      	bmi.n	8007dac <_printf_i+0x204>
 8007d84:	68e0      	ldr	r0, [r4, #12]
 8007d86:	9b03      	ldr	r3, [sp, #12]
 8007d88:	4298      	cmp	r0, r3
 8007d8a:	bfb8      	it	lt
 8007d8c:	4618      	movlt	r0, r3
 8007d8e:	e7a3      	b.n	8007cd8 <_printf_i+0x130>
 8007d90:	2301      	movs	r3, #1
 8007d92:	464a      	mov	r2, r9
 8007d94:	4639      	mov	r1, r7
 8007d96:	4630      	mov	r0, r6
 8007d98:	47c0      	blx	r8
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d09a      	beq.n	8007cd4 <_printf_i+0x12c>
 8007d9e:	3501      	adds	r5, #1
 8007da0:	68e3      	ldr	r3, [r4, #12]
 8007da2:	9a03      	ldr	r2, [sp, #12]
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	42ab      	cmp	r3, r5
 8007da8:	dcf2      	bgt.n	8007d90 <_printf_i+0x1e8>
 8007daa:	e7eb      	b.n	8007d84 <_printf_i+0x1dc>
 8007dac:	2500      	movs	r5, #0
 8007dae:	f104 0919 	add.w	r9, r4, #25
 8007db2:	e7f5      	b.n	8007da0 <_printf_i+0x1f8>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1ac      	bne.n	8007d12 <_printf_i+0x16a>
 8007db8:	7803      	ldrb	r3, [r0, #0]
 8007dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dc2:	e76c      	b.n	8007c9e <_printf_i+0xf6>
 8007dc4:	08009641 	.word	0x08009641
 8007dc8:	08009652 	.word	0x08009652

08007dcc <__sread>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	460c      	mov	r4, r1
 8007dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd4:	f000 fa46 	bl	8008264 <_read_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	bfab      	itete	ge
 8007ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dde:	89a3      	ldrhlt	r3, [r4, #12]
 8007de0:	181b      	addge	r3, r3, r0
 8007de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007de6:	bfac      	ite	ge
 8007de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dea:	81a3      	strhlt	r3, [r4, #12]
 8007dec:	bd10      	pop	{r4, pc}

08007dee <__swrite>:
 8007dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	461f      	mov	r7, r3
 8007df4:	898b      	ldrh	r3, [r1, #12]
 8007df6:	05db      	lsls	r3, r3, #23
 8007df8:	4605      	mov	r5, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	d505      	bpl.n	8007e0c <__swrite+0x1e>
 8007e00:	2302      	movs	r3, #2
 8007e02:	2200      	movs	r2, #0
 8007e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e08:	f000 f9b6 	bl	8008178 <_lseek_r>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	4632      	mov	r2, r6
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e22:	f000 b869 	b.w	8007ef8 <_write_r>

08007e26 <__sseek>:
 8007e26:	b510      	push	{r4, lr}
 8007e28:	460c      	mov	r4, r1
 8007e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2e:	f000 f9a3 	bl	8008178 <_lseek_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	bf15      	itete	ne
 8007e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e42:	81a3      	strheq	r3, [r4, #12]
 8007e44:	bf18      	it	ne
 8007e46:	81a3      	strhne	r3, [r4, #12]
 8007e48:	bd10      	pop	{r4, pc}

08007e4a <__sclose>:
 8007e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4e:	f000 b8d3 	b.w	8007ff8 <_close_r>
	...

08007e54 <__swbuf_r>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	460e      	mov	r6, r1
 8007e58:	4614      	mov	r4, r2
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	b118      	cbz	r0, 8007e66 <__swbuf_r+0x12>
 8007e5e:	6983      	ldr	r3, [r0, #24]
 8007e60:	b90b      	cbnz	r3, 8007e66 <__swbuf_r+0x12>
 8007e62:	f7ff fc5f 	bl	8007724 <__sinit>
 8007e66:	4b21      	ldr	r3, [pc, #132]	; (8007eec <__swbuf_r+0x98>)
 8007e68:	429c      	cmp	r4, r3
 8007e6a:	d12a      	bne.n	8007ec2 <__swbuf_r+0x6e>
 8007e6c:	686c      	ldr	r4, [r5, #4]
 8007e6e:	69a3      	ldr	r3, [r4, #24]
 8007e70:	60a3      	str	r3, [r4, #8]
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	071a      	lsls	r2, r3, #28
 8007e76:	d52e      	bpl.n	8007ed6 <__swbuf_r+0x82>
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	b363      	cbz	r3, 8007ed6 <__swbuf_r+0x82>
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	6820      	ldr	r0, [r4, #0]
 8007e80:	1ac0      	subs	r0, r0, r3
 8007e82:	6963      	ldr	r3, [r4, #20]
 8007e84:	b2f6      	uxtb	r6, r6
 8007e86:	4283      	cmp	r3, r0
 8007e88:	4637      	mov	r7, r6
 8007e8a:	dc04      	bgt.n	8007e96 <__swbuf_r+0x42>
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f000 f948 	bl	8008124 <_fflush_r>
 8007e94:	bb28      	cbnz	r0, 8007ee2 <__swbuf_r+0x8e>
 8007e96:	68a3      	ldr	r3, [r4, #8]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	60a3      	str	r3, [r4, #8]
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	701e      	strb	r6, [r3, #0]
 8007ea4:	6963      	ldr	r3, [r4, #20]
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	4283      	cmp	r3, r0
 8007eaa:	d004      	beq.n	8007eb6 <__swbuf_r+0x62>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	07db      	lsls	r3, r3, #31
 8007eb0:	d519      	bpl.n	8007ee6 <__swbuf_r+0x92>
 8007eb2:	2e0a      	cmp	r6, #10
 8007eb4:	d117      	bne.n	8007ee6 <__swbuf_r+0x92>
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 f933 	bl	8008124 <_fflush_r>
 8007ebe:	b190      	cbz	r0, 8007ee6 <__swbuf_r+0x92>
 8007ec0:	e00f      	b.n	8007ee2 <__swbuf_r+0x8e>
 8007ec2:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <__swbuf_r+0x9c>)
 8007ec4:	429c      	cmp	r4, r3
 8007ec6:	d101      	bne.n	8007ecc <__swbuf_r+0x78>
 8007ec8:	68ac      	ldr	r4, [r5, #8]
 8007eca:	e7d0      	b.n	8007e6e <__swbuf_r+0x1a>
 8007ecc:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <__swbuf_r+0xa0>)
 8007ece:	429c      	cmp	r4, r3
 8007ed0:	bf08      	it	eq
 8007ed2:	68ec      	ldreq	r4, [r5, #12]
 8007ed4:	e7cb      	b.n	8007e6e <__swbuf_r+0x1a>
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 f81f 	bl	8007f1c <__swsetup_r>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d0cc      	beq.n	8007e7c <__swbuf_r+0x28>
 8007ee2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eea:	bf00      	nop
 8007eec:	080095f0 	.word	0x080095f0
 8007ef0:	08009610 	.word	0x08009610
 8007ef4:	080095d0 	.word	0x080095d0

08007ef8 <_write_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4c07      	ldr	r4, [pc, #28]	; (8007f18 <_write_r+0x20>)
 8007efc:	4605      	mov	r5, r0
 8007efe:	4608      	mov	r0, r1
 8007f00:	4611      	mov	r1, r2
 8007f02:	2200      	movs	r2, #0
 8007f04:	6022      	str	r2, [r4, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	f7fa fc19 	bl	800273e <_write>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	d102      	bne.n	8007f16 <_write_r+0x1e>
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	b103      	cbz	r3, 8007f16 <_write_r+0x1e>
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	bd38      	pop	{r3, r4, r5, pc}
 8007f18:	2000439c 	.word	0x2000439c

08007f1c <__swsetup_r>:
 8007f1c:	4b32      	ldr	r3, [pc, #200]	; (8007fe8 <__swsetup_r+0xcc>)
 8007f1e:	b570      	push	{r4, r5, r6, lr}
 8007f20:	681d      	ldr	r5, [r3, #0]
 8007f22:	4606      	mov	r6, r0
 8007f24:	460c      	mov	r4, r1
 8007f26:	b125      	cbz	r5, 8007f32 <__swsetup_r+0x16>
 8007f28:	69ab      	ldr	r3, [r5, #24]
 8007f2a:	b913      	cbnz	r3, 8007f32 <__swsetup_r+0x16>
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f7ff fbf9 	bl	8007724 <__sinit>
 8007f32:	4b2e      	ldr	r3, [pc, #184]	; (8007fec <__swsetup_r+0xd0>)
 8007f34:	429c      	cmp	r4, r3
 8007f36:	d10f      	bne.n	8007f58 <__swsetup_r+0x3c>
 8007f38:	686c      	ldr	r4, [r5, #4]
 8007f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	0715      	lsls	r5, r2, #28
 8007f42:	d42c      	bmi.n	8007f9e <__swsetup_r+0x82>
 8007f44:	06d0      	lsls	r0, r2, #27
 8007f46:	d411      	bmi.n	8007f6c <__swsetup_r+0x50>
 8007f48:	2209      	movs	r2, #9
 8007f4a:	6032      	str	r2, [r6, #0]
 8007f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	f04f 30ff 	mov.w	r0, #4294967295
 8007f56:	e03e      	b.n	8007fd6 <__swsetup_r+0xba>
 8007f58:	4b25      	ldr	r3, [pc, #148]	; (8007ff0 <__swsetup_r+0xd4>)
 8007f5a:	429c      	cmp	r4, r3
 8007f5c:	d101      	bne.n	8007f62 <__swsetup_r+0x46>
 8007f5e:	68ac      	ldr	r4, [r5, #8]
 8007f60:	e7eb      	b.n	8007f3a <__swsetup_r+0x1e>
 8007f62:	4b24      	ldr	r3, [pc, #144]	; (8007ff4 <__swsetup_r+0xd8>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	bf08      	it	eq
 8007f68:	68ec      	ldreq	r4, [r5, #12]
 8007f6a:	e7e6      	b.n	8007f3a <__swsetup_r+0x1e>
 8007f6c:	0751      	lsls	r1, r2, #29
 8007f6e:	d512      	bpl.n	8007f96 <__swsetup_r+0x7a>
 8007f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f72:	b141      	cbz	r1, 8007f86 <__swsetup_r+0x6a>
 8007f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f78:	4299      	cmp	r1, r3
 8007f7a:	d002      	beq.n	8007f82 <__swsetup_r+0x66>
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f7ff fab9 	bl	80074f4 <_free_r>
 8007f82:	2300      	movs	r3, #0
 8007f84:	6363      	str	r3, [r4, #52]	; 0x34
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f8c:	81a3      	strh	r3, [r4, #12]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6063      	str	r3, [r4, #4]
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	f043 0308 	orr.w	r3, r3, #8
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	b94b      	cbnz	r3, 8007fb6 <__swsetup_r+0x9a>
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fac:	d003      	beq.n	8007fb6 <__swsetup_r+0x9a>
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 f917 	bl	80081e4 <__smakebuf_r>
 8007fb6:	89a2      	ldrh	r2, [r4, #12]
 8007fb8:	f012 0301 	ands.w	r3, r2, #1
 8007fbc:	d00c      	beq.n	8007fd8 <__swsetup_r+0xbc>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60a3      	str	r3, [r4, #8]
 8007fc2:	6963      	ldr	r3, [r4, #20]
 8007fc4:	425b      	negs	r3, r3
 8007fc6:	61a3      	str	r3, [r4, #24]
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	b953      	cbnz	r3, 8007fe2 <__swsetup_r+0xc6>
 8007fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007fd4:	d1ba      	bne.n	8007f4c <__swsetup_r+0x30>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	0792      	lsls	r2, r2, #30
 8007fda:	bf58      	it	pl
 8007fdc:	6963      	ldrpl	r3, [r4, #20]
 8007fde:	60a3      	str	r3, [r4, #8]
 8007fe0:	e7f2      	b.n	8007fc8 <__swsetup_r+0xac>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	e7f7      	b.n	8007fd6 <__swsetup_r+0xba>
 8007fe6:	bf00      	nop
 8007fe8:	20000010 	.word	0x20000010
 8007fec:	080095f0 	.word	0x080095f0
 8007ff0:	08009610 	.word	0x08009610
 8007ff4:	080095d0 	.word	0x080095d0

08007ff8 <_close_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4c06      	ldr	r4, [pc, #24]	; (8008014 <_close_r+0x1c>)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4605      	mov	r5, r0
 8008000:	4608      	mov	r0, r1
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	f7fa fbb7 	bl	8002776 <_close>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_close_r+0x1a>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	b103      	cbz	r3, 8008012 <_close_r+0x1a>
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	2000439c 	.word	0x2000439c

08008018 <__sflush_r>:
 8008018:	898a      	ldrh	r2, [r1, #12]
 800801a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801e:	4605      	mov	r5, r0
 8008020:	0710      	lsls	r0, r2, #28
 8008022:	460c      	mov	r4, r1
 8008024:	d458      	bmi.n	80080d8 <__sflush_r+0xc0>
 8008026:	684b      	ldr	r3, [r1, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	dc05      	bgt.n	8008038 <__sflush_r+0x20>
 800802c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	dc02      	bgt.n	8008038 <__sflush_r+0x20>
 8008032:	2000      	movs	r0, #0
 8008034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800803a:	2e00      	cmp	r6, #0
 800803c:	d0f9      	beq.n	8008032 <__sflush_r+0x1a>
 800803e:	2300      	movs	r3, #0
 8008040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008044:	682f      	ldr	r7, [r5, #0]
 8008046:	6a21      	ldr	r1, [r4, #32]
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	d032      	beq.n	80080b2 <__sflush_r+0x9a>
 800804c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	075a      	lsls	r2, r3, #29
 8008052:	d505      	bpl.n	8008060 <__sflush_r+0x48>
 8008054:	6863      	ldr	r3, [r4, #4]
 8008056:	1ac0      	subs	r0, r0, r3
 8008058:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800805a:	b10b      	cbz	r3, 8008060 <__sflush_r+0x48>
 800805c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800805e:	1ac0      	subs	r0, r0, r3
 8008060:	2300      	movs	r3, #0
 8008062:	4602      	mov	r2, r0
 8008064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008066:	6a21      	ldr	r1, [r4, #32]
 8008068:	4628      	mov	r0, r5
 800806a:	47b0      	blx	r6
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	d106      	bne.n	8008080 <__sflush_r+0x68>
 8008072:	6829      	ldr	r1, [r5, #0]
 8008074:	291d      	cmp	r1, #29
 8008076:	d848      	bhi.n	800810a <__sflush_r+0xf2>
 8008078:	4a29      	ldr	r2, [pc, #164]	; (8008120 <__sflush_r+0x108>)
 800807a:	40ca      	lsrs	r2, r1
 800807c:	07d6      	lsls	r6, r2, #31
 800807e:	d544      	bpl.n	800810a <__sflush_r+0xf2>
 8008080:	2200      	movs	r2, #0
 8008082:	6062      	str	r2, [r4, #4]
 8008084:	04d9      	lsls	r1, r3, #19
 8008086:	6922      	ldr	r2, [r4, #16]
 8008088:	6022      	str	r2, [r4, #0]
 800808a:	d504      	bpl.n	8008096 <__sflush_r+0x7e>
 800808c:	1c42      	adds	r2, r0, #1
 800808e:	d101      	bne.n	8008094 <__sflush_r+0x7c>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	b903      	cbnz	r3, 8008096 <__sflush_r+0x7e>
 8008094:	6560      	str	r0, [r4, #84]	; 0x54
 8008096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008098:	602f      	str	r7, [r5, #0]
 800809a:	2900      	cmp	r1, #0
 800809c:	d0c9      	beq.n	8008032 <__sflush_r+0x1a>
 800809e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080a2:	4299      	cmp	r1, r3
 80080a4:	d002      	beq.n	80080ac <__sflush_r+0x94>
 80080a6:	4628      	mov	r0, r5
 80080a8:	f7ff fa24 	bl	80074f4 <_free_r>
 80080ac:	2000      	movs	r0, #0
 80080ae:	6360      	str	r0, [r4, #52]	; 0x34
 80080b0:	e7c0      	b.n	8008034 <__sflush_r+0x1c>
 80080b2:	2301      	movs	r3, #1
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b0      	blx	r6
 80080b8:	1c41      	adds	r1, r0, #1
 80080ba:	d1c8      	bne.n	800804e <__sflush_r+0x36>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0c5      	beq.n	800804e <__sflush_r+0x36>
 80080c2:	2b1d      	cmp	r3, #29
 80080c4:	d001      	beq.n	80080ca <__sflush_r+0xb2>
 80080c6:	2b16      	cmp	r3, #22
 80080c8:	d101      	bne.n	80080ce <__sflush_r+0xb6>
 80080ca:	602f      	str	r7, [r5, #0]
 80080cc:	e7b1      	b.n	8008032 <__sflush_r+0x1a>
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	e7ad      	b.n	8008034 <__sflush_r+0x1c>
 80080d8:	690f      	ldr	r7, [r1, #16]
 80080da:	2f00      	cmp	r7, #0
 80080dc:	d0a9      	beq.n	8008032 <__sflush_r+0x1a>
 80080de:	0793      	lsls	r3, r2, #30
 80080e0:	680e      	ldr	r6, [r1, #0]
 80080e2:	bf08      	it	eq
 80080e4:	694b      	ldreq	r3, [r1, #20]
 80080e6:	600f      	str	r7, [r1, #0]
 80080e8:	bf18      	it	ne
 80080ea:	2300      	movne	r3, #0
 80080ec:	eba6 0807 	sub.w	r8, r6, r7
 80080f0:	608b      	str	r3, [r1, #8]
 80080f2:	f1b8 0f00 	cmp.w	r8, #0
 80080f6:	dd9c      	ble.n	8008032 <__sflush_r+0x1a>
 80080f8:	4643      	mov	r3, r8
 80080fa:	463a      	mov	r2, r7
 80080fc:	6a21      	ldr	r1, [r4, #32]
 80080fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008100:	4628      	mov	r0, r5
 8008102:	47b0      	blx	r6
 8008104:	2800      	cmp	r0, #0
 8008106:	dc06      	bgt.n	8008116 <__sflush_r+0xfe>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	e78e      	b.n	8008034 <__sflush_r+0x1c>
 8008116:	4407      	add	r7, r0
 8008118:	eba8 0800 	sub.w	r8, r8, r0
 800811c:	e7e9      	b.n	80080f2 <__sflush_r+0xda>
 800811e:	bf00      	nop
 8008120:	20400001 	.word	0x20400001

08008124 <_fflush_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	690b      	ldr	r3, [r1, #16]
 8008128:	4605      	mov	r5, r0
 800812a:	460c      	mov	r4, r1
 800812c:	b1db      	cbz	r3, 8008166 <_fflush_r+0x42>
 800812e:	b118      	cbz	r0, 8008138 <_fflush_r+0x14>
 8008130:	6983      	ldr	r3, [r0, #24]
 8008132:	b90b      	cbnz	r3, 8008138 <_fflush_r+0x14>
 8008134:	f7ff faf6 	bl	8007724 <__sinit>
 8008138:	4b0c      	ldr	r3, [pc, #48]	; (800816c <_fflush_r+0x48>)
 800813a:	429c      	cmp	r4, r3
 800813c:	d109      	bne.n	8008152 <_fflush_r+0x2e>
 800813e:	686c      	ldr	r4, [r5, #4]
 8008140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008144:	b17b      	cbz	r3, 8008166 <_fflush_r+0x42>
 8008146:	4621      	mov	r1, r4
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800814e:	f7ff bf63 	b.w	8008018 <__sflush_r>
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <_fflush_r+0x4c>)
 8008154:	429c      	cmp	r4, r3
 8008156:	d101      	bne.n	800815c <_fflush_r+0x38>
 8008158:	68ac      	ldr	r4, [r5, #8]
 800815a:	e7f1      	b.n	8008140 <_fflush_r+0x1c>
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <_fflush_r+0x50>)
 800815e:	429c      	cmp	r4, r3
 8008160:	bf08      	it	eq
 8008162:	68ec      	ldreq	r4, [r5, #12]
 8008164:	e7ec      	b.n	8008140 <_fflush_r+0x1c>
 8008166:	2000      	movs	r0, #0
 8008168:	bd38      	pop	{r3, r4, r5, pc}
 800816a:	bf00      	nop
 800816c:	080095f0 	.word	0x080095f0
 8008170:	08009610 	.word	0x08009610
 8008174:	080095d0 	.word	0x080095d0

08008178 <_lseek_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4c07      	ldr	r4, [pc, #28]	; (8008198 <_lseek_r+0x20>)
 800817c:	4605      	mov	r5, r0
 800817e:	4608      	mov	r0, r1
 8008180:	4611      	mov	r1, r2
 8008182:	2200      	movs	r2, #0
 8008184:	6022      	str	r2, [r4, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	f7fa fb1c 	bl	80027c4 <_lseek>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_lseek_r+0x1e>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	b103      	cbz	r3, 8008196 <_lseek_r+0x1e>
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	2000439c 	.word	0x2000439c

0800819c <__swhatbuf_r>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	460e      	mov	r6, r1
 80081a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a4:	2900      	cmp	r1, #0
 80081a6:	b096      	sub	sp, #88	; 0x58
 80081a8:	4614      	mov	r4, r2
 80081aa:	461d      	mov	r5, r3
 80081ac:	da07      	bge.n	80081be <__swhatbuf_r+0x22>
 80081ae:	2300      	movs	r3, #0
 80081b0:	602b      	str	r3, [r5, #0]
 80081b2:	89b3      	ldrh	r3, [r6, #12]
 80081b4:	061a      	lsls	r2, r3, #24
 80081b6:	d410      	bmi.n	80081da <__swhatbuf_r+0x3e>
 80081b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081bc:	e00e      	b.n	80081dc <__swhatbuf_r+0x40>
 80081be:	466a      	mov	r2, sp
 80081c0:	f000 f862 	bl	8008288 <_fstat_r>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	dbf2      	blt.n	80081ae <__swhatbuf_r+0x12>
 80081c8:	9a01      	ldr	r2, [sp, #4]
 80081ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081d2:	425a      	negs	r2, r3
 80081d4:	415a      	adcs	r2, r3
 80081d6:	602a      	str	r2, [r5, #0]
 80081d8:	e7ee      	b.n	80081b8 <__swhatbuf_r+0x1c>
 80081da:	2340      	movs	r3, #64	; 0x40
 80081dc:	2000      	movs	r0, #0
 80081de:	6023      	str	r3, [r4, #0]
 80081e0:	b016      	add	sp, #88	; 0x58
 80081e2:	bd70      	pop	{r4, r5, r6, pc}

080081e4 <__smakebuf_r>:
 80081e4:	898b      	ldrh	r3, [r1, #12]
 80081e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081e8:	079d      	lsls	r5, r3, #30
 80081ea:	4606      	mov	r6, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	d507      	bpl.n	8008200 <__smakebuf_r+0x1c>
 80081f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	2301      	movs	r3, #1
 80081fa:	6163      	str	r3, [r4, #20]
 80081fc:	b002      	add	sp, #8
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	ab01      	add	r3, sp, #4
 8008202:	466a      	mov	r2, sp
 8008204:	f7ff ffca 	bl	800819c <__swhatbuf_r>
 8008208:	9900      	ldr	r1, [sp, #0]
 800820a:	4605      	mov	r5, r0
 800820c:	4630      	mov	r0, r6
 800820e:	f7ff f9bf 	bl	8007590 <_malloc_r>
 8008212:	b948      	cbnz	r0, 8008228 <__smakebuf_r+0x44>
 8008214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008218:	059a      	lsls	r2, r3, #22
 800821a:	d4ef      	bmi.n	80081fc <__smakebuf_r+0x18>
 800821c:	f023 0303 	bic.w	r3, r3, #3
 8008220:	f043 0302 	orr.w	r3, r3, #2
 8008224:	81a3      	strh	r3, [r4, #12]
 8008226:	e7e3      	b.n	80081f0 <__smakebuf_r+0xc>
 8008228:	4b0d      	ldr	r3, [pc, #52]	; (8008260 <__smakebuf_r+0x7c>)
 800822a:	62b3      	str	r3, [r6, #40]	; 0x28
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	6020      	str	r0, [r4, #0]
 8008230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	6163      	str	r3, [r4, #20]
 800823a:	9b01      	ldr	r3, [sp, #4]
 800823c:	6120      	str	r0, [r4, #16]
 800823e:	b15b      	cbz	r3, 8008258 <__smakebuf_r+0x74>
 8008240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008244:	4630      	mov	r0, r6
 8008246:	f000 f831 	bl	80082ac <_isatty_r>
 800824a:	b128      	cbz	r0, 8008258 <__smakebuf_r+0x74>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f023 0303 	bic.w	r3, r3, #3
 8008252:	f043 0301 	orr.w	r3, r3, #1
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	431d      	orrs	r5, r3
 800825c:	81a5      	strh	r5, [r4, #12]
 800825e:	e7cd      	b.n	80081fc <__smakebuf_r+0x18>
 8008260:	080076ed 	.word	0x080076ed

08008264 <_read_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4c07      	ldr	r4, [pc, #28]	; (8008284 <_read_r+0x20>)
 8008268:	4605      	mov	r5, r0
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	2200      	movs	r2, #0
 8008270:	6022      	str	r2, [r4, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	f7fa fa46 	bl	8002704 <_read>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_read_r+0x1e>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	b103      	cbz	r3, 8008282 <_read_r+0x1e>
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	2000439c 	.word	0x2000439c

08008288 <_fstat_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4c07      	ldr	r4, [pc, #28]	; (80082a8 <_fstat_r+0x20>)
 800828c:	2300      	movs	r3, #0
 800828e:	4605      	mov	r5, r0
 8008290:	4608      	mov	r0, r1
 8008292:	4611      	mov	r1, r2
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	f7fa fa7a 	bl	800278e <_fstat>
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	d102      	bne.n	80082a4 <_fstat_r+0x1c>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	b103      	cbz	r3, 80082a4 <_fstat_r+0x1c>
 80082a2:	602b      	str	r3, [r5, #0]
 80082a4:	bd38      	pop	{r3, r4, r5, pc}
 80082a6:	bf00      	nop
 80082a8:	2000439c 	.word	0x2000439c

080082ac <_isatty_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4c06      	ldr	r4, [pc, #24]	; (80082c8 <_isatty_r+0x1c>)
 80082b0:	2300      	movs	r3, #0
 80082b2:	4605      	mov	r5, r0
 80082b4:	4608      	mov	r0, r1
 80082b6:	6023      	str	r3, [r4, #0]
 80082b8:	f7fa fa79 	bl	80027ae <_isatty>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_isatty_r+0x1a>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_isatty_r+0x1a>
 80082c4:	602b      	str	r3, [r5, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	2000439c 	.word	0x2000439c

080082cc <round>:
 80082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ce:	ec57 6b10 	vmov	r6, r7, d0
 80082d2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80082d6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80082da:	2c13      	cmp	r4, #19
 80082dc:	463b      	mov	r3, r7
 80082de:	463d      	mov	r5, r7
 80082e0:	dc17      	bgt.n	8008312 <round+0x46>
 80082e2:	2c00      	cmp	r4, #0
 80082e4:	da09      	bge.n	80082fa <round+0x2e>
 80082e6:	3401      	adds	r4, #1
 80082e8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80082ec:	d103      	bne.n	80082f6 <round+0x2a>
 80082ee:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80082f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082f6:	2100      	movs	r1, #0
 80082f8:	e02c      	b.n	8008354 <round+0x88>
 80082fa:	4a18      	ldr	r2, [pc, #96]	; (800835c <round+0x90>)
 80082fc:	4122      	asrs	r2, r4
 80082fe:	4217      	tst	r7, r2
 8008300:	d100      	bne.n	8008304 <round+0x38>
 8008302:	b19e      	cbz	r6, 800832c <round+0x60>
 8008304:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008308:	4123      	asrs	r3, r4
 800830a:	442b      	add	r3, r5
 800830c:	ea23 0302 	bic.w	r3, r3, r2
 8008310:	e7f1      	b.n	80082f6 <round+0x2a>
 8008312:	2c33      	cmp	r4, #51	; 0x33
 8008314:	dd0d      	ble.n	8008332 <round+0x66>
 8008316:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800831a:	d107      	bne.n	800832c <round+0x60>
 800831c:	4630      	mov	r0, r6
 800831e:	4639      	mov	r1, r7
 8008320:	ee10 2a10 	vmov	r2, s0
 8008324:	f7f7 ffc2 	bl	80002ac <__adddf3>
 8008328:	4606      	mov	r6, r0
 800832a:	460f      	mov	r7, r1
 800832c:	ec47 6b10 	vmov	d0, r6, r7
 8008330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008332:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8008336:	f04f 30ff 	mov.w	r0, #4294967295
 800833a:	40d0      	lsrs	r0, r2
 800833c:	4206      	tst	r6, r0
 800833e:	d0f5      	beq.n	800832c <round+0x60>
 8008340:	2201      	movs	r2, #1
 8008342:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008346:	fa02 f404 	lsl.w	r4, r2, r4
 800834a:	1931      	adds	r1, r6, r4
 800834c:	bf28      	it	cs
 800834e:	189b      	addcs	r3, r3, r2
 8008350:	ea21 0100 	bic.w	r1, r1, r0
 8008354:	461f      	mov	r7, r3
 8008356:	460e      	mov	r6, r1
 8008358:	e7e8      	b.n	800832c <round+0x60>
 800835a:	bf00      	nop
 800835c:	000fffff 	.word	0x000fffff

08008360 <pow>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	ed2d 8b04 	vpush	{d8-d9}
 8008368:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800863c <pow+0x2dc>
 800836c:	b08d      	sub	sp, #52	; 0x34
 800836e:	ec57 6b10 	vmov	r6, r7, d0
 8008372:	ec55 4b11 	vmov	r4, r5, d1
 8008376:	f000 f963 	bl	8008640 <__ieee754_pow>
 800837a:	f999 3000 	ldrsb.w	r3, [r9]
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	3301      	adds	r3, #1
 8008382:	eeb0 8a40 	vmov.f32	s16, s0
 8008386:	eef0 8a60 	vmov.f32	s17, s1
 800838a:	46c8      	mov	r8, r9
 800838c:	d05f      	beq.n	800844e <pow+0xee>
 800838e:	4622      	mov	r2, r4
 8008390:	462b      	mov	r3, r5
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f7f8 fbd9 	bl	8000b4c <__aeabi_dcmpun>
 800839a:	4683      	mov	fp, r0
 800839c:	2800      	cmp	r0, #0
 800839e:	d156      	bne.n	800844e <pow+0xee>
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f8 fbd0 	bl	8000b4c <__aeabi_dcmpun>
 80083ac:	9001      	str	r0, [sp, #4]
 80083ae:	b1e8      	cbz	r0, 80083ec <pow+0x8c>
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	4620      	mov	r0, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	f7f8 fb96 	bl	8000ae8 <__aeabi_dcmpeq>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d046      	beq.n	800844e <pow+0xee>
 80083c0:	2301      	movs	r3, #1
 80083c2:	9302      	str	r3, [sp, #8]
 80083c4:	4b96      	ldr	r3, [pc, #600]	; (8008620 <pow+0x2c0>)
 80083c6:	9303      	str	r3, [sp, #12]
 80083c8:	4b96      	ldr	r3, [pc, #600]	; (8008624 <pow+0x2c4>)
 80083ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80083ce:	2200      	movs	r2, #0
 80083d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083d4:	9b00      	ldr	r3, [sp, #0]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80083dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80083e0:	d033      	beq.n	800844a <pow+0xea>
 80083e2:	a802      	add	r0, sp, #8
 80083e4:	f000 fefb 	bl	80091de <matherr>
 80083e8:	bb48      	cbnz	r0, 800843e <pow+0xde>
 80083ea:	e05d      	b.n	80084a8 <pow+0x148>
 80083ec:	f04f 0a00 	mov.w	sl, #0
 80083f0:	f04f 0b00 	mov.w	fp, #0
 80083f4:	4652      	mov	r2, sl
 80083f6:	465b      	mov	r3, fp
 80083f8:	4630      	mov	r0, r6
 80083fa:	4639      	mov	r1, r7
 80083fc:	f7f8 fb74 	bl	8000ae8 <__aeabi_dcmpeq>
 8008400:	ec4b ab19 	vmov	d9, sl, fp
 8008404:	2800      	cmp	r0, #0
 8008406:	d054      	beq.n	80084b2 <pow+0x152>
 8008408:	4652      	mov	r2, sl
 800840a:	465b      	mov	r3, fp
 800840c:	4620      	mov	r0, r4
 800840e:	4629      	mov	r1, r5
 8008410:	f7f8 fb6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008414:	4680      	mov	r8, r0
 8008416:	b318      	cbz	r0, 8008460 <pow+0x100>
 8008418:	2301      	movs	r3, #1
 800841a:	9302      	str	r3, [sp, #8]
 800841c:	4b80      	ldr	r3, [pc, #512]	; (8008620 <pow+0x2c0>)
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	930a      	str	r3, [sp, #40]	; 0x28
 8008424:	9b00      	ldr	r3, [sp, #0]
 8008426:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800842a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800842e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0d5      	beq.n	80083e2 <pow+0x82>
 8008436:	4b7b      	ldr	r3, [pc, #492]	; (8008624 <pow+0x2c4>)
 8008438:	2200      	movs	r2, #0
 800843a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800843e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008440:	b11b      	cbz	r3, 800844a <pow+0xea>
 8008442:	f7ff f81d 	bl	8007480 <__errno>
 8008446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008448:	6003      	str	r3, [r0, #0]
 800844a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800844e:	eeb0 0a48 	vmov.f32	s0, s16
 8008452:	eef0 0a68 	vmov.f32	s1, s17
 8008456:	b00d      	add	sp, #52	; 0x34
 8008458:	ecbd 8b04 	vpop	{d8-d9}
 800845c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008460:	ec45 4b10 	vmov	d0, r4, r5
 8008464:	f000 feb3 	bl	80091ce <finite>
 8008468:	2800      	cmp	r0, #0
 800846a:	d0f0      	beq.n	800844e <pow+0xee>
 800846c:	4652      	mov	r2, sl
 800846e:	465b      	mov	r3, fp
 8008470:	4620      	mov	r0, r4
 8008472:	4629      	mov	r1, r5
 8008474:	f7f8 fb42 	bl	8000afc <__aeabi_dcmplt>
 8008478:	2800      	cmp	r0, #0
 800847a:	d0e8      	beq.n	800844e <pow+0xee>
 800847c:	2301      	movs	r3, #1
 800847e:	9302      	str	r3, [sp, #8]
 8008480:	4b67      	ldr	r3, [pc, #412]	; (8008620 <pow+0x2c0>)
 8008482:	9303      	str	r3, [sp, #12]
 8008484:	f999 3000 	ldrsb.w	r3, [r9]
 8008488:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800848c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008490:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008494:	b913      	cbnz	r3, 800849c <pow+0x13c>
 8008496:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800849a:	e7a2      	b.n	80083e2 <pow+0x82>
 800849c:	4962      	ldr	r1, [pc, #392]	; (8008628 <pow+0x2c8>)
 800849e:	2000      	movs	r0, #0
 80084a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d19c      	bne.n	80083e2 <pow+0x82>
 80084a8:	f7fe ffea 	bl	8007480 <__errno>
 80084ac:	2321      	movs	r3, #33	; 0x21
 80084ae:	6003      	str	r3, [r0, #0]
 80084b0:	e7c5      	b.n	800843e <pow+0xde>
 80084b2:	eeb0 0a48 	vmov.f32	s0, s16
 80084b6:	eef0 0a68 	vmov.f32	s1, s17
 80084ba:	f000 fe88 	bl	80091ce <finite>
 80084be:	9000      	str	r0, [sp, #0]
 80084c0:	2800      	cmp	r0, #0
 80084c2:	f040 8081 	bne.w	80085c8 <pow+0x268>
 80084c6:	ec47 6b10 	vmov	d0, r6, r7
 80084ca:	f000 fe80 	bl	80091ce <finite>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d07a      	beq.n	80085c8 <pow+0x268>
 80084d2:	ec45 4b10 	vmov	d0, r4, r5
 80084d6:	f000 fe7a 	bl	80091ce <finite>
 80084da:	2800      	cmp	r0, #0
 80084dc:	d074      	beq.n	80085c8 <pow+0x268>
 80084de:	ec53 2b18 	vmov	r2, r3, d8
 80084e2:	ee18 0a10 	vmov	r0, s16
 80084e6:	4619      	mov	r1, r3
 80084e8:	f7f8 fb30 	bl	8000b4c <__aeabi_dcmpun>
 80084ec:	f999 9000 	ldrsb.w	r9, [r9]
 80084f0:	4b4b      	ldr	r3, [pc, #300]	; (8008620 <pow+0x2c0>)
 80084f2:	b1b0      	cbz	r0, 8008522 <pow+0x1c2>
 80084f4:	2201      	movs	r2, #1
 80084f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084fa:	9b00      	ldr	r3, [sp, #0]
 80084fc:	930a      	str	r3, [sp, #40]	; 0x28
 80084fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008502:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008506:	f1b9 0f00 	cmp.w	r9, #0
 800850a:	d0c4      	beq.n	8008496 <pow+0x136>
 800850c:	4652      	mov	r2, sl
 800850e:	465b      	mov	r3, fp
 8008510:	4650      	mov	r0, sl
 8008512:	4659      	mov	r1, fp
 8008514:	f7f8 f9aa 	bl	800086c <__aeabi_ddiv>
 8008518:	f1b9 0f02 	cmp.w	r9, #2
 800851c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008520:	e7c1      	b.n	80084a6 <pow+0x146>
 8008522:	2203      	movs	r2, #3
 8008524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008528:	900a      	str	r0, [sp, #40]	; 0x28
 800852a:	4629      	mov	r1, r5
 800852c:	4620      	mov	r0, r4
 800852e:	2200      	movs	r2, #0
 8008530:	4b3e      	ldr	r3, [pc, #248]	; (800862c <pow+0x2cc>)
 8008532:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008536:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800853a:	f7f8 f86d 	bl	8000618 <__aeabi_dmul>
 800853e:	4604      	mov	r4, r0
 8008540:	460d      	mov	r5, r1
 8008542:	f1b9 0f00 	cmp.w	r9, #0
 8008546:	d124      	bne.n	8008592 <pow+0x232>
 8008548:	4b39      	ldr	r3, [pc, #228]	; (8008630 <pow+0x2d0>)
 800854a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800854e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008552:	4630      	mov	r0, r6
 8008554:	4652      	mov	r2, sl
 8008556:	465b      	mov	r3, fp
 8008558:	4639      	mov	r1, r7
 800855a:	f7f8 facf 	bl	8000afc <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	d056      	beq.n	8008610 <pow+0x2b0>
 8008562:	ec45 4b10 	vmov	d0, r4, r5
 8008566:	f000 fe47 	bl	80091f8 <rint>
 800856a:	4622      	mov	r2, r4
 800856c:	462b      	mov	r3, r5
 800856e:	ec51 0b10 	vmov	r0, r1, d0
 8008572:	f7f8 fab9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008576:	b920      	cbnz	r0, 8008582 <pow+0x222>
 8008578:	4b2e      	ldr	r3, [pc, #184]	; (8008634 <pow+0x2d4>)
 800857a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800857e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008582:	f998 3000 	ldrsb.w	r3, [r8]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d142      	bne.n	8008610 <pow+0x2b0>
 800858a:	f7fe ff79 	bl	8007480 <__errno>
 800858e:	2322      	movs	r3, #34	; 0x22
 8008590:	e78d      	b.n	80084ae <pow+0x14e>
 8008592:	4b29      	ldr	r3, [pc, #164]	; (8008638 <pow+0x2d8>)
 8008594:	2200      	movs	r2, #0
 8008596:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800859a:	4630      	mov	r0, r6
 800859c:	4652      	mov	r2, sl
 800859e:	465b      	mov	r3, fp
 80085a0:	4639      	mov	r1, r7
 80085a2:	f7f8 faab 	bl	8000afc <__aeabi_dcmplt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d0eb      	beq.n	8008582 <pow+0x222>
 80085aa:	ec45 4b10 	vmov	d0, r4, r5
 80085ae:	f000 fe23 	bl	80091f8 <rint>
 80085b2:	4622      	mov	r2, r4
 80085b4:	462b      	mov	r3, r5
 80085b6:	ec51 0b10 	vmov	r0, r1, d0
 80085ba:	f7f8 fa95 	bl	8000ae8 <__aeabi_dcmpeq>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d1df      	bne.n	8008582 <pow+0x222>
 80085c2:	2200      	movs	r2, #0
 80085c4:	4b18      	ldr	r3, [pc, #96]	; (8008628 <pow+0x2c8>)
 80085c6:	e7da      	b.n	800857e <pow+0x21e>
 80085c8:	2200      	movs	r2, #0
 80085ca:	2300      	movs	r3, #0
 80085cc:	ec51 0b18 	vmov	r0, r1, d8
 80085d0:	f7f8 fa8a 	bl	8000ae8 <__aeabi_dcmpeq>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	f43f af3a 	beq.w	800844e <pow+0xee>
 80085da:	ec47 6b10 	vmov	d0, r6, r7
 80085de:	f000 fdf6 	bl	80091ce <finite>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f43f af33 	beq.w	800844e <pow+0xee>
 80085e8:	ec45 4b10 	vmov	d0, r4, r5
 80085ec:	f000 fdef 	bl	80091ce <finite>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f43f af2c 	beq.w	800844e <pow+0xee>
 80085f6:	2304      	movs	r3, #4
 80085f8:	9302      	str	r3, [sp, #8]
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <pow+0x2c0>)
 80085fc:	9303      	str	r3, [sp, #12]
 80085fe:	2300      	movs	r3, #0
 8008600:	930a      	str	r3, [sp, #40]	; 0x28
 8008602:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008606:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800860a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800860e:	e7b8      	b.n	8008582 <pow+0x222>
 8008610:	a802      	add	r0, sp, #8
 8008612:	f000 fde4 	bl	80091de <matherr>
 8008616:	2800      	cmp	r0, #0
 8008618:	f47f af11 	bne.w	800843e <pow+0xde>
 800861c:	e7b5      	b.n	800858a <pow+0x22a>
 800861e:	bf00      	nop
 8008620:	08009663 	.word	0x08009663
 8008624:	3ff00000 	.word	0x3ff00000
 8008628:	fff00000 	.word	0xfff00000
 800862c:	3fe00000 	.word	0x3fe00000
 8008630:	47efffff 	.word	0x47efffff
 8008634:	c7efffff 	.word	0xc7efffff
 8008638:	7ff00000 	.word	0x7ff00000
 800863c:	20000074 	.word	0x20000074

08008640 <__ieee754_pow>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	b091      	sub	sp, #68	; 0x44
 8008646:	ed8d 1b00 	vstr	d1, [sp]
 800864a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800864e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008652:	ea58 0302 	orrs.w	r3, r8, r2
 8008656:	ec57 6b10 	vmov	r6, r7, d0
 800865a:	f000 84be 	beq.w	8008fda <__ieee754_pow+0x99a>
 800865e:	4b7a      	ldr	r3, [pc, #488]	; (8008848 <__ieee754_pow+0x208>)
 8008660:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008664:	429c      	cmp	r4, r3
 8008666:	463d      	mov	r5, r7
 8008668:	ee10 aa10 	vmov	sl, s0
 800866c:	dc09      	bgt.n	8008682 <__ieee754_pow+0x42>
 800866e:	d103      	bne.n	8008678 <__ieee754_pow+0x38>
 8008670:	b93e      	cbnz	r6, 8008682 <__ieee754_pow+0x42>
 8008672:	45a0      	cmp	r8, r4
 8008674:	dc0d      	bgt.n	8008692 <__ieee754_pow+0x52>
 8008676:	e001      	b.n	800867c <__ieee754_pow+0x3c>
 8008678:	4598      	cmp	r8, r3
 800867a:	dc02      	bgt.n	8008682 <__ieee754_pow+0x42>
 800867c:	4598      	cmp	r8, r3
 800867e:	d10e      	bne.n	800869e <__ieee754_pow+0x5e>
 8008680:	b16a      	cbz	r2, 800869e <__ieee754_pow+0x5e>
 8008682:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008686:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800868a:	ea54 030a 	orrs.w	r3, r4, sl
 800868e:	f000 84a4 	beq.w	8008fda <__ieee754_pow+0x99a>
 8008692:	486e      	ldr	r0, [pc, #440]	; (800884c <__ieee754_pow+0x20c>)
 8008694:	b011      	add	sp, #68	; 0x44
 8008696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	f000 bda5 	b.w	80091e8 <nan>
 800869e:	2d00      	cmp	r5, #0
 80086a0:	da53      	bge.n	800874a <__ieee754_pow+0x10a>
 80086a2:	4b6b      	ldr	r3, [pc, #428]	; (8008850 <__ieee754_pow+0x210>)
 80086a4:	4598      	cmp	r8, r3
 80086a6:	dc4d      	bgt.n	8008744 <__ieee754_pow+0x104>
 80086a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80086ac:	4598      	cmp	r8, r3
 80086ae:	dd4c      	ble.n	800874a <__ieee754_pow+0x10a>
 80086b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80086b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80086b8:	2b14      	cmp	r3, #20
 80086ba:	dd26      	ble.n	800870a <__ieee754_pow+0xca>
 80086bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80086c0:	fa22 f103 	lsr.w	r1, r2, r3
 80086c4:	fa01 f303 	lsl.w	r3, r1, r3
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d13e      	bne.n	800874a <__ieee754_pow+0x10a>
 80086cc:	f001 0101 	and.w	r1, r1, #1
 80086d0:	f1c1 0b02 	rsb	fp, r1, #2
 80086d4:	2a00      	cmp	r2, #0
 80086d6:	d15b      	bne.n	8008790 <__ieee754_pow+0x150>
 80086d8:	4b5b      	ldr	r3, [pc, #364]	; (8008848 <__ieee754_pow+0x208>)
 80086da:	4598      	cmp	r8, r3
 80086dc:	d124      	bne.n	8008728 <__ieee754_pow+0xe8>
 80086de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80086e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80086e6:	ea53 030a 	orrs.w	r3, r3, sl
 80086ea:	f000 8476 	beq.w	8008fda <__ieee754_pow+0x99a>
 80086ee:	4b59      	ldr	r3, [pc, #356]	; (8008854 <__ieee754_pow+0x214>)
 80086f0:	429c      	cmp	r4, r3
 80086f2:	dd2d      	ble.n	8008750 <__ieee754_pow+0x110>
 80086f4:	f1b9 0f00 	cmp.w	r9, #0
 80086f8:	f280 8473 	bge.w	8008fe2 <__ieee754_pow+0x9a2>
 80086fc:	2000      	movs	r0, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	ec41 0b10 	vmov	d0, r0, r1
 8008704:	b011      	add	sp, #68	; 0x44
 8008706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870a:	2a00      	cmp	r2, #0
 800870c:	d13e      	bne.n	800878c <__ieee754_pow+0x14c>
 800870e:	f1c3 0314 	rsb	r3, r3, #20
 8008712:	fa48 f103 	asr.w	r1, r8, r3
 8008716:	fa01 f303 	lsl.w	r3, r1, r3
 800871a:	4543      	cmp	r3, r8
 800871c:	f040 8469 	bne.w	8008ff2 <__ieee754_pow+0x9b2>
 8008720:	f001 0101 	and.w	r1, r1, #1
 8008724:	f1c1 0b02 	rsb	fp, r1, #2
 8008728:	4b4b      	ldr	r3, [pc, #300]	; (8008858 <__ieee754_pow+0x218>)
 800872a:	4598      	cmp	r8, r3
 800872c:	d118      	bne.n	8008760 <__ieee754_pow+0x120>
 800872e:	f1b9 0f00 	cmp.w	r9, #0
 8008732:	f280 845a 	bge.w	8008fea <__ieee754_pow+0x9aa>
 8008736:	4948      	ldr	r1, [pc, #288]	; (8008858 <__ieee754_pow+0x218>)
 8008738:	4632      	mov	r2, r6
 800873a:	463b      	mov	r3, r7
 800873c:	2000      	movs	r0, #0
 800873e:	f7f8 f895 	bl	800086c <__aeabi_ddiv>
 8008742:	e7dd      	b.n	8008700 <__ieee754_pow+0xc0>
 8008744:	f04f 0b02 	mov.w	fp, #2
 8008748:	e7c4      	b.n	80086d4 <__ieee754_pow+0x94>
 800874a:	f04f 0b00 	mov.w	fp, #0
 800874e:	e7c1      	b.n	80086d4 <__ieee754_pow+0x94>
 8008750:	f1b9 0f00 	cmp.w	r9, #0
 8008754:	dad2      	bge.n	80086fc <__ieee754_pow+0xbc>
 8008756:	e9dd 0300 	ldrd	r0, r3, [sp]
 800875a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800875e:	e7cf      	b.n	8008700 <__ieee754_pow+0xc0>
 8008760:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008764:	d106      	bne.n	8008774 <__ieee754_pow+0x134>
 8008766:	4632      	mov	r2, r6
 8008768:	463b      	mov	r3, r7
 800876a:	4610      	mov	r0, r2
 800876c:	4619      	mov	r1, r3
 800876e:	f7f7 ff53 	bl	8000618 <__aeabi_dmul>
 8008772:	e7c5      	b.n	8008700 <__ieee754_pow+0xc0>
 8008774:	4b39      	ldr	r3, [pc, #228]	; (800885c <__ieee754_pow+0x21c>)
 8008776:	4599      	cmp	r9, r3
 8008778:	d10a      	bne.n	8008790 <__ieee754_pow+0x150>
 800877a:	2d00      	cmp	r5, #0
 800877c:	db08      	blt.n	8008790 <__ieee754_pow+0x150>
 800877e:	ec47 6b10 	vmov	d0, r6, r7
 8008782:	b011      	add	sp, #68	; 0x44
 8008784:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	f000 bc68 	b.w	800905c <__ieee754_sqrt>
 800878c:	f04f 0b00 	mov.w	fp, #0
 8008790:	ec47 6b10 	vmov	d0, r6, r7
 8008794:	f000 fd12 	bl	80091bc <fabs>
 8008798:	ec51 0b10 	vmov	r0, r1, d0
 800879c:	f1ba 0f00 	cmp.w	sl, #0
 80087a0:	d127      	bne.n	80087f2 <__ieee754_pow+0x1b2>
 80087a2:	b124      	cbz	r4, 80087ae <__ieee754_pow+0x16e>
 80087a4:	4b2c      	ldr	r3, [pc, #176]	; (8008858 <__ieee754_pow+0x218>)
 80087a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d121      	bne.n	80087f2 <__ieee754_pow+0x1b2>
 80087ae:	f1b9 0f00 	cmp.w	r9, #0
 80087b2:	da05      	bge.n	80087c0 <__ieee754_pow+0x180>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	2000      	movs	r0, #0
 80087ba:	4927      	ldr	r1, [pc, #156]	; (8008858 <__ieee754_pow+0x218>)
 80087bc:	f7f8 f856 	bl	800086c <__aeabi_ddiv>
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	da9d      	bge.n	8008700 <__ieee754_pow+0xc0>
 80087c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80087c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80087cc:	ea54 030b 	orrs.w	r3, r4, fp
 80087d0:	d108      	bne.n	80087e4 <__ieee754_pow+0x1a4>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4610      	mov	r0, r2
 80087d8:	4619      	mov	r1, r3
 80087da:	f7f7 fd65 	bl	80002a8 <__aeabi_dsub>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	e7ac      	b.n	800873e <__ieee754_pow+0xfe>
 80087e4:	f1bb 0f01 	cmp.w	fp, #1
 80087e8:	d18a      	bne.n	8008700 <__ieee754_pow+0xc0>
 80087ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087ee:	4619      	mov	r1, r3
 80087f0:	e786      	b.n	8008700 <__ieee754_pow+0xc0>
 80087f2:	0fed      	lsrs	r5, r5, #31
 80087f4:	1e6b      	subs	r3, r5, #1
 80087f6:	930d      	str	r3, [sp, #52]	; 0x34
 80087f8:	ea5b 0303 	orrs.w	r3, fp, r3
 80087fc:	d102      	bne.n	8008804 <__ieee754_pow+0x1c4>
 80087fe:	4632      	mov	r2, r6
 8008800:	463b      	mov	r3, r7
 8008802:	e7e8      	b.n	80087d6 <__ieee754_pow+0x196>
 8008804:	4b16      	ldr	r3, [pc, #88]	; (8008860 <__ieee754_pow+0x220>)
 8008806:	4598      	cmp	r8, r3
 8008808:	f340 80fe 	ble.w	8008a08 <__ieee754_pow+0x3c8>
 800880c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008810:	4598      	cmp	r8, r3
 8008812:	dd0a      	ble.n	800882a <__ieee754_pow+0x1ea>
 8008814:	4b0f      	ldr	r3, [pc, #60]	; (8008854 <__ieee754_pow+0x214>)
 8008816:	429c      	cmp	r4, r3
 8008818:	dc0d      	bgt.n	8008836 <__ieee754_pow+0x1f6>
 800881a:	f1b9 0f00 	cmp.w	r9, #0
 800881e:	f6bf af6d 	bge.w	80086fc <__ieee754_pow+0xbc>
 8008822:	a307      	add	r3, pc, #28	; (adr r3, 8008840 <__ieee754_pow+0x200>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	e79f      	b.n	800876a <__ieee754_pow+0x12a>
 800882a:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <__ieee754_pow+0x224>)
 800882c:	429c      	cmp	r4, r3
 800882e:	ddf4      	ble.n	800881a <__ieee754_pow+0x1da>
 8008830:	4b09      	ldr	r3, [pc, #36]	; (8008858 <__ieee754_pow+0x218>)
 8008832:	429c      	cmp	r4, r3
 8008834:	dd18      	ble.n	8008868 <__ieee754_pow+0x228>
 8008836:	f1b9 0f00 	cmp.w	r9, #0
 800883a:	dcf2      	bgt.n	8008822 <__ieee754_pow+0x1e2>
 800883c:	e75e      	b.n	80086fc <__ieee754_pow+0xbc>
 800883e:	bf00      	nop
 8008840:	8800759c 	.word	0x8800759c
 8008844:	7e37e43c 	.word	0x7e37e43c
 8008848:	7ff00000 	.word	0x7ff00000
 800884c:	08009635 	.word	0x08009635
 8008850:	433fffff 	.word	0x433fffff
 8008854:	3fefffff 	.word	0x3fefffff
 8008858:	3ff00000 	.word	0x3ff00000
 800885c:	3fe00000 	.word	0x3fe00000
 8008860:	41e00000 	.word	0x41e00000
 8008864:	3feffffe 	.word	0x3feffffe
 8008868:	2200      	movs	r2, #0
 800886a:	4b63      	ldr	r3, [pc, #396]	; (80089f8 <__ieee754_pow+0x3b8>)
 800886c:	f7f7 fd1c 	bl	80002a8 <__aeabi_dsub>
 8008870:	a355      	add	r3, pc, #340	; (adr r3, 80089c8 <__ieee754_pow+0x388>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	4604      	mov	r4, r0
 8008878:	460d      	mov	r5, r1
 800887a:	f7f7 fecd 	bl	8000618 <__aeabi_dmul>
 800887e:	a354      	add	r3, pc, #336	; (adr r3, 80089d0 <__ieee754_pow+0x390>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	4606      	mov	r6, r0
 8008886:	460f      	mov	r7, r1
 8008888:	4620      	mov	r0, r4
 800888a:	4629      	mov	r1, r5
 800888c:	f7f7 fec4 	bl	8000618 <__aeabi_dmul>
 8008890:	2200      	movs	r2, #0
 8008892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008896:	4b59      	ldr	r3, [pc, #356]	; (80089fc <__ieee754_pow+0x3bc>)
 8008898:	4620      	mov	r0, r4
 800889a:	4629      	mov	r1, r5
 800889c:	f7f7 febc 	bl	8000618 <__aeabi_dmul>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	a14c      	add	r1, pc, #304	; (adr r1, 80089d8 <__ieee754_pow+0x398>)
 80088a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088aa:	f7f7 fcfd 	bl	80002a8 <__aeabi_dsub>
 80088ae:	4622      	mov	r2, r4
 80088b0:	462b      	mov	r3, r5
 80088b2:	f7f7 feb1 	bl	8000618 <__aeabi_dmul>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	2000      	movs	r0, #0
 80088bc:	4950      	ldr	r1, [pc, #320]	; (8008a00 <__ieee754_pow+0x3c0>)
 80088be:	f7f7 fcf3 	bl	80002a8 <__aeabi_dsub>
 80088c2:	4622      	mov	r2, r4
 80088c4:	462b      	mov	r3, r5
 80088c6:	4680      	mov	r8, r0
 80088c8:	4689      	mov	r9, r1
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	f7f7 fea3 	bl	8000618 <__aeabi_dmul>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4640      	mov	r0, r8
 80088d8:	4649      	mov	r1, r9
 80088da:	f7f7 fe9d 	bl	8000618 <__aeabi_dmul>
 80088de:	a340      	add	r3, pc, #256	; (adr r3, 80089e0 <__ieee754_pow+0x3a0>)
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	f7f7 fe98 	bl	8000618 <__aeabi_dmul>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088f0:	f7f7 fcda 	bl	80002a8 <__aeabi_dsub>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4604      	mov	r4, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	4630      	mov	r0, r6
 80088fe:	4639      	mov	r1, r7
 8008900:	f7f7 fcd4 	bl	80002ac <__adddf3>
 8008904:	2000      	movs	r0, #0
 8008906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800890a:	4632      	mov	r2, r6
 800890c:	463b      	mov	r3, r7
 800890e:	f7f7 fccb 	bl	80002a8 <__aeabi_dsub>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f7 fcc5 	bl	80002a8 <__aeabi_dsub>
 800891e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008920:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008924:	4313      	orrs	r3, r2
 8008926:	4606      	mov	r6, r0
 8008928:	460f      	mov	r7, r1
 800892a:	f040 81eb 	bne.w	8008d04 <__ieee754_pow+0x6c4>
 800892e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80089e8 <__ieee754_pow+0x3a8>
 8008932:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008936:	2400      	movs	r4, #0
 8008938:	4622      	mov	r2, r4
 800893a:	462b      	mov	r3, r5
 800893c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008940:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008944:	f7f7 fcb0 	bl	80002a8 <__aeabi_dsub>
 8008948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800894c:	f7f7 fe64 	bl	8000618 <__aeabi_dmul>
 8008950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008954:	4680      	mov	r8, r0
 8008956:	4689      	mov	r9, r1
 8008958:	4630      	mov	r0, r6
 800895a:	4639      	mov	r1, r7
 800895c:	f7f7 fe5c 	bl	8000618 <__aeabi_dmul>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	f7f7 fca0 	bl	80002ac <__adddf3>
 800896c:	4622      	mov	r2, r4
 800896e:	462b      	mov	r3, r5
 8008970:	4680      	mov	r8, r0
 8008972:	4689      	mov	r9, r1
 8008974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008978:	f7f7 fe4e 	bl	8000618 <__aeabi_dmul>
 800897c:	460b      	mov	r3, r1
 800897e:	4604      	mov	r4, r0
 8008980:	460d      	mov	r5, r1
 8008982:	4602      	mov	r2, r0
 8008984:	4649      	mov	r1, r9
 8008986:	4640      	mov	r0, r8
 8008988:	e9cd 4500 	strd	r4, r5, [sp]
 800898c:	f7f7 fc8e 	bl	80002ac <__adddf3>
 8008990:	4b1c      	ldr	r3, [pc, #112]	; (8008a04 <__ieee754_pow+0x3c4>)
 8008992:	4299      	cmp	r1, r3
 8008994:	4606      	mov	r6, r0
 8008996:	460f      	mov	r7, r1
 8008998:	468b      	mov	fp, r1
 800899a:	f340 82f7 	ble.w	8008f8c <__ieee754_pow+0x94c>
 800899e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80089a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80089a6:	4303      	orrs	r3, r0
 80089a8:	f000 81ea 	beq.w	8008d80 <__ieee754_pow+0x740>
 80089ac:	a310      	add	r3, pc, #64	; (adr r3, 80089f0 <__ieee754_pow+0x3b0>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b6:	f7f7 fe2f 	bl	8000618 <__aeabi_dmul>
 80089ba:	a30d      	add	r3, pc, #52	; (adr r3, 80089f0 <__ieee754_pow+0x3b0>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	e6d5      	b.n	800876e <__ieee754_pow+0x12e>
 80089c2:	bf00      	nop
 80089c4:	f3af 8000 	nop.w
 80089c8:	60000000 	.word	0x60000000
 80089cc:	3ff71547 	.word	0x3ff71547
 80089d0:	f85ddf44 	.word	0xf85ddf44
 80089d4:	3e54ae0b 	.word	0x3e54ae0b
 80089d8:	55555555 	.word	0x55555555
 80089dc:	3fd55555 	.word	0x3fd55555
 80089e0:	652b82fe 	.word	0x652b82fe
 80089e4:	3ff71547 	.word	0x3ff71547
 80089e8:	00000000 	.word	0x00000000
 80089ec:	bff00000 	.word	0xbff00000
 80089f0:	8800759c 	.word	0x8800759c
 80089f4:	7e37e43c 	.word	0x7e37e43c
 80089f8:	3ff00000 	.word	0x3ff00000
 80089fc:	3fd00000 	.word	0x3fd00000
 8008a00:	3fe00000 	.word	0x3fe00000
 8008a04:	408fffff 	.word	0x408fffff
 8008a08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008a0c:	f04f 0200 	mov.w	r2, #0
 8008a10:	da05      	bge.n	8008a1e <__ieee754_pow+0x3de>
 8008a12:	4bd3      	ldr	r3, [pc, #844]	; (8008d60 <__ieee754_pow+0x720>)
 8008a14:	f7f7 fe00 	bl	8000618 <__aeabi_dmul>
 8008a18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	1523      	asrs	r3, r4, #20
 8008a20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a24:	4413      	add	r3, r2
 8008a26:	9309      	str	r3, [sp, #36]	; 0x24
 8008a28:	4bce      	ldr	r3, [pc, #824]	; (8008d64 <__ieee754_pow+0x724>)
 8008a2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008a2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008a32:	429c      	cmp	r4, r3
 8008a34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a38:	dd08      	ble.n	8008a4c <__ieee754_pow+0x40c>
 8008a3a:	4bcb      	ldr	r3, [pc, #812]	; (8008d68 <__ieee754_pow+0x728>)
 8008a3c:	429c      	cmp	r4, r3
 8008a3e:	f340 815e 	ble.w	8008cfe <__ieee754_pow+0x6be>
 8008a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a44:	3301      	adds	r3, #1
 8008a46:	9309      	str	r3, [sp, #36]	; 0x24
 8008a48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008a4c:	f04f 0a00 	mov.w	sl, #0
 8008a50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008a54:	930c      	str	r3, [sp, #48]	; 0x30
 8008a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a58:	4bc4      	ldr	r3, [pc, #784]	; (8008d6c <__ieee754_pow+0x72c>)
 8008a5a:	4413      	add	r3, r2
 8008a5c:	ed93 7b00 	vldr	d7, [r3]
 8008a60:	4629      	mov	r1, r5
 8008a62:	ec53 2b17 	vmov	r2, r3, d7
 8008a66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a6e:	f7f7 fc1b 	bl	80002a8 <__aeabi_dsub>
 8008a72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a76:	4606      	mov	r6, r0
 8008a78:	460f      	mov	r7, r1
 8008a7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a7e:	f7f7 fc15 	bl	80002ac <__adddf3>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	2000      	movs	r0, #0
 8008a88:	49b9      	ldr	r1, [pc, #740]	; (8008d70 <__ieee754_pow+0x730>)
 8008a8a:	f7f7 feef 	bl	800086c <__aeabi_ddiv>
 8008a8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f7 fdbd 	bl	8000618 <__aeabi_dmul>
 8008a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aa2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008aa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9302      	str	r3, [sp, #8]
 8008aae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ab2:	106d      	asrs	r5, r5, #1
 8008ab4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008ab8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008abc:	2200      	movs	r2, #0
 8008abe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	461d      	mov	r5, r3
 8008aca:	f7f7 fda5 	bl	8000618 <__aeabi_dmul>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	f7f7 fbe7 	bl	80002a8 <__aeabi_dsub>
 8008ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	f7f7 fbdf 	bl	80002a8 <__aeabi_dsub>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008af2:	f7f7 fbd9 	bl	80002a8 <__aeabi_dsub>
 8008af6:	4642      	mov	r2, r8
 8008af8:	464b      	mov	r3, r9
 8008afa:	f7f7 fd8d 	bl	8000618 <__aeabi_dmul>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4630      	mov	r0, r6
 8008b04:	4639      	mov	r1, r7
 8008b06:	f7f7 fbcf 	bl	80002a8 <__aeabi_dsub>
 8008b0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008b0e:	f7f7 fd83 	bl	8000618 <__aeabi_dmul>
 8008b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	f7f7 fd7b 	bl	8000618 <__aeabi_dmul>
 8008b22:	a37b      	add	r3, pc, #492	; (adr r3, 8008d10 <__ieee754_pow+0x6d0>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	4604      	mov	r4, r0
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	f7f7 fd74 	bl	8000618 <__aeabi_dmul>
 8008b30:	a379      	add	r3, pc, #484	; (adr r3, 8008d18 <__ieee754_pow+0x6d8>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f7f7 fbb9 	bl	80002ac <__adddf3>
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	462b      	mov	r3, r5
 8008b3e:	f7f7 fd6b 	bl	8000618 <__aeabi_dmul>
 8008b42:	a377      	add	r3, pc, #476	; (adr r3, 8008d20 <__ieee754_pow+0x6e0>)
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	f7f7 fbb0 	bl	80002ac <__adddf3>
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	462b      	mov	r3, r5
 8008b50:	f7f7 fd62 	bl	8000618 <__aeabi_dmul>
 8008b54:	a374      	add	r3, pc, #464	; (adr r3, 8008d28 <__ieee754_pow+0x6e8>)
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f7f7 fba7 	bl	80002ac <__adddf3>
 8008b5e:	4622      	mov	r2, r4
 8008b60:	462b      	mov	r3, r5
 8008b62:	f7f7 fd59 	bl	8000618 <__aeabi_dmul>
 8008b66:	a372      	add	r3, pc, #456	; (adr r3, 8008d30 <__ieee754_pow+0x6f0>)
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f7f7 fb9e 	bl	80002ac <__adddf3>
 8008b70:	4622      	mov	r2, r4
 8008b72:	462b      	mov	r3, r5
 8008b74:	f7f7 fd50 	bl	8000618 <__aeabi_dmul>
 8008b78:	a36f      	add	r3, pc, #444	; (adr r3, 8008d38 <__ieee754_pow+0x6f8>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 fb95 	bl	80002ac <__adddf3>
 8008b82:	4622      	mov	r2, r4
 8008b84:	4606      	mov	r6, r0
 8008b86:	460f      	mov	r7, r1
 8008b88:	462b      	mov	r3, r5
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f7f7 fd43 	bl	8000618 <__aeabi_dmul>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4630      	mov	r0, r6
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 fd3d 	bl	8000618 <__aeabi_dmul>
 8008b9e:	4642      	mov	r2, r8
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008baa:	f7f7 fb7f 	bl	80002ac <__adddf3>
 8008bae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bb2:	f7f7 fd31 	bl	8000618 <__aeabi_dmul>
 8008bb6:	4622      	mov	r2, r4
 8008bb8:	462b      	mov	r3, r5
 8008bba:	f7f7 fb77 	bl	80002ac <__adddf3>
 8008bbe:	4642      	mov	r2, r8
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	460f      	mov	r7, r1
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4649      	mov	r1, r9
 8008bca:	f7f7 fd25 	bl	8000618 <__aeabi_dmul>
 8008bce:	2200      	movs	r2, #0
 8008bd0:	4b68      	ldr	r3, [pc, #416]	; (8008d74 <__ieee754_pow+0x734>)
 8008bd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008bd6:	f7f7 fb69 	bl	80002ac <__adddf3>
 8008bda:	4632      	mov	r2, r6
 8008bdc:	463b      	mov	r3, r7
 8008bde:	f7f7 fb65 	bl	80002ac <__adddf3>
 8008be2:	9802      	ldr	r0, [sp, #8]
 8008be4:	460d      	mov	r5, r1
 8008be6:	4604      	mov	r4, r0
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4640      	mov	r0, r8
 8008bee:	4649      	mov	r1, r9
 8008bf0:	f7f7 fd12 	bl	8000618 <__aeabi_dmul>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	4689      	mov	r9, r1
 8008bfa:	4b5e      	ldr	r3, [pc, #376]	; (8008d74 <__ieee754_pow+0x734>)
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 fb52 	bl	80002a8 <__aeabi_dsub>
 8008c04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c08:	f7f7 fb4e 	bl	80002a8 <__aeabi_dsub>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 fb48 	bl	80002a8 <__aeabi_dsub>
 8008c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c1c:	f7f7 fcfc 	bl	8000618 <__aeabi_dmul>
 8008c20:	4622      	mov	r2, r4
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	462b      	mov	r3, r5
 8008c28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c2c:	f7f7 fcf4 	bl	8000618 <__aeabi_dmul>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4630      	mov	r0, r6
 8008c36:	4639      	mov	r1, r7
 8008c38:	f7f7 fb38 	bl	80002ac <__adddf3>
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	460f      	mov	r7, r1
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4640      	mov	r0, r8
 8008c46:	4649      	mov	r1, r9
 8008c48:	f7f7 fb30 	bl	80002ac <__adddf3>
 8008c4c:	9802      	ldr	r0, [sp, #8]
 8008c4e:	a33c      	add	r3, pc, #240	; (adr r3, 8008d40 <__ieee754_pow+0x700>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	4604      	mov	r4, r0
 8008c56:	460d      	mov	r5, r1
 8008c58:	f7f7 fcde 	bl	8000618 <__aeabi_dmul>
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c62:	464b      	mov	r3, r9
 8008c64:	4620      	mov	r0, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	f7f7 fb1e 	bl	80002a8 <__aeabi_dsub>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f7f7 fb18 	bl	80002a8 <__aeabi_dsub>
 8008c78:	a333      	add	r3, pc, #204	; (adr r3, 8008d48 <__ieee754_pow+0x708>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fccb 	bl	8000618 <__aeabi_dmul>
 8008c82:	a333      	add	r3, pc, #204	; (adr r3, 8008d50 <__ieee754_pow+0x710>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	4606      	mov	r6, r0
 8008c8a:	460f      	mov	r7, r1
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	4629      	mov	r1, r5
 8008c90:	f7f7 fcc2 	bl	8000618 <__aeabi_dmul>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4630      	mov	r0, r6
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	f7f7 fb06 	bl	80002ac <__adddf3>
 8008ca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ca2:	4b35      	ldr	r3, [pc, #212]	; (8008d78 <__ieee754_pow+0x738>)
 8008ca4:	4413      	add	r3, r2
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f7f7 faff 	bl	80002ac <__adddf3>
 8008cae:	4604      	mov	r4, r0
 8008cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	f7f7 fc46 	bl	8000544 <__aeabi_i2d>
 8008cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cba:	4b30      	ldr	r3, [pc, #192]	; (8008d7c <__ieee754_pow+0x73c>)
 8008cbc:	4413      	add	r3, r2
 8008cbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	462b      	mov	r3, r5
 8008cca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cce:	f7f7 faed 	bl	80002ac <__adddf3>
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	464b      	mov	r3, r9
 8008cd6:	f7f7 fae9 	bl	80002ac <__adddf3>
 8008cda:	4632      	mov	r2, r6
 8008cdc:	463b      	mov	r3, r7
 8008cde:	f7f7 fae5 	bl	80002ac <__adddf3>
 8008ce2:	9802      	ldr	r0, [sp, #8]
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cec:	f7f7 fadc 	bl	80002a8 <__aeabi_dsub>
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	f7f7 fad8 	bl	80002a8 <__aeabi_dsub>
 8008cf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cfc:	e607      	b.n	800890e <__ieee754_pow+0x2ce>
 8008cfe:	f04f 0a01 	mov.w	sl, #1
 8008d02:	e6a5      	b.n	8008a50 <__ieee754_pow+0x410>
 8008d04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008d58 <__ieee754_pow+0x718>
 8008d08:	e613      	b.n	8008932 <__ieee754_pow+0x2f2>
 8008d0a:	bf00      	nop
 8008d0c:	f3af 8000 	nop.w
 8008d10:	4a454eef 	.word	0x4a454eef
 8008d14:	3fca7e28 	.word	0x3fca7e28
 8008d18:	93c9db65 	.word	0x93c9db65
 8008d1c:	3fcd864a 	.word	0x3fcd864a
 8008d20:	a91d4101 	.word	0xa91d4101
 8008d24:	3fd17460 	.word	0x3fd17460
 8008d28:	518f264d 	.word	0x518f264d
 8008d2c:	3fd55555 	.word	0x3fd55555
 8008d30:	db6fabff 	.word	0xdb6fabff
 8008d34:	3fdb6db6 	.word	0x3fdb6db6
 8008d38:	33333303 	.word	0x33333303
 8008d3c:	3fe33333 	.word	0x3fe33333
 8008d40:	e0000000 	.word	0xe0000000
 8008d44:	3feec709 	.word	0x3feec709
 8008d48:	dc3a03fd 	.word	0xdc3a03fd
 8008d4c:	3feec709 	.word	0x3feec709
 8008d50:	145b01f5 	.word	0x145b01f5
 8008d54:	be3e2fe0 	.word	0xbe3e2fe0
 8008d58:	00000000 	.word	0x00000000
 8008d5c:	3ff00000 	.word	0x3ff00000
 8008d60:	43400000 	.word	0x43400000
 8008d64:	0003988e 	.word	0x0003988e
 8008d68:	000bb679 	.word	0x000bb679
 8008d6c:	08009668 	.word	0x08009668
 8008d70:	3ff00000 	.word	0x3ff00000
 8008d74:	40080000 	.word	0x40080000
 8008d78:	08009688 	.word	0x08009688
 8008d7c:	08009678 	.word	0x08009678
 8008d80:	a3b4      	add	r3, pc, #720	; (adr r3, 8009054 <__ieee754_pow+0xa14>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	4640      	mov	r0, r8
 8008d88:	4649      	mov	r1, r9
 8008d8a:	f7f7 fa8f 	bl	80002ac <__adddf3>
 8008d8e:	4622      	mov	r2, r4
 8008d90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d94:	462b      	mov	r3, r5
 8008d96:	4630      	mov	r0, r6
 8008d98:	4639      	mov	r1, r7
 8008d9a:	f7f7 fa85 	bl	80002a8 <__aeabi_dsub>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008da6:	f7f7 fec7 	bl	8000b38 <__aeabi_dcmpgt>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	f47f adfe 	bne.w	80089ac <__ieee754_pow+0x36c>
 8008db0:	4aa3      	ldr	r2, [pc, #652]	; (8009040 <__ieee754_pow+0xa00>)
 8008db2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008db6:	4293      	cmp	r3, r2
 8008db8:	f340 810a 	ble.w	8008fd0 <__ieee754_pow+0x990>
 8008dbc:	151b      	asrs	r3, r3, #20
 8008dbe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008dc2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008dc6:	fa4a f303 	asr.w	r3, sl, r3
 8008dca:	445b      	add	r3, fp
 8008dcc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008dd0:	4e9c      	ldr	r6, [pc, #624]	; (8009044 <__ieee754_pow+0xa04>)
 8008dd2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008dd6:	4116      	asrs	r6, r2
 8008dd8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008ddc:	2000      	movs	r0, #0
 8008dde:	ea23 0106 	bic.w	r1, r3, r6
 8008de2:	f1c2 0214 	rsb	r2, r2, #20
 8008de6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008dea:	fa4a fa02 	asr.w	sl, sl, r2
 8008dee:	f1bb 0f00 	cmp.w	fp, #0
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4620      	mov	r0, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	bfb8      	it	lt
 8008dfc:	f1ca 0a00 	rsblt	sl, sl, #0
 8008e00:	f7f7 fa52 	bl	80002a8 <__aeabi_dsub>
 8008e04:	e9cd 0100 	strd	r0, r1, [sp]
 8008e08:	4642      	mov	r2, r8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e10:	f7f7 fa4c 	bl	80002ac <__adddf3>
 8008e14:	2000      	movs	r0, #0
 8008e16:	a378      	add	r3, pc, #480	; (adr r3, 8008ff8 <__ieee754_pow+0x9b8>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	460d      	mov	r5, r1
 8008e20:	f7f7 fbfa 	bl	8000618 <__aeabi_dmul>
 8008e24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 fa3a 	bl	80002a8 <__aeabi_dsub>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4640      	mov	r0, r8
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	f7f7 fa34 	bl	80002a8 <__aeabi_dsub>
 8008e40:	a36f      	add	r3, pc, #444	; (adr r3, 8009000 <__ieee754_pow+0x9c0>)
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	f7f7 fbe7 	bl	8000618 <__aeabi_dmul>
 8008e4a:	a36f      	add	r3, pc, #444	; (adr r3, 8009008 <__ieee754_pow+0x9c8>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	4680      	mov	r8, r0
 8008e52:	4689      	mov	r9, r1
 8008e54:	4620      	mov	r0, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	f7f7 fbde 	bl	8000618 <__aeabi_dmul>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4640      	mov	r0, r8
 8008e62:	4649      	mov	r1, r9
 8008e64:	f7f7 fa22 	bl	80002ac <__adddf3>
 8008e68:	4604      	mov	r4, r0
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 fa1a 	bl	80002ac <__adddf3>
 8008e78:	4632      	mov	r2, r6
 8008e7a:	463b      	mov	r3, r7
 8008e7c:	4680      	mov	r8, r0
 8008e7e:	4689      	mov	r9, r1
 8008e80:	f7f7 fa12 	bl	80002a8 <__aeabi_dsub>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4620      	mov	r0, r4
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	f7f7 fa0c 	bl	80002a8 <__aeabi_dsub>
 8008e90:	4642      	mov	r2, r8
 8008e92:	4606      	mov	r6, r0
 8008e94:	460f      	mov	r7, r1
 8008e96:	464b      	mov	r3, r9
 8008e98:	4640      	mov	r0, r8
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	f7f7 fbbc 	bl	8000618 <__aeabi_dmul>
 8008ea0:	a35b      	add	r3, pc, #364	; (adr r3, 8009010 <__ieee754_pow+0x9d0>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	f7f7 fbb5 	bl	8000618 <__aeabi_dmul>
 8008eae:	a35a      	add	r3, pc, #360	; (adr r3, 8009018 <__ieee754_pow+0x9d8>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f7f7 f9f8 	bl	80002a8 <__aeabi_dsub>
 8008eb8:	4622      	mov	r2, r4
 8008eba:	462b      	mov	r3, r5
 8008ebc:	f7f7 fbac 	bl	8000618 <__aeabi_dmul>
 8008ec0:	a357      	add	r3, pc, #348	; (adr r3, 8009020 <__ieee754_pow+0x9e0>)
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f7f7 f9f1 	bl	80002ac <__adddf3>
 8008eca:	4622      	mov	r2, r4
 8008ecc:	462b      	mov	r3, r5
 8008ece:	f7f7 fba3 	bl	8000618 <__aeabi_dmul>
 8008ed2:	a355      	add	r3, pc, #340	; (adr r3, 8009028 <__ieee754_pow+0x9e8>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f7f7 f9e6 	bl	80002a8 <__aeabi_dsub>
 8008edc:	4622      	mov	r2, r4
 8008ede:	462b      	mov	r3, r5
 8008ee0:	f7f7 fb9a 	bl	8000618 <__aeabi_dmul>
 8008ee4:	a352      	add	r3, pc, #328	; (adr r3, 8009030 <__ieee754_pow+0x9f0>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	f7f7 f9df 	bl	80002ac <__adddf3>
 8008eee:	4622      	mov	r2, r4
 8008ef0:	462b      	mov	r3, r5
 8008ef2:	f7f7 fb91 	bl	8000618 <__aeabi_dmul>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4640      	mov	r0, r8
 8008efc:	4649      	mov	r1, r9
 8008efe:	f7f7 f9d3 	bl	80002a8 <__aeabi_dsub>
 8008f02:	4604      	mov	r4, r0
 8008f04:	460d      	mov	r5, r1
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	f7f7 fb83 	bl	8000618 <__aeabi_dmul>
 8008f12:	2200      	movs	r2, #0
 8008f14:	e9cd 0100 	strd	r0, r1, [sp]
 8008f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 f9c2 	bl	80002a8 <__aeabi_dsub>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f2c:	f7f7 fc9e 	bl	800086c <__aeabi_ddiv>
 8008f30:	4632      	mov	r2, r6
 8008f32:	4604      	mov	r4, r0
 8008f34:	460d      	mov	r5, r1
 8008f36:	463b      	mov	r3, r7
 8008f38:	4640      	mov	r0, r8
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	f7f7 fb6c 	bl	8000618 <__aeabi_dmul>
 8008f40:	4632      	mov	r2, r6
 8008f42:	463b      	mov	r3, r7
 8008f44:	f7f7 f9b2 	bl	80002ac <__adddf3>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	4629      	mov	r1, r5
 8008f50:	f7f7 f9aa 	bl	80002a8 <__aeabi_dsub>
 8008f54:	4642      	mov	r2, r8
 8008f56:	464b      	mov	r3, r9
 8008f58:	f7f7 f9a6 	bl	80002a8 <__aeabi_dsub>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	2000      	movs	r0, #0
 8008f62:	4939      	ldr	r1, [pc, #228]	; (8009048 <__ieee754_pow+0xa08>)
 8008f64:	f7f7 f9a0 	bl	80002a8 <__aeabi_dsub>
 8008f68:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008f6c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	da2f      	bge.n	8008fd6 <__ieee754_pow+0x996>
 8008f76:	4650      	mov	r0, sl
 8008f78:	ec43 2b10 	vmov	d0, r2, r3
 8008f7c:	f000 f9c0 	bl	8009300 <scalbn>
 8008f80:	ec51 0b10 	vmov	r0, r1, d0
 8008f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f88:	f7ff bbf1 	b.w	800876e <__ieee754_pow+0x12e>
 8008f8c:	4b2f      	ldr	r3, [pc, #188]	; (800904c <__ieee754_pow+0xa0c>)
 8008f8e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008f92:	429e      	cmp	r6, r3
 8008f94:	f77f af0c 	ble.w	8008db0 <__ieee754_pow+0x770>
 8008f98:	4b2d      	ldr	r3, [pc, #180]	; (8009050 <__ieee754_pow+0xa10>)
 8008f9a:	440b      	add	r3, r1
 8008f9c:	4303      	orrs	r3, r0
 8008f9e:	d00b      	beq.n	8008fb8 <__ieee754_pow+0x978>
 8008fa0:	a325      	add	r3, pc, #148	; (adr r3, 8009038 <__ieee754_pow+0x9f8>)
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008faa:	f7f7 fb35 	bl	8000618 <__aeabi_dmul>
 8008fae:	a322      	add	r3, pc, #136	; (adr r3, 8009038 <__ieee754_pow+0x9f8>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7ff bbdb 	b.w	800876e <__ieee754_pow+0x12e>
 8008fb8:	4622      	mov	r2, r4
 8008fba:	462b      	mov	r3, r5
 8008fbc:	f7f7 f974 	bl	80002a8 <__aeabi_dsub>
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	f7f7 fdae 	bl	8000b24 <__aeabi_dcmpge>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f43f aef1 	beq.w	8008db0 <__ieee754_pow+0x770>
 8008fce:	e7e7      	b.n	8008fa0 <__ieee754_pow+0x960>
 8008fd0:	f04f 0a00 	mov.w	sl, #0
 8008fd4:	e718      	b.n	8008e08 <__ieee754_pow+0x7c8>
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	e7d4      	b.n	8008f84 <__ieee754_pow+0x944>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	491a      	ldr	r1, [pc, #104]	; (8009048 <__ieee754_pow+0xa08>)
 8008fde:	f7ff bb8f 	b.w	8008700 <__ieee754_pow+0xc0>
 8008fe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fe6:	f7ff bb8b 	b.w	8008700 <__ieee754_pow+0xc0>
 8008fea:	4630      	mov	r0, r6
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7ff bb87 	b.w	8008700 <__ieee754_pow+0xc0>
 8008ff2:	4693      	mov	fp, r2
 8008ff4:	f7ff bb98 	b.w	8008728 <__ieee754_pow+0xe8>
 8008ff8:	00000000 	.word	0x00000000
 8008ffc:	3fe62e43 	.word	0x3fe62e43
 8009000:	fefa39ef 	.word	0xfefa39ef
 8009004:	3fe62e42 	.word	0x3fe62e42
 8009008:	0ca86c39 	.word	0x0ca86c39
 800900c:	be205c61 	.word	0xbe205c61
 8009010:	72bea4d0 	.word	0x72bea4d0
 8009014:	3e663769 	.word	0x3e663769
 8009018:	c5d26bf1 	.word	0xc5d26bf1
 800901c:	3ebbbd41 	.word	0x3ebbbd41
 8009020:	af25de2c 	.word	0xaf25de2c
 8009024:	3f11566a 	.word	0x3f11566a
 8009028:	16bebd93 	.word	0x16bebd93
 800902c:	3f66c16c 	.word	0x3f66c16c
 8009030:	5555553e 	.word	0x5555553e
 8009034:	3fc55555 	.word	0x3fc55555
 8009038:	c2f8f359 	.word	0xc2f8f359
 800903c:	01a56e1f 	.word	0x01a56e1f
 8009040:	3fe00000 	.word	0x3fe00000
 8009044:	000fffff 	.word	0x000fffff
 8009048:	3ff00000 	.word	0x3ff00000
 800904c:	4090cbff 	.word	0x4090cbff
 8009050:	3f6f3400 	.word	0x3f6f3400
 8009054:	652b82fe 	.word	0x652b82fe
 8009058:	3c971547 	.word	0x3c971547

0800905c <__ieee754_sqrt>:
 800905c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009060:	4955      	ldr	r1, [pc, #340]	; (80091b8 <__ieee754_sqrt+0x15c>)
 8009062:	ec55 4b10 	vmov	r4, r5, d0
 8009066:	43a9      	bics	r1, r5
 8009068:	462b      	mov	r3, r5
 800906a:	462a      	mov	r2, r5
 800906c:	d112      	bne.n	8009094 <__ieee754_sqrt+0x38>
 800906e:	ee10 2a10 	vmov	r2, s0
 8009072:	ee10 0a10 	vmov	r0, s0
 8009076:	4629      	mov	r1, r5
 8009078:	f7f7 face 	bl	8000618 <__aeabi_dmul>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	4620      	mov	r0, r4
 8009082:	4629      	mov	r1, r5
 8009084:	f7f7 f912 	bl	80002ac <__adddf3>
 8009088:	4604      	mov	r4, r0
 800908a:	460d      	mov	r5, r1
 800908c:	ec45 4b10 	vmov	d0, r4, r5
 8009090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009094:	2d00      	cmp	r5, #0
 8009096:	ee10 0a10 	vmov	r0, s0
 800909a:	4621      	mov	r1, r4
 800909c:	dc0f      	bgt.n	80090be <__ieee754_sqrt+0x62>
 800909e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090a2:	4330      	orrs	r0, r6
 80090a4:	d0f2      	beq.n	800908c <__ieee754_sqrt+0x30>
 80090a6:	b155      	cbz	r5, 80090be <__ieee754_sqrt+0x62>
 80090a8:	ee10 2a10 	vmov	r2, s0
 80090ac:	4620      	mov	r0, r4
 80090ae:	4629      	mov	r1, r5
 80090b0:	f7f7 f8fa 	bl	80002a8 <__aeabi_dsub>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	f7f7 fbd8 	bl	800086c <__aeabi_ddiv>
 80090bc:	e7e4      	b.n	8009088 <__ieee754_sqrt+0x2c>
 80090be:	151b      	asrs	r3, r3, #20
 80090c0:	d073      	beq.n	80091aa <__ieee754_sqrt+0x14e>
 80090c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80090c6:	07dd      	lsls	r5, r3, #31
 80090c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80090cc:	bf48      	it	mi
 80090ce:	0fc8      	lsrmi	r0, r1, #31
 80090d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80090d4:	bf44      	itt	mi
 80090d6:	0049      	lslmi	r1, r1, #1
 80090d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80090dc:	2500      	movs	r5, #0
 80090de:	1058      	asrs	r0, r3, #1
 80090e0:	0fcb      	lsrs	r3, r1, #31
 80090e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80090e6:	0049      	lsls	r1, r1, #1
 80090e8:	2316      	movs	r3, #22
 80090ea:	462c      	mov	r4, r5
 80090ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80090f0:	19a7      	adds	r7, r4, r6
 80090f2:	4297      	cmp	r7, r2
 80090f4:	bfde      	ittt	le
 80090f6:	19bc      	addle	r4, r7, r6
 80090f8:	1bd2      	suble	r2, r2, r7
 80090fa:	19ad      	addle	r5, r5, r6
 80090fc:	0fcf      	lsrs	r7, r1, #31
 80090fe:	3b01      	subs	r3, #1
 8009100:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009104:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009108:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800910c:	d1f0      	bne.n	80090f0 <__ieee754_sqrt+0x94>
 800910e:	f04f 0c20 	mov.w	ip, #32
 8009112:	469e      	mov	lr, r3
 8009114:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009118:	42a2      	cmp	r2, r4
 800911a:	eb06 070e 	add.w	r7, r6, lr
 800911e:	dc02      	bgt.n	8009126 <__ieee754_sqrt+0xca>
 8009120:	d112      	bne.n	8009148 <__ieee754_sqrt+0xec>
 8009122:	428f      	cmp	r7, r1
 8009124:	d810      	bhi.n	8009148 <__ieee754_sqrt+0xec>
 8009126:	2f00      	cmp	r7, #0
 8009128:	eb07 0e06 	add.w	lr, r7, r6
 800912c:	da42      	bge.n	80091b4 <__ieee754_sqrt+0x158>
 800912e:	f1be 0f00 	cmp.w	lr, #0
 8009132:	db3f      	blt.n	80091b4 <__ieee754_sqrt+0x158>
 8009134:	f104 0801 	add.w	r8, r4, #1
 8009138:	1b12      	subs	r2, r2, r4
 800913a:	428f      	cmp	r7, r1
 800913c:	bf88      	it	hi
 800913e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009142:	1bc9      	subs	r1, r1, r7
 8009144:	4433      	add	r3, r6
 8009146:	4644      	mov	r4, r8
 8009148:	0052      	lsls	r2, r2, #1
 800914a:	f1bc 0c01 	subs.w	ip, ip, #1
 800914e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009152:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009156:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800915a:	d1dd      	bne.n	8009118 <__ieee754_sqrt+0xbc>
 800915c:	430a      	orrs	r2, r1
 800915e:	d006      	beq.n	800916e <__ieee754_sqrt+0x112>
 8009160:	1c5c      	adds	r4, r3, #1
 8009162:	bf13      	iteet	ne
 8009164:	3301      	addne	r3, #1
 8009166:	3501      	addeq	r5, #1
 8009168:	4663      	moveq	r3, ip
 800916a:	f023 0301 	bicne.w	r3, r3, #1
 800916e:	106a      	asrs	r2, r5, #1
 8009170:	085b      	lsrs	r3, r3, #1
 8009172:	07e9      	lsls	r1, r5, #31
 8009174:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009178:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800917c:	bf48      	it	mi
 800917e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009182:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009186:	461c      	mov	r4, r3
 8009188:	e780      	b.n	800908c <__ieee754_sqrt+0x30>
 800918a:	0aca      	lsrs	r2, r1, #11
 800918c:	3815      	subs	r0, #21
 800918e:	0549      	lsls	r1, r1, #21
 8009190:	2a00      	cmp	r2, #0
 8009192:	d0fa      	beq.n	800918a <__ieee754_sqrt+0x12e>
 8009194:	02d6      	lsls	r6, r2, #11
 8009196:	d50a      	bpl.n	80091ae <__ieee754_sqrt+0x152>
 8009198:	f1c3 0420 	rsb	r4, r3, #32
 800919c:	fa21 f404 	lsr.w	r4, r1, r4
 80091a0:	1e5d      	subs	r5, r3, #1
 80091a2:	4099      	lsls	r1, r3
 80091a4:	4322      	orrs	r2, r4
 80091a6:	1b43      	subs	r3, r0, r5
 80091a8:	e78b      	b.n	80090c2 <__ieee754_sqrt+0x66>
 80091aa:	4618      	mov	r0, r3
 80091ac:	e7f0      	b.n	8009190 <__ieee754_sqrt+0x134>
 80091ae:	0052      	lsls	r2, r2, #1
 80091b0:	3301      	adds	r3, #1
 80091b2:	e7ef      	b.n	8009194 <__ieee754_sqrt+0x138>
 80091b4:	46a0      	mov	r8, r4
 80091b6:	e7bf      	b.n	8009138 <__ieee754_sqrt+0xdc>
 80091b8:	7ff00000 	.word	0x7ff00000

080091bc <fabs>:
 80091bc:	ec51 0b10 	vmov	r0, r1, d0
 80091c0:	ee10 2a10 	vmov	r2, s0
 80091c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091c8:	ec43 2b10 	vmov	d0, r2, r3
 80091cc:	4770      	bx	lr

080091ce <finite>:
 80091ce:	ee10 3a90 	vmov	r3, s1
 80091d2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80091d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80091da:	0fc0      	lsrs	r0, r0, #31
 80091dc:	4770      	bx	lr

080091de <matherr>:
 80091de:	2000      	movs	r0, #0
 80091e0:	4770      	bx	lr
 80091e2:	0000      	movs	r0, r0
 80091e4:	0000      	movs	r0, r0
	...

080091e8 <nan>:
 80091e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80091f0 <nan+0x8>
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	00000000 	.word	0x00000000
 80091f4:	7ff80000 	.word	0x7ff80000

080091f8 <rint>:
 80091f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091fa:	ec51 0b10 	vmov	r0, r1, d0
 80091fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009202:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009206:	2e13      	cmp	r6, #19
 8009208:	460b      	mov	r3, r1
 800920a:	ee10 4a10 	vmov	r4, s0
 800920e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009212:	dc56      	bgt.n	80092c2 <rint+0xca>
 8009214:	2e00      	cmp	r6, #0
 8009216:	da2b      	bge.n	8009270 <rint+0x78>
 8009218:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800921c:	4302      	orrs	r2, r0
 800921e:	d023      	beq.n	8009268 <rint+0x70>
 8009220:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009224:	4302      	orrs	r2, r0
 8009226:	4254      	negs	r4, r2
 8009228:	4314      	orrs	r4, r2
 800922a:	0c4b      	lsrs	r3, r1, #17
 800922c:	0b24      	lsrs	r4, r4, #12
 800922e:	045b      	lsls	r3, r3, #17
 8009230:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009234:	ea44 0103 	orr.w	r1, r4, r3
 8009238:	460b      	mov	r3, r1
 800923a:	492f      	ldr	r1, [pc, #188]	; (80092f8 <rint+0x100>)
 800923c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009240:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009244:	4602      	mov	r2, r0
 8009246:	4639      	mov	r1, r7
 8009248:	4630      	mov	r0, r6
 800924a:	f7f7 f82f 	bl	80002ac <__adddf3>
 800924e:	e9cd 0100 	strd	r0, r1, [sp]
 8009252:	463b      	mov	r3, r7
 8009254:	4632      	mov	r2, r6
 8009256:	e9dd 0100 	ldrd	r0, r1, [sp]
 800925a:	f7f7 f825 	bl	80002a8 <__aeabi_dsub>
 800925e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009262:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009266:	4639      	mov	r1, r7
 8009268:	ec41 0b10 	vmov	d0, r0, r1
 800926c:	b003      	add	sp, #12
 800926e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009270:	4a22      	ldr	r2, [pc, #136]	; (80092fc <rint+0x104>)
 8009272:	4132      	asrs	r2, r6
 8009274:	ea01 0702 	and.w	r7, r1, r2
 8009278:	4307      	orrs	r7, r0
 800927a:	d0f5      	beq.n	8009268 <rint+0x70>
 800927c:	0852      	lsrs	r2, r2, #1
 800927e:	4011      	ands	r1, r2
 8009280:	430c      	orrs	r4, r1
 8009282:	d00b      	beq.n	800929c <rint+0xa4>
 8009284:	ea23 0202 	bic.w	r2, r3, r2
 8009288:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800928c:	2e13      	cmp	r6, #19
 800928e:	fa43 f306 	asr.w	r3, r3, r6
 8009292:	bf0c      	ite	eq
 8009294:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009298:	2400      	movne	r4, #0
 800929a:	4313      	orrs	r3, r2
 800929c:	4916      	ldr	r1, [pc, #88]	; (80092f8 <rint+0x100>)
 800929e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80092a2:	4622      	mov	r2, r4
 80092a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80092a8:	4620      	mov	r0, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f6 fffe 	bl	80002ac <__adddf3>
 80092b0:	e9cd 0100 	strd	r0, r1, [sp]
 80092b4:	4622      	mov	r2, r4
 80092b6:	462b      	mov	r3, r5
 80092b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092bc:	f7f6 fff4 	bl	80002a8 <__aeabi_dsub>
 80092c0:	e7d2      	b.n	8009268 <rint+0x70>
 80092c2:	2e33      	cmp	r6, #51	; 0x33
 80092c4:	dd07      	ble.n	80092d6 <rint+0xde>
 80092c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80092ca:	d1cd      	bne.n	8009268 <rint+0x70>
 80092cc:	ee10 2a10 	vmov	r2, s0
 80092d0:	f7f6 ffec 	bl	80002ac <__adddf3>
 80092d4:	e7c8      	b.n	8009268 <rint+0x70>
 80092d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80092da:	f04f 32ff 	mov.w	r2, #4294967295
 80092de:	40f2      	lsrs	r2, r6
 80092e0:	4210      	tst	r0, r2
 80092e2:	d0c1      	beq.n	8009268 <rint+0x70>
 80092e4:	0852      	lsrs	r2, r2, #1
 80092e6:	4210      	tst	r0, r2
 80092e8:	bf1f      	itttt	ne
 80092ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80092ee:	ea20 0202 	bicne.w	r2, r0, r2
 80092f2:	4134      	asrne	r4, r6
 80092f4:	4314      	orrne	r4, r2
 80092f6:	e7d1      	b.n	800929c <rint+0xa4>
 80092f8:	08009698 	.word	0x08009698
 80092fc:	000fffff 	.word	0x000fffff

08009300 <scalbn>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	ec55 4b10 	vmov	r4, r5, d0
 8009306:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800930a:	4606      	mov	r6, r0
 800930c:	462b      	mov	r3, r5
 800930e:	b9aa      	cbnz	r2, 800933c <scalbn+0x3c>
 8009310:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009314:	4323      	orrs	r3, r4
 8009316:	d03b      	beq.n	8009390 <scalbn+0x90>
 8009318:	4b31      	ldr	r3, [pc, #196]	; (80093e0 <scalbn+0xe0>)
 800931a:	4629      	mov	r1, r5
 800931c:	2200      	movs	r2, #0
 800931e:	ee10 0a10 	vmov	r0, s0
 8009322:	f7f7 f979 	bl	8000618 <__aeabi_dmul>
 8009326:	4b2f      	ldr	r3, [pc, #188]	; (80093e4 <scalbn+0xe4>)
 8009328:	429e      	cmp	r6, r3
 800932a:	4604      	mov	r4, r0
 800932c:	460d      	mov	r5, r1
 800932e:	da12      	bge.n	8009356 <scalbn+0x56>
 8009330:	a327      	add	r3, pc, #156	; (adr r3, 80093d0 <scalbn+0xd0>)
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	f7f7 f96f 	bl	8000618 <__aeabi_dmul>
 800933a:	e009      	b.n	8009350 <scalbn+0x50>
 800933c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009340:	428a      	cmp	r2, r1
 8009342:	d10c      	bne.n	800935e <scalbn+0x5e>
 8009344:	ee10 2a10 	vmov	r2, s0
 8009348:	4620      	mov	r0, r4
 800934a:	4629      	mov	r1, r5
 800934c:	f7f6 ffae 	bl	80002ac <__adddf3>
 8009350:	4604      	mov	r4, r0
 8009352:	460d      	mov	r5, r1
 8009354:	e01c      	b.n	8009390 <scalbn+0x90>
 8009356:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800935a:	460b      	mov	r3, r1
 800935c:	3a36      	subs	r2, #54	; 0x36
 800935e:	4432      	add	r2, r6
 8009360:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009364:	428a      	cmp	r2, r1
 8009366:	dd0b      	ble.n	8009380 <scalbn+0x80>
 8009368:	ec45 4b11 	vmov	d1, r4, r5
 800936c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80093d8 <scalbn+0xd8>
 8009370:	f000 f83c 	bl	80093ec <copysign>
 8009374:	a318      	add	r3, pc, #96	; (adr r3, 80093d8 <scalbn+0xd8>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	ec51 0b10 	vmov	r0, r1, d0
 800937e:	e7da      	b.n	8009336 <scalbn+0x36>
 8009380:	2a00      	cmp	r2, #0
 8009382:	dd08      	ble.n	8009396 <scalbn+0x96>
 8009384:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009388:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800938c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009390:	ec45 4b10 	vmov	d0, r4, r5
 8009394:	bd70      	pop	{r4, r5, r6, pc}
 8009396:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800939a:	da0d      	bge.n	80093b8 <scalbn+0xb8>
 800939c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80093a0:	429e      	cmp	r6, r3
 80093a2:	ec45 4b11 	vmov	d1, r4, r5
 80093a6:	dce1      	bgt.n	800936c <scalbn+0x6c>
 80093a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80093d0 <scalbn+0xd0>
 80093ac:	f000 f81e 	bl	80093ec <copysign>
 80093b0:	a307      	add	r3, pc, #28	; (adr r3, 80093d0 <scalbn+0xd0>)
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	e7e0      	b.n	800937a <scalbn+0x7a>
 80093b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80093bc:	3236      	adds	r2, #54	; 0x36
 80093be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80093c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	2200      	movs	r2, #0
 80093cc:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <scalbn+0xe8>)
 80093ce:	e7b2      	b.n	8009336 <scalbn+0x36>
 80093d0:	c2f8f359 	.word	0xc2f8f359
 80093d4:	01a56e1f 	.word	0x01a56e1f
 80093d8:	8800759c 	.word	0x8800759c
 80093dc:	7e37e43c 	.word	0x7e37e43c
 80093e0:	43500000 	.word	0x43500000
 80093e4:	ffff3cb0 	.word	0xffff3cb0
 80093e8:	3c900000 	.word	0x3c900000

080093ec <copysign>:
 80093ec:	ec51 0b10 	vmov	r0, r1, d0
 80093f0:	ee11 0a90 	vmov	r0, s3
 80093f4:	ee10 2a10 	vmov	r2, s0
 80093f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80093fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009400:	ea41 0300 	orr.w	r3, r1, r0
 8009404:	ec43 2b10 	vmov	d0, r2, r3
 8009408:	4770      	bx	lr
	...

0800940c <_init>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	bf00      	nop
 8009410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009412:	bc08      	pop	{r3}
 8009414:	469e      	mov	lr, r3
 8009416:	4770      	bx	lr

08009418 <_fini>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	bf00      	nop
 800941c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941e:	bc08      	pop	{r3}
 8009420:	469e      	mov	lr, r3
 8009422:	4770      	bx	lr

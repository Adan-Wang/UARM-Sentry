
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000655c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006940  08006940  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004144  20000074  080069bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041b8  080069bc  000241b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b300  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bcf  00000000  00000000  0003b3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  0003ef78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  00040368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c0d  00000000  00000000  00041580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000127c5  00000000  00000000  0006818d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e28e4  00000000  00000000  0007a952  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005844  00000000  00000000  0015d2b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080066f4 	.word	0x080066f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080066f4 	.word	0x080066f4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b972 	b.w	8000904 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9e08      	ldr	r6, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	4688      	mov	r8, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d14b      	bne.n	80006de <__udivmoddi4+0xa6>
 8000646:	428a      	cmp	r2, r1
 8000648:	4615      	mov	r5, r2
 800064a:	d967      	bls.n	800071c <__udivmoddi4+0xe4>
 800064c:	fab2 f282 	clz	r2, r2
 8000650:	b14a      	cbz	r2, 8000666 <__udivmoddi4+0x2e>
 8000652:	f1c2 0720 	rsb	r7, r2, #32
 8000656:	fa01 f302 	lsl.w	r3, r1, r2
 800065a:	fa20 f707 	lsr.w	r7, r0, r7
 800065e:	4095      	lsls	r5, r2
 8000660:	ea47 0803 	orr.w	r8, r7, r3
 8000664:	4094      	lsls	r4, r2
 8000666:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800066a:	0c23      	lsrs	r3, r4, #16
 800066c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000670:	fa1f fc85 	uxth.w	ip, r5
 8000674:	fb0e 8817 	mls	r8, lr, r7, r8
 8000678:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067c:	fb07 f10c 	mul.w	r1, r7, ip
 8000680:	4299      	cmp	r1, r3
 8000682:	d909      	bls.n	8000698 <__udivmoddi4+0x60>
 8000684:	18eb      	adds	r3, r5, r3
 8000686:	f107 30ff 	add.w	r0, r7, #4294967295
 800068a:	f080 811b 	bcs.w	80008c4 <__udivmoddi4+0x28c>
 800068e:	4299      	cmp	r1, r3
 8000690:	f240 8118 	bls.w	80008c4 <__udivmoddi4+0x28c>
 8000694:	3f02      	subs	r7, #2
 8000696:	442b      	add	r3, r5
 8000698:	1a5b      	subs	r3, r3, r1
 800069a:	b2a4      	uxth	r4, r4
 800069c:	fbb3 f0fe 	udiv	r0, r3, lr
 80006a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ac:	45a4      	cmp	ip, r4
 80006ae:	d909      	bls.n	80006c4 <__udivmoddi4+0x8c>
 80006b0:	192c      	adds	r4, r5, r4
 80006b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b6:	f080 8107 	bcs.w	80008c8 <__udivmoddi4+0x290>
 80006ba:	45a4      	cmp	ip, r4
 80006bc:	f240 8104 	bls.w	80008c8 <__udivmoddi4+0x290>
 80006c0:	3802      	subs	r0, #2
 80006c2:	442c      	add	r4, r5
 80006c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006c8:	eba4 040c 	sub.w	r4, r4, ip
 80006cc:	2700      	movs	r7, #0
 80006ce:	b11e      	cbz	r6, 80006d8 <__udivmoddi4+0xa0>
 80006d0:	40d4      	lsrs	r4, r2
 80006d2:	2300      	movs	r3, #0
 80006d4:	e9c6 4300 	strd	r4, r3, [r6]
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d909      	bls.n	80006f6 <__udivmoddi4+0xbe>
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	f000 80eb 	beq.w	80008be <__udivmoddi4+0x286>
 80006e8:	2700      	movs	r7, #0
 80006ea:	e9c6 0100 	strd	r0, r1, [r6]
 80006ee:	4638      	mov	r0, r7
 80006f0:	4639      	mov	r1, r7
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	fab3 f783 	clz	r7, r3
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d147      	bne.n	800078e <__udivmoddi4+0x156>
 80006fe:	428b      	cmp	r3, r1
 8000700:	d302      	bcc.n	8000708 <__udivmoddi4+0xd0>
 8000702:	4282      	cmp	r2, r0
 8000704:	f200 80fa 	bhi.w	80008fc <__udivmoddi4+0x2c4>
 8000708:	1a84      	subs	r4, r0, r2
 800070a:	eb61 0303 	sbc.w	r3, r1, r3
 800070e:	2001      	movs	r0, #1
 8000710:	4698      	mov	r8, r3
 8000712:	2e00      	cmp	r6, #0
 8000714:	d0e0      	beq.n	80006d8 <__udivmoddi4+0xa0>
 8000716:	e9c6 4800 	strd	r4, r8, [r6]
 800071a:	e7dd      	b.n	80006d8 <__udivmoddi4+0xa0>
 800071c:	b902      	cbnz	r2, 8000720 <__udivmoddi4+0xe8>
 800071e:	deff      	udf	#255	; 0xff
 8000720:	fab2 f282 	clz	r2, r2
 8000724:	2a00      	cmp	r2, #0
 8000726:	f040 808f 	bne.w	8000848 <__udivmoddi4+0x210>
 800072a:	1b49      	subs	r1, r1, r5
 800072c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000730:	fa1f f885 	uxth.w	r8, r5
 8000734:	2701      	movs	r7, #1
 8000736:	fbb1 fcfe 	udiv	ip, r1, lr
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000744:	fb08 f10c 	mul.w	r1, r8, ip
 8000748:	4299      	cmp	r1, r3
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x124>
 800074c:	18eb      	adds	r3, r5, r3
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x122>
 8000754:	4299      	cmp	r1, r3
 8000756:	f200 80cd 	bhi.w	80008f4 <__udivmoddi4+0x2bc>
 800075a:	4684      	mov	ip, r0
 800075c:	1a59      	subs	r1, r3, r1
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1410 	mls	r4, lr, r0, r1
 8000768:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x14c>
 8000774:	192c      	adds	r4, r5, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x14a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80b6 	bhi.w	80008ee <__udivmoddi4+0x2b6>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e79f      	b.n	80006ce <__udivmoddi4+0x96>
 800078e:	f1c7 0c20 	rsb	ip, r7, #32
 8000792:	40bb      	lsls	r3, r7
 8000794:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000798:	ea4e 0e03 	orr.w	lr, lr, r3
 800079c:	fa01 f407 	lsl.w	r4, r1, r7
 80007a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007ac:	4325      	orrs	r5, r4
 80007ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80007b2:	0c2c      	lsrs	r4, r5, #16
 80007b4:	fb08 3319 	mls	r3, r8, r9, r3
 80007b8:	fa1f fa8e 	uxth.w	sl, lr
 80007bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007c0:	fb09 f40a 	mul.w	r4, r9, sl
 80007c4:	429c      	cmp	r4, r3
 80007c6:	fa02 f207 	lsl.w	r2, r2, r7
 80007ca:	fa00 f107 	lsl.w	r1, r0, r7
 80007ce:	d90b      	bls.n	80007e8 <__udivmoddi4+0x1b0>
 80007d0:	eb1e 0303 	adds.w	r3, lr, r3
 80007d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007d8:	f080 8087 	bcs.w	80008ea <__udivmoddi4+0x2b2>
 80007dc:	429c      	cmp	r4, r3
 80007de:	f240 8084 	bls.w	80008ea <__udivmoddi4+0x2b2>
 80007e2:	f1a9 0902 	sub.w	r9, r9, #2
 80007e6:	4473      	add	r3, lr
 80007e8:	1b1b      	subs	r3, r3, r4
 80007ea:	b2ad      	uxth	r5, r5
 80007ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f0:	fb08 3310 	mls	r3, r8, r0, r3
 80007f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80007fc:	45a2      	cmp	sl, r4
 80007fe:	d908      	bls.n	8000812 <__udivmoddi4+0x1da>
 8000800:	eb1e 0404 	adds.w	r4, lr, r4
 8000804:	f100 33ff 	add.w	r3, r0, #4294967295
 8000808:	d26b      	bcs.n	80008e2 <__udivmoddi4+0x2aa>
 800080a:	45a2      	cmp	sl, r4
 800080c:	d969      	bls.n	80008e2 <__udivmoddi4+0x2aa>
 800080e:	3802      	subs	r0, #2
 8000810:	4474      	add	r4, lr
 8000812:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000816:	fba0 8902 	umull	r8, r9, r0, r2
 800081a:	eba4 040a 	sub.w	r4, r4, sl
 800081e:	454c      	cmp	r4, r9
 8000820:	46c2      	mov	sl, r8
 8000822:	464b      	mov	r3, r9
 8000824:	d354      	bcc.n	80008d0 <__udivmoddi4+0x298>
 8000826:	d051      	beq.n	80008cc <__udivmoddi4+0x294>
 8000828:	2e00      	cmp	r6, #0
 800082a:	d069      	beq.n	8000900 <__udivmoddi4+0x2c8>
 800082c:	ebb1 050a 	subs.w	r5, r1, sl
 8000830:	eb64 0403 	sbc.w	r4, r4, r3
 8000834:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000838:	40fd      	lsrs	r5, r7
 800083a:	40fc      	lsrs	r4, r7
 800083c:	ea4c 0505 	orr.w	r5, ip, r5
 8000840:	e9c6 5400 	strd	r5, r4, [r6]
 8000844:	2700      	movs	r7, #0
 8000846:	e747      	b.n	80006d8 <__udivmoddi4+0xa0>
 8000848:	f1c2 0320 	rsb	r3, r2, #32
 800084c:	fa20 f703 	lsr.w	r7, r0, r3
 8000850:	4095      	lsls	r5, r2
 8000852:	fa01 f002 	lsl.w	r0, r1, r2
 8000856:	fa21 f303 	lsr.w	r3, r1, r3
 800085a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800085e:	4338      	orrs	r0, r7
 8000860:	0c01      	lsrs	r1, r0, #16
 8000862:	fbb3 f7fe 	udiv	r7, r3, lr
 8000866:	fa1f f885 	uxth.w	r8, r5
 800086a:	fb0e 3317 	mls	r3, lr, r7, r3
 800086e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000872:	fb07 f308 	mul.w	r3, r7, r8
 8000876:	428b      	cmp	r3, r1
 8000878:	fa04 f402 	lsl.w	r4, r4, r2
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x256>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f107 3cff 	add.w	ip, r7, #4294967295
 8000884:	d22f      	bcs.n	80008e6 <__udivmoddi4+0x2ae>
 8000886:	428b      	cmp	r3, r1
 8000888:	d92d      	bls.n	80008e6 <__udivmoddi4+0x2ae>
 800088a:	3f02      	subs	r7, #2
 800088c:	4429      	add	r1, r5
 800088e:	1acb      	subs	r3, r1, r3
 8000890:	b281      	uxth	r1, r0
 8000892:	fbb3 f0fe 	udiv	r0, r3, lr
 8000896:	fb0e 3310 	mls	r3, lr, r0, r3
 800089a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800089e:	fb00 f308 	mul.w	r3, r0, r8
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d907      	bls.n	80008b6 <__udivmoddi4+0x27e>
 80008a6:	1869      	adds	r1, r5, r1
 80008a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008ac:	d217      	bcs.n	80008de <__udivmoddi4+0x2a6>
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d915      	bls.n	80008de <__udivmoddi4+0x2a6>
 80008b2:	3802      	subs	r0, #2
 80008b4:	4429      	add	r1, r5
 80008b6:	1ac9      	subs	r1, r1, r3
 80008b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008bc:	e73b      	b.n	8000736 <__udivmoddi4+0xfe>
 80008be:	4637      	mov	r7, r6
 80008c0:	4630      	mov	r0, r6
 80008c2:	e709      	b.n	80006d8 <__udivmoddi4+0xa0>
 80008c4:	4607      	mov	r7, r0
 80008c6:	e6e7      	b.n	8000698 <__udivmoddi4+0x60>
 80008c8:	4618      	mov	r0, r3
 80008ca:	e6fb      	b.n	80006c4 <__udivmoddi4+0x8c>
 80008cc:	4541      	cmp	r1, r8
 80008ce:	d2ab      	bcs.n	8000828 <__udivmoddi4+0x1f0>
 80008d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008d4:	eb69 020e 	sbc.w	r2, r9, lr
 80008d8:	3801      	subs	r0, #1
 80008da:	4613      	mov	r3, r2
 80008dc:	e7a4      	b.n	8000828 <__udivmoddi4+0x1f0>
 80008de:	4660      	mov	r0, ip
 80008e0:	e7e9      	b.n	80008b6 <__udivmoddi4+0x27e>
 80008e2:	4618      	mov	r0, r3
 80008e4:	e795      	b.n	8000812 <__udivmoddi4+0x1da>
 80008e6:	4667      	mov	r7, ip
 80008e8:	e7d1      	b.n	800088e <__udivmoddi4+0x256>
 80008ea:	4681      	mov	r9, r0
 80008ec:	e77c      	b.n	80007e8 <__udivmoddi4+0x1b0>
 80008ee:	3802      	subs	r0, #2
 80008f0:	442c      	add	r4, r5
 80008f2:	e747      	b.n	8000784 <__udivmoddi4+0x14c>
 80008f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008f8:	442b      	add	r3, r5
 80008fa:	e72f      	b.n	800075c <__udivmoddi4+0x124>
 80008fc:	4638      	mov	r0, r7
 80008fe:	e708      	b.n	8000712 <__udivmoddi4+0xda>
 8000900:	4637      	mov	r7, r6
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0xa0>

08000904 <__aeabi_idiv0>:
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <Chassis_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Chassis_Task_Func */
void Chassis_Task_Func(void const * argument)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	//buzzer_play_mario(200);
  /* Infinite loop */
  double i=0;
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	f04f 0400 	mov.w	r4, #0
 8000918:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {
	printf("\nWelcome to RM-EE\n");
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <Chassis_Task_Func+0x58>)
 800091e:	f005 f815 	bl	800594c <puts>
	printf("Hello, the current time is %.2F",i);
 8000922:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000926:	480f      	ldr	r0, [pc, #60]	; (8000964 <Chassis_Task_Func+0x5c>)
 8000928:	f004 ff9c 	bl	8005864 <iprintf>
	i+=0.1;
 800092c:	a30a      	add	r3, pc, #40	; (adr r3, 8000958 <Chassis_Task_Func+0x50>)
 800092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000936:	f7ff fcb1 	bl	800029c <__adddf3>
 800093a:	4603      	mov	r3, r0
 800093c:	460c      	mov	r4, r1
 800093e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    osDelay(500);
 8000942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000946:	f003 fda8 	bl	800449a <osDelay>
    osDelay(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f003 fda5 	bl	800449a <osDelay>
  {
 8000950:	e7e4      	b.n	800091c <Chassis_Task_Func+0x14>
 8000952:	bf00      	nop
 8000954:	f3af 8000 	nop.w
 8000958:	9999999a 	.word	0x9999999a
 800095c:	3fb99999 	.word	0x3fb99999
 8000960:	0800670c 	.word	0x0800670c
 8000964:	08006720 	.word	0x08006720

08000968 <Gimbal_Task_Function>:
extern UART_HandleTypeDef huart7;



void Gimbal_Task_Function(void const * argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	//buzzer_play_chromatic(100);

	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000970:	2102      	movs	r1, #2
 8000972:	4808      	ldr	r0, [pc, #32]	; (8000994 <Gimbal_Task_Function+0x2c>)
 8000974:	f001 f926 	bl	8001bc4 <HAL_CAN_ActivateNotification>
	//can_filter_enable(&hcan1);

  for(;;)
  {
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000978:	2140      	movs	r1, #64	; 0x40
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <Gimbal_Task_Function+0x30>)
 800097c:	f001 fe17 	bl	80025ae <HAL_GPIO_TogglePin>
	  CAN_Send_Gimbal(7500,0);
 8000980:	2100      	movs	r1, #0
 8000982:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000986:	f000 f809 	bl	800099c <CAN_Send_Gimbal>



	  //osDelay(500);
	  osDelay(3);
 800098a:	2003      	movs	r0, #3
 800098c:	f003 fd85 	bl	800449a <osDelay>
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000990:	e7f2      	b.n	8000978 <Gimbal_Task_Function+0x10>
 8000992:	bf00      	nop
 8000994:	200040c4 	.word	0x200040c4
 8000998:	40021800 	.word	0x40021800

0800099c <CAN_Send_Gimbal>:
  }
  /* USER CODE END Gimbal_Task_Function */
}

void CAN_Send_Gimbal(int16_t yaw_raw, int16_t pitch_raw)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	460a      	mov	r2, r1
 80009a6:	80fb      	strh	r3, [r7, #6]
 80009a8:	4613      	mov	r3, r2
 80009aa:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    //chassis_tx_message.StdId = 0x200;  // 3508
	chassis_tx_message.StdId = 0x1FF;  // gimbal
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <CAN_Send_Gimbal+0x84>)
 80009ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80009b2:	601a      	str	r2, [r3, #0]
    chassis_tx_message.IDE = CAN_ID_STD;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <CAN_Send_Gimbal+0x84>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <CAN_Send_Gimbal+0x84>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
    chassis_tx_message.DLC = 0x08;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <CAN_Send_Gimbal+0x84>)
 80009c2:	2208      	movs	r2, #8
 80009c4:	611a      	str	r2, [r3, #16]
    chassis_can_send_data[0] = yaw_raw >> 8;
 80009c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ca:	121b      	asrs	r3, r3, #8
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <CAN_Send_Gimbal+0x88>)
 80009d2:	701a      	strb	r2, [r3, #0]
    chassis_can_send_data[1] = yaw_raw;
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <CAN_Send_Gimbal+0x88>)
 80009da:	705a      	strb	r2, [r3, #1]
    chassis_can_send_data[2] = pitch_raw >> 8;
 80009dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009e0:	121b      	asrs	r3, r3, #8
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <CAN_Send_Gimbal+0x88>)
 80009e8:	709a      	strb	r2, [r3, #2]
    chassis_can_send_data[3] = pitch_raw;
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <CAN_Send_Gimbal+0x88>)
 80009f0:	70da      	strb	r2, [r3, #3]
    chassis_can_send_data[4] = 0;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <CAN_Send_Gimbal+0x88>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	711a      	strb	r2, [r3, #4]
    chassis_can_send_data[5] = 0;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <CAN_Send_Gimbal+0x88>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	715a      	strb	r2, [r3, #5]
    chassis_can_send_data[6] = 0;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <CAN_Send_Gimbal+0x88>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	719a      	strb	r2, [r3, #6]
    chassis_can_send_data[7] = 0;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <CAN_Send_Gimbal+0x88>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	71da      	strb	r2, [r3, #7]


    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <CAN_Send_Gimbal+0x88>)
 8000a10:	4903      	ldr	r1, [pc, #12]	; (8000a20 <CAN_Send_Gimbal+0x84>)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <CAN_Send_Gimbal+0x8c>)
 8000a14:	f000 fffb 	bl	8001a0e <HAL_CAN_AddTxMessage>
//    else{
//    	buzzer_play_c1(100);
//    	buzzer_play_d1(100);
//    	buzzer_play_e1(100);
//    }
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000098 	.word	0x20000098
 8000a24:	20000090 	.word	0x20000090
 8000a28:	200040c4 	.word	0x200040c4

08000a2c <HAL_CAN_RxFifo0MsgPendingCallback>:

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
}

//This function activates whenever the RxFifo receives a message persumably? But it doesnt seem to work right now
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8000a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000a3a:	f001 fdb8 	bl	80025ae <HAL_GPIO_TogglePin>
	//HAL_Delay(1000);
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_GPIO_EXTI_Callback>:

//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d10e      	bne.n	8000a7a <HAL_GPIO_EXTI_Callback+0x2e>
		//can_filter_enable(&hcan1);
		HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8000a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a62:	f001 fda4 	bl	80025ae <HAL_GPIO_TogglePin>


		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000a66:	2301      	movs	r3, #1
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2233      	movs	r2, #51	; 0x33
 8000a72:	2101      	movs	r1, #1
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a76:	f004 fef5 	bl	8005864 <iprintf>

		//can_filter_disable(&hcan1);


	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	08006740 	.word	0x08006740

08000a8c <Shoot_Task_Func>:
 */
#include "Shoot_App.h"
void shoot_init(void);

void Shoot_Task_Func(void const * argument)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000a94:	f000 f81c 	bl	8000ad0 <shoot_init>
  for(;;)
  {
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <Shoot_Task_Func+0x3c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1500);
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <Shoot_Task_Func+0x3c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000aaa:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <Shoot_Task_Func+0x40>)
 8000ab2:	f001 fd7c 	bl	80025ae <HAL_GPIO_TogglePin>
    osDelay(500);
 8000ab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aba:	f003 fcee 	bl	800449a <osDelay>
    osDelay(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f003 fceb 	bl	800449a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000ac4:	e7e8      	b.n	8000a98 <Shoot_Task_Func+0xc>
 8000ac6:	bf00      	nop
 8000ac8:	2000405c 	.word	0x2000405c
 8000acc:	40021800 	.word	0x40021800

08000ad0 <shoot_init>:
  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <shoot_init+0x50>)
 8000ad8:	f002 fa8e 	bl	8002ff8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000adc:	2108      	movs	r1, #8
 8000ade:	4810      	ldr	r0, [pc, #64]	; (8000b20 <shoot_init+0x50>)
 8000ae0:	f002 fa8a 	bl	8002ff8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,2000);
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <shoot_init+0x50>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,2000);
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <shoot_init+0x50>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000af6:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(2000);
 8000af8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000afc:	f003 fccd 	bl	800449a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <shoot_init+0x50>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1000);
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <shoot_init+0x50>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b12:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000b14:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000b18:	f003 fcbf 	bl	800449a <osDelay>

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000405c 	.word	0x2000405c

08000b24 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4802      	ldr	r0, [pc, #8]	; (8000b34 <buzzer_init+0x10>)
 8000b2c:	f002 fa64 	bl	8002ff8 <HAL_TIM_PWM_Start>

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200040ec 	.word	0x200040ec

08000b38 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_CAN1_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b44:	2203      	movs	r2, #3
 8000b46:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b56:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000b5a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b62:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_CAN1_Init+0x64>)
 8000b8a:	f000 fe01 	bl	8001790 <HAL_CAN_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 fa46 	bl	8001024 <Error_Handler>
  }

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200040c4 	.word	0x200040c4
 8000ba0:	40006400 	.word	0x40006400

08000ba4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <HAL_CAN_MspInit+0xa4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d13b      	bne.n	8000c3e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_CAN_MspInit+0xa8>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_CAN_MspInit+0xa8>)
 8000bd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_CAN_MspInit+0xa8>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_CAN_MspInit+0xa8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <HAL_CAN_MspInit+0xa8>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_CAN_MspInit+0xa8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c0e:	2309      	movs	r3, #9
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <HAL_CAN_MspInit+0xac>)
 8000c1a:	f001 fb05 	bl	8002228 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2105      	movs	r1, #5
 8000c22:	2013      	movs	r0, #19
 8000c24:	f001 fad6 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c28:	2013      	movs	r0, #19
 8000c2a:	f001 faef 	bl	800220c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2105      	movs	r1, #5
 8000c32:	2014      	movs	r0, #20
 8000c34:	f001 face 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c38:	2014      	movs	r0, #20
 8000c3a:	f001 fae7 	bl	800220c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40006400 	.word	0x40006400
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020c00 	.word	0x40020c00

08000c54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <vApplicationGetIdleTaskMemory+0x30>)
 8000c6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200000b0 	.word	0x200000b0
 8000c84:	20000104 	.word	0x20000104

08000c88 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b0a0      	sub	sp, #128	; 0x80
 8000c8c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_FREERTOS_Init+0x98>)
 8000c90:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c94:	461d      	mov	r5, r3
 8000c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ca2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 fbaa 	bl	8004402 <osThreadCreate>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_FREERTOS_Init+0x9c>)
 8000cb2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_FREERTOS_Init+0xa0>)
 8000cb6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000cba:	461d      	mov	r5, r3
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8000cc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fb97 	bl	8004402 <osThreadCreate>
 8000cd4:	67f8      	str	r0, [r7, #124]	; 0x7c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_FREERTOS_Init+0xa4>)
 8000cd8:	f107 0420 	add.w	r4, r7, #32
 8000cdc:	461d      	mov	r5, r3
 8000cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fb86 	bl	8004402 <osThreadCreate>
 8000cf6:	67b8      	str	r0, [r7, #120]	; 0x78

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <MX_FREERTOS_Init+0xa8>)
 8000cfa:	1d3c      	adds	r4, r7, #4
 8000cfc:	461d      	mov	r5, r3
 8000cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fb77 	bl	8004402 <osThreadCreate>
 8000d14:	6778      	str	r0, [r7, #116]	; 0x74
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d16:	bf00      	nop
 8000d18:	3780      	adds	r7, #128	; 0x80
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	080067ec 	.word	0x080067ec
 8000d24:	2000412c 	.word	0x2000412c
 8000d28:	08006814 	.word	0x08006814
 8000d2c:	0800683c 	.word	0x0800683c
 8000d30:	08006864 	.word	0x08006864

08000d34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f003 fbac 	bl	800449a <osDelay>
 8000d42:	e7fb      	b.n	8000d3c <StartDefaultTask+0x8>

08000d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a5d      	ldr	r2, [pc, #372]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b5b      	ldr	r3, [pc, #364]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a56      	ldr	r2, [pc, #344]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a4f      	ldr	r2, [pc, #316]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b49      	ldr	r3, [pc, #292]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a48      	ldr	r2, [pc, #288]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a41      	ldr	r2, [pc, #260]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a3a      	ldr	r2, [pc, #232]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a33      	ldr	r2, [pc, #204]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000e0c:	f043 0320 	orr.w	r3, r3, #32
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <MX_GPIO_Init+0x194>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0320 	and.w	r3, r3, #32
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000e24:	482d      	ldr	r0, [pc, #180]	; (8000edc <MX_GPIO_Init+0x198>)
 8000e26:	f001 fba9 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	211e      	movs	r1, #30
 8000e2e:	482b      	ldr	r0, [pc, #172]	; (8000edc <MX_GPIO_Init+0x198>)
 8000e30:	f001 fba4 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3a:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <MX_GPIO_Init+0x19c>)
 8000e3c:	f001 fb9e 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e46:	4827      	ldr	r0, [pc, #156]	; (8000ee4 <MX_GPIO_Init+0x1a0>)
 8000e48:	f001 fb98 	bl	800257c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8000e4c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000e50:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	481d      	ldr	r0, [pc, #116]	; (8000edc <MX_GPIO_Init+0x198>)
 8000e66:	f001 f9df 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_GPIO_Init+0x1a4>)
 8000e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481b      	ldr	r0, [pc, #108]	; (8000eec <MX_GPIO_Init+0x1a8>)
 8000e7e:	f001 f9d3 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8000e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <MX_GPIO_Init+0x19c>)
 8000e9c:	f001 f9c4 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8000ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <MX_GPIO_Init+0x1a0>)
 8000eba:	f001 f9b5 	bl	8002228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	2008      	movs	r0, #8
 8000ec4:	f001 f986 	bl	80021d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ec8:	2008      	movs	r0, #8
 8000eca:	f001 f99f 	bl	800220c <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3730      	adds	r7, #48	; 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40021400 	.word	0x40021400
 8000ee8:	10110000 	.word	0x10110000
 8000eec:	40020400 	.word	0x40020400

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 fc0a 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f816 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f7ff ff22 	bl	8000d44 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000f00:	f7ff fe1a 	bl	8000b38 <MX_CAN1_Init>
  MX_TIM4_Init();
 8000f04:	f000 fa0e 	bl	8001324 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000f08:	f000 fa72 	bl	80013f0 <MX_TIM12_Init>
  MX_UART7_Init();
 8000f0c:	f000 fb62 	bl	80015d4 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8000f10:	f7ff fe08 	bl	8000b24 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <main+0x34>)
 8000f16:	f000 fd36 	bl	8001986 <HAL_CAN_Start>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000f1a:	f7ff feb5 	bl	8000c88 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000f1e:	f003 fa69 	bl	80043f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <main+0x32>
 8000f24:	200040c4 	.word	0x200040c4

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 fc8c 	bl	8005854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <SystemClock_Config+0xd4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <SystemClock_Config+0xd4>)
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <SystemClock_Config+0xd4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fa0:	23a8      	movs	r3, #168	; 0xa8
 8000fa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fb2f 	bl	8002614 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fbc:	f000 f832 	bl	8001024 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fd88 	bl	8002af4 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fea:	f000 f81b 	bl	8001024 <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3750      	adds	r7, #80	; 0x50
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001012:	f000 fb9d 	bl	8001750 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40000c00 	.word	0x40000c00

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102a:	e7fe      	b.n	800102a <Error_Handler+0x6>

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_MspInit+0x54>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a11      	ldr	r2, [pc, #68]	; (8001080 <HAL_MspInit+0x54>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_MspInit+0x54>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_MspInit+0x54>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_MspInit+0x54>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_MspInit+0x54>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	210f      	movs	r1, #15
 800106e:	f06f 0001 	mvn.w	r0, #1
 8001072:	f001 f8af 	bl	80021d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	2032      	movs	r0, #50	; 0x32
 800109a:	f001 f89b 	bl	80021d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800109e:	2032      	movs	r0, #50	; 0x32
 80010a0:	f001 f8b4 	bl	800220c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <HAL_InitTick+0xa4>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <HAL_InitTick+0xa4>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_InitTick+0xa4>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c0:	f107 0210 	add.w	r2, r7, #16
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fede 	bl	8002e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010d0:	f001 feb4 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 80010d4:	4603      	mov	r3, r0
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010dc:	4a13      	ldr	r2, [pc, #76]	; (800112c <HAL_InitTick+0xa8>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9b      	lsrs	r3, r3, #18
 80010e4:	3b01      	subs	r3, #1
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_InitTick+0xac>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <HAL_InitTick+0xb0>)
 80010ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_InitTick+0xac>)
 80010f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_InitTick+0xac>)
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_InitTick+0xac>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_InitTick+0xac>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <HAL_InitTick+0xac>)
 800110a:	f001 fef1 	bl	8002ef0 <HAL_TIM_Base_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d104      	bne.n	800111e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <HAL_InitTick+0xac>)
 8001116:	f001 ff20 	bl	8002f5a <HAL_TIM_Base_Start_IT>
 800111a:	4603      	mov	r3, r0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	431bde83 	.word	0x431bde83
 8001130:	20004130 	.word	0x20004130
 8001134:	40000c00 	.word	0x40000c00

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001168:	2004      	movs	r0, #4
 800116a:	f001 fa3b 	bl	80025e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <CAN1_TX_IRQHandler+0x10>)
 800117a:	f000 fd49 	bl	8001c10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200040c4 	.word	0x200040c4

08001188 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <CAN1_RX0_IRQHandler+0x10>)
 800118e:	f000 fd3f 	bl	8001c10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200040c4 	.word	0x200040c4

0800119c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM5_IRQHandler+0x10>)
 80011a2:	f001 ff67 	bl	8003074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20004130 	.word	0x20004130

080011b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e00a      	b.n	80011d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011c2:	f3af 8000 	nop.w
 80011c6:	4601      	mov	r1, r0
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	60ba      	str	r2, [r7, #8]
 80011ce:	b2ca      	uxtb	r2, r1
 80011d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbf0      	blt.n	80011c2 <_read+0x12>
	}

return len;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e009      	b.n	8001210 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f9d3 	bl	80015b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbf1      	blt.n	80011fc <_write+0x12>
	}
	return len;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_close>:

int _close(int file)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	return -1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124a:	605a      	str	r2, [r3, #4]
	return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_isatty>:

int _isatty(int file)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
	return 1;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
	return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f004 faa0 	bl	8005800 <__errno>
 80012c0:	4602      	mov	r2, r0
 80012c2:	230c      	movs	r3, #12
 80012c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20030000 	.word	0x20030000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	20000304 	.word	0x20000304
 80012f4:	200041b8 	.word	0x200041b8

080012f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <SystemInit+0x28>)
 80012fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001302:	4a07      	ldr	r2, [pc, #28]	; (8001320 <SystemInit+0x28>)
 8001304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SystemInit+0x28>)
 800130e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001312:	609a      	str	r2, [r3, #8]
#endif
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <MX_TIM4_Init+0xc4>)
 8001348:	4a28      	ldr	r2, [pc, #160]	; (80013ec <MX_TIM4_Init+0xc8>)
 800134a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <MX_TIM4_Init+0xc4>)
 800134e:	2253      	movs	r2, #83	; 0x53
 8001350:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <MX_TIM4_Init+0xc4>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <MX_TIM4_Init+0xc4>)
 800135a:	f242 720f 	movw	r2, #9999	; 0x270f
 800135e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <MX_TIM4_Init+0xc4>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_TIM4_Init+0xc4>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800136c:	481e      	ldr	r0, [pc, #120]	; (80013e8 <MX_TIM4_Init+0xc4>)
 800136e:	f001 fe18 	bl	8002fa2 <HAL_TIM_PWM_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001378:	f7ff fe54 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001384:	f107 0320 	add.w	r3, r7, #32
 8001388:	4619      	mov	r1, r3
 800138a:	4817      	ldr	r0, [pc, #92]	; (80013e8 <MX_TIM4_Init+0xc4>)
 800138c:	f002 fade 	bl	800394c <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001396:	f7ff fe45 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139a:	2360      	movs	r3, #96	; 0x60
 800139c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_TIM4_Init+0xc4>)
 80013b4:	f001 ff66 	bl	8003284 <HAL_TIM_PWM_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80013be:	f7ff fe31 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2208      	movs	r2, #8
 80013c6:	4619      	mov	r1, r3
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <MX_TIM4_Init+0xc4>)
 80013ca:	f001 ff5b 	bl	8003284 <HAL_TIM_PWM_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80013d4:	f7ff fe26 	bl	8001024 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <MX_TIM4_Init+0xc4>)
 80013da:	f000 f887 	bl	80014ec <HAL_TIM_MspPostInit>

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000405c 	.word	0x2000405c
 80013ec:	40000800 	.word	0x40000800

080013f0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_TIM12_Init+0x84>)
 800140a:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <MX_TIM12_Init+0x88>)
 800140c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_TIM12_Init+0x84>)
 8001410:	2223      	movs	r2, #35	; 0x23
 8001412:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_TIM12_Init+0x84>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_TIM12_Init+0x84>)
 800141c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001420:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_TIM12_Init+0x84>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_TIM12_Init+0x84>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800142e:	4811      	ldr	r0, [pc, #68]	; (8001474 <MX_TIM12_Init+0x84>)
 8001430:	f001 fdb7 	bl	8002fa2 <HAL_TIM_PWM_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800143a:	f7ff fdf3 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143e:	2360      	movs	r3, #96	; 0x60
 8001440:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM12_Init+0x84>)
 8001456:	f001 ff15 	bl	8003284 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001460:	f7ff fde0 	bl	8001024 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM12_Init+0x84>)
 8001466:	f000 f841 	bl	80014ec <HAL_TIM_MspPostInit>

}
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200040ec 	.word	0x200040ec
 8001478:	40001800 	.word	0x40001800

0800147c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_TIM_PWM_MspInit+0x64>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10e      	bne.n	80014ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_TIM_PWM_MspInit+0x68>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <HAL_TIM_PWM_MspInit+0x68>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_TIM_PWM_MspInit+0x68>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80014aa:	e012      	b.n	80014d2 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <HAL_TIM_PWM_MspInit+0x6c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10d      	bne.n	80014d2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_TIM_PWM_MspInit+0x68>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_TIM_PWM_MspInit+0x68>)
 80014c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_TIM_PWM_MspInit+0x68>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40000800 	.word	0x40000800
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40001800 	.word	0x40001800

080014ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a24      	ldr	r2, [pc, #144]	; (800159c <HAL_TIM_MspPostInit+0xb0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d11f      	bne.n	800154e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 800152a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800153c:	2302      	movs	r3, #2
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4817      	ldr	r0, [pc, #92]	; (80015a4 <HAL_TIM_MspPostInit+0xb8>)
 8001548:	f000 fe6e 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800154c:	e022      	b.n	8001594 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <HAL_TIM_MspPostInit+0xbc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d11d      	bne.n	8001594 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 8001562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_TIM_MspPostInit+0xb4>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001574:	2340      	movs	r3, #64	; 0x40
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001584:	2309      	movs	r3, #9
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4807      	ldr	r0, [pc, #28]	; (80015ac <HAL_TIM_MspPostInit+0xc0>)
 8001590:	f000 fe4a 	bl	8002228 <HAL_GPIO_Init>
}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40000800 	.word	0x40000800
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40001800 	.word	0x40001800
 80015ac:	40021c00 	.word	0x40021c00

080015b0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 80015b8:	1d39      	adds	r1, r7, #4
 80015ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015be:	2201      	movs	r2, #1
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <__io_putchar+0x20>)
 80015c2:	f002 faa0 	bl	8003b06 <HAL_UART_Transmit>

  return ch;
 80015c6:	687b      	ldr	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20004170 	.word	0x20004170

080015d4 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_UART7_Init+0x4c>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_UART7_Init+0x50>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_UART7_Init+0x4c>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_UART7_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_UART7_Init+0x4c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_UART7_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_UART7_Init+0x4c>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_UART7_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_UART7_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_UART7_Init+0x4c>)
 800160c:	f002 fa2e 	bl	8003a6c <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001616:	f7ff fd05 	bl	8001024 <Error_Handler>
  }

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20004170 	.word	0x20004170
 8001624:	40007800 	.word	0x40007800

08001628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_UART_MspInit+0x84>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12c      	bne.n	80016a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_UART_MspInit+0x88>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_UART_MspInit+0x88>)
 8001654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_UART_MspInit+0x88>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_UART_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_UART_MspInit+0x88>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_UART_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001682:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168c:	2301      	movs	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001694:	2308      	movs	r3, #8
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <HAL_UART_MspInit+0x8c>)
 80016a0:	f000 fdc2 	bl	8002228 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40007800 	.word	0x40007800
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40021000 	.word	0x40021000

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016be:	e003      	b.n	80016c8 <LoopCopyDataInit>

080016c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016c6:	3104      	adds	r1, #4

080016c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016d0:	d3f6      	bcc.n	80016c0 <CopyDataInit>
  ldr  r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016d4:	e002      	b.n	80016dc <LoopFillZerobss>

080016d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016d8:	f842 3b04 	str.w	r3, [r2], #4

080016dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016e0:	d3f9      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016e2:	f7ff fe09 	bl	80012f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f004 f891 	bl	800580c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fc01 	bl	8000ef0 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80016f4:	08006948 	.word	0x08006948
  ldr  r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016fc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001700:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001704:	200041b8 	.word	0x200041b8

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 fd42 	bl	80021be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fca2 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fc74 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	200041b0 	.word	0x200041b0

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200041b0 	.word	0x200041b0

08001790 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0ed      	b.n	800197e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff f9f8 	bl	8000ba4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0202 	bic.w	r2, r2, #2
 80017c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c4:	f7ff ffd8 	bl	8001778 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ca:	e012      	b.n	80017f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017cc:	f7ff ffd4 	bl	8001778 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b0a      	cmp	r3, #10
 80017d8:	d90b      	bls.n	80017f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2205      	movs	r2, #5
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0c5      	b.n	800197e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e5      	bne.n	80017cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001810:	f7ff ffb2 	bl	8001778 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001816:	e012      	b.n	800183e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001818:	f7ff ffae 	bl	8001778 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b0a      	cmp	r3, #10
 8001824:	d90b      	bls.n	800183e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2205      	movs	r2, #5
 8001836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e09f      	b.n	800197e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0e5      	beq.n	8001818 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7e1b      	ldrb	r3, [r3, #24]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d108      	bne.n	8001866 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e007      	b.n	8001876 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7e5b      	ldrb	r3, [r3, #25]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e007      	b.n	80018a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800189e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7e9b      	ldrb	r3, [r3, #26]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d108      	bne.n	80018ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0220 	orr.w	r2, r2, #32
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e007      	b.n	80018ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0220 	bic.w	r2, r2, #32
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7edb      	ldrb	r3, [r3, #27]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d108      	bne.n	80018e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0210 	bic.w	r2, r2, #16
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e007      	b.n	80018f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0210 	orr.w	r2, r2, #16
 80018f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7f1b      	ldrb	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0208 	orr.w	r2, r2, #8
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e007      	b.n	800191e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0208 	bic.w	r2, r2, #8
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7f5b      	ldrb	r3, [r3, #29]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0204 	orr.w	r2, r2, #4
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e007      	b.n	8001948 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0204 	bic.w	r2, r2, #4
 8001946:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	ea42 0103 	orr.w	r1, r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d12e      	bne.n	80019f8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019b2:	f7ff fee1 	bl	8001778 <HAL_GetTick>
 80019b6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019b8:	e012      	b.n	80019e0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ba:	f7ff fedd 	bl	8001778 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b0a      	cmp	r3, #10
 80019c6:	d90b      	bls.n	80019e0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2205      	movs	r2, #5
 80019d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e012      	b.n	8001a06 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1e5      	bne.n	80019ba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e006      	b.n	8001a06 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b089      	sub	sp, #36	; 0x24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a2c:	7ffb      	ldrb	r3, [r7, #31]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d003      	beq.n	8001a3a <HAL_CAN_AddTxMessage+0x2c>
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	f040 80b8 	bne.w	8001baa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10a      	bne.n	8001a5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a0 	beq.w	8001b9a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	0e1b      	lsrs	r3, r3, #24
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d907      	bls.n	8001a7a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e09e      	b.n	8001bb8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a96:	68f9      	ldr	r1, [r7, #12]
 8001a98:	6809      	ldr	r1, [r1, #0]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3318      	adds	r3, #24
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	440b      	add	r3, r1
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e00f      	b.n	8001ac8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ab2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001abc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	440b      	add	r3, r1
 8001ac6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3318      	adds	r3, #24
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3304      	adds	r3, #4
 8001ada:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	7d1b      	ldrb	r3, [r3, #20]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d111      	bne.n	8001b08 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3318      	adds	r3, #24
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	6811      	ldr	r1, [r2, #0]
 8001af8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3318      	adds	r3, #24
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	440b      	add	r3, r1
 8001b04:	3304      	adds	r3, #4
 8001b06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3307      	adds	r3, #7
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	061a      	lsls	r2, r3, #24
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3306      	adds	r3, #6
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3305      	adds	r3, #5
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	4313      	orrs	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	3204      	adds	r2, #4
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	6811      	ldr	r1, [r2, #0]
 8001b30:	ea43 0200 	orr.w	r2, r3, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	440b      	add	r3, r1
 8001b3a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3303      	adds	r3, #3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	061a      	lsls	r2, r3, #24
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3301      	adds	r3, #1
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	7812      	ldrb	r2, [r2, #0]
 8001b60:	4610      	mov	r0, r2
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	6811      	ldr	r1, [r2, #0]
 8001b66:	ea43 0200 	orr.w	r2, r3, r0
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	440b      	add	r3, r1
 8001b70:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3318      	adds	r3, #24
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	4413      	add	r3, r2
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	6811      	ldr	r1, [r2, #0]
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3318      	adds	r3, #24
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	440b      	add	r3, r1
 8001b94:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e00e      	b.n	8001bb8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e006      	b.n	8001bb8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
  }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3724      	adds	r7, #36	; 0x24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d002      	beq.n	8001be2 <HAL_CAN_ActivateNotification+0x1e>
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d109      	bne.n	8001bf6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6959      	ldr	r1, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e006      	b.n	8001c04 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
  }
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d07c      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d023      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f97d 	bl	8001f72 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c78:	e016      	b.n	8001ca8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	e00c      	b.n	8001ca8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e002      	b.n	8001ca8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f983 	bl	8001fae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d024      	beq.n	8001cfc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f95d 	bl	8001f86 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ccc:	e016      	b.n	8001cfc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	e00c      	b.n	8001cfc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	e002      	b.n	8001cfc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f963 	bl	8001fc2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d024      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f93d 	bl	8001f9a <HAL_CAN_TxMailbox2CompleteCallback>
 8001d20:	e016      	b.n	8001d50 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
 8001d34:	e00c      	b.n	8001d50 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
 8001d48:	e002      	b.n	8001d50 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f943 	bl	8001fd6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2210      	movs	r2, #16
 8001d72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f92a 	bl	8001fea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fe3c 	bl	8000a2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2208      	movs	r2, #8
 8001df2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f90c 	bl	8002012 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8f3 	bl	8001ffe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2210      	movs	r2, #16
 8001e32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8f6 	bl	8002026 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2208      	movs	r2, #8
 8001e54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8ef 	bl	800203a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d075      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d06c      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03d      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d038      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ede:	2b30      	cmp	r3, #48	; 0x30
 8001ee0:	d017      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x302>
 8001ee2:	2b30      	cmp	r3, #48	; 0x30
 8001ee4:	d804      	bhi.n	8001ef0 <HAL_CAN_IRQHandler+0x2e0>
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d009      	beq.n	8001efe <HAL_CAN_IRQHandler+0x2ee>
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d00c      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001eee:	e024      	b.n	8001f3a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001ef0:	2b50      	cmp	r3, #80	; 0x50
 8001ef2:	d018      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x316>
 8001ef4:	2b60      	cmp	r3, #96	; 0x60
 8001ef6:	d01b      	beq.n	8001f30 <HAL_CAN_IRQHandler+0x320>
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d00f      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x30c>
            break;
 8001efc:	e01d      	b.n	8001f3a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f06:	e018      	b.n	8001f3a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	f043 0310 	orr.w	r3, r3, #16
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f10:	e013      	b.n	8001f3a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f043 0320 	orr.w	r3, r3, #32
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f1a:	e00e      	b.n	8001f3a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f24:	e009      	b.n	8001f3a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f2e:	e004      	b.n	8001f3a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f38:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699a      	ldr	r2, [r3, #24]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f48:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f872 	bl	800204e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	; (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	; (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	; (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff4c 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e6:	f7ff ff61 	bl	80020ac <__NVIC_GetPriorityGrouping>
 80021ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f7ff ffb1 	bl	8002158 <NVIC_EncodePriority>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff80 	bl	8002104 <__NVIC_SetPriority>
}
 8002204:	bf00      	nop
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff54 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e177      	b.n	8002534 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	f040 8166 	bne.w	800252e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d00b      	beq.n	8002282 <HAL_GPIO_Init+0x5a>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002276:	2b11      	cmp	r3, #17
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b12      	cmp	r3, #18
 8002280:	d130      	bne.n	80022e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0xfc>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b12      	cmp	r3, #18
 8002322:	d123      	bne.n	800236c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3208      	adds	r2, #8
 8002366:	69b9      	ldr	r1, [r7, #24]
 8002368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0203 	and.w	r2, r3, #3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80c0 	beq.w	800252e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_GPIO_Init+0x320>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a64      	ldr	r2, [pc, #400]	; (8002548 <HAL_GPIO_Init+0x320>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b62      	ldr	r3, [pc, #392]	; (8002548 <HAL_GPIO_Init+0x320>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ca:	4a60      	ldr	r2, [pc, #384]	; (800254c <HAL_GPIO_Init+0x324>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_GPIO_Init+0x328>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d037      	beq.n	8002466 <HAL_GPIO_Init+0x23e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a56      	ldr	r2, [pc, #344]	; (8002554 <HAL_GPIO_Init+0x32c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d031      	beq.n	8002462 <HAL_GPIO_Init+0x23a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a55      	ldr	r2, [pc, #340]	; (8002558 <HAL_GPIO_Init+0x330>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d02b      	beq.n	800245e <HAL_GPIO_Init+0x236>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a54      	ldr	r2, [pc, #336]	; (800255c <HAL_GPIO_Init+0x334>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d025      	beq.n	800245a <HAL_GPIO_Init+0x232>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a53      	ldr	r2, [pc, #332]	; (8002560 <HAL_GPIO_Init+0x338>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01f      	beq.n	8002456 <HAL_GPIO_Init+0x22e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a52      	ldr	r2, [pc, #328]	; (8002564 <HAL_GPIO_Init+0x33c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d019      	beq.n	8002452 <HAL_GPIO_Init+0x22a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a51      	ldr	r2, [pc, #324]	; (8002568 <HAL_GPIO_Init+0x340>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x226>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a50      	ldr	r2, [pc, #320]	; (800256c <HAL_GPIO_Init+0x344>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x222>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4f      	ldr	r2, [pc, #316]	; (8002570 <HAL_GPIO_Init+0x348>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x21e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4e      	ldr	r2, [pc, #312]	; (8002574 <HAL_GPIO_Init+0x34c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x21a>
 800243e:	2309      	movs	r3, #9
 8002440:	e012      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002442:	230a      	movs	r3, #10
 8002444:	e010      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002446:	2308      	movs	r3, #8
 8002448:	e00e      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800244a:	2307      	movs	r3, #7
 800244c:	e00c      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800244e:	2306      	movs	r3, #6
 8002450:	e00a      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002452:	2305      	movs	r3, #5
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002456:	2304      	movs	r3, #4
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002466:	2300      	movs	r3, #0
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f002 0203 	and.w	r2, r2, #3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002478:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_GPIO_Init+0x324>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002486:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <HAL_GPIO_Init+0x350>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024aa:	4a33      	ldr	r2, [pc, #204]	; (8002578 <HAL_GPIO_Init+0x350>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_GPIO_Init+0x350>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d4:	4a28      	ldr	r2, [pc, #160]	; (8002578 <HAL_GPIO_Init+0x350>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_GPIO_Init+0x350>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_GPIO_Init+0x350>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002504:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_GPIO_Init+0x350>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002528:	4a13      	ldr	r2, [pc, #76]	; (8002578 <HAL_GPIO_Init+0x350>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f ae84 	bls.w	8002244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800253c:	bf00      	nop
 800253e:	3724      	adds	r7, #36	; 0x24
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40023800 	.word	0x40023800
 800254c:	40013800 	.word	0x40013800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400
 8002558:	40020800 	.word	0x40020800
 800255c:	40020c00 	.word	0x40020c00
 8002560:	40021000 	.word	0x40021000
 8002564:	40021400 	.word	0x40021400
 8002568:	40021800 	.word	0x40021800
 800256c:	40021c00 	.word	0x40021c00
 8002570:	40022000 	.word	0x40022000
 8002574:	40022400 	.word	0x40022400
 8002578:	40013c00 	.word	0x40013c00

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	401a      	ands	r2, r3
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d104      	bne.n	80025d2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	041a      	lsls	r2, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fa22 	bl	8000a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e25b      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d075      	beq.n	800271e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002632:	4ba3      	ldr	r3, [pc, #652]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d00c      	beq.n	8002658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263e:	4ba0      	ldr	r3, [pc, #640]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002646:	2b08      	cmp	r3, #8
 8002648:	d112      	bne.n	8002670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4b9d      	ldr	r3, [pc, #628]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002656:	d10b      	bne.n	8002670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	4b99      	ldr	r3, [pc, #612]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d05b      	beq.n	800271c <HAL_RCC_OscConfig+0x108>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d157      	bne.n	800271c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e236      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d106      	bne.n	8002688 <HAL_RCC_OscConfig+0x74>
 800267a:	4b91      	ldr	r3, [pc, #580]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a90      	ldr	r2, [pc, #576]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e01d      	b.n	80026c4 <HAL_RCC_OscConfig+0xb0>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x98>
 8002692:	4b8b      	ldr	r3, [pc, #556]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a8a      	ldr	r2, [pc, #552]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b88      	ldr	r3, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a87      	ldr	r2, [pc, #540]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0xb0>
 80026ac:	4b84      	ldr	r3, [pc, #528]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a83      	ldr	r2, [pc, #524]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a80      	ldr	r2, [pc, #512]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7ff f854 	bl	8001778 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d4:	f7ff f850 	bl	8001778 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1fb      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0xc0>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff f840 	bl	8001778 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff f83c 	bl	8001778 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e1e7      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	4b6c      	ldr	r3, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0xe8>
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d063      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272a:	4b65      	ldr	r3, [pc, #404]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002736:	4b62      	ldr	r3, [pc, #392]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273e:	2b08      	cmp	r3, #8
 8002740:	d11c      	bne.n	800277c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002742:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d116      	bne.n	800277c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_RCC_OscConfig+0x152>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1bb      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002766:	4b56      	ldr	r3, [pc, #344]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4952      	ldr	r1, [pc, #328]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	e03a      	b.n	80027f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d020      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <HAL_RCC_OscConfig+0x2b0>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe fff5 	bl	8001778 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002792:	f7fe fff1 	bl	8001778 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e19c      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4940      	ldr	r1, [pc, #256]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
 80027c4:	e015      	b.n	80027f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c6:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <HAL_RCC_OscConfig+0x2b0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe ffd4 	bl	8001778 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d4:	f7fe ffd0 	bl	8001778 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e17b      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d030      	beq.n	8002860 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x2b4>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7fe ffb4 	bl	8001778 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002814:	f7fe ffb0 	bl	8001778 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e15b      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x200>
 8002832:	e015      	b.n	8002860 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x2b4>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe ff9d 	bl	8001778 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002842:	f7fe ff99 	bl	8001778 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e144      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a0 	beq.w	80029ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x2b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d121      	bne.n	80028ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_RCC_OscConfig+0x2b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RCC_OscConfig+0x2b8>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe ff5f 	bl	8001778 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e011      	b.n	80028e2 <HAL_RCC_OscConfig+0x2ce>
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470000 	.word	0x42470000
 80028c8:	42470e80 	.word	0x42470e80
 80028cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d0:	f7fe ff52 	bl	8001778 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e0fd      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b81      	ldr	r3, [pc, #516]	; (8002ae8 <HAL_RCC_OscConfig+0x4d4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d106      	bne.n	8002904 <HAL_RCC_OscConfig+0x2f0>
 80028f6:	4b7d      	ldr	r3, [pc, #500]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a7c      	ldr	r2, [pc, #496]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	e01c      	b.n	800293e <HAL_RCC_OscConfig+0x32a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x312>
 800290c:	4b77      	ldr	r3, [pc, #476]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a76      	ldr	r2, [pc, #472]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	4b74      	ldr	r3, [pc, #464]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a73      	ldr	r2, [pc, #460]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0x32a>
 8002926:	4b71      	ldr	r3, [pc, #452]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a70      	ldr	r2, [pc, #448]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
 8002932:	4b6e      	ldr	r3, [pc, #440]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a6d      	ldr	r2, [pc, #436]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d015      	beq.n	8002972 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe ff17 	bl	8001778 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe ff13 	bl	8001778 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0bc      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	4b61      	ldr	r3, [pc, #388]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ee      	beq.n	800294e <HAL_RCC_OscConfig+0x33a>
 8002970:	e014      	b.n	800299c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7fe ff01 	bl	8001778 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe fefd 	bl	8001778 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e0a6      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	4b56      	ldr	r3, [pc, #344]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ee      	bne.n	800297a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4b52      	ldr	r3, [pc, #328]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a51      	ldr	r2, [pc, #324]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8092 	beq.w	8002adc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b8:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d05c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d141      	bne.n	8002a50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <HAL_RCC_OscConfig+0x4dc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fed1 	bl	8001778 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe fecd 	bl	8001778 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e078      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ec:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	019b      	lsls	r3, r3, #6
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	061b      	lsls	r3, r3, #24
 8002a1c:	4933      	ldr	r1, [pc, #204]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a22:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <HAL_RCC_OscConfig+0x4dc>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe fea6 	bl	8001778 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe fea2 	bl	8001778 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e04d      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x41c>
 8002a4e:	e045      	b.n	8002adc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x4dc>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fe8f 	bl	8001778 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe fe8b 	bl	8001778 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e036      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x44a>
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e029      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d115      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	40023800 	.word	0x40023800
 8002af0:	42470060 	.word	0x42470060

08002af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0cc      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d90c      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b63      	ldr	r3, [pc, #396]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0b8      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	494d      	ldr	r1, [pc, #308]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d044      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d119      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e07f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e067      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd2:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f023 0203 	bic.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4934      	ldr	r1, [pc, #208]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be4:	f7fe fdc8 	bl	8001778 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fe fdc4 	bl	8001778 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e04f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 020c 	and.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d1eb      	bne.n	8002bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d20c      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b22      	ldr	r3, [pc, #136]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e032      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c7a:	f000 f821 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f9f2 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023c00 	.word	0x40023c00
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	08006888 	.word	0x08006888
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd6:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d007      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x32>
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x38>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 808d 	bne.w	8002e06 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002cee:	60bb      	str	r3, [r7, #8]
       break;
 8002cf0:	e08c      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf2:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cf4:	60bb      	str	r3, [r7, #8]
      break;
 8002cf6:	e089      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d02:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d023      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0e:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	ea03 0501 	and.w	r5, r3, r1
 8002d24:	ea04 0602 	and.w	r6, r4, r2
 8002d28:	4a3d      	ldr	r2, [pc, #244]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d2a:	fb02 f106 	mul.w	r1, r2, r6
 8002d2e:	2200      	movs	r2, #0
 8002d30:	fb02 f205 	mul.w	r2, r2, r5
 8002d34:	440a      	add	r2, r1
 8002d36:	493a      	ldr	r1, [pc, #232]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d38:	fba5 0101 	umull	r0, r1, r5, r1
 8002d3c:	1853      	adds	r3, r2, r1
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f04f 0400 	mov.w	r4, #0
 8002d46:	461a      	mov	r2, r3
 8002d48:	4623      	mov	r3, r4
 8002d4a:	f7fd fc5d 	bl	8000608 <__aeabi_uldivmod>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e049      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	f04f 0400 	mov.w	r4, #0
 8002d60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	ea03 0501 	and.w	r5, r3, r1
 8002d6c:	ea04 0602 	and.w	r6, r4, r2
 8002d70:	4629      	mov	r1, r5
 8002d72:	4632      	mov	r2, r6
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	0154      	lsls	r4, r2, #5
 8002d7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d82:	014b      	lsls	r3, r1, #5
 8002d84:	4619      	mov	r1, r3
 8002d86:	4622      	mov	r2, r4
 8002d88:	1b49      	subs	r1, r1, r5
 8002d8a:	eb62 0206 	sbc.w	r2, r2, r6
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	f04f 0400 	mov.w	r4, #0
 8002d96:	0194      	lsls	r4, r2, #6
 8002d98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d9c:	018b      	lsls	r3, r1, #6
 8002d9e:	1a5b      	subs	r3, r3, r1
 8002da0:	eb64 0402 	sbc.w	r4, r4, r2
 8002da4:	f04f 0100 	mov.w	r1, #0
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	00e2      	lsls	r2, r4, #3
 8002dae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002db2:	00d9      	lsls	r1, r3, #3
 8002db4:	460b      	mov	r3, r1
 8002db6:	4614      	mov	r4, r2
 8002db8:	195b      	adds	r3, r3, r5
 8002dba:	eb44 0406 	adc.w	r4, r4, r6
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	02a2      	lsls	r2, r4, #10
 8002dc8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dcc:	0299      	lsls	r1, r3, #10
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4623      	mov	r3, r4
 8002de0:	f7fd fc12 	bl	8000608 <__aeabi_uldivmod>
 8002de4:	4603      	mov	r3, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0c1b      	lsrs	r3, r3, #16
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	3301      	adds	r3, #1
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	60bb      	str	r3, [r7, #8]
      break;
 8002e04:	e002      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e08:	60bb      	str	r3, [r7, #8]
      break;
 8002e0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	00b71b00 	.word	0x00b71b00

08002e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000000 	.word	0x20000000

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff0 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e44:	4601      	mov	r1, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0a9b      	lsrs	r3, r3, #10
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4a03      	ldr	r2, [pc, #12]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5cd3      	ldrb	r3, [r2, r3]
 8002e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	08006898 	.word	0x08006898

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e68:	f7ff ffdc 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4601      	mov	r1, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0b5b      	lsrs	r3, r3, #13
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08006898 	.word	0x08006898

08002e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	220f      	movs	r2, #15
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0203 	and.w	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ece:	4b07      	ldr	r3, [pc, #28]	; (8002eec <HAL_RCC_GetClockConfig+0x60>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 020f 	and.w	r2, r3, #15
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40023c00 	.word	0x40023c00

08002ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e01d      	b.n	8002f3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f815 	bl	8002f46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f000 fa96 	bl	8003460 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b06      	cmp	r3, #6
 8002f82:	d007      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e01d      	b.n	8002ff0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d106      	bne.n	8002fce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7fe fa57 	bl	800147c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f000 fa3d 	bl	8003460 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fc78 	bl	8003900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <HAL_TIM_PWM_Start+0x74>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_TIM_PWM_Start+0x2c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a14      	ldr	r2, [pc, #80]	; (8003070 <HAL_TIM_PWM_Start+0x78>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_TIM_PWM_Start+0x30>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_TIM_PWM_Start+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b06      	cmp	r3, #6
 800304e:	d007      	beq.n	8003060 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40010000 	.word	0x40010000
 8003070:	40010400 	.word	0x40010400

08003074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d122      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b02      	cmp	r3, #2
 8003096:	d11b      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0202 	mvn.w	r2, #2
 80030a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f9b4 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f9a6 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f9b7 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d11b      	bne.n	8003124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0204 	mvn.w	r2, #4
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f98a 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f97c 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f98d 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b08      	cmp	r3, #8
 8003130:	d122      	bne.n	8003178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b08      	cmp	r3, #8
 800313e:	d11b      	bne.n	8003178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0208 	mvn.w	r2, #8
 8003148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2204      	movs	r2, #4
 800314e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f960 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 8003164:	e005      	b.n	8003172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f952 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f963 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b10      	cmp	r3, #16
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b10      	cmp	r3, #16
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0210 	mvn.w	r2, #16
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2208      	movs	r2, #8
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f936 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f928 	bl	8003410 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f939 	bl	8003438 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10e      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0201 	mvn.w	r2, #1
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fd ff04 	bl	8001000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b80      	cmp	r3, #128	; 0x80
 8003204:	d10e      	bne.n	8003224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b80      	cmp	r3, #128	; 0x80
 8003212:	d107      	bne.n	8003224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fc1a 	bl	8003a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d10e      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d107      	bne.n	8003250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8fe 	bl	800344c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b20      	cmp	r3, #32
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b20      	cmp	r3, #32
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0220 	mvn.w	r2, #32
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fbe4 	bl	8003a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800329a:	2302      	movs	r3, #2
 800329c:	e0b4      	b.n	8003408 <HAL_TIM_PWM_ConfigChannel+0x184>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	f200 809f 	bhi.w	80033f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	080033f5 	.word	0x080033f5
 80032c4:	080033f5 	.word	0x080033f5
 80032c8:	080033f5 	.word	0x080033f5
 80032cc:	08003331 	.word	0x08003331
 80032d0:	080033f5 	.word	0x080033f5
 80032d4:	080033f5 	.word	0x080033f5
 80032d8:	080033f5 	.word	0x080033f5
 80032dc:	08003373 	.word	0x08003373
 80032e0:	080033f5 	.word	0x080033f5
 80032e4:	080033f5 	.word	0x080033f5
 80032e8:	080033f5 	.word	0x080033f5
 80032ec:	080033b3 	.word	0x080033b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f952 	bl	80035a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0208 	orr.w	r2, r2, #8
 800330a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	619a      	str	r2, [r3, #24]
      break;
 800332e:	e062      	b.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f9a2 	bl	8003680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	021a      	lsls	r2, r3, #8
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	619a      	str	r2, [r3, #24]
      break;
 8003370:	e041      	b.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f9f7 	bl	800376c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0208 	orr.w	r2, r2, #8
 800338c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0204 	bic.w	r2, r2, #4
 800339c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69d9      	ldr	r1, [r3, #28]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	61da      	str	r2, [r3, #28]
      break;
 80033b0:	e021      	b.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fa4b 	bl	8003854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	61da      	str	r2, [r3, #28]
      break;
 80033f2:	e000      	b.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80033f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a40      	ldr	r2, [pc, #256]	; (8003574 <TIM_Base_SetConfig+0x114>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d00f      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3d      	ldr	r2, [pc, #244]	; (8003578 <TIM_Base_SetConfig+0x118>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00b      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a3c      	ldr	r2, [pc, #240]	; (800357c <TIM_Base_SetConfig+0x11c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3b      	ldr	r2, [pc, #236]	; (8003580 <TIM_Base_SetConfig+0x120>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <TIM_Base_SetConfig+0x40>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3a      	ldr	r2, [pc, #232]	; (8003584 <TIM_Base_SetConfig+0x124>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d108      	bne.n	80034b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <TIM_Base_SetConfig+0x114>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d02b      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c0:	d027      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2c      	ldr	r2, [pc, #176]	; (8003578 <TIM_Base_SetConfig+0x118>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d023      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2b      	ldr	r2, [pc, #172]	; (800357c <TIM_Base_SetConfig+0x11c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d01f      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <TIM_Base_SetConfig+0x120>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01b      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a29      	ldr	r2, [pc, #164]	; (8003584 <TIM_Base_SetConfig+0x124>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d017      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a28      	ldr	r2, [pc, #160]	; (8003588 <TIM_Base_SetConfig+0x128>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a27      	ldr	r2, [pc, #156]	; (800358c <TIM_Base_SetConfig+0x12c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00f      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a26      	ldr	r2, [pc, #152]	; (8003590 <TIM_Base_SetConfig+0x130>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00b      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <TIM_Base_SetConfig+0x134>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a24      	ldr	r2, [pc, #144]	; (8003598 <TIM_Base_SetConfig+0x138>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a23      	ldr	r2, [pc, #140]	; (800359c <TIM_Base_SetConfig+0x13c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d108      	bne.n	8003524 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <TIM_Base_SetConfig+0x114>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <TIM_Base_SetConfig+0xf8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <TIM_Base_SetConfig+0x124>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d103      	bne.n	8003560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	615a      	str	r2, [r3, #20]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40000c00 	.word	0x40000c00
 8003584:	40010400 	.word	0x40010400
 8003588:	40014000 	.word	0x40014000
 800358c:	40014400 	.word	0x40014400
 8003590:	40014800 	.word	0x40014800
 8003594:	40001800 	.word	0x40001800
 8003598:	40001c00 	.word	0x40001c00
 800359c:	40002000 	.word	0x40002000

080035a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 0302 	bic.w	r3, r3, #2
 80035e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a20      	ldr	r2, [pc, #128]	; (8003678 <TIM_OC1_SetConfig+0xd8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_OC1_SetConfig+0x64>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a1f      	ldr	r2, [pc, #124]	; (800367c <TIM_OC1_SetConfig+0xdc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d10c      	bne.n	800361e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0308 	bic.w	r3, r3, #8
 800360a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f023 0304 	bic.w	r3, r3, #4
 800361c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <TIM_OC1_SetConfig+0xd8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_OC1_SetConfig+0x8e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <TIM_OC1_SetConfig+0xdc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d111      	bne.n	8003652 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800363c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	621a      	str	r2, [r3, #32]
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40010000 	.word	0x40010000
 800367c:	40010400 	.word	0x40010400

08003680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f023 0210 	bic.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0320 	bic.w	r3, r3, #32
 80036ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a22      	ldr	r2, [pc, #136]	; (8003764 <TIM_OC2_SetConfig+0xe4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_OC2_SetConfig+0x68>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <TIM_OC2_SetConfig+0xe8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10d      	bne.n	8003704 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a17      	ldr	r2, [pc, #92]	; (8003764 <TIM_OC2_SetConfig+0xe4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_OC2_SetConfig+0x94>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a16      	ldr	r2, [pc, #88]	; (8003768 <TIM_OC2_SetConfig+0xe8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d113      	bne.n	800373c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800371a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40010000 	.word	0x40010000
 8003768:	40010400 	.word	0x40010400

0800376c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a21      	ldr	r2, [pc, #132]	; (800384c <TIM_OC3_SetConfig+0xe0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_OC3_SetConfig+0x66>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a20      	ldr	r2, [pc, #128]	; (8003850 <TIM_OC3_SetConfig+0xe4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10d      	bne.n	80037ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a16      	ldr	r2, [pc, #88]	; (800384c <TIM_OC3_SetConfig+0xe0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_OC3_SetConfig+0x92>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a15      	ldr	r2, [pc, #84]	; (8003850 <TIM_OC3_SetConfig+0xe4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d113      	bne.n	8003826 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800380c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	621a      	str	r2, [r3, #32]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40010000 	.word	0x40010000
 8003850:	40010400 	.word	0x40010400

08003854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800389e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	031b      	lsls	r3, r3, #12
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <TIM_OC4_SetConfig+0xa4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_OC4_SetConfig+0x68>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a11      	ldr	r2, [pc, #68]	; (80038fc <TIM_OC4_SetConfig+0xa8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d109      	bne.n	80038d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40010400 	.word	0x40010400

08003900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2201      	movs	r2, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1a      	ldr	r2, [r3, #32]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	43db      	mvns	r3, r3
 8003922:	401a      	ands	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a1a      	ldr	r2, [r3, #32]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003960:	2302      	movs	r3, #2
 8003962:	e05a      	b.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a21      	ldr	r2, [pc, #132]	; (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d022      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b0:	d01d      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d018      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d009      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10c      	bne.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800
 8003a34:	40000c00 	.word	0x40000c00
 8003a38:	40010400 	.word	0x40010400
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40001800 	.word	0x40001800

08003a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e03f      	b.n	8003afe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fdc8 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f90b 	bl	8003ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b088      	sub	sp, #32
 8003b0a:	af02      	add	r7, sp, #8
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	f040 8083 	bne.w	8003c2e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_UART_Transmit+0x2e>
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e07b      	b.n	8003c30 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_UART_Transmit+0x40>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e074      	b.n	8003c30 <HAL_UART_Transmit+0x12a>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2221      	movs	r2, #33	; 0x21
 8003b58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b5c:	f7fd fe0c 	bl	8001778 <HAL_GetTick>
 8003b60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003b76:	e042      	b.n	8003bfe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8e:	d122      	bne.n	8003bd6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2200      	movs	r2, #0
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f84c 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e042      	b.n	8003c30 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	3302      	adds	r3, #2
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	e017      	b.n	8003bfe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	e013      	b.n	8003bfe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f829 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e01f      	b.n	8003c30 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	60ba      	str	r2, [r7, #8]
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1b7      	bne.n	8003b78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2140      	movs	r1, #64	; 0x40
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f810 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e006      	b.n	8003c30 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c48:	e02c      	b.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d028      	beq.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c58:	f7fd fd8e 	bl	8001778 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d21d      	bcs.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e00f      	b.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d0c3      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d0e:	f023 030c 	bic.w	r3, r3, #12
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3a:	f040 818b 	bne.w	8004054 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4ac1      	ldr	r2, [pc, #772]	; (8004048 <UART_SetConfig+0x37c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d005      	beq.n	8003d54 <UART_SetConfig+0x88>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4abf      	ldr	r2, [pc, #764]	; (800404c <UART_SetConfig+0x380>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	f040 80bd 	bne.w	8003ece <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7ff f886 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003d58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	461d      	mov	r5, r3
 8003d5e:	f04f 0600 	mov.w	r6, #0
 8003d62:	46a8      	mov	r8, r5
 8003d64:	46b1      	mov	r9, r6
 8003d66:	eb18 0308 	adds.w	r3, r8, r8
 8003d6a:	eb49 0409 	adc.w	r4, r9, r9
 8003d6e:	4698      	mov	r8, r3
 8003d70:	46a1      	mov	r9, r4
 8003d72:	eb18 0805 	adds.w	r8, r8, r5
 8003d76:	eb49 0906 	adc.w	r9, r9, r6
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d8e:	4688      	mov	r8, r1
 8003d90:	4691      	mov	r9, r2
 8003d92:	eb18 0005 	adds.w	r0, r8, r5
 8003d96:	eb49 0106 	adc.w	r1, r9, r6
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	461d      	mov	r5, r3
 8003da0:	f04f 0600 	mov.w	r6, #0
 8003da4:	196b      	adds	r3, r5, r5
 8003da6:	eb46 0406 	adc.w	r4, r6, r6
 8003daa:	461a      	mov	r2, r3
 8003dac:	4623      	mov	r3, r4
 8003dae:	f7fc fc2b 	bl	8000608 <__aeabi_uldivmod>
 8003db2:	4603      	mov	r3, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	461a      	mov	r2, r3
 8003db8:	4ba5      	ldr	r3, [pc, #660]	; (8004050 <UART_SetConfig+0x384>)
 8003dba:	fba3 2302 	umull	r2, r3, r3, r2
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	461d      	mov	r5, r3
 8003dc8:	f04f 0600 	mov.w	r6, #0
 8003dcc:	46a9      	mov	r9, r5
 8003dce:	46b2      	mov	sl, r6
 8003dd0:	eb19 0309 	adds.w	r3, r9, r9
 8003dd4:	eb4a 040a 	adc.w	r4, sl, sl
 8003dd8:	4699      	mov	r9, r3
 8003dda:	46a2      	mov	sl, r4
 8003ddc:	eb19 0905 	adds.w	r9, r9, r5
 8003de0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003de4:	f04f 0100 	mov.w	r1, #0
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003df4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003df8:	4689      	mov	r9, r1
 8003dfa:	4692      	mov	sl, r2
 8003dfc:	eb19 0005 	adds.w	r0, r9, r5
 8003e00:	eb4a 0106 	adc.w	r1, sl, r6
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	461d      	mov	r5, r3
 8003e0a:	f04f 0600 	mov.w	r6, #0
 8003e0e:	196b      	adds	r3, r5, r5
 8003e10:	eb46 0406 	adc.w	r4, r6, r6
 8003e14:	461a      	mov	r2, r3
 8003e16:	4623      	mov	r3, r4
 8003e18:	f7fc fbf6 	bl	8000608 <__aeabi_uldivmod>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b8b      	ldr	r3, [pc, #556]	; (8004050 <UART_SetConfig+0x384>)
 8003e24:	fba3 1302 	umull	r1, r3, r3, r2
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	2164      	movs	r1, #100	; 0x64
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	3332      	adds	r3, #50	; 0x32
 8003e36:	4a86      	ldr	r2, [pc, #536]	; (8004050 <UART_SetConfig+0x384>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e44:	4498      	add	r8, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	461d      	mov	r5, r3
 8003e4a:	f04f 0600 	mov.w	r6, #0
 8003e4e:	46a9      	mov	r9, r5
 8003e50:	46b2      	mov	sl, r6
 8003e52:	eb19 0309 	adds.w	r3, r9, r9
 8003e56:	eb4a 040a 	adc.w	r4, sl, sl
 8003e5a:	4699      	mov	r9, r3
 8003e5c:	46a2      	mov	sl, r4
 8003e5e:	eb19 0905 	adds.w	r9, r9, r5
 8003e62:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e7a:	4689      	mov	r9, r1
 8003e7c:	4692      	mov	sl, r2
 8003e7e:	eb19 0005 	adds.w	r0, r9, r5
 8003e82:	eb4a 0106 	adc.w	r1, sl, r6
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	461d      	mov	r5, r3
 8003e8c:	f04f 0600 	mov.w	r6, #0
 8003e90:	196b      	adds	r3, r5, r5
 8003e92:	eb46 0406 	adc.w	r4, r6, r6
 8003e96:	461a      	mov	r2, r3
 8003e98:	4623      	mov	r3, r4
 8003e9a:	f7fc fbb5 	bl	8000608 <__aeabi_uldivmod>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <UART_SetConfig+0x384>)
 8003ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	2164      	movs	r1, #100	; 0x64
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	3332      	adds	r3, #50	; 0x32
 8003eb8:	4a65      	ldr	r2, [pc, #404]	; (8004050 <UART_SetConfig+0x384>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	f003 0207 	and.w	r2, r3, #7
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4442      	add	r2, r8
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	e26f      	b.n	80043ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ece:	f7fe ffb5 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8003ed2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	461d      	mov	r5, r3
 8003ed8:	f04f 0600 	mov.w	r6, #0
 8003edc:	46a8      	mov	r8, r5
 8003ede:	46b1      	mov	r9, r6
 8003ee0:	eb18 0308 	adds.w	r3, r8, r8
 8003ee4:	eb49 0409 	adc.w	r4, r9, r9
 8003ee8:	4698      	mov	r8, r3
 8003eea:	46a1      	mov	r9, r4
 8003eec:	eb18 0805 	adds.w	r8, r8, r5
 8003ef0:	eb49 0906 	adc.w	r9, r9, r6
 8003ef4:	f04f 0100 	mov.w	r1, #0
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f08:	4688      	mov	r8, r1
 8003f0a:	4691      	mov	r9, r2
 8003f0c:	eb18 0005 	adds.w	r0, r8, r5
 8003f10:	eb49 0106 	adc.w	r1, r9, r6
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	461d      	mov	r5, r3
 8003f1a:	f04f 0600 	mov.w	r6, #0
 8003f1e:	196b      	adds	r3, r5, r5
 8003f20:	eb46 0406 	adc.w	r4, r6, r6
 8003f24:	461a      	mov	r2, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	f7fc fb6e 	bl	8000608 <__aeabi_uldivmod>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <UART_SetConfig+0x384>)
 8003f34:	fba3 2302 	umull	r2, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	461d      	mov	r5, r3
 8003f42:	f04f 0600 	mov.w	r6, #0
 8003f46:	46a9      	mov	r9, r5
 8003f48:	46b2      	mov	sl, r6
 8003f4a:	eb19 0309 	adds.w	r3, r9, r9
 8003f4e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f52:	4699      	mov	r9, r3
 8003f54:	46a2      	mov	sl, r4
 8003f56:	eb19 0905 	adds.w	r9, r9, r5
 8003f5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f72:	4689      	mov	r9, r1
 8003f74:	4692      	mov	sl, r2
 8003f76:	eb19 0005 	adds.w	r0, r9, r5
 8003f7a:	eb4a 0106 	adc.w	r1, sl, r6
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	461d      	mov	r5, r3
 8003f84:	f04f 0600 	mov.w	r6, #0
 8003f88:	196b      	adds	r3, r5, r5
 8003f8a:	eb46 0406 	adc.w	r4, r6, r6
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4623      	mov	r3, r4
 8003f92:	f7fc fb39 	bl	8000608 <__aeabi_uldivmod>
 8003f96:	4603      	mov	r3, r0
 8003f98:	460c      	mov	r4, r1
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b2c      	ldr	r3, [pc, #176]	; (8004050 <UART_SetConfig+0x384>)
 8003f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2164      	movs	r1, #100	; 0x64
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	3332      	adds	r3, #50	; 0x32
 8003fb0:	4a27      	ldr	r2, [pc, #156]	; (8004050 <UART_SetConfig+0x384>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fbe:	4498      	add	r8, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	f04f 0600 	mov.w	r6, #0
 8003fc8:	46a9      	mov	r9, r5
 8003fca:	46b2      	mov	sl, r6
 8003fcc:	eb19 0309 	adds.w	r3, r9, r9
 8003fd0:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd4:	4699      	mov	r9, r3
 8003fd6:	46a2      	mov	sl, r4
 8003fd8:	eb19 0905 	adds.w	r9, r9, r5
 8003fdc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fe0:	f04f 0100 	mov.w	r1, #0
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ff0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff4:	4689      	mov	r9, r1
 8003ff6:	4692      	mov	sl, r2
 8003ff8:	eb19 0005 	adds.w	r0, r9, r5
 8003ffc:	eb4a 0106 	adc.w	r1, sl, r6
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	461d      	mov	r5, r3
 8004006:	f04f 0600 	mov.w	r6, #0
 800400a:	196b      	adds	r3, r5, r5
 800400c:	eb46 0406 	adc.w	r4, r6, r6
 8004010:	461a      	mov	r2, r3
 8004012:	4623      	mov	r3, r4
 8004014:	f7fc faf8 	bl	8000608 <__aeabi_uldivmod>
 8004018:	4603      	mov	r3, r0
 800401a:	460c      	mov	r4, r1
 800401c:	461a      	mov	r2, r3
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <UART_SetConfig+0x384>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	; 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	3332      	adds	r3, #50	; 0x32
 8004032:	4a07      	ldr	r2, [pc, #28]	; (8004050 <UART_SetConfig+0x384>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 0207 	and.w	r2, r3, #7
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4442      	add	r2, r8
 8004044:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004046:	e1b2      	b.n	80043ae <UART_SetConfig+0x6e2>
 8004048:	40011000 	.word	0x40011000
 800404c:	40011400 	.word	0x40011400
 8004050:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4ad7      	ldr	r2, [pc, #860]	; (80043b8 <UART_SetConfig+0x6ec>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d005      	beq.n	800406a <UART_SetConfig+0x39e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4ad6      	ldr	r2, [pc, #856]	; (80043bc <UART_SetConfig+0x6f0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f040 80d1 	bne.w	800420c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800406a:	f7fe fefb 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 800406e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	469a      	mov	sl, r3
 8004074:	f04f 0b00 	mov.w	fp, #0
 8004078:	46d0      	mov	r8, sl
 800407a:	46d9      	mov	r9, fp
 800407c:	eb18 0308 	adds.w	r3, r8, r8
 8004080:	eb49 0409 	adc.w	r4, r9, r9
 8004084:	4698      	mov	r8, r3
 8004086:	46a1      	mov	r9, r4
 8004088:	eb18 080a 	adds.w	r8, r8, sl
 800408c:	eb49 090b 	adc.w	r9, r9, fp
 8004090:	f04f 0100 	mov.w	r1, #0
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800409c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040a4:	4688      	mov	r8, r1
 80040a6:	4691      	mov	r9, r2
 80040a8:	eb1a 0508 	adds.w	r5, sl, r8
 80040ac:	eb4b 0609 	adc.w	r6, fp, r9
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4619      	mov	r1, r3
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	f04f 0400 	mov.w	r4, #0
 80040c2:	0094      	lsls	r4, r2, #2
 80040c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040c8:	008b      	lsls	r3, r1, #2
 80040ca:	461a      	mov	r2, r3
 80040cc:	4623      	mov	r3, r4
 80040ce:	4628      	mov	r0, r5
 80040d0:	4631      	mov	r1, r6
 80040d2:	f7fc fa99 	bl	8000608 <__aeabi_uldivmod>
 80040d6:	4603      	mov	r3, r0
 80040d8:	460c      	mov	r4, r1
 80040da:	461a      	mov	r2, r3
 80040dc:	4bb8      	ldr	r3, [pc, #736]	; (80043c0 <UART_SetConfig+0x6f4>)
 80040de:	fba3 2302 	umull	r2, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	469b      	mov	fp, r3
 80040ec:	f04f 0c00 	mov.w	ip, #0
 80040f0:	46d9      	mov	r9, fp
 80040f2:	46e2      	mov	sl, ip
 80040f4:	eb19 0309 	adds.w	r3, r9, r9
 80040f8:	eb4a 040a 	adc.w	r4, sl, sl
 80040fc:	4699      	mov	r9, r3
 80040fe:	46a2      	mov	sl, r4
 8004100:	eb19 090b 	adds.w	r9, r9, fp
 8004104:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004108:	f04f 0100 	mov.w	r1, #0
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004114:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004118:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800411c:	4689      	mov	r9, r1
 800411e:	4692      	mov	sl, r2
 8004120:	eb1b 0509 	adds.w	r5, fp, r9
 8004124:	eb4c 060a 	adc.w	r6, ip, sl
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4619      	mov	r1, r3
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	f04f 0400 	mov.w	r4, #0
 800413a:	0094      	lsls	r4, r2, #2
 800413c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004140:	008b      	lsls	r3, r1, #2
 8004142:	461a      	mov	r2, r3
 8004144:	4623      	mov	r3, r4
 8004146:	4628      	mov	r0, r5
 8004148:	4631      	mov	r1, r6
 800414a:	f7fc fa5d 	bl	8000608 <__aeabi_uldivmod>
 800414e:	4603      	mov	r3, r0
 8004150:	460c      	mov	r4, r1
 8004152:	461a      	mov	r2, r3
 8004154:	4b9a      	ldr	r3, [pc, #616]	; (80043c0 <UART_SetConfig+0x6f4>)
 8004156:	fba3 1302 	umull	r1, r3, r3, r2
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	2164      	movs	r1, #100	; 0x64
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	3332      	adds	r3, #50	; 0x32
 8004168:	4a95      	ldr	r2, [pc, #596]	; (80043c0 <UART_SetConfig+0x6f4>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004174:	4498      	add	r8, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	469b      	mov	fp, r3
 800417a:	f04f 0c00 	mov.w	ip, #0
 800417e:	46d9      	mov	r9, fp
 8004180:	46e2      	mov	sl, ip
 8004182:	eb19 0309 	adds.w	r3, r9, r9
 8004186:	eb4a 040a 	adc.w	r4, sl, sl
 800418a:	4699      	mov	r9, r3
 800418c:	46a2      	mov	sl, r4
 800418e:	eb19 090b 	adds.w	r9, r9, fp
 8004192:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004196:	f04f 0100 	mov.w	r1, #0
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041aa:	4689      	mov	r9, r1
 80041ac:	4692      	mov	sl, r2
 80041ae:	eb1b 0509 	adds.w	r5, fp, r9
 80041b2:	eb4c 060a 	adc.w	r6, ip, sl
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4619      	mov	r1, r3
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f04f 0400 	mov.w	r4, #0
 80041c8:	0094      	lsls	r4, r2, #2
 80041ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041ce:	008b      	lsls	r3, r1, #2
 80041d0:	461a      	mov	r2, r3
 80041d2:	4623      	mov	r3, r4
 80041d4:	4628      	mov	r0, r5
 80041d6:	4631      	mov	r1, r6
 80041d8:	f7fc fa16 	bl	8000608 <__aeabi_uldivmod>
 80041dc:	4603      	mov	r3, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	461a      	mov	r2, r3
 80041e2:	4b77      	ldr	r3, [pc, #476]	; (80043c0 <UART_SetConfig+0x6f4>)
 80041e4:	fba3 1302 	umull	r1, r3, r3, r2
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	2164      	movs	r1, #100	; 0x64
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	3332      	adds	r3, #50	; 0x32
 80041f6:	4a72      	ldr	r2, [pc, #456]	; (80043c0 <UART_SetConfig+0x6f4>)
 80041f8:	fba2 2303 	umull	r2, r3, r2, r3
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	f003 020f 	and.w	r2, r3, #15
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4442      	add	r2, r8
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	e0d0      	b.n	80043ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7fe fe16 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8004210:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	469a      	mov	sl, r3
 8004216:	f04f 0b00 	mov.w	fp, #0
 800421a:	46d0      	mov	r8, sl
 800421c:	46d9      	mov	r9, fp
 800421e:	eb18 0308 	adds.w	r3, r8, r8
 8004222:	eb49 0409 	adc.w	r4, r9, r9
 8004226:	4698      	mov	r8, r3
 8004228:	46a1      	mov	r9, r4
 800422a:	eb18 080a 	adds.w	r8, r8, sl
 800422e:	eb49 090b 	adc.w	r9, r9, fp
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800423e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004242:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004246:	4688      	mov	r8, r1
 8004248:	4691      	mov	r9, r2
 800424a:	eb1a 0508 	adds.w	r5, sl, r8
 800424e:	eb4b 0609 	adc.w	r6, fp, r9
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4619      	mov	r1, r3
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	f04f 0400 	mov.w	r4, #0
 8004264:	0094      	lsls	r4, r2, #2
 8004266:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800426a:	008b      	lsls	r3, r1, #2
 800426c:	461a      	mov	r2, r3
 800426e:	4623      	mov	r3, r4
 8004270:	4628      	mov	r0, r5
 8004272:	4631      	mov	r1, r6
 8004274:	f7fc f9c8 	bl	8000608 <__aeabi_uldivmod>
 8004278:	4603      	mov	r3, r0
 800427a:	460c      	mov	r4, r1
 800427c:	461a      	mov	r2, r3
 800427e:	4b50      	ldr	r3, [pc, #320]	; (80043c0 <UART_SetConfig+0x6f4>)
 8004280:	fba3 2302 	umull	r2, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	469b      	mov	fp, r3
 800428e:	f04f 0c00 	mov.w	ip, #0
 8004292:	46d9      	mov	r9, fp
 8004294:	46e2      	mov	sl, ip
 8004296:	eb19 0309 	adds.w	r3, r9, r9
 800429a:	eb4a 040a 	adc.w	r4, sl, sl
 800429e:	4699      	mov	r9, r3
 80042a0:	46a2      	mov	sl, r4
 80042a2:	eb19 090b 	adds.w	r9, r9, fp
 80042a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042be:	4689      	mov	r9, r1
 80042c0:	4692      	mov	sl, r2
 80042c2:	eb1b 0509 	adds.w	r5, fp, r9
 80042c6:	eb4c 060a 	adc.w	r6, ip, sl
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4619      	mov	r1, r3
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	f04f 0400 	mov.w	r4, #0
 80042dc:	0094      	lsls	r4, r2, #2
 80042de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042e2:	008b      	lsls	r3, r1, #2
 80042e4:	461a      	mov	r2, r3
 80042e6:	4623      	mov	r3, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	4631      	mov	r1, r6
 80042ec:	f7fc f98c 	bl	8000608 <__aeabi_uldivmod>
 80042f0:	4603      	mov	r3, r0
 80042f2:	460c      	mov	r4, r1
 80042f4:	461a      	mov	r2, r3
 80042f6:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <UART_SetConfig+0x6f4>)
 80042f8:	fba3 1302 	umull	r1, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2164      	movs	r1, #100	; 0x64
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	3332      	adds	r3, #50	; 0x32
 800430a:	4a2d      	ldr	r2, [pc, #180]	; (80043c0 <UART_SetConfig+0x6f4>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004316:	4498      	add	r8, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	469b      	mov	fp, r3
 800431c:	f04f 0c00 	mov.w	ip, #0
 8004320:	46d9      	mov	r9, fp
 8004322:	46e2      	mov	sl, ip
 8004324:	eb19 0309 	adds.w	r3, r9, r9
 8004328:	eb4a 040a 	adc.w	r4, sl, sl
 800432c:	4699      	mov	r9, r3
 800432e:	46a2      	mov	sl, r4
 8004330:	eb19 090b 	adds.w	r9, r9, fp
 8004334:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004344:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004348:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800434c:	4689      	mov	r9, r1
 800434e:	4692      	mov	sl, r2
 8004350:	eb1b 0509 	adds.w	r5, fp, r9
 8004354:	eb4c 060a 	adc.w	r6, ip, sl
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4619      	mov	r1, r3
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	f04f 0400 	mov.w	r4, #0
 800436a:	0094      	lsls	r4, r2, #2
 800436c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004370:	008b      	lsls	r3, r1, #2
 8004372:	461a      	mov	r2, r3
 8004374:	4623      	mov	r3, r4
 8004376:	4628      	mov	r0, r5
 8004378:	4631      	mov	r1, r6
 800437a:	f7fc f945 	bl	8000608 <__aeabi_uldivmod>
 800437e:	4603      	mov	r3, r0
 8004380:	460c      	mov	r4, r1
 8004382:	461a      	mov	r2, r3
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <UART_SetConfig+0x6f4>)
 8004386:	fba3 1302 	umull	r1, r3, r3, r2
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2164      	movs	r1, #100	; 0x64
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	; 0x32
 8004398:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <UART_SetConfig+0x6f4>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 020f 	and.w	r2, r3, #15
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4442      	add	r2, r8
 80043aa:	609a      	str	r2, [r3, #8]
}
 80043ac:	e7ff      	b.n	80043ae <UART_SetConfig+0x6e2>
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b8:	40011000 	.word	0x40011000
 80043bc:	40011400 	.word	0x40011400
 80043c0:	51eb851f 	.word	0x51eb851f

080043c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80043d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043d6:	2b84      	cmp	r3, #132	; 0x84
 80043d8:	d005      	beq.n	80043e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80043da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	3303      	adds	r3, #3
 80043e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80043e6:	68fb      	ldr	r3, [r7, #12]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80043f8:	f000 fada 	bl	80049b0 <vTaskStartScheduler>
  
  return osOK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	bd80      	pop	{r7, pc}

08004402 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004404:	b089      	sub	sp, #36	; 0x24
 8004406:	af04      	add	r7, sp, #16
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <osThreadCreate+0x54>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01c      	beq.n	8004456 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685c      	ldr	r4, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681d      	ldr	r5, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691e      	ldr	r6, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff ffc8 	bl	80043c4 <makeFreeRtosPriority>
 8004434:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800443e:	9202      	str	r2, [sp, #8]
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	9100      	str	r1, [sp, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4632      	mov	r2, r6
 8004448:	4629      	mov	r1, r5
 800444a:	4620      	mov	r0, r4
 800444c:	f000 f8ed 	bl	800462a <xTaskCreateStatic>
 8004450:	4603      	mov	r3, r0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e01c      	b.n	8004490 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685c      	ldr	r4, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004462:	b29e      	uxth	r6, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff ffaa 	bl	80043c4 <makeFreeRtosPriority>
 8004470:	4602      	mov	r2, r0
 8004472:	f107 030c 	add.w	r3, r7, #12
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	9200      	str	r2, [sp, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	4632      	mov	r2, r6
 800447e:	4629      	mov	r1, r5
 8004480:	4620      	mov	r0, r4
 8004482:	f000 f92c 	bl	80046de <xTaskCreate>
 8004486:	4603      	mov	r3, r0
 8004488:	2b01      	cmp	r3, #1
 800448a:	d001      	beq.n	8004490 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004490:	68fb      	ldr	r3, [r7, #12]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800449a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <osDelay+0x16>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	e000      	b.n	80044b2 <osDelay+0x18>
 80044b0:	2301      	movs	r3, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fa48 	bl	8004948 <vTaskDelay>
  
  return osOK;
 80044b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f103 0208 	add.w	r2, r3, #8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f04f 32ff 	mov.w	r2, #4294967295
 80044da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f103 0208 	add.w	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f103 0208 	add.w	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d103      	bne.n	8004584 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e00c      	b.n	800459e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3308      	adds	r3, #8
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e002      	b.n	8004592 <vListInsert+0x2e>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	429a      	cmp	r2, r3
 800459c:	d2f6      	bcs.n	800458c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6892      	ldr	r2, [r2, #8]
 80045ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6852      	ldr	r2, [r2, #4]
 80045f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d103      	bne.n	800460a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	1e5a      	subs	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800462a:	b580      	push	{r7, lr}
 800462c:	b08e      	sub	sp, #56	; 0x38
 800462e:	af04      	add	r7, sp, #16
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	e7fe      	b.n	8004650 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <xTaskCreateStatic+0x42>
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	e7fe      	b.n	800466a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800466c:	2354      	movs	r3, #84	; 0x54
 800466e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b54      	cmp	r3, #84	; 0x54
 8004674:	d009      	beq.n	800468a <xTaskCreateStatic+0x60>
 8004676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	e7fe      	b.n	8004688 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800468a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01e      	beq.n	80046d0 <xTaskCreateStatic+0xa6>
 8004692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01b      	beq.n	80046d0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046aa:	2300      	movs	r3, #0
 80046ac:	9303      	str	r3, [sp, #12]
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	f107 0314 	add.w	r3, r7, #20
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f850 	bl	8004768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ca:	f000 f8d3 	bl	8004874 <prvAddNewTaskToReadyList>
 80046ce:	e001      	b.n	80046d4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046d4:	697b      	ldr	r3, [r7, #20]
	}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3728      	adds	r7, #40	; 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b08c      	sub	sp, #48	; 0x30
 80046e2:	af04      	add	r7, sp, #16
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 feae 	bl	8005454 <pvPortMalloc>
 80046f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004700:	2054      	movs	r0, #84	; 0x54
 8004702:	f000 fea7 	bl	8005454 <pvPortMalloc>
 8004706:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
 8004714:	e005      	b.n	8004722 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f000 ff5e 	bl	80055d8 <vPortFree>
 800471c:	e001      	b.n	8004722 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d017      	beq.n	8004758 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004730:	88fa      	ldrh	r2, [r7, #6]
 8004732:	2300      	movs	r3, #0
 8004734:	9303      	str	r3, [sp, #12]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f80e 	bl	8004768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800474c:	69f8      	ldr	r0, [r7, #28]
 800474e:	f000 f891 	bl	8004874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004752:	2301      	movs	r3, #1
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e002      	b.n	800475e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004758:	f04f 33ff 	mov.w	r3, #4294967295
 800475c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800475e:	69bb      	ldr	r3, [r7, #24]
	}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004780:	3b01      	subs	r3, #1
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f023 0307 	bic.w	r3, r3, #7
 800478e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <prvInitialiseNewTask+0x46>
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e7fe      	b.n	80047ac <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01f      	beq.n	80047f4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	e012      	b.n	80047e0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	7819      	ldrb	r1, [r3, #0]
 80047c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	3334      	adds	r3, #52	; 0x34
 80047ca:	460a      	mov	r2, r1
 80047cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3301      	adds	r3, #1
 80047de:	61fb      	str	r3, [r7, #28]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b0f      	cmp	r3, #15
 80047e4:	d9e9      	bls.n	80047ba <prvInitialiseNewTask+0x52>
 80047e6:	e000      	b.n	80047ea <prvInitialiseNewTask+0x82>
			{
				break;
 80047e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f2:	e003      	b.n	80047fc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	2b06      	cmp	r3, #6
 8004800:	d901      	bls.n	8004806 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004802:	2306      	movs	r3, #6
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2200      	movs	r2, #0
 8004816:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	3304      	adds	r3, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fe70 	bl	8004502 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	3318      	adds	r3, #24
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fe6b 	bl	8004502 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004830:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	f1c3 0207 	rsb	r2, r3, #7
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004840:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	2200      	movs	r2, #0
 8004846:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	69b8      	ldr	r0, [r7, #24]
 8004856:	f000 fbfd 	bl	8005054 <pxPortInitialiseStack>
 800485a:	4602      	mov	r2, r0
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800486c:	bf00      	nop
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800487c:	f000 fd0e 	bl	800529c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004880:	4b2a      	ldr	r3, [pc, #168]	; (800492c <prvAddNewTaskToReadyList+0xb8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	4a29      	ldr	r2, [pc, #164]	; (800492c <prvAddNewTaskToReadyList+0xb8>)
 8004888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800488a:	4b29      	ldr	r3, [pc, #164]	; (8004930 <prvAddNewTaskToReadyList+0xbc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004892:	4a27      	ldr	r2, [pc, #156]	; (8004930 <prvAddNewTaskToReadyList+0xbc>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004898:	4b24      	ldr	r3, [pc, #144]	; (800492c <prvAddNewTaskToReadyList+0xb8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d110      	bne.n	80048c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048a0:	f000 fab8 	bl	8004e14 <prvInitialiseTaskLists>
 80048a4:	e00d      	b.n	80048c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048a6:	4b23      	ldr	r3, [pc, #140]	; (8004934 <prvAddNewTaskToReadyList+0xc0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <prvAddNewTaskToReadyList+0xbc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d802      	bhi.n	80048c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048bc:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <prvAddNewTaskToReadyList+0xbc>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048c2:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <prvAddNewTaskToReadyList+0xc4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <prvAddNewTaskToReadyList+0xc4>)
 80048ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	2201      	movs	r2, #1
 80048d2:	409a      	lsls	r2, r3
 80048d4:	4b19      	ldr	r3, [pc, #100]	; (800493c <prvAddNewTaskToReadyList+0xc8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4313      	orrs	r3, r2
 80048da:	4a18      	ldr	r2, [pc, #96]	; (800493c <prvAddNewTaskToReadyList+0xc8>)
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4a15      	ldr	r2, [pc, #84]	; (8004940 <prvAddNewTaskToReadyList+0xcc>)
 80048ec:	441a      	add	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7ff fe11 	bl	800451c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048fa:	f000 fcfd 	bl	80052f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048fe:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <prvAddNewTaskToReadyList+0xc0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00e      	beq.n	8004924 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <prvAddNewTaskToReadyList+0xbc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	429a      	cmp	r2, r3
 8004912:	d207      	bcs.n	8004924 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <prvAddNewTaskToReadyList+0xd0>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000408 	.word	0x20000408
 8004930:	20000308 	.word	0x20000308
 8004934:	20000414 	.word	0x20000414
 8004938:	20000424 	.word	0x20000424
 800493c:	20000410 	.word	0x20000410
 8004940:	2000030c 	.word	0x2000030c
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d016      	beq.n	8004988 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800495a:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <vTaskDelay+0x60>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <vTaskDelay+0x2e>
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	e7fe      	b.n	8004974 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004976:	f000 f879 	bl	8004a6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800497a:	2100      	movs	r1, #0
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fb03 	bl	8004f88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004982:	f000 f881 	bl	8004a88 <xTaskResumeAll>
 8004986:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800498e:	4b07      	ldr	r3, [pc, #28]	; (80049ac <vTaskDelay+0x64>)
 8004990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000430 	.word	0x20000430
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049be:	463a      	mov	r2, r7
 80049c0:	1d39      	adds	r1, r7, #4
 80049c2:	f107 0308 	add.w	r3, r7, #8
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fc f944 	bl	8000c54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	9202      	str	r2, [sp, #8]
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	2300      	movs	r3, #0
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2300      	movs	r3, #0
 80049dc:	460a      	mov	r2, r1
 80049de:	491d      	ldr	r1, [pc, #116]	; (8004a54 <vTaskStartScheduler+0xa4>)
 80049e0:	481d      	ldr	r0, [pc, #116]	; (8004a58 <vTaskStartScheduler+0xa8>)
 80049e2:	f7ff fe22 	bl	800462a <xTaskCreateStatic>
 80049e6:	4602      	mov	r2, r0
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <vTaskStartScheduler+0xac>)
 80049ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <vTaskStartScheduler+0xac>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049f4:	2301      	movs	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e001      	b.n	80049fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d115      	bne.n	8004a30 <vTaskStartScheduler+0x80>
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a16:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <vTaskStartScheduler+0xb0>)
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <vTaskStartScheduler+0xb4>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a24:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <vTaskStartScheduler+0xb8>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a2a:	f000 fb99 	bl	8005160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a2e:	e00d      	b.n	8004a4c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d109      	bne.n	8004a4c <vTaskStartScheduler+0x9c>
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e7fe      	b.n	8004a4a <vTaskStartScheduler+0x9a>
}
 8004a4c:	bf00      	nop
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	08006880 	.word	0x08006880
 8004a58:	08004de5 	.word	0x08004de5
 8004a5c:	2000042c 	.word	0x2000042c
 8004a60:	20000428 	.word	0x20000428
 8004a64:	20000414 	.word	0x20000414
 8004a68:	2000040c 	.word	0x2000040c

08004a6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a70:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <vTaskSuspendAll+0x18>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	4a03      	ldr	r2, [pc, #12]	; (8004a84 <vTaskSuspendAll+0x18>)
 8004a78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a7a:	bf00      	nop
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	20000430 	.word	0x20000430

08004a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a96:	4b41      	ldr	r3, [pc, #260]	; (8004b9c <xTaskResumeAll+0x114>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <xTaskResumeAll+0x2a>
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	e7fe      	b.n	8004ab0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ab2:	f000 fbf3 	bl	800529c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ab6:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <xTaskResumeAll+0x114>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	4a37      	ldr	r2, [pc, #220]	; (8004b9c <xTaskResumeAll+0x114>)
 8004abe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <xTaskResumeAll+0x114>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d161      	bne.n	8004b8c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <xTaskResumeAll+0x118>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d05d      	beq.n	8004b8c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ad0:	e02e      	b.n	8004b30 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad2:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <xTaskResumeAll+0x11c>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3318      	adds	r3, #24
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fd79 	bl	80045d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fd74 	bl	80045d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	2201      	movs	r2, #1
 8004af4:	409a      	lsls	r2, r3
 8004af6:	4b2c      	ldr	r3, [pc, #176]	; (8004ba8 <xTaskResumeAll+0x120>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <xTaskResumeAll+0x120>)
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4a27      	ldr	r2, [pc, #156]	; (8004bac <xTaskResumeAll+0x124>)
 8004b0e:	441a      	add	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7ff fd00 	bl	800451c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <xTaskResumeAll+0x128>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004b2a:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <xTaskResumeAll+0x12c>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b30:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <xTaskResumeAll+0x11c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1cc      	bne.n	8004ad2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b3e:	f000 fa03 	bl	8004f48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b42:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <xTaskResumeAll+0x130>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d010      	beq.n	8004b70 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b4e:	f000 f837 	bl	8004bc0 <xTaskIncrementTick>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004b58:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <xTaskResumeAll+0x12c>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f1      	bne.n	8004b4e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <xTaskResumeAll+0x130>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b70:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <xTaskResumeAll+0x12c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <xTaskResumeAll+0x134>)
 8004b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b8c:	f000 fbb4 	bl	80052f8 <vPortExitCritical>

	return xAlreadyYielded;
 8004b90:	68bb      	ldr	r3, [r7, #8]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000430 	.word	0x20000430
 8004ba0:	20000408 	.word	0x20000408
 8004ba4:	200003c8 	.word	0x200003c8
 8004ba8:	20000410 	.word	0x20000410
 8004bac:	2000030c 	.word	0x2000030c
 8004bb0:	20000308 	.word	0x20000308
 8004bb4:	2000041c 	.word	0x2000041c
 8004bb8:	20000418 	.word	0x20000418
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bca:	4b4e      	ldr	r3, [pc, #312]	; (8004d04 <xTaskIncrementTick+0x144>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f040 8087 	bne.w	8004ce2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bd4:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <xTaskIncrementTick+0x148>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bdc:	4a4a      	ldr	r2, [pc, #296]	; (8004d08 <xTaskIncrementTick+0x148>)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11f      	bne.n	8004c28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004be8:	4b48      	ldr	r3, [pc, #288]	; (8004d0c <xTaskIncrementTick+0x14c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <xTaskIncrementTick+0x46>
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	e7fe      	b.n	8004c04 <xTaskIncrementTick+0x44>
 8004c06:	4b41      	ldr	r3, [pc, #260]	; (8004d0c <xTaskIncrementTick+0x14c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	4b40      	ldr	r3, [pc, #256]	; (8004d10 <xTaskIncrementTick+0x150>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a3e      	ldr	r2, [pc, #248]	; (8004d0c <xTaskIncrementTick+0x14c>)
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4a3e      	ldr	r2, [pc, #248]	; (8004d10 <xTaskIncrementTick+0x150>)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <xTaskIncrementTick+0x154>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	4a3c      	ldr	r2, [pc, #240]	; (8004d14 <xTaskIncrementTick+0x154>)
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	f000 f990 	bl	8004f48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c28:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <xTaskIncrementTick+0x158>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d348      	bcc.n	8004cc4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c32:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <xTaskIncrementTick+0x14c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c3c:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <xTaskIncrementTick+0x158>)
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c42:	601a      	str	r2, [r3, #0]
					break;
 8004c44:	e03e      	b.n	8004cc4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c46:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <xTaskIncrementTick+0x14c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d203      	bcs.n	8004c66 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c5e:	4a2e      	ldr	r2, [pc, #184]	; (8004d18 <xTaskIncrementTick+0x158>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c64:	e02e      	b.n	8004cc4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fcb3 	bl	80045d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	3318      	adds	r3, #24
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fcaa 	bl	80045d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	2201      	movs	r2, #1
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <xTaskIncrementTick+0x15c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	4a22      	ldr	r2, [pc, #136]	; (8004d1c <xTaskIncrementTick+0x15c>)
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <xTaskIncrementTick+0x160>)
 8004ca2:	441a      	add	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f7ff fc36 	bl	800451c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <xTaskIncrementTick+0x164>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3b9      	bcc.n	8004c32 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cc2:	e7b6      	b.n	8004c32 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cc4:	4b17      	ldr	r3, [pc, #92]	; (8004d24 <xTaskIncrementTick+0x164>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4915      	ldr	r1, [pc, #84]	; (8004d20 <xTaskIncrementTick+0x160>)
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d907      	bls.n	8004cec <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e004      	b.n	8004cec <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <xTaskIncrementTick+0x168>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	4a0f      	ldr	r2, [pc, #60]	; (8004d28 <xTaskIncrementTick+0x168>)
 8004cea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <xTaskIncrementTick+0x16c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cf8:	697b      	ldr	r3, [r7, #20]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000430 	.word	0x20000430
 8004d08:	2000040c 	.word	0x2000040c
 8004d0c:	200003c0 	.word	0x200003c0
 8004d10:	200003c4 	.word	0x200003c4
 8004d14:	20000420 	.word	0x20000420
 8004d18:	20000428 	.word	0x20000428
 8004d1c:	20000410 	.word	0x20000410
 8004d20:	2000030c 	.word	0x2000030c
 8004d24:	20000308 	.word	0x20000308
 8004d28:	20000418 	.word	0x20000418
 8004d2c:	2000041c 	.word	0x2000041c

08004d30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d36:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <vTaskSwitchContext+0xa0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d3e:	4b25      	ldr	r3, [pc, #148]	; (8004dd4 <vTaskSwitchContext+0xa4>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d44:	e03e      	b.n	8004dc4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <vTaskSwitchContext+0xa4>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4c:	4b22      	ldr	r3, [pc, #136]	; (8004dd8 <vTaskSwitchContext+0xa8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	fab3 f383 	clz	r3, r3
 8004d58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d5a:	7afb      	ldrb	r3, [r7, #11]
 8004d5c:	f1c3 031f 	rsb	r3, r3, #31
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	491e      	ldr	r1, [pc, #120]	; (8004ddc <vTaskSwitchContext+0xac>)
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d109      	bne.n	8004d8a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	e7fe      	b.n	8004d88 <vTaskSwitchContext+0x58>
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <vTaskSwitchContext+0xac>)
 8004d96:	4413      	add	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	605a      	str	r2, [r3, #4]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	3308      	adds	r3, #8
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d104      	bne.n	8004dba <vTaskSwitchContext+0x8a>
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4a07      	ldr	r2, [pc, #28]	; (8004de0 <vTaskSwitchContext+0xb0>)
 8004dc2:	6013      	str	r3, [r2, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	20000430 	.word	0x20000430
 8004dd4:	2000041c 	.word	0x2000041c
 8004dd8:	20000410 	.word	0x20000410
 8004ddc:	2000030c 	.word	0x2000030c
 8004de0:	20000308 	.word	0x20000308

08004de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dec:	f000 f852 	bl	8004e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <prvIdleTask+0x28>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d9f9      	bls.n	8004dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <prvIdleTask+0x2c>)
 8004dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e08:	e7f0      	b.n	8004dec <prvIdleTask+0x8>
 8004e0a:	bf00      	nop
 8004e0c:	2000030c 	.word	0x2000030c
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	e00c      	b.n	8004e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <prvInitialiseTaskLists+0x60>)
 8004e2c:	4413      	add	r3, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fb47 	bl	80044c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3301      	adds	r3, #1
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d9ef      	bls.n	8004e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e40:	480d      	ldr	r0, [pc, #52]	; (8004e78 <prvInitialiseTaskLists+0x64>)
 8004e42:	f7ff fb3e 	bl	80044c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e46:	480d      	ldr	r0, [pc, #52]	; (8004e7c <prvInitialiseTaskLists+0x68>)
 8004e48:	f7ff fb3b 	bl	80044c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e4c:	480c      	ldr	r0, [pc, #48]	; (8004e80 <prvInitialiseTaskLists+0x6c>)
 8004e4e:	f7ff fb38 	bl	80044c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e52:	480c      	ldr	r0, [pc, #48]	; (8004e84 <prvInitialiseTaskLists+0x70>)
 8004e54:	f7ff fb35 	bl	80044c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e58:	480b      	ldr	r0, [pc, #44]	; (8004e88 <prvInitialiseTaskLists+0x74>)
 8004e5a:	f7ff fb32 	bl	80044c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <prvInitialiseTaskLists+0x78>)
 8004e60:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <prvInitialiseTaskLists+0x64>)
 8004e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <prvInitialiseTaskLists+0x7c>)
 8004e66:	4a05      	ldr	r2, [pc, #20]	; (8004e7c <prvInitialiseTaskLists+0x68>)
 8004e68:	601a      	str	r2, [r3, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2000030c 	.word	0x2000030c
 8004e78:	20000398 	.word	0x20000398
 8004e7c:	200003ac 	.word	0x200003ac
 8004e80:	200003c8 	.word	0x200003c8
 8004e84:	200003dc 	.word	0x200003dc
 8004e88:	200003f4 	.word	0x200003f4
 8004e8c:	200003c0 	.word	0x200003c0
 8004e90:	200003c4 	.word	0x200003c4

08004e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e9a:	e019      	b.n	8004ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e9c:	f000 f9fe 	bl	800529c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <prvCheckTasksWaitingTermination+0x4c>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fb92 	bl	80045d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <prvCheckTasksWaitingTermination+0x50>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <prvCheckTasksWaitingTermination+0x50>)
 8004eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <prvCheckTasksWaitingTermination+0x54>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <prvCheckTasksWaitingTermination+0x54>)
 8004ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ec6:	f000 fa17 	bl	80052f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f80e 	bl	8004eec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <prvCheckTasksWaitingTermination+0x54>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e1      	bne.n	8004e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	200003dc 	.word	0x200003dc
 8004ee4:	20000408 	.word	0x20000408
 8004ee8:	200003f0 	.word	0x200003f0

08004eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d108      	bne.n	8004f10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fb68 	bl	80055d8 <vPortFree>
				vPortFree( pxTCB );
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fb65 	bl	80055d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f0e:	e017      	b.n	8004f40 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d103      	bne.n	8004f22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fb5c 	bl	80055d8 <vPortFree>
	}
 8004f20:	e00e      	b.n	8004f40 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d009      	beq.n	8004f40 <prvDeleteTCB+0x54>
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e7fe      	b.n	8004f3e <prvDeleteTCB+0x52>
	}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <prvResetNextTaskUnblockTime+0x38>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <prvResetNextTaskUnblockTime+0x3c>)
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f60:	e008      	b.n	8004f74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <prvResetNextTaskUnblockTime+0x38>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <prvResetNextTaskUnblockTime+0x3c>)
 8004f72:	6013      	str	r3, [r2, #0]
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	200003c0 	.word	0x200003c0
 8004f84:	20000428 	.word	0x20000428

08004f88 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f92:	4b29      	ldr	r3, [pc, #164]	; (8005038 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fb19 	bl	80045d6 <uxListRemove>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43da      	mvns	r2, r3
 8004fb8:	4b21      	ldr	r3, [pc, #132]	; (8005040 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	4a20      	ldr	r2, [pc, #128]	; (8005040 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d10a      	bne.n	8004fe0 <prvAddCurrentTaskToDelayedList+0x58>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd0:	4b1a      	ldr	r3, [pc, #104]	; (800503c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	481a      	ldr	r0, [pc, #104]	; (8005044 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fda:	f7ff fa9f 	bl	800451c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fde:	e026      	b.n	800502e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fe8:	4b14      	ldr	r3, [pc, #80]	; (800503c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d209      	bcs.n	800500c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff8:	4b13      	ldr	r3, [pc, #76]	; (8005048 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3304      	adds	r3, #4
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7ff faad 	bl	8004564 <vListInsert>
}
 800500a:	e010      	b.n	800502e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <prvAddCurrentTaskToDelayedList+0xc4>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3304      	adds	r3, #4
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f7ff faa3 	bl	8004564 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800501e:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	429a      	cmp	r2, r3
 8005026:	d202      	bcs.n	800502e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005028:	4a09      	ldr	r2, [pc, #36]	; (8005050 <prvAddCurrentTaskToDelayedList+0xc8>)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	6013      	str	r3, [r2, #0]
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	2000040c 	.word	0x2000040c
 800503c:	20000308 	.word	0x20000308
 8005040:	20000410 	.word	0x20000410
 8005044:	200003f4 	.word	0x200003f4
 8005048:	200003c4 	.word	0x200003c4
 800504c:	200003c0 	.word	0x200003c0
 8005050:	20000428 	.word	0x20000428

08005054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3b04      	subs	r3, #4
 8005064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800506c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3b04      	subs	r3, #4
 8005072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f023 0201 	bic.w	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b04      	subs	r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005084:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <pxPortInitialiseStack+0x64>)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b14      	subs	r3, #20
 800508e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3b04      	subs	r3, #4
 800509a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f06f 0202 	mvn.w	r2, #2
 80050a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3b20      	subs	r3, #32
 80050a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050aa:	68fb      	ldr	r3, [r7, #12]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	080050bd 	.word	0x080050bd

080050bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <prvTaskExitError+0x50>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d009      	beq.n	80050e4 <prvTaskExitError+0x28>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	e7fe      	b.n	80050e2 <prvTaskExitError+0x26>
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050f6:	bf00      	nop
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0fc      	beq.n	80050f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	2000000c 	.word	0x2000000c

08005110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <pxCurrentTCBConst2>)
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	6808      	ldr	r0, [r1, #0]
 8005116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	f380 8809 	msr	PSP, r0
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8811 	msr	BASEPRI, r0
 800512a:	4770      	bx	lr
 800512c:	f3af 8000 	nop.w

08005130 <pxCurrentTCBConst2>:
 8005130:	20000308 	.word	0x20000308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop

08005138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005138:	4808      	ldr	r0, [pc, #32]	; (800515c <prvPortStartFirstTask+0x24>)
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f380 8808 	msr	MSP, r0
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8814 	msr	CONTROL, r0
 800514a:	b662      	cpsie	i
 800514c:	b661      	cpsie	f
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	df00      	svc	0
 8005158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800515a:	bf00      	nop
 800515c:	e000ed08 	.word	0xe000ed08

08005160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005166:	4b44      	ldr	r3, [pc, #272]	; (8005278 <xPortStartScheduler+0x118>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a44      	ldr	r2, [pc, #272]	; (800527c <xPortStartScheduler+0x11c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d109      	bne.n	8005184 <xPortStartScheduler+0x24>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	e7fe      	b.n	8005182 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005184:	4b3c      	ldr	r3, [pc, #240]	; (8005278 <xPortStartScheduler+0x118>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a3d      	ldr	r2, [pc, #244]	; (8005280 <xPortStartScheduler+0x120>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d109      	bne.n	80051a2 <xPortStartScheduler+0x42>
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e7fe      	b.n	80051a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051a2:	4b38      	ldr	r3, [pc, #224]	; (8005284 <xPortStartScheduler+0x124>)
 80051a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	22ff      	movs	r2, #255	; 0xff
 80051b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4b30      	ldr	r3, [pc, #192]	; (8005288 <xPortStartScheduler+0x128>)
 80051c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051ca:	4b30      	ldr	r3, [pc, #192]	; (800528c <xPortStartScheduler+0x12c>)
 80051cc:	2207      	movs	r2, #7
 80051ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051d0:	e009      	b.n	80051e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80051d2:	4b2e      	ldr	r3, [pc, #184]	; (800528c <xPortStartScheduler+0x12c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4a2c      	ldr	r2, [pc, #176]	; (800528c <xPortStartScheduler+0x12c>)
 80051da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ee:	2b80      	cmp	r3, #128	; 0x80
 80051f0:	d0ef      	beq.n	80051d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <xPortStartScheduler+0x12c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1c3 0307 	rsb	r3, r3, #7
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d009      	beq.n	8005212 <xPortStartScheduler+0xb2>
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	e7fe      	b.n	8005210 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005212:	4b1e      	ldr	r3, [pc, #120]	; (800528c <xPortStartScheduler+0x12c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	4a1c      	ldr	r2, [pc, #112]	; (800528c <xPortStartScheduler+0x12c>)
 800521a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <xPortStartScheduler+0x12c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <xPortStartScheduler+0x12c>)
 8005226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	b2da      	uxtb	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005230:	4b17      	ldr	r3, [pc, #92]	; (8005290 <xPortStartScheduler+0x130>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <xPortStartScheduler+0x130>)
 8005236:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800523a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800523c:	4b14      	ldr	r3, [pc, #80]	; (8005290 <xPortStartScheduler+0x130>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <xPortStartScheduler+0x130>)
 8005242:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005248:	f000 f8d6 	bl	80053f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800524c:	4b11      	ldr	r3, [pc, #68]	; (8005294 <xPortStartScheduler+0x134>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005252:	f000 f8f5 	bl	8005440 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <xPortStartScheduler+0x138>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <xPortStartScheduler+0x138>)
 800525c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005260:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005262:	f7ff ff69 	bl	8005138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005266:	f7ff fd63 	bl	8004d30 <vTaskSwitchContext>
	prvTaskExitError();
 800526a:	f7ff ff27 	bl	80050bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed00 	.word	0xe000ed00
 800527c:	410fc271 	.word	0x410fc271
 8005280:	410fc270 	.word	0x410fc270
 8005284:	e000e400 	.word	0xe000e400
 8005288:	20000434 	.word	0x20000434
 800528c:	20000438 	.word	0x20000438
 8005290:	e000ed20 	.word	0xe000ed20
 8005294:	2000000c 	.word	0x2000000c
 8005298:	e000ef34 	.word	0xe000ef34

0800529c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052b4:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <vPortEnterCritical+0x54>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <vPortEnterCritical+0x54>)
 80052bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <vPortEnterCritical+0x54>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10e      	bne.n	80052e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <vPortEnterCritical+0x58>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <vPortEnterCritical+0x48>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	e7fe      	b.n	80052e2 <vPortEnterCritical+0x46>
	}
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	2000000c 	.word	0x2000000c
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <vPortExitCritical+0x4c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <vPortExitCritical+0x22>
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	e7fe      	b.n	8005318 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <vPortExitCritical+0x4c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3b01      	subs	r3, #1
 8005320:	4a08      	ldr	r2, [pc, #32]	; (8005344 <vPortExitCritical+0x4c>)
 8005322:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <vPortExitCritical+0x4c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <vPortExitCritical+0x3e>
 800532c:	2300      	movs	r3, #0
 800532e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2000000c 	.word	0x2000000c
	...

08005350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005350:	f3ef 8009 	mrs	r0, PSP
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <pxCurrentTCBConst>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	f01e 0f10 	tst.w	lr, #16
 8005360:	bf08      	it	eq
 8005362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536a:	6010      	str	r0, [r2, #0]
 800536c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005374:	f380 8811 	msr	BASEPRI, r0
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f7ff fcd6 	bl	8004d30 <vTaskSwitchContext>
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f380 8811 	msr	BASEPRI, r0
 800538c:	bc09      	pop	{r0, r3}
 800538e:	6819      	ldr	r1, [r3, #0]
 8005390:	6808      	ldr	r0, [r1, #0]
 8005392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005396:	f01e 0f10 	tst.w	lr, #16
 800539a:	bf08      	it	eq
 800539c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053a0:	f380 8809 	msr	PSP, r0
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	f3af 8000 	nop.w

080053b0 <pxCurrentTCBConst>:
 80053b0:	20000308 	.word	0x20000308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053d0:	f7ff fbf6 	bl	8004bc0 <xTaskIncrementTick>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <SysTick_Handler+0x3c>)
 80053dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <vPortSetupTimerInterrupt+0x34>)
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <vPortSetupTimerInterrupt+0x38>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <vPortSetupTimerInterrupt+0x3c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <vPortSetupTimerInterrupt+0x40>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	099b      	lsrs	r3, r3, #6
 8005414:	4a09      	ldr	r2, [pc, #36]	; (800543c <vPortSetupTimerInterrupt+0x44>)
 8005416:	3b01      	subs	r3, #1
 8005418:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <vPortSetupTimerInterrupt+0x34>)
 800541c:	2207      	movs	r2, #7
 800541e:	601a      	str	r2, [r3, #0]
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	e000e010 	.word	0xe000e010
 8005430:	e000e018 	.word	0xe000e018
 8005434:	20000000 	.word	0x20000000
 8005438:	10624dd3 	.word	0x10624dd3
 800543c:	e000e014 	.word	0xe000e014

08005440 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005440:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005450 <vPortEnableVFP+0x10>
 8005444:	6801      	ldr	r1, [r0, #0]
 8005446:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800544a:	6001      	str	r1, [r0, #0]
 800544c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800544e:	bf00      	nop
 8005450:	e000ed88 	.word	0xe000ed88

08005454 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	; 0x28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005460:	f7ff fb04 	bl	8004a6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005464:	4b57      	ldr	r3, [pc, #348]	; (80055c4 <pvPortMalloc+0x170>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800546c:	f000 f90c 	bl	8005688 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005470:	4b55      	ldr	r3, [pc, #340]	; (80055c8 <pvPortMalloc+0x174>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	f040 808c 	bne.w	8005596 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01c      	beq.n	80054be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005484:	2208      	movs	r2, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	2b00      	cmp	r3, #0
 8005494:	d013      	beq.n	80054be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f023 0307 	bic.w	r3, r3, #7
 800549c:	3308      	adds	r3, #8
 800549e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <pvPortMalloc+0x6a>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	e7fe      	b.n	80054bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d068      	beq.n	8005596 <pvPortMalloc+0x142>
 80054c4:	4b41      	ldr	r3, [pc, #260]	; (80055cc <pvPortMalloc+0x178>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d863      	bhi.n	8005596 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054ce:	4b40      	ldr	r3, [pc, #256]	; (80055d0 <pvPortMalloc+0x17c>)
 80054d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <pvPortMalloc+0x17c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054d8:	e004      	b.n	80054e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d903      	bls.n	80054f6 <pvPortMalloc+0xa2>
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f1      	bne.n	80054da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054f6:	4b33      	ldr	r3, [pc, #204]	; (80055c4 <pvPortMalloc+0x170>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d04a      	beq.n	8005596 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2208      	movs	r2, #8
 8005506:	4413      	add	r3, r2
 8005508:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	1ad2      	subs	r2, r2, r3
 800551a:	2308      	movs	r3, #8
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	429a      	cmp	r2, r3
 8005520:	d91e      	bls.n	8005560 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4413      	add	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <pvPortMalloc+0xf4>
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	e7fe      	b.n	8005546 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800555a:	69b8      	ldr	r0, [r7, #24]
 800555c:	f000 f8f6 	bl	800574c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005560:	4b1a      	ldr	r3, [pc, #104]	; (80055cc <pvPortMalloc+0x178>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	4a18      	ldr	r2, [pc, #96]	; (80055cc <pvPortMalloc+0x178>)
 800556c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800556e:	4b17      	ldr	r3, [pc, #92]	; (80055cc <pvPortMalloc+0x178>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <pvPortMalloc+0x180>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d203      	bcs.n	8005582 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800557a:	4b14      	ldr	r3, [pc, #80]	; (80055cc <pvPortMalloc+0x178>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <pvPortMalloc+0x180>)
 8005580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <pvPortMalloc+0x174>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	431a      	orrs	r2, r3
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005596:	f7ff fa77 	bl	8004a88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d009      	beq.n	80055b8 <pvPortMalloc+0x164>
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	e7fe      	b.n	80055b6 <pvPortMalloc+0x162>
	return pvReturn;
 80055b8:	69fb      	ldr	r3, [r7, #28]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3728      	adds	r7, #40	; 0x28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20004044 	.word	0x20004044
 80055c8:	20004050 	.word	0x20004050
 80055cc:	20004048 	.word	0x20004048
 80055d0:	2000403c 	.word	0x2000403c
 80055d4:	2000404c 	.word	0x2000404c

080055d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d046      	beq.n	8005678 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055ea:	2308      	movs	r3, #8
 80055ec:	425b      	negs	r3, r3
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4413      	add	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4b20      	ldr	r3, [pc, #128]	; (8005680 <vPortFree+0xa8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4013      	ands	r3, r2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <vPortFree+0x42>
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e7fe      	b.n	8005618 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <vPortFree+0x5e>
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	e7fe      	b.n	8005634 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	4b11      	ldr	r3, [pc, #68]	; (8005680 <vPortFree+0xa8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d019      	beq.n	8005678 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d115      	bne.n	8005678 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <vPortFree+0xa8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	43db      	mvns	r3, r3
 8005656:	401a      	ands	r2, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800565c:	f7ff fa06 	bl	8004a6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	4b07      	ldr	r3, [pc, #28]	; (8005684 <vPortFree+0xac>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4413      	add	r3, r2
 800566a:	4a06      	ldr	r2, [pc, #24]	; (8005684 <vPortFree+0xac>)
 800566c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800566e:	6938      	ldr	r0, [r7, #16]
 8005670:	f000 f86c 	bl	800574c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005674:	f7ff fa08 	bl	8004a88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005678:	bf00      	nop
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20004050 	.word	0x20004050
 8005684:	20004048 	.word	0x20004048

08005688 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800568e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005692:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005694:	4b27      	ldr	r3, [pc, #156]	; (8005734 <prvHeapInit+0xac>)
 8005696:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3307      	adds	r3, #7
 80056a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <prvHeapInit+0xac>)
 80056b8:	4413      	add	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056c0:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <prvHeapInit+0xb0>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056c6:	4b1c      	ldr	r3, [pc, #112]	; (8005738 <prvHeapInit+0xb0>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056d4:	2208      	movs	r2, #8
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0307 	bic.w	r3, r3, #7
 80056e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a15      	ldr	r2, [pc, #84]	; (800573c <prvHeapInit+0xb4>)
 80056e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <prvHeapInit+0xb4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056f2:	4b12      	ldr	r3, [pc, #72]	; (800573c <prvHeapInit+0xb4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <prvHeapInit+0xb4>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <prvHeapInit+0xb8>)
 8005716:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <prvHeapInit+0xbc>)
 800571e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005720:	4b09      	ldr	r3, [pc, #36]	; (8005748 <prvHeapInit+0xc0>)
 8005722:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005726:	601a      	str	r2, [r3, #0]
}
 8005728:	bf00      	nop
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	2000043c 	.word	0x2000043c
 8005738:	2000403c 	.word	0x2000403c
 800573c:	20004044 	.word	0x20004044
 8005740:	2000404c 	.word	0x2000404c
 8005744:	20004048 	.word	0x20004048
 8005748:	20004050 	.word	0x20004050

0800574c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005754:	4b28      	ldr	r3, [pc, #160]	; (80057f8 <prvInsertBlockIntoFreeList+0xac>)
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e002      	b.n	8005760 <prvInsertBlockIntoFreeList+0x14>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d8f7      	bhi.n	800575a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	4413      	add	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d108      	bne.n	800578e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	441a      	add	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	441a      	add	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d118      	bne.n	80057d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4b15      	ldr	r3, [pc, #84]	; (80057fc <prvInsertBlockIntoFreeList+0xb0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d00d      	beq.n	80057ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	441a      	add	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	e008      	b.n	80057dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057ca:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <prvInsertBlockIntoFreeList+0xb0>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e003      	b.n	80057dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d002      	beq.n	80057ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	2000403c 	.word	0x2000403c
 80057fc:	20004044 	.word	0x20004044

08005800 <__errno>:
 8005800:	4b01      	ldr	r3, [pc, #4]	; (8005808 <__errno+0x8>)
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000010 	.word	0x20000010

0800580c <__libc_init_array>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4e0d      	ldr	r6, [pc, #52]	; (8005844 <__libc_init_array+0x38>)
 8005810:	4c0d      	ldr	r4, [pc, #52]	; (8005848 <__libc_init_array+0x3c>)
 8005812:	1ba4      	subs	r4, r4, r6
 8005814:	10a4      	asrs	r4, r4, #2
 8005816:	2500      	movs	r5, #0
 8005818:	42a5      	cmp	r5, r4
 800581a:	d109      	bne.n	8005830 <__libc_init_array+0x24>
 800581c:	4e0b      	ldr	r6, [pc, #44]	; (800584c <__libc_init_array+0x40>)
 800581e:	4c0c      	ldr	r4, [pc, #48]	; (8005850 <__libc_init_array+0x44>)
 8005820:	f000 ff68 	bl	80066f4 <_init>
 8005824:	1ba4      	subs	r4, r4, r6
 8005826:	10a4      	asrs	r4, r4, #2
 8005828:	2500      	movs	r5, #0
 800582a:	42a5      	cmp	r5, r4
 800582c:	d105      	bne.n	800583a <__libc_init_array+0x2e>
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005834:	4798      	blx	r3
 8005836:	3501      	adds	r5, #1
 8005838:	e7ee      	b.n	8005818 <__libc_init_array+0xc>
 800583a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800583e:	4798      	blx	r3
 8005840:	3501      	adds	r5, #1
 8005842:	e7f2      	b.n	800582a <__libc_init_array+0x1e>
 8005844:	08006940 	.word	0x08006940
 8005848:	08006940 	.word	0x08006940
 800584c:	08006940 	.word	0x08006940
 8005850:	08006944 	.word	0x08006944

08005854 <memset>:
 8005854:	4402      	add	r2, r0
 8005856:	4603      	mov	r3, r0
 8005858:	4293      	cmp	r3, r2
 800585a:	d100      	bne.n	800585e <memset+0xa>
 800585c:	4770      	bx	lr
 800585e:	f803 1b01 	strb.w	r1, [r3], #1
 8005862:	e7f9      	b.n	8005858 <memset+0x4>

08005864 <iprintf>:
 8005864:	b40f      	push	{r0, r1, r2, r3}
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <iprintf+0x2c>)
 8005868:	b513      	push	{r0, r1, r4, lr}
 800586a:	681c      	ldr	r4, [r3, #0]
 800586c:	b124      	cbz	r4, 8005878 <iprintf+0x14>
 800586e:	69a3      	ldr	r3, [r4, #24]
 8005870:	b913      	cbnz	r3, 8005878 <iprintf+0x14>
 8005872:	4620      	mov	r0, r4
 8005874:	f000 fa22 	bl	8005cbc <__sinit>
 8005878:	ab05      	add	r3, sp, #20
 800587a:	9a04      	ldr	r2, [sp, #16]
 800587c:	68a1      	ldr	r1, [r4, #8]
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	4620      	mov	r0, r4
 8005882:	f000 fbdb 	bl	800603c <_vfiprintf_r>
 8005886:	b002      	add	sp, #8
 8005888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800588c:	b004      	add	sp, #16
 800588e:	4770      	bx	lr
 8005890:	20000010 	.word	0x20000010

08005894 <_puts_r>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	460e      	mov	r6, r1
 8005898:	4605      	mov	r5, r0
 800589a:	b118      	cbz	r0, 80058a4 <_puts_r+0x10>
 800589c:	6983      	ldr	r3, [r0, #24]
 800589e:	b90b      	cbnz	r3, 80058a4 <_puts_r+0x10>
 80058a0:	f000 fa0c 	bl	8005cbc <__sinit>
 80058a4:	69ab      	ldr	r3, [r5, #24]
 80058a6:	68ac      	ldr	r4, [r5, #8]
 80058a8:	b913      	cbnz	r3, 80058b0 <_puts_r+0x1c>
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 fa06 	bl	8005cbc <__sinit>
 80058b0:	4b23      	ldr	r3, [pc, #140]	; (8005940 <_puts_r+0xac>)
 80058b2:	429c      	cmp	r4, r3
 80058b4:	d117      	bne.n	80058e6 <_puts_r+0x52>
 80058b6:	686c      	ldr	r4, [r5, #4]
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	071b      	lsls	r3, r3, #28
 80058bc:	d51d      	bpl.n	80058fa <_puts_r+0x66>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	b1db      	cbz	r3, 80058fa <_puts_r+0x66>
 80058c2:	3e01      	subs	r6, #1
 80058c4:	68a3      	ldr	r3, [r4, #8]
 80058c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058ca:	3b01      	subs	r3, #1
 80058cc:	60a3      	str	r3, [r4, #8]
 80058ce:	b9e9      	cbnz	r1, 800590c <_puts_r+0x78>
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	da2e      	bge.n	8005932 <_puts_r+0x9e>
 80058d4:	4622      	mov	r2, r4
 80058d6:	210a      	movs	r1, #10
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 f83f 	bl	800595c <__swbuf_r>
 80058de:	3001      	adds	r0, #1
 80058e0:	d011      	beq.n	8005906 <_puts_r+0x72>
 80058e2:	200a      	movs	r0, #10
 80058e4:	e011      	b.n	800590a <_puts_r+0x76>
 80058e6:	4b17      	ldr	r3, [pc, #92]	; (8005944 <_puts_r+0xb0>)
 80058e8:	429c      	cmp	r4, r3
 80058ea:	d101      	bne.n	80058f0 <_puts_r+0x5c>
 80058ec:	68ac      	ldr	r4, [r5, #8]
 80058ee:	e7e3      	b.n	80058b8 <_puts_r+0x24>
 80058f0:	4b15      	ldr	r3, [pc, #84]	; (8005948 <_puts_r+0xb4>)
 80058f2:	429c      	cmp	r4, r3
 80058f4:	bf08      	it	eq
 80058f6:	68ec      	ldreq	r4, [r5, #12]
 80058f8:	e7de      	b.n	80058b8 <_puts_r+0x24>
 80058fa:	4621      	mov	r1, r4
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 f87f 	bl	8005a00 <__swsetup_r>
 8005902:	2800      	cmp	r0, #0
 8005904:	d0dd      	beq.n	80058c2 <_puts_r+0x2e>
 8005906:	f04f 30ff 	mov.w	r0, #4294967295
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	2b00      	cmp	r3, #0
 800590e:	da04      	bge.n	800591a <_puts_r+0x86>
 8005910:	69a2      	ldr	r2, [r4, #24]
 8005912:	429a      	cmp	r2, r3
 8005914:	dc06      	bgt.n	8005924 <_puts_r+0x90>
 8005916:	290a      	cmp	r1, #10
 8005918:	d004      	beq.n	8005924 <_puts_r+0x90>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	6022      	str	r2, [r4, #0]
 8005920:	7019      	strb	r1, [r3, #0]
 8005922:	e7cf      	b.n	80058c4 <_puts_r+0x30>
 8005924:	4622      	mov	r2, r4
 8005926:	4628      	mov	r0, r5
 8005928:	f000 f818 	bl	800595c <__swbuf_r>
 800592c:	3001      	adds	r0, #1
 800592e:	d1c9      	bne.n	80058c4 <_puts_r+0x30>
 8005930:	e7e9      	b.n	8005906 <_puts_r+0x72>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	200a      	movs	r0, #10
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	7018      	strb	r0, [r3, #0]
 800593c:	e7e5      	b.n	800590a <_puts_r+0x76>
 800593e:	bf00      	nop
 8005940:	080068c4 	.word	0x080068c4
 8005944:	080068e4 	.word	0x080068e4
 8005948:	080068a4 	.word	0x080068a4

0800594c <puts>:
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <puts+0xc>)
 800594e:	4601      	mov	r1, r0
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	f7ff bf9f 	b.w	8005894 <_puts_r>
 8005956:	bf00      	nop
 8005958:	20000010 	.word	0x20000010

0800595c <__swbuf_r>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	460e      	mov	r6, r1
 8005960:	4614      	mov	r4, r2
 8005962:	4605      	mov	r5, r0
 8005964:	b118      	cbz	r0, 800596e <__swbuf_r+0x12>
 8005966:	6983      	ldr	r3, [r0, #24]
 8005968:	b90b      	cbnz	r3, 800596e <__swbuf_r+0x12>
 800596a:	f000 f9a7 	bl	8005cbc <__sinit>
 800596e:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <__swbuf_r+0x98>)
 8005970:	429c      	cmp	r4, r3
 8005972:	d12a      	bne.n	80059ca <__swbuf_r+0x6e>
 8005974:	686c      	ldr	r4, [r5, #4]
 8005976:	69a3      	ldr	r3, [r4, #24]
 8005978:	60a3      	str	r3, [r4, #8]
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	071a      	lsls	r2, r3, #28
 800597e:	d52e      	bpl.n	80059de <__swbuf_r+0x82>
 8005980:	6923      	ldr	r3, [r4, #16]
 8005982:	b363      	cbz	r3, 80059de <__swbuf_r+0x82>
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	1ac0      	subs	r0, r0, r3
 800598a:	6963      	ldr	r3, [r4, #20]
 800598c:	b2f6      	uxtb	r6, r6
 800598e:	4283      	cmp	r3, r0
 8005990:	4637      	mov	r7, r6
 8005992:	dc04      	bgt.n	800599e <__swbuf_r+0x42>
 8005994:	4621      	mov	r1, r4
 8005996:	4628      	mov	r0, r5
 8005998:	f000 f926 	bl	8005be8 <_fflush_r>
 800599c:	bb28      	cbnz	r0, 80059ea <__swbuf_r+0x8e>
 800599e:	68a3      	ldr	r3, [r4, #8]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	60a3      	str	r3, [r4, #8]
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	701e      	strb	r6, [r3, #0]
 80059ac:	6963      	ldr	r3, [r4, #20]
 80059ae:	3001      	adds	r0, #1
 80059b0:	4283      	cmp	r3, r0
 80059b2:	d004      	beq.n	80059be <__swbuf_r+0x62>
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	07db      	lsls	r3, r3, #31
 80059b8:	d519      	bpl.n	80059ee <__swbuf_r+0x92>
 80059ba:	2e0a      	cmp	r6, #10
 80059bc:	d117      	bne.n	80059ee <__swbuf_r+0x92>
 80059be:	4621      	mov	r1, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 f911 	bl	8005be8 <_fflush_r>
 80059c6:	b190      	cbz	r0, 80059ee <__swbuf_r+0x92>
 80059c8:	e00f      	b.n	80059ea <__swbuf_r+0x8e>
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <__swbuf_r+0x9c>)
 80059cc:	429c      	cmp	r4, r3
 80059ce:	d101      	bne.n	80059d4 <__swbuf_r+0x78>
 80059d0:	68ac      	ldr	r4, [r5, #8]
 80059d2:	e7d0      	b.n	8005976 <__swbuf_r+0x1a>
 80059d4:	4b09      	ldr	r3, [pc, #36]	; (80059fc <__swbuf_r+0xa0>)
 80059d6:	429c      	cmp	r4, r3
 80059d8:	bf08      	it	eq
 80059da:	68ec      	ldreq	r4, [r5, #12]
 80059dc:	e7cb      	b.n	8005976 <__swbuf_r+0x1a>
 80059de:	4621      	mov	r1, r4
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f80d 	bl	8005a00 <__swsetup_r>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d0cc      	beq.n	8005984 <__swbuf_r+0x28>
 80059ea:	f04f 37ff 	mov.w	r7, #4294967295
 80059ee:	4638      	mov	r0, r7
 80059f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f2:	bf00      	nop
 80059f4:	080068c4 	.word	0x080068c4
 80059f8:	080068e4 	.word	0x080068e4
 80059fc:	080068a4 	.word	0x080068a4

08005a00 <__swsetup_r>:
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <__swsetup_r+0xcc>)
 8005a02:	b570      	push	{r4, r5, r6, lr}
 8005a04:	681d      	ldr	r5, [r3, #0]
 8005a06:	4606      	mov	r6, r0
 8005a08:	460c      	mov	r4, r1
 8005a0a:	b125      	cbz	r5, 8005a16 <__swsetup_r+0x16>
 8005a0c:	69ab      	ldr	r3, [r5, #24]
 8005a0e:	b913      	cbnz	r3, 8005a16 <__swsetup_r+0x16>
 8005a10:	4628      	mov	r0, r5
 8005a12:	f000 f953 	bl	8005cbc <__sinit>
 8005a16:	4b2e      	ldr	r3, [pc, #184]	; (8005ad0 <__swsetup_r+0xd0>)
 8005a18:	429c      	cmp	r4, r3
 8005a1a:	d10f      	bne.n	8005a3c <__swsetup_r+0x3c>
 8005a1c:	686c      	ldr	r4, [r5, #4]
 8005a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	0715      	lsls	r5, r2, #28
 8005a26:	d42c      	bmi.n	8005a82 <__swsetup_r+0x82>
 8005a28:	06d0      	lsls	r0, r2, #27
 8005a2a:	d411      	bmi.n	8005a50 <__swsetup_r+0x50>
 8005a2c:	2209      	movs	r2, #9
 8005a2e:	6032      	str	r2, [r6, #0]
 8005a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3a:	e03e      	b.n	8005aba <__swsetup_r+0xba>
 8005a3c:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <__swsetup_r+0xd4>)
 8005a3e:	429c      	cmp	r4, r3
 8005a40:	d101      	bne.n	8005a46 <__swsetup_r+0x46>
 8005a42:	68ac      	ldr	r4, [r5, #8]
 8005a44:	e7eb      	b.n	8005a1e <__swsetup_r+0x1e>
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <__swsetup_r+0xd8>)
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	bf08      	it	eq
 8005a4c:	68ec      	ldreq	r4, [r5, #12]
 8005a4e:	e7e6      	b.n	8005a1e <__swsetup_r+0x1e>
 8005a50:	0751      	lsls	r1, r2, #29
 8005a52:	d512      	bpl.n	8005a7a <__swsetup_r+0x7a>
 8005a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a56:	b141      	cbz	r1, 8005a6a <__swsetup_r+0x6a>
 8005a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	d002      	beq.n	8005a66 <__swsetup_r+0x66>
 8005a60:	4630      	mov	r0, r6
 8005a62:	f000 fa19 	bl	8005e98 <_free_r>
 8005a66:	2300      	movs	r3, #0
 8005a68:	6363      	str	r3, [r4, #52]	; 0x34
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	2300      	movs	r3, #0
 8005a74:	6063      	str	r3, [r4, #4]
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f043 0308 	orr.w	r3, r3, #8
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	b94b      	cbnz	r3, 8005a9a <__swsetup_r+0x9a>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a90:	d003      	beq.n	8005a9a <__swsetup_r+0x9a>
 8005a92:	4621      	mov	r1, r4
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 f9bf 	bl	8005e18 <__smakebuf_r>
 8005a9a:	89a2      	ldrh	r2, [r4, #12]
 8005a9c:	f012 0301 	ands.w	r3, r2, #1
 8005aa0:	d00c      	beq.n	8005abc <__swsetup_r+0xbc>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60a3      	str	r3, [r4, #8]
 8005aa6:	6963      	ldr	r3, [r4, #20]
 8005aa8:	425b      	negs	r3, r3
 8005aaa:	61a3      	str	r3, [r4, #24]
 8005aac:	6923      	ldr	r3, [r4, #16]
 8005aae:	b953      	cbnz	r3, 8005ac6 <__swsetup_r+0xc6>
 8005ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ab4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ab8:	d1ba      	bne.n	8005a30 <__swsetup_r+0x30>
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
 8005abc:	0792      	lsls	r2, r2, #30
 8005abe:	bf58      	it	pl
 8005ac0:	6963      	ldrpl	r3, [r4, #20]
 8005ac2:	60a3      	str	r3, [r4, #8]
 8005ac4:	e7f2      	b.n	8005aac <__swsetup_r+0xac>
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	e7f7      	b.n	8005aba <__swsetup_r+0xba>
 8005aca:	bf00      	nop
 8005acc:	20000010 	.word	0x20000010
 8005ad0:	080068c4 	.word	0x080068c4
 8005ad4:	080068e4 	.word	0x080068e4
 8005ad8:	080068a4 	.word	0x080068a4

08005adc <__sflush_r>:
 8005adc:	898a      	ldrh	r2, [r1, #12]
 8005ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	0710      	lsls	r0, r2, #28
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	d458      	bmi.n	8005b9c <__sflush_r+0xc0>
 8005aea:	684b      	ldr	r3, [r1, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dc05      	bgt.n	8005afc <__sflush_r+0x20>
 8005af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dc02      	bgt.n	8005afc <__sflush_r+0x20>
 8005af6:	2000      	movs	r0, #0
 8005af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005afe:	2e00      	cmp	r6, #0
 8005b00:	d0f9      	beq.n	8005af6 <__sflush_r+0x1a>
 8005b02:	2300      	movs	r3, #0
 8005b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b08:	682f      	ldr	r7, [r5, #0]
 8005b0a:	6a21      	ldr	r1, [r4, #32]
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	d032      	beq.n	8005b76 <__sflush_r+0x9a>
 8005b10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	075a      	lsls	r2, r3, #29
 8005b16:	d505      	bpl.n	8005b24 <__sflush_r+0x48>
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	1ac0      	subs	r0, r0, r3
 8005b1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b1e:	b10b      	cbz	r3, 8005b24 <__sflush_r+0x48>
 8005b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b22:	1ac0      	subs	r0, r0, r3
 8005b24:	2300      	movs	r3, #0
 8005b26:	4602      	mov	r2, r0
 8005b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b2a:	6a21      	ldr	r1, [r4, #32]
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b0      	blx	r6
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	d106      	bne.n	8005b44 <__sflush_r+0x68>
 8005b36:	6829      	ldr	r1, [r5, #0]
 8005b38:	291d      	cmp	r1, #29
 8005b3a:	d848      	bhi.n	8005bce <__sflush_r+0xf2>
 8005b3c:	4a29      	ldr	r2, [pc, #164]	; (8005be4 <__sflush_r+0x108>)
 8005b3e:	40ca      	lsrs	r2, r1
 8005b40:	07d6      	lsls	r6, r2, #31
 8005b42:	d544      	bpl.n	8005bce <__sflush_r+0xf2>
 8005b44:	2200      	movs	r2, #0
 8005b46:	6062      	str	r2, [r4, #4]
 8005b48:	04d9      	lsls	r1, r3, #19
 8005b4a:	6922      	ldr	r2, [r4, #16]
 8005b4c:	6022      	str	r2, [r4, #0]
 8005b4e:	d504      	bpl.n	8005b5a <__sflush_r+0x7e>
 8005b50:	1c42      	adds	r2, r0, #1
 8005b52:	d101      	bne.n	8005b58 <__sflush_r+0x7c>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b903      	cbnz	r3, 8005b5a <__sflush_r+0x7e>
 8005b58:	6560      	str	r0, [r4, #84]	; 0x54
 8005b5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b5c:	602f      	str	r7, [r5, #0]
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d0c9      	beq.n	8005af6 <__sflush_r+0x1a>
 8005b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b66:	4299      	cmp	r1, r3
 8005b68:	d002      	beq.n	8005b70 <__sflush_r+0x94>
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 f994 	bl	8005e98 <_free_r>
 8005b70:	2000      	movs	r0, #0
 8005b72:	6360      	str	r0, [r4, #52]	; 0x34
 8005b74:	e7c0      	b.n	8005af8 <__sflush_r+0x1c>
 8005b76:	2301      	movs	r3, #1
 8005b78:	4628      	mov	r0, r5
 8005b7a:	47b0      	blx	r6
 8005b7c:	1c41      	adds	r1, r0, #1
 8005b7e:	d1c8      	bne.n	8005b12 <__sflush_r+0x36>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0c5      	beq.n	8005b12 <__sflush_r+0x36>
 8005b86:	2b1d      	cmp	r3, #29
 8005b88:	d001      	beq.n	8005b8e <__sflush_r+0xb2>
 8005b8a:	2b16      	cmp	r3, #22
 8005b8c:	d101      	bne.n	8005b92 <__sflush_r+0xb6>
 8005b8e:	602f      	str	r7, [r5, #0]
 8005b90:	e7b1      	b.n	8005af6 <__sflush_r+0x1a>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	e7ad      	b.n	8005af8 <__sflush_r+0x1c>
 8005b9c:	690f      	ldr	r7, [r1, #16]
 8005b9e:	2f00      	cmp	r7, #0
 8005ba0:	d0a9      	beq.n	8005af6 <__sflush_r+0x1a>
 8005ba2:	0793      	lsls	r3, r2, #30
 8005ba4:	680e      	ldr	r6, [r1, #0]
 8005ba6:	bf08      	it	eq
 8005ba8:	694b      	ldreq	r3, [r1, #20]
 8005baa:	600f      	str	r7, [r1, #0]
 8005bac:	bf18      	it	ne
 8005bae:	2300      	movne	r3, #0
 8005bb0:	eba6 0807 	sub.w	r8, r6, r7
 8005bb4:	608b      	str	r3, [r1, #8]
 8005bb6:	f1b8 0f00 	cmp.w	r8, #0
 8005bba:	dd9c      	ble.n	8005af6 <__sflush_r+0x1a>
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	463a      	mov	r2, r7
 8005bc0:	6a21      	ldr	r1, [r4, #32]
 8005bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b0      	blx	r6
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	dc06      	bgt.n	8005bda <__sflush_r+0xfe>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	e78e      	b.n	8005af8 <__sflush_r+0x1c>
 8005bda:	4407      	add	r7, r0
 8005bdc:	eba8 0800 	sub.w	r8, r8, r0
 8005be0:	e7e9      	b.n	8005bb6 <__sflush_r+0xda>
 8005be2:	bf00      	nop
 8005be4:	20400001 	.word	0x20400001

08005be8 <_fflush_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	690b      	ldr	r3, [r1, #16]
 8005bec:	4605      	mov	r5, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	b1db      	cbz	r3, 8005c2a <_fflush_r+0x42>
 8005bf2:	b118      	cbz	r0, 8005bfc <_fflush_r+0x14>
 8005bf4:	6983      	ldr	r3, [r0, #24]
 8005bf6:	b90b      	cbnz	r3, 8005bfc <_fflush_r+0x14>
 8005bf8:	f000 f860 	bl	8005cbc <__sinit>
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <_fflush_r+0x48>)
 8005bfe:	429c      	cmp	r4, r3
 8005c00:	d109      	bne.n	8005c16 <_fflush_r+0x2e>
 8005c02:	686c      	ldr	r4, [r5, #4]
 8005c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c08:	b17b      	cbz	r3, 8005c2a <_fflush_r+0x42>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c12:	f7ff bf63 	b.w	8005adc <__sflush_r>
 8005c16:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <_fflush_r+0x4c>)
 8005c18:	429c      	cmp	r4, r3
 8005c1a:	d101      	bne.n	8005c20 <_fflush_r+0x38>
 8005c1c:	68ac      	ldr	r4, [r5, #8]
 8005c1e:	e7f1      	b.n	8005c04 <_fflush_r+0x1c>
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <_fflush_r+0x50>)
 8005c22:	429c      	cmp	r4, r3
 8005c24:	bf08      	it	eq
 8005c26:	68ec      	ldreq	r4, [r5, #12]
 8005c28:	e7ec      	b.n	8005c04 <_fflush_r+0x1c>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	bd38      	pop	{r3, r4, r5, pc}
 8005c2e:	bf00      	nop
 8005c30:	080068c4 	.word	0x080068c4
 8005c34:	080068e4 	.word	0x080068e4
 8005c38:	080068a4 	.word	0x080068a4

08005c3c <std>:
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	4604      	mov	r4, r0
 8005c42:	e9c0 3300 	strd	r3, r3, [r0]
 8005c46:	6083      	str	r3, [r0, #8]
 8005c48:	8181      	strh	r1, [r0, #12]
 8005c4a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c4c:	81c2      	strh	r2, [r0, #14]
 8005c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c52:	6183      	str	r3, [r0, #24]
 8005c54:	4619      	mov	r1, r3
 8005c56:	2208      	movs	r2, #8
 8005c58:	305c      	adds	r0, #92	; 0x5c
 8005c5a:	f7ff fdfb 	bl	8005854 <memset>
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <std+0x38>)
 8005c60:	6263      	str	r3, [r4, #36]	; 0x24
 8005c62:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <std+0x3c>)
 8005c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <std+0x40>)
 8005c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <std+0x44>)
 8005c6c:	6224      	str	r4, [r4, #32]
 8005c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	bf00      	nop
 8005c74:	08006599 	.word	0x08006599
 8005c78:	080065bb 	.word	0x080065bb
 8005c7c:	080065f3 	.word	0x080065f3
 8005c80:	08006617 	.word	0x08006617

08005c84 <_cleanup_r>:
 8005c84:	4901      	ldr	r1, [pc, #4]	; (8005c8c <_cleanup_r+0x8>)
 8005c86:	f000 b885 	b.w	8005d94 <_fwalk_reent>
 8005c8a:	bf00      	nop
 8005c8c:	08005be9 	.word	0x08005be9

08005c90 <__sfmoreglue>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	1e4a      	subs	r2, r1, #1
 8005c94:	2568      	movs	r5, #104	; 0x68
 8005c96:	4355      	muls	r5, r2
 8005c98:	460e      	mov	r6, r1
 8005c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c9e:	f000 f949 	bl	8005f34 <_malloc_r>
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	b140      	cbz	r0, 8005cb8 <__sfmoreglue+0x28>
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8005cac:	300c      	adds	r0, #12
 8005cae:	60a0      	str	r0, [r4, #8]
 8005cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cb4:	f7ff fdce 	bl	8005854 <memset>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	bd70      	pop	{r4, r5, r6, pc}

08005cbc <__sinit>:
 8005cbc:	6983      	ldr	r3, [r0, #24]
 8005cbe:	b510      	push	{r4, lr}
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	bb33      	cbnz	r3, 8005d12 <__sinit+0x56>
 8005cc4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005cc8:	6503      	str	r3, [r0, #80]	; 0x50
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <__sinit+0x58>)
 8005ccc:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <__sinit+0x5c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6282      	str	r2, [r0, #40]	; 0x28
 8005cd2:	4298      	cmp	r0, r3
 8005cd4:	bf04      	itt	eq
 8005cd6:	2301      	moveq	r3, #1
 8005cd8:	6183      	streq	r3, [r0, #24]
 8005cda:	f000 f81f 	bl	8005d1c <__sfp>
 8005cde:	6060      	str	r0, [r4, #4]
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 f81b 	bl	8005d1c <__sfp>
 8005ce6:	60a0      	str	r0, [r4, #8]
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 f817 	bl	8005d1c <__sfp>
 8005cee:	2200      	movs	r2, #0
 8005cf0:	60e0      	str	r0, [r4, #12]
 8005cf2:	2104      	movs	r1, #4
 8005cf4:	6860      	ldr	r0, [r4, #4]
 8005cf6:	f7ff ffa1 	bl	8005c3c <std>
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	2109      	movs	r1, #9
 8005cfe:	68a0      	ldr	r0, [r4, #8]
 8005d00:	f7ff ff9c 	bl	8005c3c <std>
 8005d04:	2202      	movs	r2, #2
 8005d06:	2112      	movs	r1, #18
 8005d08:	68e0      	ldr	r0, [r4, #12]
 8005d0a:	f7ff ff97 	bl	8005c3c <std>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	61a3      	str	r3, [r4, #24]
 8005d12:	bd10      	pop	{r4, pc}
 8005d14:	080068a0 	.word	0x080068a0
 8005d18:	08005c85 	.word	0x08005c85

08005d1c <__sfp>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <__sfp+0x70>)
 8005d20:	681e      	ldr	r6, [r3, #0]
 8005d22:	69b3      	ldr	r3, [r6, #24]
 8005d24:	4607      	mov	r7, r0
 8005d26:	b913      	cbnz	r3, 8005d2e <__sfp+0x12>
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7ff ffc7 	bl	8005cbc <__sinit>
 8005d2e:	3648      	adds	r6, #72	; 0x48
 8005d30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	d503      	bpl.n	8005d40 <__sfp+0x24>
 8005d38:	6833      	ldr	r3, [r6, #0]
 8005d3a:	b133      	cbz	r3, 8005d4a <__sfp+0x2e>
 8005d3c:	6836      	ldr	r6, [r6, #0]
 8005d3e:	e7f7      	b.n	8005d30 <__sfp+0x14>
 8005d40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d44:	b16d      	cbz	r5, 8005d62 <__sfp+0x46>
 8005d46:	3468      	adds	r4, #104	; 0x68
 8005d48:	e7f4      	b.n	8005d34 <__sfp+0x18>
 8005d4a:	2104      	movs	r1, #4
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff ff9f 	bl	8005c90 <__sfmoreglue>
 8005d52:	6030      	str	r0, [r6, #0]
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d1f1      	bne.n	8005d3c <__sfp+0x20>
 8005d58:	230c      	movs	r3, #12
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	4620      	mov	r0, r4
 8005d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d62:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <__sfp+0x74>)
 8005d64:	6665      	str	r5, [r4, #100]	; 0x64
 8005d66:	e9c4 5500 	strd	r5, r5, [r4]
 8005d6a:	60a5      	str	r5, [r4, #8]
 8005d6c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005d70:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005d74:	2208      	movs	r2, #8
 8005d76:	4629      	mov	r1, r5
 8005d78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d7c:	f7ff fd6a 	bl	8005854 <memset>
 8005d80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d88:	e7e9      	b.n	8005d5e <__sfp+0x42>
 8005d8a:	bf00      	nop
 8005d8c:	080068a0 	.word	0x080068a0
 8005d90:	ffff0001 	.word	0xffff0001

08005d94 <_fwalk_reent>:
 8005d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d98:	4680      	mov	r8, r0
 8005d9a:	4689      	mov	r9, r1
 8005d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005da0:	2600      	movs	r6, #0
 8005da2:	b914      	cbnz	r4, 8005daa <_fwalk_reent+0x16>
 8005da4:	4630      	mov	r0, r6
 8005da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005daa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005dae:	3f01      	subs	r7, #1
 8005db0:	d501      	bpl.n	8005db6 <_fwalk_reent+0x22>
 8005db2:	6824      	ldr	r4, [r4, #0]
 8005db4:	e7f5      	b.n	8005da2 <_fwalk_reent+0xe>
 8005db6:	89ab      	ldrh	r3, [r5, #12]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d907      	bls.n	8005dcc <_fwalk_reent+0x38>
 8005dbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	d003      	beq.n	8005dcc <_fwalk_reent+0x38>
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	47c8      	blx	r9
 8005dca:	4306      	orrs	r6, r0
 8005dcc:	3568      	adds	r5, #104	; 0x68
 8005dce:	e7ee      	b.n	8005dae <_fwalk_reent+0x1a>

08005dd0 <__swhatbuf_r>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	460e      	mov	r6, r1
 8005dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	b096      	sub	sp, #88	; 0x58
 8005ddc:	4614      	mov	r4, r2
 8005dde:	461d      	mov	r5, r3
 8005de0:	da07      	bge.n	8005df2 <__swhatbuf_r+0x22>
 8005de2:	2300      	movs	r3, #0
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	89b3      	ldrh	r3, [r6, #12]
 8005de8:	061a      	lsls	r2, r3, #24
 8005dea:	d410      	bmi.n	8005e0e <__swhatbuf_r+0x3e>
 8005dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005df0:	e00e      	b.n	8005e10 <__swhatbuf_r+0x40>
 8005df2:	466a      	mov	r2, sp
 8005df4:	f000 fc36 	bl	8006664 <_fstat_r>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	dbf2      	blt.n	8005de2 <__swhatbuf_r+0x12>
 8005dfc:	9a01      	ldr	r2, [sp, #4]
 8005dfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e06:	425a      	negs	r2, r3
 8005e08:	415a      	adcs	r2, r3
 8005e0a:	602a      	str	r2, [r5, #0]
 8005e0c:	e7ee      	b.n	8005dec <__swhatbuf_r+0x1c>
 8005e0e:	2340      	movs	r3, #64	; 0x40
 8005e10:	2000      	movs	r0, #0
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	b016      	add	sp, #88	; 0x58
 8005e16:	bd70      	pop	{r4, r5, r6, pc}

08005e18 <__smakebuf_r>:
 8005e18:	898b      	ldrh	r3, [r1, #12]
 8005e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e1c:	079d      	lsls	r5, r3, #30
 8005e1e:	4606      	mov	r6, r0
 8005e20:	460c      	mov	r4, r1
 8005e22:	d507      	bpl.n	8005e34 <__smakebuf_r+0x1c>
 8005e24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	6123      	str	r3, [r4, #16]
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	6163      	str	r3, [r4, #20]
 8005e30:	b002      	add	sp, #8
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	ab01      	add	r3, sp, #4
 8005e36:	466a      	mov	r2, sp
 8005e38:	f7ff ffca 	bl	8005dd0 <__swhatbuf_r>
 8005e3c:	9900      	ldr	r1, [sp, #0]
 8005e3e:	4605      	mov	r5, r0
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 f877 	bl	8005f34 <_malloc_r>
 8005e46:	b948      	cbnz	r0, 8005e5c <__smakebuf_r+0x44>
 8005e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e4c:	059a      	lsls	r2, r3, #22
 8005e4e:	d4ef      	bmi.n	8005e30 <__smakebuf_r+0x18>
 8005e50:	f023 0303 	bic.w	r3, r3, #3
 8005e54:	f043 0302 	orr.w	r3, r3, #2
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	e7e3      	b.n	8005e24 <__smakebuf_r+0xc>
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <__smakebuf_r+0x7c>)
 8005e5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	6020      	str	r0, [r4, #0]
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	81a3      	strh	r3, [r4, #12]
 8005e6a:	9b00      	ldr	r3, [sp, #0]
 8005e6c:	6163      	str	r3, [r4, #20]
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	6120      	str	r0, [r4, #16]
 8005e72:	b15b      	cbz	r3, 8005e8c <__smakebuf_r+0x74>
 8005e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f000 fc05 	bl	8006688 <_isatty_r>
 8005e7e:	b128      	cbz	r0, 8005e8c <__smakebuf_r+0x74>
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	f023 0303 	bic.w	r3, r3, #3
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	431d      	orrs	r5, r3
 8005e90:	81a5      	strh	r5, [r4, #12]
 8005e92:	e7cd      	b.n	8005e30 <__smakebuf_r+0x18>
 8005e94:	08005c85 	.word	0x08005c85

08005e98 <_free_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	d045      	beq.n	8005f2c <_free_r+0x94>
 8005ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea4:	1f0c      	subs	r4, r1, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bfb8      	it	lt
 8005eaa:	18e4      	addlt	r4, r4, r3
 8005eac:	f000 fc0e 	bl	80066cc <__malloc_lock>
 8005eb0:	4a1f      	ldr	r2, [pc, #124]	; (8005f30 <_free_r+0x98>)
 8005eb2:	6813      	ldr	r3, [r2, #0]
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	b933      	cbnz	r3, 8005ec6 <_free_r+0x2e>
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	6014      	str	r4, [r2, #0]
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ec2:	f000 bc04 	b.w	80066ce <__malloc_unlock>
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	d90c      	bls.n	8005ee4 <_free_r+0x4c>
 8005eca:	6821      	ldr	r1, [r4, #0]
 8005ecc:	1862      	adds	r2, r4, r1
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	bf04      	itt	eq
 8005ed2:	681a      	ldreq	r2, [r3, #0]
 8005ed4:	685b      	ldreq	r3, [r3, #4]
 8005ed6:	6063      	str	r3, [r4, #4]
 8005ed8:	bf04      	itt	eq
 8005eda:	1852      	addeq	r2, r2, r1
 8005edc:	6022      	streq	r2, [r4, #0]
 8005ede:	6004      	str	r4, [r0, #0]
 8005ee0:	e7ec      	b.n	8005ebc <_free_r+0x24>
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	b10a      	cbz	r2, 8005eec <_free_r+0x54>
 8005ee8:	42a2      	cmp	r2, r4
 8005eea:	d9fa      	bls.n	8005ee2 <_free_r+0x4a>
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	1858      	adds	r0, r3, r1
 8005ef0:	42a0      	cmp	r0, r4
 8005ef2:	d10b      	bne.n	8005f0c <_free_r+0x74>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	4401      	add	r1, r0
 8005ef8:	1858      	adds	r0, r3, r1
 8005efa:	4282      	cmp	r2, r0
 8005efc:	6019      	str	r1, [r3, #0]
 8005efe:	d1dd      	bne.n	8005ebc <_free_r+0x24>
 8005f00:	6810      	ldr	r0, [r2, #0]
 8005f02:	6852      	ldr	r2, [r2, #4]
 8005f04:	605a      	str	r2, [r3, #4]
 8005f06:	4401      	add	r1, r0
 8005f08:	6019      	str	r1, [r3, #0]
 8005f0a:	e7d7      	b.n	8005ebc <_free_r+0x24>
 8005f0c:	d902      	bls.n	8005f14 <_free_r+0x7c>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	e7d3      	b.n	8005ebc <_free_r+0x24>
 8005f14:	6820      	ldr	r0, [r4, #0]
 8005f16:	1821      	adds	r1, r4, r0
 8005f18:	428a      	cmp	r2, r1
 8005f1a:	bf04      	itt	eq
 8005f1c:	6811      	ldreq	r1, [r2, #0]
 8005f1e:	6852      	ldreq	r2, [r2, #4]
 8005f20:	6062      	str	r2, [r4, #4]
 8005f22:	bf04      	itt	eq
 8005f24:	1809      	addeq	r1, r1, r0
 8005f26:	6021      	streq	r1, [r4, #0]
 8005f28:	605c      	str	r4, [r3, #4]
 8005f2a:	e7c7      	b.n	8005ebc <_free_r+0x24>
 8005f2c:	bd38      	pop	{r3, r4, r5, pc}
 8005f2e:	bf00      	nop
 8005f30:	20004054 	.word	0x20004054

08005f34 <_malloc_r>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	1ccd      	adds	r5, r1, #3
 8005f38:	f025 0503 	bic.w	r5, r5, #3
 8005f3c:	3508      	adds	r5, #8
 8005f3e:	2d0c      	cmp	r5, #12
 8005f40:	bf38      	it	cc
 8005f42:	250c      	movcc	r5, #12
 8005f44:	2d00      	cmp	r5, #0
 8005f46:	4606      	mov	r6, r0
 8005f48:	db01      	blt.n	8005f4e <_malloc_r+0x1a>
 8005f4a:	42a9      	cmp	r1, r5
 8005f4c:	d903      	bls.n	8005f56 <_malloc_r+0x22>
 8005f4e:	230c      	movs	r3, #12
 8005f50:	6033      	str	r3, [r6, #0]
 8005f52:	2000      	movs	r0, #0
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	f000 fbb9 	bl	80066cc <__malloc_lock>
 8005f5a:	4a21      	ldr	r2, [pc, #132]	; (8005fe0 <_malloc_r+0xac>)
 8005f5c:	6814      	ldr	r4, [r2, #0]
 8005f5e:	4621      	mov	r1, r4
 8005f60:	b991      	cbnz	r1, 8005f88 <_malloc_r+0x54>
 8005f62:	4c20      	ldr	r4, [pc, #128]	; (8005fe4 <_malloc_r+0xb0>)
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	b91b      	cbnz	r3, 8005f70 <_malloc_r+0x3c>
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 fb05 	bl	8006578 <_sbrk_r>
 8005f6e:	6020      	str	r0, [r4, #0]
 8005f70:	4629      	mov	r1, r5
 8005f72:	4630      	mov	r0, r6
 8005f74:	f000 fb00 	bl	8006578 <_sbrk_r>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d124      	bne.n	8005fc6 <_malloc_r+0x92>
 8005f7c:	230c      	movs	r3, #12
 8005f7e:	6033      	str	r3, [r6, #0]
 8005f80:	4630      	mov	r0, r6
 8005f82:	f000 fba4 	bl	80066ce <__malloc_unlock>
 8005f86:	e7e4      	b.n	8005f52 <_malloc_r+0x1e>
 8005f88:	680b      	ldr	r3, [r1, #0]
 8005f8a:	1b5b      	subs	r3, r3, r5
 8005f8c:	d418      	bmi.n	8005fc0 <_malloc_r+0x8c>
 8005f8e:	2b0b      	cmp	r3, #11
 8005f90:	d90f      	bls.n	8005fb2 <_malloc_r+0x7e>
 8005f92:	600b      	str	r3, [r1, #0]
 8005f94:	50cd      	str	r5, [r1, r3]
 8005f96:	18cc      	adds	r4, r1, r3
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f000 fb98 	bl	80066ce <__malloc_unlock>
 8005f9e:	f104 000b 	add.w	r0, r4, #11
 8005fa2:	1d23      	adds	r3, r4, #4
 8005fa4:	f020 0007 	bic.w	r0, r0, #7
 8005fa8:	1ac3      	subs	r3, r0, r3
 8005faa:	d0d3      	beq.n	8005f54 <_malloc_r+0x20>
 8005fac:	425a      	negs	r2, r3
 8005fae:	50e2      	str	r2, [r4, r3]
 8005fb0:	e7d0      	b.n	8005f54 <_malloc_r+0x20>
 8005fb2:	428c      	cmp	r4, r1
 8005fb4:	684b      	ldr	r3, [r1, #4]
 8005fb6:	bf16      	itet	ne
 8005fb8:	6063      	strne	r3, [r4, #4]
 8005fba:	6013      	streq	r3, [r2, #0]
 8005fbc:	460c      	movne	r4, r1
 8005fbe:	e7eb      	b.n	8005f98 <_malloc_r+0x64>
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	6849      	ldr	r1, [r1, #4]
 8005fc4:	e7cc      	b.n	8005f60 <_malloc_r+0x2c>
 8005fc6:	1cc4      	adds	r4, r0, #3
 8005fc8:	f024 0403 	bic.w	r4, r4, #3
 8005fcc:	42a0      	cmp	r0, r4
 8005fce:	d005      	beq.n	8005fdc <_malloc_r+0xa8>
 8005fd0:	1a21      	subs	r1, r4, r0
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f000 fad0 	bl	8006578 <_sbrk_r>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d0cf      	beq.n	8005f7c <_malloc_r+0x48>
 8005fdc:	6025      	str	r5, [r4, #0]
 8005fde:	e7db      	b.n	8005f98 <_malloc_r+0x64>
 8005fe0:	20004054 	.word	0x20004054
 8005fe4:	20004058 	.word	0x20004058

08005fe8 <__sfputc_r>:
 8005fe8:	6893      	ldr	r3, [r2, #8]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	b410      	push	{r4}
 8005ff0:	6093      	str	r3, [r2, #8]
 8005ff2:	da08      	bge.n	8006006 <__sfputc_r+0x1e>
 8005ff4:	6994      	ldr	r4, [r2, #24]
 8005ff6:	42a3      	cmp	r3, r4
 8005ff8:	db01      	blt.n	8005ffe <__sfputc_r+0x16>
 8005ffa:	290a      	cmp	r1, #10
 8005ffc:	d103      	bne.n	8006006 <__sfputc_r+0x1e>
 8005ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006002:	f7ff bcab 	b.w	800595c <__swbuf_r>
 8006006:	6813      	ldr	r3, [r2, #0]
 8006008:	1c58      	adds	r0, r3, #1
 800600a:	6010      	str	r0, [r2, #0]
 800600c:	7019      	strb	r1, [r3, #0]
 800600e:	4608      	mov	r0, r1
 8006010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006014:	4770      	bx	lr

08006016 <__sfputs_r>:
 8006016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006018:	4606      	mov	r6, r0
 800601a:	460f      	mov	r7, r1
 800601c:	4614      	mov	r4, r2
 800601e:	18d5      	adds	r5, r2, r3
 8006020:	42ac      	cmp	r4, r5
 8006022:	d101      	bne.n	8006028 <__sfputs_r+0x12>
 8006024:	2000      	movs	r0, #0
 8006026:	e007      	b.n	8006038 <__sfputs_r+0x22>
 8006028:	463a      	mov	r2, r7
 800602a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800602e:	4630      	mov	r0, r6
 8006030:	f7ff ffda 	bl	8005fe8 <__sfputc_r>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d1f3      	bne.n	8006020 <__sfputs_r+0xa>
 8006038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800603c <_vfiprintf_r>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	460c      	mov	r4, r1
 8006042:	b09d      	sub	sp, #116	; 0x74
 8006044:	4617      	mov	r7, r2
 8006046:	461d      	mov	r5, r3
 8006048:	4606      	mov	r6, r0
 800604a:	b118      	cbz	r0, 8006054 <_vfiprintf_r+0x18>
 800604c:	6983      	ldr	r3, [r0, #24]
 800604e:	b90b      	cbnz	r3, 8006054 <_vfiprintf_r+0x18>
 8006050:	f7ff fe34 	bl	8005cbc <__sinit>
 8006054:	4b7c      	ldr	r3, [pc, #496]	; (8006248 <_vfiprintf_r+0x20c>)
 8006056:	429c      	cmp	r4, r3
 8006058:	d158      	bne.n	800610c <_vfiprintf_r+0xd0>
 800605a:	6874      	ldr	r4, [r6, #4]
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	0718      	lsls	r0, r3, #28
 8006060:	d55e      	bpl.n	8006120 <_vfiprintf_r+0xe4>
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d05b      	beq.n	8006120 <_vfiprintf_r+0xe4>
 8006068:	2300      	movs	r3, #0
 800606a:	9309      	str	r3, [sp, #36]	; 0x24
 800606c:	2320      	movs	r3, #32
 800606e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006072:	2330      	movs	r3, #48	; 0x30
 8006074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006078:	9503      	str	r5, [sp, #12]
 800607a:	f04f 0b01 	mov.w	fp, #1
 800607e:	46b8      	mov	r8, r7
 8006080:	4645      	mov	r5, r8
 8006082:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006086:	b10b      	cbz	r3, 800608c <_vfiprintf_r+0x50>
 8006088:	2b25      	cmp	r3, #37	; 0x25
 800608a:	d154      	bne.n	8006136 <_vfiprintf_r+0xfa>
 800608c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006090:	d00b      	beq.n	80060aa <_vfiprintf_r+0x6e>
 8006092:	4653      	mov	r3, sl
 8006094:	463a      	mov	r2, r7
 8006096:	4621      	mov	r1, r4
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff ffbc 	bl	8006016 <__sfputs_r>
 800609e:	3001      	adds	r0, #1
 80060a0:	f000 80c2 	beq.w	8006228 <_vfiprintf_r+0x1ec>
 80060a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a6:	4453      	add	r3, sl
 80060a8:	9309      	str	r3, [sp, #36]	; 0x24
 80060aa:	f898 3000 	ldrb.w	r3, [r8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 80ba 	beq.w	8006228 <_vfiprintf_r+0x1ec>
 80060b4:	2300      	movs	r3, #0
 80060b6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060be:	9304      	str	r3, [sp, #16]
 80060c0:	9307      	str	r3, [sp, #28]
 80060c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060c6:	931a      	str	r3, [sp, #104]	; 0x68
 80060c8:	46a8      	mov	r8, r5
 80060ca:	2205      	movs	r2, #5
 80060cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80060d0:	485e      	ldr	r0, [pc, #376]	; (800624c <_vfiprintf_r+0x210>)
 80060d2:	f7fa f88d 	bl	80001f0 <memchr>
 80060d6:	9b04      	ldr	r3, [sp, #16]
 80060d8:	bb78      	cbnz	r0, 800613a <_vfiprintf_r+0xfe>
 80060da:	06d9      	lsls	r1, r3, #27
 80060dc:	bf44      	itt	mi
 80060de:	2220      	movmi	r2, #32
 80060e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060e4:	071a      	lsls	r2, r3, #28
 80060e6:	bf44      	itt	mi
 80060e8:	222b      	movmi	r2, #43	; 0x2b
 80060ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80060ee:	782a      	ldrb	r2, [r5, #0]
 80060f0:	2a2a      	cmp	r2, #42	; 0x2a
 80060f2:	d02a      	beq.n	800614a <_vfiprintf_r+0x10e>
 80060f4:	9a07      	ldr	r2, [sp, #28]
 80060f6:	46a8      	mov	r8, r5
 80060f8:	2000      	movs	r0, #0
 80060fa:	250a      	movs	r5, #10
 80060fc:	4641      	mov	r1, r8
 80060fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006102:	3b30      	subs	r3, #48	; 0x30
 8006104:	2b09      	cmp	r3, #9
 8006106:	d969      	bls.n	80061dc <_vfiprintf_r+0x1a0>
 8006108:	b360      	cbz	r0, 8006164 <_vfiprintf_r+0x128>
 800610a:	e024      	b.n	8006156 <_vfiprintf_r+0x11a>
 800610c:	4b50      	ldr	r3, [pc, #320]	; (8006250 <_vfiprintf_r+0x214>)
 800610e:	429c      	cmp	r4, r3
 8006110:	d101      	bne.n	8006116 <_vfiprintf_r+0xda>
 8006112:	68b4      	ldr	r4, [r6, #8]
 8006114:	e7a2      	b.n	800605c <_vfiprintf_r+0x20>
 8006116:	4b4f      	ldr	r3, [pc, #316]	; (8006254 <_vfiprintf_r+0x218>)
 8006118:	429c      	cmp	r4, r3
 800611a:	bf08      	it	eq
 800611c:	68f4      	ldreq	r4, [r6, #12]
 800611e:	e79d      	b.n	800605c <_vfiprintf_r+0x20>
 8006120:	4621      	mov	r1, r4
 8006122:	4630      	mov	r0, r6
 8006124:	f7ff fc6c 	bl	8005a00 <__swsetup_r>
 8006128:	2800      	cmp	r0, #0
 800612a:	d09d      	beq.n	8006068 <_vfiprintf_r+0x2c>
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	b01d      	add	sp, #116	; 0x74
 8006132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006136:	46a8      	mov	r8, r5
 8006138:	e7a2      	b.n	8006080 <_vfiprintf_r+0x44>
 800613a:	4a44      	ldr	r2, [pc, #272]	; (800624c <_vfiprintf_r+0x210>)
 800613c:	1a80      	subs	r0, r0, r2
 800613e:	fa0b f000 	lsl.w	r0, fp, r0
 8006142:	4318      	orrs	r0, r3
 8006144:	9004      	str	r0, [sp, #16]
 8006146:	4645      	mov	r5, r8
 8006148:	e7be      	b.n	80060c8 <_vfiprintf_r+0x8c>
 800614a:	9a03      	ldr	r2, [sp, #12]
 800614c:	1d11      	adds	r1, r2, #4
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	9103      	str	r1, [sp, #12]
 8006152:	2a00      	cmp	r2, #0
 8006154:	db01      	blt.n	800615a <_vfiprintf_r+0x11e>
 8006156:	9207      	str	r2, [sp, #28]
 8006158:	e004      	b.n	8006164 <_vfiprintf_r+0x128>
 800615a:	4252      	negs	r2, r2
 800615c:	f043 0302 	orr.w	r3, r3, #2
 8006160:	9207      	str	r2, [sp, #28]
 8006162:	9304      	str	r3, [sp, #16]
 8006164:	f898 3000 	ldrb.w	r3, [r8]
 8006168:	2b2e      	cmp	r3, #46	; 0x2e
 800616a:	d10e      	bne.n	800618a <_vfiprintf_r+0x14e>
 800616c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006170:	2b2a      	cmp	r3, #42	; 0x2a
 8006172:	d138      	bne.n	80061e6 <_vfiprintf_r+0x1aa>
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	9203      	str	r2, [sp, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfb8      	it	lt
 8006180:	f04f 33ff 	movlt.w	r3, #4294967295
 8006184:	f108 0802 	add.w	r8, r8, #2
 8006188:	9305      	str	r3, [sp, #20]
 800618a:	4d33      	ldr	r5, [pc, #204]	; (8006258 <_vfiprintf_r+0x21c>)
 800618c:	f898 1000 	ldrb.w	r1, [r8]
 8006190:	2203      	movs	r2, #3
 8006192:	4628      	mov	r0, r5
 8006194:	f7fa f82c 	bl	80001f0 <memchr>
 8006198:	b140      	cbz	r0, 80061ac <_vfiprintf_r+0x170>
 800619a:	2340      	movs	r3, #64	; 0x40
 800619c:	1b40      	subs	r0, r0, r5
 800619e:	fa03 f000 	lsl.w	r0, r3, r0
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	4303      	orrs	r3, r0
 80061a6:	f108 0801 	add.w	r8, r8, #1
 80061aa:	9304      	str	r3, [sp, #16]
 80061ac:	f898 1000 	ldrb.w	r1, [r8]
 80061b0:	482a      	ldr	r0, [pc, #168]	; (800625c <_vfiprintf_r+0x220>)
 80061b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b6:	2206      	movs	r2, #6
 80061b8:	f108 0701 	add.w	r7, r8, #1
 80061bc:	f7fa f818 	bl	80001f0 <memchr>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d037      	beq.n	8006234 <_vfiprintf_r+0x1f8>
 80061c4:	4b26      	ldr	r3, [pc, #152]	; (8006260 <_vfiprintf_r+0x224>)
 80061c6:	bb1b      	cbnz	r3, 8006210 <_vfiprintf_r+0x1d4>
 80061c8:	9b03      	ldr	r3, [sp, #12]
 80061ca:	3307      	adds	r3, #7
 80061cc:	f023 0307 	bic.w	r3, r3, #7
 80061d0:	3308      	adds	r3, #8
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d6:	444b      	add	r3, r9
 80061d8:	9309      	str	r3, [sp, #36]	; 0x24
 80061da:	e750      	b.n	800607e <_vfiprintf_r+0x42>
 80061dc:	fb05 3202 	mla	r2, r5, r2, r3
 80061e0:	2001      	movs	r0, #1
 80061e2:	4688      	mov	r8, r1
 80061e4:	e78a      	b.n	80060fc <_vfiprintf_r+0xc0>
 80061e6:	2300      	movs	r3, #0
 80061e8:	f108 0801 	add.w	r8, r8, #1
 80061ec:	9305      	str	r3, [sp, #20]
 80061ee:	4619      	mov	r1, r3
 80061f0:	250a      	movs	r5, #10
 80061f2:	4640      	mov	r0, r8
 80061f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f8:	3a30      	subs	r2, #48	; 0x30
 80061fa:	2a09      	cmp	r2, #9
 80061fc:	d903      	bls.n	8006206 <_vfiprintf_r+0x1ca>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0c3      	beq.n	800618a <_vfiprintf_r+0x14e>
 8006202:	9105      	str	r1, [sp, #20]
 8006204:	e7c1      	b.n	800618a <_vfiprintf_r+0x14e>
 8006206:	fb05 2101 	mla	r1, r5, r1, r2
 800620a:	2301      	movs	r3, #1
 800620c:	4680      	mov	r8, r0
 800620e:	e7f0      	b.n	80061f2 <_vfiprintf_r+0x1b6>
 8006210:	ab03      	add	r3, sp, #12
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	4622      	mov	r2, r4
 8006216:	4b13      	ldr	r3, [pc, #76]	; (8006264 <_vfiprintf_r+0x228>)
 8006218:	a904      	add	r1, sp, #16
 800621a:	4630      	mov	r0, r6
 800621c:	f3af 8000 	nop.w
 8006220:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006224:	4681      	mov	r9, r0
 8006226:	d1d5      	bne.n	80061d4 <_vfiprintf_r+0x198>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	065b      	lsls	r3, r3, #25
 800622c:	f53f af7e 	bmi.w	800612c <_vfiprintf_r+0xf0>
 8006230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006232:	e77d      	b.n	8006130 <_vfiprintf_r+0xf4>
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4622      	mov	r2, r4
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <_vfiprintf_r+0x228>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	4630      	mov	r0, r6
 8006240:	f000 f888 	bl	8006354 <_printf_i>
 8006244:	e7ec      	b.n	8006220 <_vfiprintf_r+0x1e4>
 8006246:	bf00      	nop
 8006248:	080068c4 	.word	0x080068c4
 800624c:	08006904 	.word	0x08006904
 8006250:	080068e4 	.word	0x080068e4
 8006254:	080068a4 	.word	0x080068a4
 8006258:	0800690a 	.word	0x0800690a
 800625c:	0800690e 	.word	0x0800690e
 8006260:	00000000 	.word	0x00000000
 8006264:	08006017 	.word	0x08006017

08006268 <_printf_common>:
 8006268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800626c:	4691      	mov	r9, r2
 800626e:	461f      	mov	r7, r3
 8006270:	688a      	ldr	r2, [r1, #8]
 8006272:	690b      	ldr	r3, [r1, #16]
 8006274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006278:	4293      	cmp	r3, r2
 800627a:	bfb8      	it	lt
 800627c:	4613      	movlt	r3, r2
 800627e:	f8c9 3000 	str.w	r3, [r9]
 8006282:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006286:	4606      	mov	r6, r0
 8006288:	460c      	mov	r4, r1
 800628a:	b112      	cbz	r2, 8006292 <_printf_common+0x2a>
 800628c:	3301      	adds	r3, #1
 800628e:	f8c9 3000 	str.w	r3, [r9]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	0699      	lsls	r1, r3, #26
 8006296:	bf42      	ittt	mi
 8006298:	f8d9 3000 	ldrmi.w	r3, [r9]
 800629c:	3302      	addmi	r3, #2
 800629e:	f8c9 3000 	strmi.w	r3, [r9]
 80062a2:	6825      	ldr	r5, [r4, #0]
 80062a4:	f015 0506 	ands.w	r5, r5, #6
 80062a8:	d107      	bne.n	80062ba <_printf_common+0x52>
 80062aa:	f104 0a19 	add.w	sl, r4, #25
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	f8d9 2000 	ldr.w	r2, [r9]
 80062b4:	1a9b      	subs	r3, r3, r2
 80062b6:	42ab      	cmp	r3, r5
 80062b8:	dc28      	bgt.n	800630c <_printf_common+0xa4>
 80062ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	3300      	adds	r3, #0
 80062c2:	bf18      	it	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	0692      	lsls	r2, r2, #26
 80062c8:	d42d      	bmi.n	8006326 <_printf_common+0xbe>
 80062ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062ce:	4639      	mov	r1, r7
 80062d0:	4630      	mov	r0, r6
 80062d2:	47c0      	blx	r8
 80062d4:	3001      	adds	r0, #1
 80062d6:	d020      	beq.n	800631a <_printf_common+0xb2>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	68e5      	ldr	r5, [r4, #12]
 80062dc:	f8d9 2000 	ldr.w	r2, [r9]
 80062e0:	f003 0306 	and.w	r3, r3, #6
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	bf08      	it	eq
 80062e8:	1aad      	subeq	r5, r5, r2
 80062ea:	68a3      	ldr	r3, [r4, #8]
 80062ec:	6922      	ldr	r2, [r4, #16]
 80062ee:	bf0c      	ite	eq
 80062f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062f4:	2500      	movne	r5, #0
 80062f6:	4293      	cmp	r3, r2
 80062f8:	bfc4      	itt	gt
 80062fa:	1a9b      	subgt	r3, r3, r2
 80062fc:	18ed      	addgt	r5, r5, r3
 80062fe:	f04f 0900 	mov.w	r9, #0
 8006302:	341a      	adds	r4, #26
 8006304:	454d      	cmp	r5, r9
 8006306:	d11a      	bne.n	800633e <_printf_common+0xd6>
 8006308:	2000      	movs	r0, #0
 800630a:	e008      	b.n	800631e <_printf_common+0xb6>
 800630c:	2301      	movs	r3, #1
 800630e:	4652      	mov	r2, sl
 8006310:	4639      	mov	r1, r7
 8006312:	4630      	mov	r0, r6
 8006314:	47c0      	blx	r8
 8006316:	3001      	adds	r0, #1
 8006318:	d103      	bne.n	8006322 <_printf_common+0xba>
 800631a:	f04f 30ff 	mov.w	r0, #4294967295
 800631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006322:	3501      	adds	r5, #1
 8006324:	e7c3      	b.n	80062ae <_printf_common+0x46>
 8006326:	18e1      	adds	r1, r4, r3
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	2030      	movs	r0, #48	; 0x30
 800632c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006330:	4422      	add	r2, r4
 8006332:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006336:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800633a:	3302      	adds	r3, #2
 800633c:	e7c5      	b.n	80062ca <_printf_common+0x62>
 800633e:	2301      	movs	r3, #1
 8006340:	4622      	mov	r2, r4
 8006342:	4639      	mov	r1, r7
 8006344:	4630      	mov	r0, r6
 8006346:	47c0      	blx	r8
 8006348:	3001      	adds	r0, #1
 800634a:	d0e6      	beq.n	800631a <_printf_common+0xb2>
 800634c:	f109 0901 	add.w	r9, r9, #1
 8006350:	e7d8      	b.n	8006304 <_printf_common+0x9c>
	...

08006354 <_printf_i>:
 8006354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006358:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800635c:	460c      	mov	r4, r1
 800635e:	7e09      	ldrb	r1, [r1, #24]
 8006360:	b085      	sub	sp, #20
 8006362:	296e      	cmp	r1, #110	; 0x6e
 8006364:	4617      	mov	r7, r2
 8006366:	4606      	mov	r6, r0
 8006368:	4698      	mov	r8, r3
 800636a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800636c:	f000 80b3 	beq.w	80064d6 <_printf_i+0x182>
 8006370:	d822      	bhi.n	80063b8 <_printf_i+0x64>
 8006372:	2963      	cmp	r1, #99	; 0x63
 8006374:	d036      	beq.n	80063e4 <_printf_i+0x90>
 8006376:	d80a      	bhi.n	800638e <_printf_i+0x3a>
 8006378:	2900      	cmp	r1, #0
 800637a:	f000 80b9 	beq.w	80064f0 <_printf_i+0x19c>
 800637e:	2958      	cmp	r1, #88	; 0x58
 8006380:	f000 8083 	beq.w	800648a <_printf_i+0x136>
 8006384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006388:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800638c:	e032      	b.n	80063f4 <_printf_i+0xa0>
 800638e:	2964      	cmp	r1, #100	; 0x64
 8006390:	d001      	beq.n	8006396 <_printf_i+0x42>
 8006392:	2969      	cmp	r1, #105	; 0x69
 8006394:	d1f6      	bne.n	8006384 <_printf_i+0x30>
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	0605      	lsls	r5, r0, #24
 800639c:	f103 0104 	add.w	r1, r3, #4
 80063a0:	d52a      	bpl.n	80063f8 <_printf_i+0xa4>
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6011      	str	r1, [r2, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da03      	bge.n	80063b2 <_printf_i+0x5e>
 80063aa:	222d      	movs	r2, #45	; 0x2d
 80063ac:	425b      	negs	r3, r3
 80063ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063b2:	486f      	ldr	r0, [pc, #444]	; (8006570 <_printf_i+0x21c>)
 80063b4:	220a      	movs	r2, #10
 80063b6:	e039      	b.n	800642c <_printf_i+0xd8>
 80063b8:	2973      	cmp	r1, #115	; 0x73
 80063ba:	f000 809d 	beq.w	80064f8 <_printf_i+0x1a4>
 80063be:	d808      	bhi.n	80063d2 <_printf_i+0x7e>
 80063c0:	296f      	cmp	r1, #111	; 0x6f
 80063c2:	d020      	beq.n	8006406 <_printf_i+0xb2>
 80063c4:	2970      	cmp	r1, #112	; 0x70
 80063c6:	d1dd      	bne.n	8006384 <_printf_i+0x30>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	f043 0320 	orr.w	r3, r3, #32
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	e003      	b.n	80063da <_printf_i+0x86>
 80063d2:	2975      	cmp	r1, #117	; 0x75
 80063d4:	d017      	beq.n	8006406 <_printf_i+0xb2>
 80063d6:	2978      	cmp	r1, #120	; 0x78
 80063d8:	d1d4      	bne.n	8006384 <_printf_i+0x30>
 80063da:	2378      	movs	r3, #120	; 0x78
 80063dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063e0:	4864      	ldr	r0, [pc, #400]	; (8006574 <_printf_i+0x220>)
 80063e2:	e055      	b.n	8006490 <_printf_i+0x13c>
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	1d19      	adds	r1, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6011      	str	r1, [r2, #0]
 80063ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063f4:	2301      	movs	r3, #1
 80063f6:	e08c      	b.n	8006512 <_printf_i+0x1be>
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6011      	str	r1, [r2, #0]
 80063fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006400:	bf18      	it	ne
 8006402:	b21b      	sxthne	r3, r3
 8006404:	e7cf      	b.n	80063a6 <_printf_i+0x52>
 8006406:	6813      	ldr	r3, [r2, #0]
 8006408:	6825      	ldr	r5, [r4, #0]
 800640a:	1d18      	adds	r0, r3, #4
 800640c:	6010      	str	r0, [r2, #0]
 800640e:	0628      	lsls	r0, r5, #24
 8006410:	d501      	bpl.n	8006416 <_printf_i+0xc2>
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	e002      	b.n	800641c <_printf_i+0xc8>
 8006416:	0668      	lsls	r0, r5, #25
 8006418:	d5fb      	bpl.n	8006412 <_printf_i+0xbe>
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	4854      	ldr	r0, [pc, #336]	; (8006570 <_printf_i+0x21c>)
 800641e:	296f      	cmp	r1, #111	; 0x6f
 8006420:	bf14      	ite	ne
 8006422:	220a      	movne	r2, #10
 8006424:	2208      	moveq	r2, #8
 8006426:	2100      	movs	r1, #0
 8006428:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800642c:	6865      	ldr	r5, [r4, #4]
 800642e:	60a5      	str	r5, [r4, #8]
 8006430:	2d00      	cmp	r5, #0
 8006432:	f2c0 8095 	blt.w	8006560 <_printf_i+0x20c>
 8006436:	6821      	ldr	r1, [r4, #0]
 8006438:	f021 0104 	bic.w	r1, r1, #4
 800643c:	6021      	str	r1, [r4, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d13d      	bne.n	80064be <_printf_i+0x16a>
 8006442:	2d00      	cmp	r5, #0
 8006444:	f040 808e 	bne.w	8006564 <_printf_i+0x210>
 8006448:	4665      	mov	r5, ip
 800644a:	2a08      	cmp	r2, #8
 800644c:	d10b      	bne.n	8006466 <_printf_i+0x112>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	07db      	lsls	r3, r3, #31
 8006452:	d508      	bpl.n	8006466 <_printf_i+0x112>
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	6862      	ldr	r2, [r4, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	bfde      	ittt	le
 800645c:	2330      	movle	r3, #48	; 0x30
 800645e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006462:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006466:	ebac 0305 	sub.w	r3, ip, r5
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	f8cd 8000 	str.w	r8, [sp]
 8006470:	463b      	mov	r3, r7
 8006472:	aa03      	add	r2, sp, #12
 8006474:	4621      	mov	r1, r4
 8006476:	4630      	mov	r0, r6
 8006478:	f7ff fef6 	bl	8006268 <_printf_common>
 800647c:	3001      	adds	r0, #1
 800647e:	d14d      	bne.n	800651c <_printf_i+0x1c8>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	b005      	add	sp, #20
 8006486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800648a:	4839      	ldr	r0, [pc, #228]	; (8006570 <_printf_i+0x21c>)
 800648c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006490:	6813      	ldr	r3, [r2, #0]
 8006492:	6821      	ldr	r1, [r4, #0]
 8006494:	1d1d      	adds	r5, r3, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6015      	str	r5, [r2, #0]
 800649a:	060a      	lsls	r2, r1, #24
 800649c:	d50b      	bpl.n	80064b6 <_printf_i+0x162>
 800649e:	07ca      	lsls	r2, r1, #31
 80064a0:	bf44      	itt	mi
 80064a2:	f041 0120 	orrmi.w	r1, r1, #32
 80064a6:	6021      	strmi	r1, [r4, #0]
 80064a8:	b91b      	cbnz	r3, 80064b2 <_printf_i+0x15e>
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	f022 0220 	bic.w	r2, r2, #32
 80064b0:	6022      	str	r2, [r4, #0]
 80064b2:	2210      	movs	r2, #16
 80064b4:	e7b7      	b.n	8006426 <_printf_i+0xd2>
 80064b6:	064d      	lsls	r5, r1, #25
 80064b8:	bf48      	it	mi
 80064ba:	b29b      	uxthmi	r3, r3
 80064bc:	e7ef      	b.n	800649e <_printf_i+0x14a>
 80064be:	4665      	mov	r5, ip
 80064c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80064c4:	fb02 3311 	mls	r3, r2, r1, r3
 80064c8:	5cc3      	ldrb	r3, [r0, r3]
 80064ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064ce:	460b      	mov	r3, r1
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d1f5      	bne.n	80064c0 <_printf_i+0x16c>
 80064d4:	e7b9      	b.n	800644a <_printf_i+0xf6>
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	6825      	ldr	r5, [r4, #0]
 80064da:	6961      	ldr	r1, [r4, #20]
 80064dc:	1d18      	adds	r0, r3, #4
 80064de:	6010      	str	r0, [r2, #0]
 80064e0:	0628      	lsls	r0, r5, #24
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	d501      	bpl.n	80064ea <_printf_i+0x196>
 80064e6:	6019      	str	r1, [r3, #0]
 80064e8:	e002      	b.n	80064f0 <_printf_i+0x19c>
 80064ea:	066a      	lsls	r2, r5, #25
 80064ec:	d5fb      	bpl.n	80064e6 <_printf_i+0x192>
 80064ee:	8019      	strh	r1, [r3, #0]
 80064f0:	2300      	movs	r3, #0
 80064f2:	6123      	str	r3, [r4, #16]
 80064f4:	4665      	mov	r5, ip
 80064f6:	e7b9      	b.n	800646c <_printf_i+0x118>
 80064f8:	6813      	ldr	r3, [r2, #0]
 80064fa:	1d19      	adds	r1, r3, #4
 80064fc:	6011      	str	r1, [r2, #0]
 80064fe:	681d      	ldr	r5, [r3, #0]
 8006500:	6862      	ldr	r2, [r4, #4]
 8006502:	2100      	movs	r1, #0
 8006504:	4628      	mov	r0, r5
 8006506:	f7f9 fe73 	bl	80001f0 <memchr>
 800650a:	b108      	cbz	r0, 8006510 <_printf_i+0x1bc>
 800650c:	1b40      	subs	r0, r0, r5
 800650e:	6060      	str	r0, [r4, #4]
 8006510:	6863      	ldr	r3, [r4, #4]
 8006512:	6123      	str	r3, [r4, #16]
 8006514:	2300      	movs	r3, #0
 8006516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800651a:	e7a7      	b.n	800646c <_printf_i+0x118>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	462a      	mov	r2, r5
 8006520:	4639      	mov	r1, r7
 8006522:	4630      	mov	r0, r6
 8006524:	47c0      	blx	r8
 8006526:	3001      	adds	r0, #1
 8006528:	d0aa      	beq.n	8006480 <_printf_i+0x12c>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	079b      	lsls	r3, r3, #30
 800652e:	d413      	bmi.n	8006558 <_printf_i+0x204>
 8006530:	68e0      	ldr	r0, [r4, #12]
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	4298      	cmp	r0, r3
 8006536:	bfb8      	it	lt
 8006538:	4618      	movlt	r0, r3
 800653a:	e7a3      	b.n	8006484 <_printf_i+0x130>
 800653c:	2301      	movs	r3, #1
 800653e:	464a      	mov	r2, r9
 8006540:	4639      	mov	r1, r7
 8006542:	4630      	mov	r0, r6
 8006544:	47c0      	blx	r8
 8006546:	3001      	adds	r0, #1
 8006548:	d09a      	beq.n	8006480 <_printf_i+0x12c>
 800654a:	3501      	adds	r5, #1
 800654c:	68e3      	ldr	r3, [r4, #12]
 800654e:	9a03      	ldr	r2, [sp, #12]
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	42ab      	cmp	r3, r5
 8006554:	dcf2      	bgt.n	800653c <_printf_i+0x1e8>
 8006556:	e7eb      	b.n	8006530 <_printf_i+0x1dc>
 8006558:	2500      	movs	r5, #0
 800655a:	f104 0919 	add.w	r9, r4, #25
 800655e:	e7f5      	b.n	800654c <_printf_i+0x1f8>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1ac      	bne.n	80064be <_printf_i+0x16a>
 8006564:	7803      	ldrb	r3, [r0, #0]
 8006566:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800656e:	e76c      	b.n	800644a <_printf_i+0xf6>
 8006570:	08006915 	.word	0x08006915
 8006574:	08006926 	.word	0x08006926

08006578 <_sbrk_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4c06      	ldr	r4, [pc, #24]	; (8006594 <_sbrk_r+0x1c>)
 800657c:	2300      	movs	r3, #0
 800657e:	4605      	mov	r5, r0
 8006580:	4608      	mov	r0, r1
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	f7fa fe82 	bl	800128c <_sbrk>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_sbrk_r+0x1a>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	b103      	cbz	r3, 8006592 <_sbrk_r+0x1a>
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	200041b4 	.word	0x200041b4

08006598 <__sread>:
 8006598:	b510      	push	{r4, lr}
 800659a:	460c      	mov	r4, r1
 800659c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a0:	f000 f896 	bl	80066d0 <_read_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	bfab      	itete	ge
 80065a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065aa:	89a3      	ldrhlt	r3, [r4, #12]
 80065ac:	181b      	addge	r3, r3, r0
 80065ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065b2:	bfac      	ite	ge
 80065b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065b6:	81a3      	strhlt	r3, [r4, #12]
 80065b8:	bd10      	pop	{r4, pc}

080065ba <__swrite>:
 80065ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065be:	461f      	mov	r7, r3
 80065c0:	898b      	ldrh	r3, [r1, #12]
 80065c2:	05db      	lsls	r3, r3, #23
 80065c4:	4605      	mov	r5, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	4616      	mov	r6, r2
 80065ca:	d505      	bpl.n	80065d8 <__swrite+0x1e>
 80065cc:	2302      	movs	r3, #2
 80065ce:	2200      	movs	r2, #0
 80065d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d4:	f000 f868 	bl	80066a8 <_lseek_r>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	4628      	mov	r0, r5
 80065ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ee:	f000 b817 	b.w	8006620 <_write_r>

080065f2 <__sseek>:
 80065f2:	b510      	push	{r4, lr}
 80065f4:	460c      	mov	r4, r1
 80065f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fa:	f000 f855 	bl	80066a8 <_lseek_r>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	bf15      	itete	ne
 8006604:	6560      	strne	r0, [r4, #84]	; 0x54
 8006606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800660a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800660e:	81a3      	strheq	r3, [r4, #12]
 8006610:	bf18      	it	ne
 8006612:	81a3      	strhne	r3, [r4, #12]
 8006614:	bd10      	pop	{r4, pc}

08006616 <__sclose>:
 8006616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661a:	f000 b813 	b.w	8006644 <_close_r>
	...

08006620 <_write_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4c07      	ldr	r4, [pc, #28]	; (8006640 <_write_r+0x20>)
 8006624:	4605      	mov	r5, r0
 8006626:	4608      	mov	r0, r1
 8006628:	4611      	mov	r1, r2
 800662a:	2200      	movs	r2, #0
 800662c:	6022      	str	r2, [r4, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f7fa fddb 	bl	80011ea <_write>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_write_r+0x1e>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	b103      	cbz	r3, 800663e <_write_r+0x1e>
 800663c:	602b      	str	r3, [r5, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	200041b4 	.word	0x200041b4

08006644 <_close_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4c06      	ldr	r4, [pc, #24]	; (8006660 <_close_r+0x1c>)
 8006648:	2300      	movs	r3, #0
 800664a:	4605      	mov	r5, r0
 800664c:	4608      	mov	r0, r1
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	f7fa fde7 	bl	8001222 <_close>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d102      	bne.n	800665e <_close_r+0x1a>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	b103      	cbz	r3, 800665e <_close_r+0x1a>
 800665c:	602b      	str	r3, [r5, #0]
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	200041b4 	.word	0x200041b4

08006664 <_fstat_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4c07      	ldr	r4, [pc, #28]	; (8006684 <_fstat_r+0x20>)
 8006668:	2300      	movs	r3, #0
 800666a:	4605      	mov	r5, r0
 800666c:	4608      	mov	r0, r1
 800666e:	4611      	mov	r1, r2
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	f7fa fde2 	bl	800123a <_fstat>
 8006676:	1c43      	adds	r3, r0, #1
 8006678:	d102      	bne.n	8006680 <_fstat_r+0x1c>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	b103      	cbz	r3, 8006680 <_fstat_r+0x1c>
 800667e:	602b      	str	r3, [r5, #0]
 8006680:	bd38      	pop	{r3, r4, r5, pc}
 8006682:	bf00      	nop
 8006684:	200041b4 	.word	0x200041b4

08006688 <_isatty_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4c06      	ldr	r4, [pc, #24]	; (80066a4 <_isatty_r+0x1c>)
 800668c:	2300      	movs	r3, #0
 800668e:	4605      	mov	r5, r0
 8006690:	4608      	mov	r0, r1
 8006692:	6023      	str	r3, [r4, #0]
 8006694:	f7fa fde1 	bl	800125a <_isatty>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_isatty_r+0x1a>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_isatty_r+0x1a>
 80066a0:	602b      	str	r3, [r5, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	200041b4 	.word	0x200041b4

080066a8 <_lseek_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4c07      	ldr	r4, [pc, #28]	; (80066c8 <_lseek_r+0x20>)
 80066ac:	4605      	mov	r5, r0
 80066ae:	4608      	mov	r0, r1
 80066b0:	4611      	mov	r1, r2
 80066b2:	2200      	movs	r2, #0
 80066b4:	6022      	str	r2, [r4, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f7fa fdda 	bl	8001270 <_lseek>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_lseek_r+0x1e>
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_lseek_r+0x1e>
 80066c4:	602b      	str	r3, [r5, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	200041b4 	.word	0x200041b4

080066cc <__malloc_lock>:
 80066cc:	4770      	bx	lr

080066ce <__malloc_unlock>:
 80066ce:	4770      	bx	lr

080066d0 <_read_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4c07      	ldr	r4, [pc, #28]	; (80066f0 <_read_r+0x20>)
 80066d4:	4605      	mov	r5, r0
 80066d6:	4608      	mov	r0, r1
 80066d8:	4611      	mov	r1, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	6022      	str	r2, [r4, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	f7fa fd66 	bl	80011b0 <_read>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_read_r+0x1e>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_read_r+0x1e>
 80066ec:	602b      	str	r3, [r5, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	200041b4 	.word	0x200041b4

080066f4 <_init>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

08006700 <_fini>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr

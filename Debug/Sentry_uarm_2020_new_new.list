
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed4  08006ed4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006edc  08006edc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004190  20000074  08006f58  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004204  08006f58  00024204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3df  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e25  00000000  00000000  0003c483  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  000402a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  000416f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026f1a  00000000  00000000  00042960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013250  00000000  00000000  0006987a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2a58  00000000  00000000  0007caca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015f522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000594c  00000000  00000000  0015f5a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c6c 	.word	0x08006c6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006c6c 	.word	0x08006c6c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b972 	b.w	8000904 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9e08      	ldr	r6, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	4688      	mov	r8, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d14b      	bne.n	80006de <__udivmoddi4+0xa6>
 8000646:	428a      	cmp	r2, r1
 8000648:	4615      	mov	r5, r2
 800064a:	d967      	bls.n	800071c <__udivmoddi4+0xe4>
 800064c:	fab2 f282 	clz	r2, r2
 8000650:	b14a      	cbz	r2, 8000666 <__udivmoddi4+0x2e>
 8000652:	f1c2 0720 	rsb	r7, r2, #32
 8000656:	fa01 f302 	lsl.w	r3, r1, r2
 800065a:	fa20 f707 	lsr.w	r7, r0, r7
 800065e:	4095      	lsls	r5, r2
 8000660:	ea47 0803 	orr.w	r8, r7, r3
 8000664:	4094      	lsls	r4, r2
 8000666:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800066a:	0c23      	lsrs	r3, r4, #16
 800066c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000670:	fa1f fc85 	uxth.w	ip, r5
 8000674:	fb0e 8817 	mls	r8, lr, r7, r8
 8000678:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067c:	fb07 f10c 	mul.w	r1, r7, ip
 8000680:	4299      	cmp	r1, r3
 8000682:	d909      	bls.n	8000698 <__udivmoddi4+0x60>
 8000684:	18eb      	adds	r3, r5, r3
 8000686:	f107 30ff 	add.w	r0, r7, #4294967295
 800068a:	f080 811b 	bcs.w	80008c4 <__udivmoddi4+0x28c>
 800068e:	4299      	cmp	r1, r3
 8000690:	f240 8118 	bls.w	80008c4 <__udivmoddi4+0x28c>
 8000694:	3f02      	subs	r7, #2
 8000696:	442b      	add	r3, r5
 8000698:	1a5b      	subs	r3, r3, r1
 800069a:	b2a4      	uxth	r4, r4
 800069c:	fbb3 f0fe 	udiv	r0, r3, lr
 80006a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ac:	45a4      	cmp	ip, r4
 80006ae:	d909      	bls.n	80006c4 <__udivmoddi4+0x8c>
 80006b0:	192c      	adds	r4, r5, r4
 80006b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b6:	f080 8107 	bcs.w	80008c8 <__udivmoddi4+0x290>
 80006ba:	45a4      	cmp	ip, r4
 80006bc:	f240 8104 	bls.w	80008c8 <__udivmoddi4+0x290>
 80006c0:	3802      	subs	r0, #2
 80006c2:	442c      	add	r4, r5
 80006c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006c8:	eba4 040c 	sub.w	r4, r4, ip
 80006cc:	2700      	movs	r7, #0
 80006ce:	b11e      	cbz	r6, 80006d8 <__udivmoddi4+0xa0>
 80006d0:	40d4      	lsrs	r4, r2
 80006d2:	2300      	movs	r3, #0
 80006d4:	e9c6 4300 	strd	r4, r3, [r6]
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d909      	bls.n	80006f6 <__udivmoddi4+0xbe>
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	f000 80eb 	beq.w	80008be <__udivmoddi4+0x286>
 80006e8:	2700      	movs	r7, #0
 80006ea:	e9c6 0100 	strd	r0, r1, [r6]
 80006ee:	4638      	mov	r0, r7
 80006f0:	4639      	mov	r1, r7
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	fab3 f783 	clz	r7, r3
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d147      	bne.n	800078e <__udivmoddi4+0x156>
 80006fe:	428b      	cmp	r3, r1
 8000700:	d302      	bcc.n	8000708 <__udivmoddi4+0xd0>
 8000702:	4282      	cmp	r2, r0
 8000704:	f200 80fa 	bhi.w	80008fc <__udivmoddi4+0x2c4>
 8000708:	1a84      	subs	r4, r0, r2
 800070a:	eb61 0303 	sbc.w	r3, r1, r3
 800070e:	2001      	movs	r0, #1
 8000710:	4698      	mov	r8, r3
 8000712:	2e00      	cmp	r6, #0
 8000714:	d0e0      	beq.n	80006d8 <__udivmoddi4+0xa0>
 8000716:	e9c6 4800 	strd	r4, r8, [r6]
 800071a:	e7dd      	b.n	80006d8 <__udivmoddi4+0xa0>
 800071c:	b902      	cbnz	r2, 8000720 <__udivmoddi4+0xe8>
 800071e:	deff      	udf	#255	; 0xff
 8000720:	fab2 f282 	clz	r2, r2
 8000724:	2a00      	cmp	r2, #0
 8000726:	f040 808f 	bne.w	8000848 <__udivmoddi4+0x210>
 800072a:	1b49      	subs	r1, r1, r5
 800072c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000730:	fa1f f885 	uxth.w	r8, r5
 8000734:	2701      	movs	r7, #1
 8000736:	fbb1 fcfe 	udiv	ip, r1, lr
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000744:	fb08 f10c 	mul.w	r1, r8, ip
 8000748:	4299      	cmp	r1, r3
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x124>
 800074c:	18eb      	adds	r3, r5, r3
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x122>
 8000754:	4299      	cmp	r1, r3
 8000756:	f200 80cd 	bhi.w	80008f4 <__udivmoddi4+0x2bc>
 800075a:	4684      	mov	ip, r0
 800075c:	1a59      	subs	r1, r3, r1
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1410 	mls	r4, lr, r0, r1
 8000768:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x14c>
 8000774:	192c      	adds	r4, r5, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x14a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80b6 	bhi.w	80008ee <__udivmoddi4+0x2b6>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e79f      	b.n	80006ce <__udivmoddi4+0x96>
 800078e:	f1c7 0c20 	rsb	ip, r7, #32
 8000792:	40bb      	lsls	r3, r7
 8000794:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000798:	ea4e 0e03 	orr.w	lr, lr, r3
 800079c:	fa01 f407 	lsl.w	r4, r1, r7
 80007a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007ac:	4325      	orrs	r5, r4
 80007ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80007b2:	0c2c      	lsrs	r4, r5, #16
 80007b4:	fb08 3319 	mls	r3, r8, r9, r3
 80007b8:	fa1f fa8e 	uxth.w	sl, lr
 80007bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007c0:	fb09 f40a 	mul.w	r4, r9, sl
 80007c4:	429c      	cmp	r4, r3
 80007c6:	fa02 f207 	lsl.w	r2, r2, r7
 80007ca:	fa00 f107 	lsl.w	r1, r0, r7
 80007ce:	d90b      	bls.n	80007e8 <__udivmoddi4+0x1b0>
 80007d0:	eb1e 0303 	adds.w	r3, lr, r3
 80007d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007d8:	f080 8087 	bcs.w	80008ea <__udivmoddi4+0x2b2>
 80007dc:	429c      	cmp	r4, r3
 80007de:	f240 8084 	bls.w	80008ea <__udivmoddi4+0x2b2>
 80007e2:	f1a9 0902 	sub.w	r9, r9, #2
 80007e6:	4473      	add	r3, lr
 80007e8:	1b1b      	subs	r3, r3, r4
 80007ea:	b2ad      	uxth	r5, r5
 80007ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f0:	fb08 3310 	mls	r3, r8, r0, r3
 80007f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80007fc:	45a2      	cmp	sl, r4
 80007fe:	d908      	bls.n	8000812 <__udivmoddi4+0x1da>
 8000800:	eb1e 0404 	adds.w	r4, lr, r4
 8000804:	f100 33ff 	add.w	r3, r0, #4294967295
 8000808:	d26b      	bcs.n	80008e2 <__udivmoddi4+0x2aa>
 800080a:	45a2      	cmp	sl, r4
 800080c:	d969      	bls.n	80008e2 <__udivmoddi4+0x2aa>
 800080e:	3802      	subs	r0, #2
 8000810:	4474      	add	r4, lr
 8000812:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000816:	fba0 8902 	umull	r8, r9, r0, r2
 800081a:	eba4 040a 	sub.w	r4, r4, sl
 800081e:	454c      	cmp	r4, r9
 8000820:	46c2      	mov	sl, r8
 8000822:	464b      	mov	r3, r9
 8000824:	d354      	bcc.n	80008d0 <__udivmoddi4+0x298>
 8000826:	d051      	beq.n	80008cc <__udivmoddi4+0x294>
 8000828:	2e00      	cmp	r6, #0
 800082a:	d069      	beq.n	8000900 <__udivmoddi4+0x2c8>
 800082c:	ebb1 050a 	subs.w	r5, r1, sl
 8000830:	eb64 0403 	sbc.w	r4, r4, r3
 8000834:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000838:	40fd      	lsrs	r5, r7
 800083a:	40fc      	lsrs	r4, r7
 800083c:	ea4c 0505 	orr.w	r5, ip, r5
 8000840:	e9c6 5400 	strd	r5, r4, [r6]
 8000844:	2700      	movs	r7, #0
 8000846:	e747      	b.n	80006d8 <__udivmoddi4+0xa0>
 8000848:	f1c2 0320 	rsb	r3, r2, #32
 800084c:	fa20 f703 	lsr.w	r7, r0, r3
 8000850:	4095      	lsls	r5, r2
 8000852:	fa01 f002 	lsl.w	r0, r1, r2
 8000856:	fa21 f303 	lsr.w	r3, r1, r3
 800085a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800085e:	4338      	orrs	r0, r7
 8000860:	0c01      	lsrs	r1, r0, #16
 8000862:	fbb3 f7fe 	udiv	r7, r3, lr
 8000866:	fa1f f885 	uxth.w	r8, r5
 800086a:	fb0e 3317 	mls	r3, lr, r7, r3
 800086e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000872:	fb07 f308 	mul.w	r3, r7, r8
 8000876:	428b      	cmp	r3, r1
 8000878:	fa04 f402 	lsl.w	r4, r4, r2
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x256>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f107 3cff 	add.w	ip, r7, #4294967295
 8000884:	d22f      	bcs.n	80008e6 <__udivmoddi4+0x2ae>
 8000886:	428b      	cmp	r3, r1
 8000888:	d92d      	bls.n	80008e6 <__udivmoddi4+0x2ae>
 800088a:	3f02      	subs	r7, #2
 800088c:	4429      	add	r1, r5
 800088e:	1acb      	subs	r3, r1, r3
 8000890:	b281      	uxth	r1, r0
 8000892:	fbb3 f0fe 	udiv	r0, r3, lr
 8000896:	fb0e 3310 	mls	r3, lr, r0, r3
 800089a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800089e:	fb00 f308 	mul.w	r3, r0, r8
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d907      	bls.n	80008b6 <__udivmoddi4+0x27e>
 80008a6:	1869      	adds	r1, r5, r1
 80008a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008ac:	d217      	bcs.n	80008de <__udivmoddi4+0x2a6>
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d915      	bls.n	80008de <__udivmoddi4+0x2a6>
 80008b2:	3802      	subs	r0, #2
 80008b4:	4429      	add	r1, r5
 80008b6:	1ac9      	subs	r1, r1, r3
 80008b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008bc:	e73b      	b.n	8000736 <__udivmoddi4+0xfe>
 80008be:	4637      	mov	r7, r6
 80008c0:	4630      	mov	r0, r6
 80008c2:	e709      	b.n	80006d8 <__udivmoddi4+0xa0>
 80008c4:	4607      	mov	r7, r0
 80008c6:	e6e7      	b.n	8000698 <__udivmoddi4+0x60>
 80008c8:	4618      	mov	r0, r3
 80008ca:	e6fb      	b.n	80006c4 <__udivmoddi4+0x8c>
 80008cc:	4541      	cmp	r1, r8
 80008ce:	d2ab      	bcs.n	8000828 <__udivmoddi4+0x1f0>
 80008d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008d4:	eb69 020e 	sbc.w	r2, r9, lr
 80008d8:	3801      	subs	r0, #1
 80008da:	4613      	mov	r3, r2
 80008dc:	e7a4      	b.n	8000828 <__udivmoddi4+0x1f0>
 80008de:	4660      	mov	r0, ip
 80008e0:	e7e9      	b.n	80008b6 <__udivmoddi4+0x27e>
 80008e2:	4618      	mov	r0, r3
 80008e4:	e795      	b.n	8000812 <__udivmoddi4+0x1da>
 80008e6:	4667      	mov	r7, ip
 80008e8:	e7d1      	b.n	800088e <__udivmoddi4+0x256>
 80008ea:	4681      	mov	r9, r0
 80008ec:	e77c      	b.n	80007e8 <__udivmoddi4+0x1b0>
 80008ee:	3802      	subs	r0, #2
 80008f0:	442c      	add	r4, r5
 80008f2:	e747      	b.n	8000784 <__udivmoddi4+0x14c>
 80008f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008f8:	442b      	add	r3, r5
 80008fa:	e72f      	b.n	800075c <__udivmoddi4+0x124>
 80008fc:	4638      	mov	r0, r7
 80008fe:	e708      	b.n	8000712 <__udivmoddi4+0xda>
 8000900:	4637      	mov	r7, r6
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0xa0>

08000904 <__aeabi_idiv0>:
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <Chassis_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Chassis_Task_Func */
void Chassis_Task_Func(void const * argument)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	//buzzer_play_mario(200);
  /* Infinite loop */
  double i=0;
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	f04f 0400 	mov.w	r4, #0
 8000918:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {
	//printf("\nWelcome to RM-EE\n");
	//printf("Hello, the current time is %.2F",i);
	i+=0.1;
 800091c:	a30a      	add	r3, pc, #40	; (adr r3, 8000948 <Chassis_Task_Func+0x40>)
 800091e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000926:	f7ff fcb9 	bl	800029c <__adddf3>
 800092a:	4603      	mov	r3, r0
 800092c:	460c      	mov	r4, r1
 800092e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    osDelay(500);
 8000932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000936:	f004 f8cc 	bl	8004ad2 <osDelay>
    osDelay(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f004 f8c9 	bl	8004ad2 <osDelay>
	i+=0.1;
 8000940:	e7ec      	b.n	800091c <Chassis_Task_Func+0x14>
 8000942:	bf00      	nop
 8000944:	f3af 8000 	nop.w
 8000948:	9999999a 	.word	0x9999999a
 800094c:	3fb99999 	.word	0x3fb99999

08000950 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	//buzzer_play_chromatic(100);

	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000958:	2102      	movs	r1, #2
 800095a:	4824      	ldr	r0, [pc, #144]	; (80009ec <Gimbal_Task_Function+0x9c>)
 800095c:	f001 fc59 	bl	8002212 <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <Gimbal_Task_Function+0xa0>)
 8000962:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000966:	801a      	strh	r2, [r3, #0]



  for(;;)
  {
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	4822      	ldr	r0, [pc, #136]	; (80009f4 <Gimbal_Task_Function+0xa4>)
 800096c:	f002 f945 	bl	8002bfa <HAL_GPIO_TogglePin>
	  CAN_Send_Gimbal(velocity,0);
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <Gimbal_Task_Function+0xa0>)
 8000972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f843 	bl	8000a04 <CAN_Send_Gimbal>
	  uint8_t motorStatus2[8];

	  can_filter_enable(&hcan1);
 800097e:	481b      	ldr	r0, [pc, #108]	; (80009ec <Gimbal_Task_Function+0x9c>)
 8000980:	f000 f9d6 	bl	8000d30 <can_filter_enable>

	  memcpy(motorStatus2, can_rx_buffer,8);
 8000984:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <Gimbal_Task_Function+0xa8>)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	6810      	ldr	r0, [r2, #0]
 800098c:	6851      	ldr	r1, [r2, #4]
 800098e:	c303      	stmia	r3!, {r0, r1}
	  current_angle=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 8000990:	7a3b      	ldrb	r3, [r7, #8]
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	b21a      	sxth	r2, r3
 8000996:	7a7b      	ldrb	r3, [r7, #9]
 8000998:	b21b      	sxth	r3, r3
 800099a:	4313      	orrs	r3, r2
 800099c:	b21a      	sxth	r2, r3
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <Gimbal_Task_Function+0xac>)
 80009a0:	801a      	strh	r2, [r3, #0]
	  //Current angle is absolute
	  printf("The current angle is %d\n",current_angle);
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <Gimbal_Task_Function+0xac>)
 80009a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4815      	ldr	r0, [pc, #84]	; (8000a00 <Gimbal_Task_Function+0xb0>)
 80009ac:	f005 fa7a 	bl	8005ea4 <iprintf>
	  if (abs(current_angle-4096)<50){
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <Gimbal_Task_Function+0xac>)
 80009b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80009ba:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80009be:	db0a      	blt.n	80009d6 <Gimbal_Task_Function+0x86>
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <Gimbal_Task_Function+0xac>)
 80009c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80009ca:	2b31      	cmp	r3, #49	; 0x31
 80009cc:	dc03      	bgt.n	80009d6 <Gimbal_Task_Function+0x86>
		  velocity=0;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <Gimbal_Task_Function+0xa0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	801a      	strh	r2, [r3, #0]
 80009d4:	e003      	b.n	80009de <Gimbal_Task_Function+0x8e>
	  }
	  else{
		  velocity=3000;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <Gimbal_Task_Function+0xa0>)
 80009d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009dc:	801a      	strh	r2, [r3, #0]
	  }
	  can_filter_disable(&hcan1);
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <Gimbal_Task_Function+0x9c>)
 80009e0:	f000 f9c8 	bl	8000d74 <can_filter_disable>

	  //End of not working part


	  //osDelay(500);
	  osDelay(1);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f004 f874 	bl	8004ad2 <osDelay>
  {
 80009ea:	e7bd      	b.n	8000968 <Gimbal_Task_Function+0x18>
 80009ec:	200040c4 	.word	0x200040c4
 80009f0:	2000412e 	.word	0x2000412e
 80009f4:	40021800 	.word	0x40021800
 80009f8:	20004130 	.word	0x20004130
 80009fc:	2000412c 	.word	0x2000412c
 8000a00:	08006c84 	.word	0x08006c84

08000a04 <CAN_Send_Gimbal>:
  }
  /* USER CODE END Gimbal_Task_Function */
}

void CAN_Send_Gimbal(int16_t yaw_raw, int16_t pitch_raw)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	4613      	mov	r3, r2
 8000a12:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    //chassis_tx_message.StdId = 0x200;  // 3508
	chassis_tx_message.StdId = 0x1FF;  // gimbal
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000a1a:	601a      	str	r2, [r3, #0]
    chassis_tx_message.IDE = CAN_ID_STD;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
    chassis_tx_message.DLC = 0x08;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	611a      	str	r2, [r3, #16]
    chassis_can_send_data[0] = yaw_raw >> 8;
 8000a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a32:	121b      	asrs	r3, r3, #8
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a3a:	701a      	strb	r2, [r3, #0]
    chassis_can_send_data[1] = yaw_raw;
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a42:	705a      	strb	r2, [r3, #1]
    chassis_can_send_data[2] = pitch_raw >> 8;
 8000a44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a48:	121b      	asrs	r3, r3, #8
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a50:	709a      	strb	r2, [r3, #2]
    chassis_can_send_data[3] = pitch_raw;
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a58:	70da      	strb	r2, [r3, #3]
    chassis_can_send_data[4] = 0;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	711a      	strb	r2, [r3, #4]
    chassis_can_send_data[5] = 0;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	715a      	strb	r2, [r3, #5]
    chassis_can_send_data[6] = 0;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	719a      	strb	r2, [r3, #6]
    chassis_can_send_data[7] = 0;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	71da      	strb	r2, [r3, #7]


    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a78:	4903      	ldr	r1, [pc, #12]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <CAN_Send_Gimbal+0x8c>)
 8000a7c:	f001 f9dc 	bl	8001e38 <HAL_CAN_AddTxMessage>
//    else{
//    	buzzer_play_c1(100);
//    	buzzer_play_d1(100);
//    	buzzer_play_e1(100);
//    }
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000098 	.word	0x20000098
 8000a8c:	20000090 	.word	0x20000090
 8000a90:	200040c4 	.word	0x200040c4

08000a94 <HAL_GPIO_EXTI_Callback>:




//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af02      	add	r7, sp, #8
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d12b      	bne.n	8000afc <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8000aa4:	4817      	ldr	r0, [pc, #92]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x70>)
 8000aa6:	f000 f943 	bl	8000d30 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8000aaa:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x74>)
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	6810      	ldr	r0, [r2, #0]
 8000ab2:	6851      	ldr	r1, [r2, #4]
 8000ab4:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8000ab6:	7a3b      	ldrb	r3, [r7, #8]
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	7a7b      	ldrb	r3, [r7, #9]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000ac4:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8000ac6:	7abb      	ldrb	r3, [r7, #10]
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	b21a      	sxth	r2, r3
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000ad4:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8000ad6:	7b3b      	ldrb	r3, [r7, #12]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	7b7b      	ldrb	r3, [r7, #13]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000ae6:	9201      	str	r2, [sp, #4]
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	4603      	mov	r3, r0
 8000aec:	460a      	mov	r2, r1
 8000aee:	2101      	movs	r1, #1
 8000af0:	4806      	ldr	r0, [pc, #24]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8000af2:	f005 f9d7 	bl	8005ea4 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x70>)
 8000af8:	f000 f93c 	bl	8000d74 <can_filter_disable>


	}
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200040c4 	.word	0x200040c4
 8000b08:	20004130 	.word	0x20004130
 8000b0c:	08006ca0 	.word	0x08006ca0

08000b10 <Shoot_Task_Func>:


void shoot_init(void);

void Shoot_Task_Func(void const * argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000b18:	f000 f81c 	bl	8000b54 <shoot_init>
  for(;;)
  {
	  //Shoot motor on half speed
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <Shoot_Task_Func+0x3c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1500);
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <Shoot_Task_Func+0x3c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b2e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <Shoot_Task_Func+0x40>)
 8000b36:	f002 f860 	bl	8002bfa <HAL_GPIO_TogglePin>
    osDelay(500);
 8000b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3e:	f003 ffc8 	bl	8004ad2 <osDelay>
    osDelay(1);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f003 ffc5 	bl	8004ad2 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000b48:	e7e8      	b.n	8000b1c <Shoot_Task_Func+0xc>
 8000b4a:	bf00      	nop
 8000b4c:	2000405c 	.word	0x2000405c
 8000b50:	40021800 	.word	0x40021800

08000b54 <shoot_init>:
  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <shoot_init+0x50>)
 8000b5c:	f002 fd68 	bl	8003630 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000b60:	2108      	movs	r1, #8
 8000b62:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <shoot_init+0x50>)
 8000b64:	f002 fd64 	bl	8003630 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <shoot_init+0x50>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b70:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <shoot_init+0x50>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(2000);
 8000b7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b80:	f003 ffa7 	bl	8004ad2 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <shoot_init+0x50>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <shoot_init+0x50>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b96:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000b98:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000b9c:	f003 ff99 	bl	8004ad2 <osDelay>

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000405c 	.word	0x2000405c

08000ba8 <Timer_Task_Func>:

#include "Timer_App.h"



void Timer_Task_Func(void const * argument){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

uint32_t tick;
	for (;;){

		tick=HAL_GetTick();
 8000bb0:	f000 ff16 	bl	80019e0 <HAL_GetTick>
 8000bb4:	60f8      	str	r0, [r7, #12]
		//buzzer_play_g0(100);
		//printf("CurrentTime \n");
		printf("CurrentTime: %d \n",(uint32_t)tick);
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <Timer_Task_Func+0x20>)
 8000bba:	f005 f973 	bl	8005ea4 <iprintf>

		osDelay(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f003 ff87 	bl	8004ad2 <osDelay>
	for (;;){
 8000bc4:	e7f4      	b.n	8000bb0 <Timer_Task_Func+0x8>
 8000bc6:	bf00      	nop
 8000bc8:	08006d40 	.word	0x08006d40

08000bcc <HAL_CAN_RxFifo0MsgPendingCallback>:


}

//This function activates whenever the RxFifo receives a message persumably? But it doesnt seem to work right now
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000bdc:	0d5b      	lsrs	r3, r3, #21
 8000bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000be2:	60fb      	str	r3, [r7, #12]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer);
 8000be4:	f107 020c 	add.w	r2, r7, #12
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f001 f9fe 	bl	8001fee <HAL_CAN_GetRxMessage>
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
	//HAL_Delay(1000);
}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20004130 	.word	0x20004130

08000c00 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000c04:	2100      	movs	r1, #0
 8000c06:	4802      	ldr	r0, [pc, #8]	; (8000c10 <buzzer_init+0x10>)
 8000c08:	f002 fd12 	bl	8003630 <HAL_TIM_PWM_Start>

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200040ec 	.word	0x200040ec

08000c14 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <MX_CAN1_Init+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c32:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000c36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c3e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_CAN1_Init+0x64>)
 8000c66:	f000 fec7 	bl	80019f8 <HAL_CAN_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c70:	f000 fab6 	bl	80011e0 <Error_Handler>
  }

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200040c4 	.word	0x200040c4
 8000c7c:	40006400 	.word	0x40006400

08000c80 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <HAL_CAN_MspInit+0xa4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d13b      	bne.n	8000d1a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_CAN_MspInit+0xa8>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <HAL_CAN_MspInit+0xa8>)
 8000cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_CAN_MspInit+0xa8>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_CAN_MspInit+0xa8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <HAL_CAN_MspInit+0xa8>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_CAN_MspInit+0xa8>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cea:	2309      	movs	r3, #9
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <HAL_CAN_MspInit+0xac>)
 8000cf6:	f001 fdbd 	bl	8002874 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	2013      	movs	r0, #19
 8000d00:	f001 fd8e 	bl	8002820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000d04:	2013      	movs	r0, #19
 8000d06:	f001 fda7 	bl	8002858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2105      	movs	r1, #5
 8000d0e:	2014      	movs	r0, #20
 8000d10:	f001 fd86 	bl	8002820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d14:	2014      	movs	r0, #20
 8000d16:	f001 fd9f 	bl	8002858 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40006400 	.word	0x40006400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020c00 	.word	0x40020c00

08000d30 <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d50:	2301      	movs	r3, #1
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8000d58:	231b      	movs	r3, #27
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f000 ff42 	bl	8001bf0 <HAL_CAN_ConfigFilter>
}
 8000d6c:	bf00      	nop
 8000d6e:	3730      	adds	r7, #48	; 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d94:	2301      	movs	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8000d9c:	231b      	movs	r3, #27
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 ff20 	bl	8001bf0 <HAL_CAN_ConfigFilter>
}
 8000db0:	bf00      	nop
 8000db2:	3730      	adds	r7, #48	; 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <vApplicationGetIdleTaskMemory+0x30>)
 8000dce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200000b0 	.word	0x200000b0
 8000de8:	20000104 	.word	0x20000104

08000dec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b0a8      	sub	sp, #160	; 0xa0
 8000df0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <MX_FREERTOS_Init+0xc0>)
 8000df4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000df8:	461d      	mov	r5, r3
 8000dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 fe14 	bl	8004a3a <osThreadCreate>
 8000e12:	4602      	mov	r2, r0
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_FREERTOS_Init+0xc4>)
 8000e16:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MX_FREERTOS_Init+0xc8>)
 8000e1a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000e1e:	461d      	mov	r5, r3
 8000e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8000e2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fe01 	bl	8004a3a <osThreadCreate>
 8000e38:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_FREERTOS_Init+0xcc>)
 8000e3e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000e42:	461d      	mov	r5, r3
 8000e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8000e50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fdef 	bl	8004a3a <osThreadCreate>
 8000e5c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_FREERTOS_Init+0xd0>)
 8000e62:	f107 0420 	add.w	r4, r7, #32
 8000e66:	461d      	mov	r5, r3
 8000e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fddd 	bl	8004a3a <osThreadCreate>
 8000e80:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_FREERTOS_Init+0xd4>)
 8000e86:	1d3c      	adds	r4, r7, #4
 8000e88:	461d      	mov	r5, r3
 8000e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 fdcd 	bl	8004a3a <osThreadCreate>
 8000ea0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000ea4:	bf00      	nop
 8000ea6:	37a0      	adds	r7, #160	; 0xa0
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000eac:	08006d60 	.word	0x08006d60
 8000eb0:	20004138 	.word	0x20004138
 8000eb4:	08006d88 	.word	0x08006d88
 8000eb8:	08006db0 	.word	0x08006db0
 8000ebc:	08006dd8 	.word	0x08006dd8
 8000ec0:	08006e00 	.word	0x08006e00

08000ec4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f003 fe00 	bl	8004ad2 <osDelay>
 8000ed2:	e7fb      	b.n	8000ecc <StartDefaultTask+0x8>

08000ed4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	4b5e      	ldr	r3, [pc, #376]	; (8001068 <MX_GPIO_Init+0x194>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a5d      	ldr	r2, [pc, #372]	; (8001068 <MX_GPIO_Init+0x194>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b5b      	ldr	r3, [pc, #364]	; (8001068 <MX_GPIO_Init+0x194>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	4b57      	ldr	r3, [pc, #348]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a56      	ldr	r2, [pc, #344]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b54      	ldr	r3, [pc, #336]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b50      	ldr	r3, [pc, #320]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a4f      	ldr	r2, [pc, #316]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b4d      	ldr	r3, [pc, #308]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b49      	ldr	r3, [pc, #292]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a48      	ldr	r2, [pc, #288]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b46      	ldr	r3, [pc, #280]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	4b42      	ldr	r3, [pc, #264]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a41      	ldr	r2, [pc, #260]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a3a      	ldr	r2, [pc, #232]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a33      	ldr	r2, [pc, #204]	; (8001068 <MX_GPIO_Init+0x194>)
 8000f9c:	f043 0320 	orr.w	r3, r3, #32
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <MX_GPIO_Init+0x194>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0320 	and.w	r3, r3, #32
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000fb4:	482d      	ldr	r0, [pc, #180]	; (800106c <MX_GPIO_Init+0x198>)
 8000fb6:	f001 fe07 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	211e      	movs	r1, #30
 8000fbe:	482b      	ldr	r0, [pc, #172]	; (800106c <MX_GPIO_Init+0x198>)
 8000fc0:	f001 fe02 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fca:	4829      	ldr	r0, [pc, #164]	; (8001070 <MX_GPIO_Init+0x19c>)
 8000fcc:	f001 fdfc 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd6:	4827      	ldr	r0, [pc, #156]	; (8001074 <MX_GPIO_Init+0x1a0>)
 8000fd8:	f001 fdf6 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8000fdc:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000fe0:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481d      	ldr	r0, [pc, #116]	; (800106c <MX_GPIO_Init+0x198>)
 8000ff6:	f001 fc3d 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_GPIO_Init+0x1a4>)
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	481b      	ldr	r0, [pc, #108]	; (800107c <MX_GPIO_Init+0x1a8>)
 800100e:	f001 fc31 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4811      	ldr	r0, [pc, #68]	; (8001070 <MX_GPIO_Init+0x19c>)
 800102c:	f001 fc22 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8001030:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <MX_GPIO_Init+0x1a0>)
 800104a:	f001 fc13 	bl	8002874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2105      	movs	r1, #5
 8001052:	2008      	movs	r0, #8
 8001054:	f001 fbe4 	bl	8002820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001058:	2008      	movs	r0, #8
 800105a:	f001 fbfd 	bl	8002858 <HAL_NVIC_EnableIRQ>

}
 800105e:	bf00      	nop
 8001060:	3730      	adds	r7, #48	; 0x30
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40021800 	.word	0x40021800
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	10110000 	.word	0x10110000
 800107c:	40020400 	.word	0x40020400

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f000 fc76 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f81e 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f7ff ff22 	bl	8000ed4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001090:	f7ff fdc0 	bl	8000c14 <MX_CAN1_Init>
  MX_TIM4_Init();
 8001094:	f000 fa2e 	bl	80014f4 <MX_TIM4_Init>
  MX_TIM12_Init();
 8001098:	f000 fa92 	bl	80015c0 <MX_TIM12_Init>
  MX_UART7_Init();
 800109c:	f000 fbce 	bl	800183c <MX_UART7_Init>
  MX_TIM14_Init();
 80010a0:	f000 fad4 	bl	800164c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 80010a4:	f7ff fdac 	bl	8000c00 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <main+0x40>)
 80010aa:	f000 fe81 	bl	8001db0 <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <main+0x44>)
 80010b0:	f002 fa6f 	bl	8003592 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80010b4:	f7ff fe9a 	bl	8000dec <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80010b8:	f003 fcb8 	bl	8004a2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <main+0x3c>
 80010be:	bf00      	nop
 80010c0:	200040c4 	.word	0x200040c4
 80010c4:	2000417c 	.word	0x2000417c

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2230      	movs	r2, #48	; 0x30
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 fedc 	bl	8005e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <SystemClock_Config+0xd0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <SystemClock_Config+0xd0>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <SystemClock_Config+0xd0>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <SystemClock_Config+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <SystemClock_Config+0xd4>)
 8001116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800113c:	2306      	movs	r3, #6
 800113e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001140:	23a8      	movs	r3, #168	; 0xa8
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001148:	2304      	movs	r3, #4
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fd85 	bl	8002c60 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800115c:	f000 f840 	bl	80011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f001 ffde 	bl	8003140 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800118a:	f000 f829 	bl	80011e0 <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3750      	adds	r7, #80	; 0x50
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d104      	bne.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 80011b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80011b8:	f001 fd1f 	bl	8002bfa <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 80011c6:	f000 fbf7 	bl	80019b8 <HAL_IncTick>
  }

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40002000 	.word	0x40002000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40000c00 	.word	0x40000c00

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <Error_Handler+0x6>

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_MspInit+0x54>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_MspInit+0x54>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_MspInit+0x54>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_MspInit+0x54>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_MspInit+0x54>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_MspInit+0x54>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	210f      	movs	r1, #15
 800122a:	f06f 0001 	mvn.w	r0, #1
 800122e:	f001 faf7 	bl	8002820 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	2032      	movs	r0, #50	; 0x32
 8001256:	f001 fae3 	bl	8002820 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800125a:	2032      	movs	r0, #50	; 0x32
 800125c:	f001 fafc 	bl	8002858 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <HAL_InitTick+0xa4>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_InitTick+0xa4>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_InitTick+0xa4>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800127c:	f107 0210 	add.w	r2, r7, #16
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f002 f926 	bl	80034d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800128c:	f002 f8fc 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8001290:	4603      	mov	r3, r0
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <HAL_InitTick+0xa8>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9b      	lsrs	r3, r3, #18
 80012a0:	3b01      	subs	r3, #1
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_InitTick+0xac>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_InitTick+0xb0>)
 80012a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_InitTick+0xac>)
 80012ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_InitTick+0xac>)
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_InitTick+0xac>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_InitTick+0xac>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_InitTick+0xac>)
 80012c6:	f002 f939 	bl	800353c <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d104      	bne.n	80012da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <HAL_InitTick+0xac>)
 80012d2:	f002 f95e 	bl	8003592 <HAL_TIM_Base_Start_IT>
 80012d6:	4603      	mov	r3, r0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3730      	adds	r7, #48	; 0x30
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	2000413c 	.word	0x2000413c
 80012f0:	40000c00 	.word	0x40000c00

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <NMI_Handler+0x4>

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler+0x4>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler+0x4>

08001312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001324:	2004      	movs	r0, #4
 8001326:	f001 fc83 	bl	8002c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <CAN1_TX_IRQHandler+0x10>)
 8001336:	f000 ff92 	bl	800225e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200040c4 	.word	0x200040c4

08001344 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <CAN1_RX0_IRQHandler+0x10>)
 800134a:	f000 ff88 	bl	800225e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200040c4 	.word	0x200040c4

08001358 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800135e:	f002 f9a5 	bl	80036ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000417c 	.word	0x2000417c

0800136c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM5_IRQHandler+0x10>)
 8001372:	f002 f99b 	bl	80036ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000413c 	.word	0x2000413c

08001380 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e00a      	b.n	80013a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001392:	f3af 8000 	nop.w
 8001396:	4601      	mov	r1, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	60ba      	str	r2, [r7, #8]
 800139e:	b2ca      	uxtb	r2, r1
 80013a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf0      	blt.n	8001392 <_read+0x12>
	}

return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e009      	b.n	80013e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fa1f 	bl	8001818 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf1      	blt.n	80013cc <_write+0x12>
	}
	return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_close>:

int _close(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141a:	605a      	str	r2, [r3, #4]
	return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_isatty>:

int _isatty(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
	return 1;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
	return 0;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f004 fcd8 	bl	8005e40 <__errno>
 8001490:	4602      	mov	r2, r0
 8001492:	230c      	movs	r3, #12
 8001494:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20030000 	.word	0x20030000
 80014bc:	00000400 	.word	0x00000400
 80014c0:	20000304 	.word	0x20000304
 80014c4:	20004208 	.word	0x20004208

080014c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <SystemInit+0x28>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <SystemInit+0x28>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SystemInit+0x28>)
 80014de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e2:	609a      	str	r2, [r3, #8]
#endif
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <MX_TIM4_Init+0xc4>)
 8001518:	4a28      	ldr	r2, [pc, #160]	; (80015bc <MX_TIM4_Init+0xc8>)
 800151a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <MX_TIM4_Init+0xc4>)
 800151e:	2253      	movs	r2, #83	; 0x53
 8001520:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <MX_TIM4_Init+0xc4>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <MX_TIM4_Init+0xc4>)
 800152a:	f242 720f 	movw	r2, #9999	; 0x270f
 800152e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <MX_TIM4_Init+0xc4>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <MX_TIM4_Init+0xc4>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800153c:	481e      	ldr	r0, [pc, #120]	; (80015b8 <MX_TIM4_Init+0xc4>)
 800153e:	f002 f84c 	bl	80035da <HAL_TIM_PWM_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001548:	f7ff fe4a 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	4619      	mov	r1, r3
 800155a:	4817      	ldr	r0, [pc, #92]	; (80015b8 <MX_TIM4_Init+0xc4>)
 800155c:	f002 fd12 	bl	8003f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001566:	f7ff fe3b 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156a:	2360      	movs	r3, #96	; 0x60
 800156c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_TIM4_Init+0xc4>)
 8001584:	f002 f99a 	bl	80038bc <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800158e:	f7ff fe27 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2208      	movs	r2, #8
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <MX_TIM4_Init+0xc4>)
 800159a:	f002 f98f 	bl	80038bc <HAL_TIM_PWM_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80015a4:	f7ff fe1c 	bl	80011e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <MX_TIM4_Init+0xc4>)
 80015aa:	f000 f8d3 	bl	8001754 <HAL_TIM_MspPostInit>

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000405c 	.word	0x2000405c
 80015bc:	40000800 	.word	0x40000800

080015c0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
 80015d4:	615a      	str	r2, [r3, #20]
 80015d6:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_TIM12_Init+0x84>)
 80015da:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <MX_TIM12_Init+0x88>)
 80015dc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_TIM12_Init+0x84>)
 80015e0:	2223      	movs	r2, #35	; 0x23
 80015e2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_TIM12_Init+0x84>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_TIM12_Init+0x84>)
 80015ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80015f0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_TIM12_Init+0x84>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_TIM12_Init+0x84>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015fe:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_TIM12_Init+0x84>)
 8001600:	f001 ffeb 	bl	80035da <HAL_TIM_PWM_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800160a:	f7ff fde9 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2360      	movs	r3, #96	; 0x60
 8001610:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_TIM12_Init+0x84>)
 8001626:	f002 f949 	bl	80038bc <HAL_TIM_PWM_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001630:	f7ff fdd6 	bl	80011e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <MX_TIM12_Init+0x84>)
 8001636:	f000 f88d 	bl	8001754 <HAL_TIM_MspPostInit>

}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200040ec 	.word	0x200040ec
 8001648:	40001800 	.word	0x40001800

0800164c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_TIM14_Init+0x40>)
 8001652:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <MX_TIM14_Init+0x44>)
 8001654:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <MX_TIM14_Init+0x40>)
 8001658:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800165c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_TIM14_Init+0x40>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_TIM14_Init+0x40>)
 8001666:	f242 720f 	movw	r2, #9999	; 0x270f
 800166a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <MX_TIM14_Init+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_TIM14_Init+0x40>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_TIM14_Init+0x40>)
 800167a:	f001 ff5f 	bl	800353c <HAL_TIM_Base_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001684:	f7ff fdac 	bl	80011e0 <Error_Handler>
  }

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000417c 	.word	0x2000417c
 8001690:	40002000 	.word	0x40002000

08001694 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <HAL_TIM_PWM_MspInit+0x64>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10e      	bne.n	80016c4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_TIM_PWM_MspInit+0x68>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <HAL_TIM_PWM_MspInit+0x68>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_TIM_PWM_MspInit+0x68>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80016c2:	e012      	b.n	80016ea <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_TIM_PWM_MspInit+0x6c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10d      	bne.n	80016ea <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_TIM_PWM_MspInit+0x68>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_TIM_PWM_MspInit+0x68>)
 80016d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <HAL_TIM_PWM_MspInit+0x68>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40000800 	.word	0x40000800
 80016fc:	40023800 	.word	0x40023800
 8001700:	40001800 	.word	0x40001800

08001704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_TIM_Base_MspInit+0x48>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d115      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_TIM_Base_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <HAL_TIM_Base_MspInit+0x4c>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_TIM_Base_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2105      	movs	r1, #5
 8001736:	202d      	movs	r0, #45	; 0x2d
 8001738:	f001 f872 	bl	8002820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800173c:	202d      	movs	r0, #45	; 0x2d
 800173e:	f001 f88b 	bl	8002858 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40002000 	.word	0x40002000
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a24      	ldr	r2, [pc, #144]	; (8001804 <HAL_TIM_MspPostInit+0xb0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d11f      	bne.n	80017b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_TIM_MspPostInit+0xb4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a22      	ldr	r2, [pc, #136]	; (8001808 <HAL_TIM_MspPostInit+0xb4>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_TIM_MspPostInit+0xb4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8001792:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017a4:	2302      	movs	r3, #2
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	4817      	ldr	r0, [pc, #92]	; (800180c <HAL_TIM_MspPostInit+0xb8>)
 80017b0:	f001 f860 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80017b4:	e022      	b.n	80017fc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a15      	ldr	r2, [pc, #84]	; (8001810 <HAL_TIM_MspPostInit+0xbc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d11d      	bne.n	80017fc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_TIM_MspPostInit+0xb4>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_TIM_MspPostInit+0xb4>)
 80017ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ce:	6313      	str	r3, [r2, #48]	; 0x30
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_TIM_MspPostInit+0xb4>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017dc:	2340      	movs	r3, #64	; 0x40
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80017ec:	2309      	movs	r3, #9
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4807      	ldr	r0, [pc, #28]	; (8001814 <HAL_TIM_MspPostInit+0xc0>)
 80017f8:	f001 f83c 	bl	8002874 <HAL_GPIO_Init>
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40000800 	.word	0x40000800
 8001808:	40023800 	.word	0x40023800
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40001800 	.word	0x40001800
 8001814:	40021c00 	.word	0x40021c00

08001818 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8001820:	1d39      	adds	r1, r7, #4
 8001822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001826:	2201      	movs	r2, #1
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <__io_putchar+0x20>)
 800182a:	f002 fc88 	bl	800413e <HAL_UART_Transmit>

  return ch;
 800182e:	687b      	ldr	r3, [r7, #4]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200041bc 	.word	0x200041bc

0800183c <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_UART7_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_UART7_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_UART7_Init+0x4c>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_UART7_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_UART7_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_UART7_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_UART7_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_UART7_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_UART7_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_UART7_Init+0x4c>)
 8001874:	f002 fc16 	bl	80040a4 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800187e:	f7ff fcaf 	bl	80011e0 <Error_Handler>
  }

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200041bc 	.word	0x200041bc
 800188c:	40007800 	.word	0x40007800

08001890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_UART_MspInit+0x84>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12c      	bne.n	800190c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_UART_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80018ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80018fc:	2308      	movs	r3, #8
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <HAL_UART_MspInit+0x8c>)
 8001908:	f000 ffb4 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40007800 	.word	0x40007800
 8001918:	40023800 	.word	0x40023800
 800191c:	40021000 	.word	0x40021000

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001924:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001926:	e003      	b.n	8001930 <LoopCopyDataInit>

08001928 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800192a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800192c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800192e:	3104      	adds	r1, #4

08001930 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001934:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001936:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001938:	d3f6      	bcc.n	8001928 <CopyDataInit>
  ldr  r2, =_sbss
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800193c:	e002      	b.n	8001944 <LoopFillZerobss>

0800193e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800193e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001940:	f842 3b04 	str.w	r3, [r2], #4

08001944 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001946:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001948:	d3f9      	bcc.n	800193e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800194a:	f7ff fdbd 	bl	80014c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194e:	f004 fa7d 	bl	8005e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff fb95 	bl	8001080 <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800195c:	08006ee4 	.word	0x08006ee4
  ldr  r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001964:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001968:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800196c:	20004204 	.word	0x20004204

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_Init+0x40>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_Init+0x40>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x40>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 ff34 	bl	800280a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff fc4c 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fc1e 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	200041fc 	.word	0x200041fc

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200041fc 	.word	0x200041fc

080019f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0ed      	b.n	8001be6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff f932 	bl	8000c80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0202 	bic.w	r2, r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a2c:	f7ff ffd8 	bl	80019e0 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a32:	e012      	b.n	8001a5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a34:	f7ff ffd4 	bl	80019e0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b0a      	cmp	r3, #10
 8001a40:	d90b      	bls.n	8001a5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2205      	movs	r2, #5
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0c5      	b.n	8001be6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e5      	bne.n	8001a34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a78:	f7ff ffb2 	bl	80019e0 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a7e:	e012      	b.n	8001aa6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a80:	f7ff ffae 	bl	80019e0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b0a      	cmp	r3, #10
 8001a8c:	d90b      	bls.n	8001aa6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2205      	movs	r2, #5
 8001a9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e09f      	b.n	8001be6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0e5      	beq.n	8001a80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7e1b      	ldrb	r3, [r3, #24]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d108      	bne.n	8001ace <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e007      	b.n	8001ade <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7e5b      	ldrb	r3, [r3, #25]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d108      	bne.n	8001af8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e007      	b.n	8001b08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e9b      	ldrb	r3, [r3, #26]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d108      	bne.n	8001b22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e007      	b.n	8001b32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0220 	bic.w	r2, r2, #32
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7edb      	ldrb	r3, [r3, #27]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0210 	bic.w	r2, r2, #16
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0210 	orr.w	r2, r2, #16
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7f1b      	ldrb	r3, [r3, #28]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0208 	orr.w	r2, r2, #8
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0208 	bic.w	r2, r2, #8
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7f5b      	ldrb	r3, [r3, #29]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0204 	orr.w	r2, r2, #4
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e007      	b.n	8001bb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0204 	bic.w	r2, r2, #4
 8001bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	ea42 0103 	orr.w	r1, r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c06:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c08:	7cfb      	ldrb	r3, [r7, #19]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d003      	beq.n	8001c16 <HAL_CAN_ConfigFilter+0x26>
 8001c0e:	7cfb      	ldrb	r3, [r7, #19]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	f040 80be 	bne.w	8001d92 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_CAN_ConfigFilter+0x1bc>)
 8001c18:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	431a      	orrs	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2201      	movs	r2, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	401a      	ands	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d123      	bne.n	8001cc0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3248      	adds	r2, #72	; 0x48
 8001ca0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cb6:	6979      	ldr	r1, [r7, #20]
 8001cb8:	3348      	adds	r3, #72	; 0x48
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d122      	bne.n	8001d0e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ce8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3248      	adds	r2, #72	; 0x48
 8001cee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d04:	6979      	ldr	r1, [r7, #20]
 8001d06:	3348      	adds	r3, #72	; 0x48
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	401a      	ands	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d28:	e007      	b.n	8001d3a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d54:	e007      	b.n	8001d66 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d84:	f023 0201 	bic.w	r2, r3, #1
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e006      	b.n	8001da0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
  }
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40006400 	.word	0x40006400

08001db0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d12e      	bne.n	8001e22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ddc:	f7ff fe00 	bl	80019e0 <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001de2:	e012      	b.n	8001e0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001de4:	f7ff fdfc 	bl	80019e0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b0a      	cmp	r3, #10
 8001df0:	d90b      	bls.n	8001e0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2205      	movs	r2, #5
 8001e02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e012      	b.n	8001e30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e5      	bne.n	8001de4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e006      	b.n	8001e30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
  }
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e56:	7ffb      	ldrb	r3, [r7, #31]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d003      	beq.n	8001e64 <HAL_CAN_AddTxMessage+0x2c>
 8001e5c:	7ffb      	ldrb	r3, [r7, #31]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	f040 80b8 	bne.w	8001fd4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10a      	bne.n	8001e84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80a0 	beq.w	8001fc4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	0e1b      	lsrs	r3, r3, #24
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d907      	bls.n	8001ea4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e09e      	b.n	8001fe2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	6809      	ldr	r1, [r1, #0]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3318      	adds	r3, #24
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	440b      	add	r3, r1
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e00f      	b.n	8001ef2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001edc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ee6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3318      	adds	r3, #24
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	440b      	add	r3, r1
 8001ef0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6819      	ldr	r1, [r3, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3318      	adds	r3, #24
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	440b      	add	r3, r1
 8001f02:	3304      	adds	r3, #4
 8001f04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	7d1b      	ldrb	r3, [r3, #20]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d111      	bne.n	8001f32 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3318      	adds	r3, #24
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	6811      	ldr	r1, [r2, #0]
 8001f22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3318      	adds	r3, #24
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3304      	adds	r3, #4
 8001f30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3307      	adds	r3, #7
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	061a      	lsls	r2, r3, #24
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3306      	adds	r3, #6
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3305      	adds	r3, #5
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	3204      	adds	r2, #4
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	4610      	mov	r0, r2
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	6811      	ldr	r1, [r2, #0]
 8001f5a:	ea43 0200 	orr.w	r2, r3, r0
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3303      	adds	r3, #3
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	061a      	lsls	r2, r3, #24
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3302      	adds	r3, #2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	041b      	lsls	r3, r3, #16
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	4313      	orrs	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	7812      	ldrb	r2, [r2, #0]
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	6811      	ldr	r1, [r2, #0]
 8001f90:	ea43 0200 	orr.w	r2, r3, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	440b      	add	r3, r1
 8001f9a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	6811      	ldr	r1, [r2, #0]
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3318      	adds	r3, #24
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	440b      	add	r3, r1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e00e      	b.n	8001fe2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e006      	b.n	8001fe2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
  }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002002:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d003      	beq.n	8002012 <HAL_CAN_GetRxMessage+0x24>
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	2b02      	cmp	r3, #2
 800200e:	f040 80f3 	bne.w	80021f8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10e      	bne.n	8002036 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0e7      	b.n	8002206 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d8      	b.n	8002206 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	331b      	adds	r3, #27
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	4413      	add	r3, r2
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0204 	and.w	r2, r3, #4
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	331b      	adds	r3, #27
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	4413      	add	r3, r2
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0d5b      	lsrs	r3, r3, #21
 8002082:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e00b      	b.n	80020a4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	331b      	adds	r3, #27
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	4413      	add	r3, r2
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	08db      	lsrs	r3, r3, #3
 800209c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	331b      	adds	r3, #27
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0202 	and.w	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	331b      	adds	r3, #27
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	4413      	add	r3, r2
 80020c6:	3304      	adds	r3, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 020f 	and.w	r2, r3, #15
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	331b      	adds	r3, #27
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	3304      	adds	r3, #4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	331b      	adds	r3, #27
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	3304      	adds	r3, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0c1b      	lsrs	r3, r3, #16
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	4413      	add	r3, r2
 8002122:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0a1a      	lsrs	r2, r3, #8
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4413      	add	r3, r2
 800213c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0c1a      	lsrs	r2, r3, #16
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	3302      	adds	r3, #2
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	4413      	add	r3, r2
 8002156:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e1a      	lsrs	r2, r3, #24
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	3303      	adds	r3, #3
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4413      	add	r3, r2
 8002170:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	3304      	adds	r3, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	4413      	add	r3, r2
 8002188:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0a1a      	lsrs	r2, r3, #8
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3305      	adds	r3, #5
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0c1a      	lsrs	r2, r3, #16
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	3306      	adds	r3, #6
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e1a      	lsrs	r2, r3, #24
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	3307      	adds	r3, #7
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0220 	orr.w	r2, r2, #32
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	e007      	b.n	80021f4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e006      	b.n	8002206 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
  }
}
 8002206:	4618      	mov	r0, r3
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002222:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d002      	beq.n	8002230 <HAL_CAN_ActivateNotification+0x1e>
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d109      	bne.n	8002244 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6959      	ldr	r1, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	e006      	b.n	8002252 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b08a      	sub	sp, #40	; 0x28
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d07c      	beq.n	800239e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d023      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f97d 	bl	80025c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80022c6:	e016      	b.n	80022f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
 80022da:	e00c      	b.n	80022f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	e002      	b.n	80022f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f983 	bl	80025fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d024      	beq.n	800234a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002308:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f95d 	bl	80025d4 <HAL_CAN_TxMailbox1CompleteCallback>
 800231a:	e016      	b.n	800234a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	e00c      	b.n	800234a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	e002      	b.n	800234a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f963 	bl	8002610 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d024      	beq.n	800239e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800235c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f93d 	bl	80025e8 <HAL_CAN_TxMailbox2CompleteCallback>
 800236e:	e016      	b.n	800239e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
 8002382:	e00c      	b.n	800239e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	e002      	b.n	800239e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f943 	bl	8002624 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00c      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2210      	movs	r2, #16
 80023c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2208      	movs	r2, #8
 80023dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f92a 	bl	8002638 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fe fbe5 	bl	8000bcc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2210      	movs	r2, #16
 8002424:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2208      	movs	r2, #8
 8002440:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f90c 	bl	8002660 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f8f3 	bl	800264c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00b      	beq.n	8002488 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2210      	movs	r2, #16
 8002480:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8f6 	bl	8002674 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2208      	movs	r2, #8
 80024a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f8ef 	bl	8002688 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d075      	beq.n	80025a0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d06c      	beq.n	8002598 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03d      	beq.n	8002598 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d038      	beq.n	8002598 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800252c:	2b30      	cmp	r3, #48	; 0x30
 800252e:	d017      	beq.n	8002560 <HAL_CAN_IRQHandler+0x302>
 8002530:	2b30      	cmp	r3, #48	; 0x30
 8002532:	d804      	bhi.n	800253e <HAL_CAN_IRQHandler+0x2e0>
 8002534:	2b10      	cmp	r3, #16
 8002536:	d009      	beq.n	800254c <HAL_CAN_IRQHandler+0x2ee>
 8002538:	2b20      	cmp	r3, #32
 800253a:	d00c      	beq.n	8002556 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800253c:	e024      	b.n	8002588 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800253e:	2b50      	cmp	r3, #80	; 0x50
 8002540:	d018      	beq.n	8002574 <HAL_CAN_IRQHandler+0x316>
 8002542:	2b60      	cmp	r3, #96	; 0x60
 8002544:	d01b      	beq.n	800257e <HAL_CAN_IRQHandler+0x320>
 8002546:	2b40      	cmp	r3, #64	; 0x40
 8002548:	d00f      	beq.n	800256a <HAL_CAN_IRQHandler+0x30c>
            break;
 800254a:	e01d      	b.n	8002588 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f043 0308 	orr.w	r3, r3, #8
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002554:	e018      	b.n	8002588 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	f043 0310 	orr.w	r3, r3, #16
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800255e:	e013      	b.n	8002588 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	f043 0320 	orr.w	r3, r3, #32
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002568:	e00e      	b.n	8002588 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002572:	e009      	b.n	8002588 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800257c:	e004      	b.n	8002588 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002586:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002596:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2204      	movs	r2, #4
 800259e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f872 	bl	800269c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	; (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ff4c 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002832:	f7ff ff61 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 8002836:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	6978      	ldr	r0, [r7, #20]
 800283e:	f7ff ffb1 	bl	80027a4 <NVIC_EncodePriority>
 8002842:	4602      	mov	r2, r0
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff80 	bl	8002750 <__NVIC_SetPriority>
}
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff54 	bl	8002714 <__NVIC_EnableIRQ>
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e177      	b.n	8002b80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 8166 	bne.w	8002b7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d00b      	beq.n	80028ce <HAL_GPIO_Init+0x5a>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c2:	2b11      	cmp	r3, #17
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b12      	cmp	r3, #18
 80028cc:	d130      	bne.n	8002930 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0201 	and.w	r2, r3, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0xfc>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b12      	cmp	r3, #18
 800296e:	d123      	bne.n	80029b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80c0 	beq.w	8002b7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b65      	ldr	r3, [pc, #404]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4a64      	ldr	r2, [pc, #400]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a08:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0a:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a16:	4a60      	ldr	r2, [pc, #384]	; (8002b98 <HAL_GPIO_Init+0x324>)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a57      	ldr	r2, [pc, #348]	; (8002b9c <HAL_GPIO_Init+0x328>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d037      	beq.n	8002ab2 <HAL_GPIO_Init+0x23e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a56      	ldr	r2, [pc, #344]	; (8002ba0 <HAL_GPIO_Init+0x32c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d031      	beq.n	8002aae <HAL_GPIO_Init+0x23a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a55      	ldr	r2, [pc, #340]	; (8002ba4 <HAL_GPIO_Init+0x330>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d02b      	beq.n	8002aaa <HAL_GPIO_Init+0x236>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a54      	ldr	r2, [pc, #336]	; (8002ba8 <HAL_GPIO_Init+0x334>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d025      	beq.n	8002aa6 <HAL_GPIO_Init+0x232>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a53      	ldr	r2, [pc, #332]	; (8002bac <HAL_GPIO_Init+0x338>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01f      	beq.n	8002aa2 <HAL_GPIO_Init+0x22e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a52      	ldr	r2, [pc, #328]	; (8002bb0 <HAL_GPIO_Init+0x33c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d019      	beq.n	8002a9e <HAL_GPIO_Init+0x22a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a51      	ldr	r2, [pc, #324]	; (8002bb4 <HAL_GPIO_Init+0x340>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <HAL_GPIO_Init+0x226>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a50      	ldr	r2, [pc, #320]	; (8002bb8 <HAL_GPIO_Init+0x344>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00d      	beq.n	8002a96 <HAL_GPIO_Init+0x222>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4f      	ldr	r2, [pc, #316]	; (8002bbc <HAL_GPIO_Init+0x348>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <HAL_GPIO_Init+0x21e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4e      	ldr	r2, [pc, #312]	; (8002bc0 <HAL_GPIO_Init+0x34c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_GPIO_Init+0x21a>
 8002a8a:	2309      	movs	r3, #9
 8002a8c:	e012      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a8e:	230a      	movs	r3, #10
 8002a90:	e010      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a92:	2308      	movs	r3, #8
 8002a94:	e00e      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a96:	2307      	movs	r3, #7
 8002a98:	e00c      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e00a      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e008      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e004      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f002 0203 	and.w	r2, r2, #3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4093      	lsls	r3, r2
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac4:	4934      	ldr	r1, [pc, #208]	; (8002b98 <HAL_GPIO_Init+0x324>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3302      	adds	r3, #2
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad2:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af6:	4a33      	ldr	r2, [pc, #204]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002afc:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b20:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_GPIO_Init+0x350>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	f67f ae84 	bls.w	8002890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3724      	adds	r7, #36	; 0x24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40021400 	.word	0x40021400
 8002bb4:	40021800 	.word	0x40021800
 8002bb8:	40021c00 	.word	0x40021c00
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40022400 	.word	0x40022400
 8002bc4:	40013c00 	.word	0x40013c00

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be4:	e003      	b.n	8002bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	041a      	lsls	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	619a      	str	r2, [r3, #24]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	887b      	ldrh	r3, [r7, #2]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d104      	bne.n	8002c1e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	041a      	lsls	r2, r3, #16
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	619a      	str	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c46:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd ff20 	bl	8000a94 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40013c00 	.word	0x40013c00

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e25b      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d075      	beq.n	8002d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7e:	4ba3      	ldr	r3, [pc, #652]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8a:	4ba0      	ldr	r3, [pc, #640]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d112      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4b9d      	ldr	r3, [pc, #628]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4b99      	ldr	r3, [pc, #612]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d05b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x108>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d157      	bne.n	8002d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e236      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x74>
 8002cc6:	4b91      	ldr	r3, [pc, #580]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a90      	ldr	r2, [pc, #576]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e01d      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x98>
 8002cde:	4b8b      	ldr	r3, [pc, #556]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a8a      	ldr	r2, [pc, #552]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b88      	ldr	r3, [pc, #544]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a87      	ldr	r2, [pc, #540]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cf8:	4b84      	ldr	r3, [pc, #528]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a83      	ldr	r2, [pc, #524]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a80      	ldr	r2, [pc, #512]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe fe62 	bl	80019e0 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe fe5e 	bl	80019e0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1fb      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0xc0>
 8002d3e:	e014      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fe4e 	bl	80019e0 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe fe4a 	bl	80019e0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1e7      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	4b6c      	ldr	r3, [pc, #432]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0xe8>
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d063      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d76:	4b65      	ldr	r3, [pc, #404]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d82:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b5f      	ldr	r3, [pc, #380]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d116      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	4b5c      	ldr	r3, [pc, #368]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e1bb      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db2:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4952      	ldr	r1, [pc, #328]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	e03a      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	4b4f      	ldr	r3, [pc, #316]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fe03 	bl	80019e0 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dde:	f7fe fdff 	bl	80019e0 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e19c      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfc:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4940      	ldr	r1, [pc, #256]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCC_OscConfig+0x2b0>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fde2 	bl	80019e0 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e20:	f7fe fdde 	bl	80019e0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e17b      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d030      	beq.n	8002eac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e52:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe fdc2 	bl	80019e0 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7fe fdbe 	bl	80019e0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e15b      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x200>
 8002e7e:	e015      	b.n	8002eac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCC_OscConfig+0x2b4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fdab 	bl	80019e0 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fda7 	bl	80019e0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e144      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80a0 	beq.w	8002ffa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d121      	bne.n	8002f3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <HAL_RCC_OscConfig+0x2b8>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f02:	f7fe fd6d 	bl	80019e0 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	e011      	b.n	8002f2e <HAL_RCC_OscConfig+0x2ce>
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	42470000 	.word	0x42470000
 8002f14:	42470e80 	.word	0x42470e80
 8002f18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1c:	f7fe fd60 	bl	80019e0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0fd      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b81      	ldr	r3, [pc, #516]	; (8003134 <HAL_RCC_OscConfig+0x4d4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d106      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
 8002f42:	4b7d      	ldr	r3, [pc, #500]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a7c      	ldr	r2, [pc, #496]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4e:	e01c      	b.n	8002f8a <HAL_RCC_OscConfig+0x32a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d10c      	bne.n	8002f72 <HAL_RCC_OscConfig+0x312>
 8002f58:	4b77      	ldr	r3, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4a76      	ldr	r2, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6713      	str	r3, [r2, #112]	; 0x70
 8002f64:	4b74      	ldr	r3, [pc, #464]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a73      	ldr	r2, [pc, #460]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	e00b      	b.n	8002f8a <HAL_RCC_OscConfig+0x32a>
 8002f72:	4b71      	ldr	r3, [pc, #452]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a70      	ldr	r2, [pc, #448]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b6e      	ldr	r3, [pc, #440]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a6d      	ldr	r2, [pc, #436]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d015      	beq.n	8002fbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fe fd25 	bl	80019e0 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fd21 	bl	80019e0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0bc      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	4b61      	ldr	r3, [pc, #388]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ee      	beq.n	8002f9a <HAL_RCC_OscConfig+0x33a>
 8002fbc:	e014      	b.n	8002fe8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fd0f 	bl	80019e0 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fd0b 	bl	80019e0 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0a6      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fdc:	4b56      	ldr	r3, [pc, #344]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b52      	ldr	r3, [pc, #328]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a51      	ldr	r2, [pc, #324]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8092 	beq.w	8003128 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003004:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b08      	cmp	r3, #8
 800300e:	d05c      	beq.n	80030ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d141      	bne.n	800309c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b48      	ldr	r3, [pc, #288]	; (800313c <HAL_RCC_OscConfig+0x4dc>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301e:	f7fe fcdf 	bl	80019e0 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003026:	f7fe fcdb 	bl	80019e0 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e078      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003038:	4b3f      	ldr	r3, [pc, #252]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	019b      	lsls	r3, r3, #6
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	3b01      	subs	r3, #1
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	061b      	lsls	r3, r3, #24
 8003068:	4933      	ldr	r1, [pc, #204]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <HAL_RCC_OscConfig+0x4dc>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fe fcb4 	bl	80019e0 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe fcb0 	bl	80019e0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e04d      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x41c>
 800309a:	e045      	b.n	8003128 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_RCC_OscConfig+0x4dc>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7fe fc9d 	bl	80019e0 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe fc99 	bl	80019e0 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e036      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0x44a>
 80030c8:	e02e      	b.n	8003128 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e029      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_RCC_OscConfig+0x4d8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d11c      	bne.n	8003124 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d115      	bne.n	8003124 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030fe:	4013      	ands	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003104:	4293      	cmp	r3, r2
 8003106:	d10d      	bne.n	8003124 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40007000 	.word	0x40007000
 8003138:	40023800 	.word	0x40023800
 800313c:	42470060 	.word	0x42470060

08003140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0cc      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d90c      	bls.n	800317c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a58      	ldr	r2, [pc, #352]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800319e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	494d      	ldr	r1, [pc, #308]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d044      	beq.n	8003260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d119      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e067      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321e:	4b37      	ldr	r3, [pc, #220]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 0203 	bic.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4934      	ldr	r1, [pc, #208]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003230:	f7fe fbd6 	bl	80019e0 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	e00a      	b.n	800324e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fe fbd2 	bl	80019e0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e04f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 020c 	and.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	429a      	cmp	r2, r3
 800325e:	d1eb      	bne.n	8003238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d20c      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e032      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4916      	ldr	r1, [pc, #88]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	490e      	ldr	r1, [pc, #56]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032c6:	f000 f821 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032ca:	4601      	mov	r1, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	5cd3      	ldrb	r3, [r2, r3]
 80032da:	fa21 f303 	lsr.w	r3, r1, r3
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd ffaa 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00
 80032fc:	40023800 	.word	0x40023800
 8003300:	08006e24 	.word	0x08006e24
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	2300      	movs	r3, #0
 800331c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003322:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_GetSysClockFreq+0x158>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d007      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x32>
 800332e:	2b08      	cmp	r3, #8
 8003330:	d008      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x38>
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 808d 	bne.w	8003452 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_RCC_GetSysClockFreq+0x15c>)
 800333a:	60bb      	str	r3, [r7, #8]
       break;
 800333c:	e08c      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800333e:	4b4b      	ldr	r3, [pc, #300]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003340:	60bb      	str	r3, [r7, #8]
      break;
 8003342:	e089      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003344:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_GetSysClockFreq+0x158>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800334c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334e:	4b45      	ldr	r3, [pc, #276]	; (8003464 <HAL_RCC_GetSysClockFreq+0x158>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d023      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b42      	ldr	r3, [pc, #264]	; (8003464 <HAL_RCC_GetSysClockFreq+0x158>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	f04f 0400 	mov.w	r4, #0
 8003364:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	ea03 0501 	and.w	r5, r3, r1
 8003370:	ea04 0602 	and.w	r6, r4, r2
 8003374:	4a3d      	ldr	r2, [pc, #244]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003376:	fb02 f106 	mul.w	r1, r2, r6
 800337a:	2200      	movs	r2, #0
 800337c:	fb02 f205 	mul.w	r2, r2, r5
 8003380:	440a      	add	r2, r1
 8003382:	493a      	ldr	r1, [pc, #232]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003384:	fba5 0101 	umull	r0, r1, r5, r1
 8003388:	1853      	adds	r3, r2, r1
 800338a:	4619      	mov	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f04f 0400 	mov.w	r4, #0
 8003392:	461a      	mov	r2, r3
 8003394:	4623      	mov	r3, r4
 8003396:	f7fd f937 	bl	8000608 <__aeabi_uldivmod>
 800339a:	4603      	mov	r3, r0
 800339c:	460c      	mov	r4, r1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e049      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b30      	ldr	r3, [pc, #192]	; (8003464 <HAL_RCC_GetSysClockFreq+0x158>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	f04f 0400 	mov.w	r4, #0
 80033ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	ea03 0501 	and.w	r5, r3, r1
 80033b8:	ea04 0602 	and.w	r6, r4, r2
 80033bc:	4629      	mov	r1, r5
 80033be:	4632      	mov	r2, r6
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	f04f 0400 	mov.w	r4, #0
 80033c8:	0154      	lsls	r4, r2, #5
 80033ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033ce:	014b      	lsls	r3, r1, #5
 80033d0:	4619      	mov	r1, r3
 80033d2:	4622      	mov	r2, r4
 80033d4:	1b49      	subs	r1, r1, r5
 80033d6:	eb62 0206 	sbc.w	r2, r2, r6
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	f04f 0400 	mov.w	r4, #0
 80033e2:	0194      	lsls	r4, r2, #6
 80033e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033e8:	018b      	lsls	r3, r1, #6
 80033ea:	1a5b      	subs	r3, r3, r1
 80033ec:	eb64 0402 	sbc.w	r4, r4, r2
 80033f0:	f04f 0100 	mov.w	r1, #0
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	00e2      	lsls	r2, r4, #3
 80033fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033fe:	00d9      	lsls	r1, r3, #3
 8003400:	460b      	mov	r3, r1
 8003402:	4614      	mov	r4, r2
 8003404:	195b      	adds	r3, r3, r5
 8003406:	eb44 0406 	adc.w	r4, r4, r6
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	02a2      	lsls	r2, r4, #10
 8003414:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003418:	0299      	lsls	r1, r3, #10
 800341a:	460b      	mov	r3, r1
 800341c:	4614      	mov	r4, r2
 800341e:	4618      	mov	r0, r3
 8003420:	4621      	mov	r1, r4
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f04f 0400 	mov.w	r4, #0
 8003428:	461a      	mov	r2, r3
 800342a:	4623      	mov	r3, r4
 800342c:	f7fd f8ec 	bl	8000608 <__aeabi_uldivmod>
 8003430:	4603      	mov	r3, r0
 8003432:	460c      	mov	r4, r1
 8003434:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_GetSysClockFreq+0x158>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	3301      	adds	r3, #1
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	60bb      	str	r3, [r7, #8]
      break;
 8003450:	e002      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003454:	60bb      	str	r3, [r7, #8]
      break;
 8003456:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003458:	68bb      	ldr	r3, [r7, #8]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	00f42400 	.word	0x00f42400
 800346c:	00b71b00 	.word	0x00b71b00

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_GetHCLKFreq+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000000 	.word	0x20000000

08003488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800348c:	f7ff fff0 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 8003490:	4601      	mov	r1, r0
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	0a9b      	lsrs	r3, r3, #10
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4a03      	ldr	r2, [pc, #12]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	08006e34 	.word	0x08006e34

080034b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034b4:	f7ff ffdc 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 80034b8:	4601      	mov	r1, r0
 80034ba:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	0b5b      	lsrs	r3, r3, #13
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	4a03      	ldr	r2, [pc, #12]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c6:	5cd3      	ldrb	r3, [r2, r3]
 80034c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40023800 	.word	0x40023800
 80034d4:	08006e34 	.word	0x08006e34

080034d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	220f      	movs	r2, #15
 80034e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_RCC_GetClockConfig+0x5c>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0203 	and.w	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <HAL_RCC_GetClockConfig+0x5c>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_RCC_GetClockConfig+0x5c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	08db      	lsrs	r3, r3, #3
 8003512:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800351a:	4b07      	ldr	r3, [pc, #28]	; (8003538 <HAL_RCC_GetClockConfig+0x60>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 020f 	and.w	r2, r3, #15
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	601a      	str	r2, [r3, #0]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	40023c00 	.word	0x40023c00

0800353c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e01d      	b.n	800358a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fe f8ce 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f000 fa8c 	bl	8003a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b06      	cmp	r3, #6
 80035ba:	d007      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e01d      	b.n	8003628 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fe f847 	bl	8001694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f000 fa3d 	bl	8003a98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2201      	movs	r2, #1
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fc78 	bl	8003f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <HAL_TIM_PWM_Start+0x74>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_TIM_PWM_Start+0x2c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <HAL_TIM_PWM_Start+0x78>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d101      	bne.n	8003660 <HAL_TIM_PWM_Start+0x30>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_TIM_PWM_Start+0x32>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b06      	cmp	r3, #6
 8003686:	d007      	beq.n	8003698 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000
 80036a8:	40010400 	.word	0x40010400

080036ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0202 	mvn.w	r2, #2
 80036d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9b4 	bl	8003a5c <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9a6 	bl	8003a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f9b7 	bl	8003a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b04      	cmp	r3, #4
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b04      	cmp	r3, #4
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0204 	mvn.w	r2, #4
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2202      	movs	r2, #2
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f98a 	bl	8003a5c <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f97c 	bl	8003a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f98d 	bl	8003a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b08      	cmp	r3, #8
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b08      	cmp	r3, #8
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0208 	mvn.w	r2, #8
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2204      	movs	r2, #4
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f960 	bl	8003a5c <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f952 	bl	8003a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f963 	bl	8003a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d122      	bne.n	8003804 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d11b      	bne.n	8003804 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0210 	mvn.w	r2, #16
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2208      	movs	r2, #8
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f936 	bl	8003a5c <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f928 	bl	8003a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f939 	bl	8003a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d10e      	bne.n	8003830 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b01      	cmp	r3, #1
 800381e:	d107      	bne.n	8003830 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0201 	mvn.w	r2, #1
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fcb8 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b80      	cmp	r3, #128	; 0x80
 800383c:	d10e      	bne.n	800385c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b80      	cmp	r3, #128	; 0x80
 800384a:	d107      	bne.n	800385c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fc1a 	bl	8004090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d10e      	bne.n	8003888 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d107      	bne.n	8003888 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8fe 	bl	8003a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b20      	cmp	r3, #32
 8003894:	d10e      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d107      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0220 	mvn.w	r2, #32
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fbe4 	bl	800407c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e0b4      	b.n	8003a40 <HAL_TIM_PWM_ConfigChannel+0x184>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	f200 809f 	bhi.w	8003a2c <HAL_TIM_PWM_ConfigChannel+0x170>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003929 	.word	0x08003929
 80038f8:	08003a2d 	.word	0x08003a2d
 80038fc:	08003a2d 	.word	0x08003a2d
 8003900:	08003a2d 	.word	0x08003a2d
 8003904:	08003969 	.word	0x08003969
 8003908:	08003a2d 	.word	0x08003a2d
 800390c:	08003a2d 	.word	0x08003a2d
 8003910:	08003a2d 	.word	0x08003a2d
 8003914:	080039ab 	.word	0x080039ab
 8003918:	08003a2d 	.word	0x08003a2d
 800391c:	08003a2d 	.word	0x08003a2d
 8003920:	08003a2d 	.word	0x08003a2d
 8003924:	080039eb 	.word	0x080039eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f952 	bl	8003bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0208 	orr.w	r2, r2, #8
 8003942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6999      	ldr	r1, [r3, #24]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	619a      	str	r2, [r3, #24]
      break;
 8003966:	e062      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f9a2 	bl	8003cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6999      	ldr	r1, [r3, #24]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	021a      	lsls	r2, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	619a      	str	r2, [r3, #24]
      break;
 80039a8:	e041      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 f9f7 	bl	8003da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0208 	orr.w	r2, r2, #8
 80039c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0204 	bic.w	r2, r2, #4
 80039d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69d9      	ldr	r1, [r3, #28]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	61da      	str	r2, [r3, #28]
      break;
 80039e8:	e021      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fa4b 	bl	8003e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	021a      	lsls	r2, r3, #8
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	61da      	str	r2, [r3, #28]
      break;
 8003a2a:	e000      	b.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003a2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a40      	ldr	r2, [pc, #256]	; (8003bac <TIM_Base_SetConfig+0x114>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d013      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab6:	d00f      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a3d      	ldr	r2, [pc, #244]	; (8003bb0 <TIM_Base_SetConfig+0x118>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3c      	ldr	r2, [pc, #240]	; (8003bb4 <TIM_Base_SetConfig+0x11c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d007      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a3b      	ldr	r2, [pc, #236]	; (8003bb8 <TIM_Base_SetConfig+0x120>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a3a      	ldr	r2, [pc, #232]	; (8003bbc <TIM_Base_SetConfig+0x124>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d108      	bne.n	8003aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2f      	ldr	r2, [pc, #188]	; (8003bac <TIM_Base_SetConfig+0x114>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d02b      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af8:	d027      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <TIM_Base_SetConfig+0x118>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d023      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2b      	ldr	r2, [pc, #172]	; (8003bb4 <TIM_Base_SetConfig+0x11c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01f      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <TIM_Base_SetConfig+0x120>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01b      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a29      	ldr	r2, [pc, #164]	; (8003bbc <TIM_Base_SetConfig+0x124>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d017      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a28      	ldr	r2, [pc, #160]	; (8003bc0 <TIM_Base_SetConfig+0x128>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a27      	ldr	r2, [pc, #156]	; (8003bc4 <TIM_Base_SetConfig+0x12c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00f      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a26      	ldr	r2, [pc, #152]	; (8003bc8 <TIM_Base_SetConfig+0x130>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00b      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <TIM_Base_SetConfig+0x134>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a24      	ldr	r2, [pc, #144]	; (8003bd0 <TIM_Base_SetConfig+0x138>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <TIM_Base_SetConfig+0x13c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d108      	bne.n	8003b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <TIM_Base_SetConfig+0x114>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_Base_SetConfig+0xf8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <TIM_Base_SetConfig+0x124>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d103      	bne.n	8003b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	615a      	str	r2, [r3, #20]
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40010400 	.word	0x40010400
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40014400 	.word	0x40014400
 8003bc8:	40014800 	.word	0x40014800
 8003bcc:	40001800 	.word	0x40001800
 8003bd0:	40001c00 	.word	0x40001c00
 8003bd4:	40002000 	.word	0x40002000

08003bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f023 0201 	bic.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 0302 	bic.w	r3, r3, #2
 8003c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a20      	ldr	r2, [pc, #128]	; (8003cb0 <TIM_OC1_SetConfig+0xd8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC1_SetConfig+0x64>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <TIM_OC1_SetConfig+0xdc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10c      	bne.n	8003c56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0308 	bic.w	r3, r3, #8
 8003c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <TIM_OC1_SetConfig+0xd8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_OC1_SetConfig+0x8e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <TIM_OC1_SetConfig+0xdc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d111      	bne.n	8003c8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	621a      	str	r2, [r3, #32]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40010400 	.word	0x40010400

08003cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0210 	bic.w	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0320 	bic.w	r3, r3, #32
 8003d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a22      	ldr	r2, [pc, #136]	; (8003d9c <TIM_OC2_SetConfig+0xe4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_OC2_SetConfig+0x68>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <TIM_OC2_SetConfig+0xe8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10d      	bne.n	8003d3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <TIM_OC2_SetConfig+0xe4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_OC2_SetConfig+0x94>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <TIM_OC2_SetConfig+0xe8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d113      	bne.n	8003d74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	40010400 	.word	0x40010400

08003da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <TIM_OC3_SetConfig+0xe0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_OC3_SetConfig+0x66>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a20      	ldr	r2, [pc, #128]	; (8003e88 <TIM_OC3_SetConfig+0xe4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10d      	bne.n	8003e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <TIM_OC3_SetConfig+0xe0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_OC3_SetConfig+0x92>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <TIM_OC3_SetConfig+0xe4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d113      	bne.n	8003e5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	621a      	str	r2, [r3, #32]
}
 8003e78:	bf00      	nop
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40010400 	.word	0x40010400

08003e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	031b      	lsls	r3, r3, #12
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <TIM_OC4_SetConfig+0xa4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_OC4_SetConfig+0x68>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <TIM_OC4_SetConfig+0xa8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d109      	bne.n	8003f08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	019b      	lsls	r3, r3, #6
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40010400 	.word	0x40010400

08003f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a1a      	ldr	r2, [r3, #32]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1a      	ldr	r2, [r3, #32]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e05a      	b.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a21      	ldr	r2, [pc, #132]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d01d      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1a      	ldr	r2, [pc, #104]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a18      	ldr	r2, [pc, #96]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10c      	bne.n	8004040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800402c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4313      	orrs	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40010000 	.word	0x40010000
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00
 8004070:	40010400 	.word	0x40010400
 8004074:	40014000 	.word	0x40014000
 8004078:	40001800 	.word	0x40001800

0800407c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e03f      	b.n	8004136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd fbe0 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	; 0x24
 80040d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f90b 	bl	8004304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800410c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800411c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b088      	sub	sp, #32
 8004142:	af02      	add	r7, sp, #8
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b20      	cmp	r3, #32
 800415c:	f040 8083 	bne.w	8004266 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_UART_Transmit+0x2e>
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e07b      	b.n	8004268 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_UART_Transmit+0x40>
 800417a:	2302      	movs	r3, #2
 800417c:	e074      	b.n	8004268 <HAL_UART_Transmit+0x12a>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2221      	movs	r2, #33	; 0x21
 8004190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004194:	f7fd fc24 	bl	80019e0 <HAL_GetTick>
 8004198:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	88fa      	ldrh	r2, [r7, #6]
 80041a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80041ae:	e042      	b.n	8004236 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c6:	d122      	bne.n	800420e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f84c 	bl	8004270 <UART_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e042      	b.n	8004268 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	3302      	adds	r3, #2
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	e017      	b.n	8004236 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3301      	adds	r3, #1
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	e013      	b.n	8004236 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2200      	movs	r2, #0
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f829 	bl	8004270 <UART_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e01f      	b.n	8004268 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	60ba      	str	r2, [r7, #8]
 800422e:	781a      	ldrb	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1b7      	bne.n	80041b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2200      	movs	r2, #0
 8004248:	2140      	movs	r1, #64	; 0x40
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f810 	bl	8004270 <UART_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e006      	b.n	8004268 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004280:	e02c      	b.n	80042dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d028      	beq.n	80042dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004290:	f7fd fba6 	bl	80019e0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	429a      	cmp	r2, r3
 800429e:	d21d      	bcs.n	80042dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e00f      	b.n	80042fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d0c3      	beq.n	8004282 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004346:	f023 030c 	bic.w	r3, r3, #12
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	430b      	orrs	r3, r1
 8004352:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004372:	f040 818b 	bne.w	800468c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4ac1      	ldr	r2, [pc, #772]	; (8004680 <UART_SetConfig+0x37c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d005      	beq.n	800438c <UART_SetConfig+0x88>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4abf      	ldr	r2, [pc, #764]	; (8004684 <UART_SetConfig+0x380>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f040 80bd 	bne.w	8004506 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800438c:	f7ff f890 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 8004390:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	461d      	mov	r5, r3
 8004396:	f04f 0600 	mov.w	r6, #0
 800439a:	46a8      	mov	r8, r5
 800439c:	46b1      	mov	r9, r6
 800439e:	eb18 0308 	adds.w	r3, r8, r8
 80043a2:	eb49 0409 	adc.w	r4, r9, r9
 80043a6:	4698      	mov	r8, r3
 80043a8:	46a1      	mov	r9, r4
 80043aa:	eb18 0805 	adds.w	r8, r8, r5
 80043ae:	eb49 0906 	adc.w	r9, r9, r6
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043c6:	4688      	mov	r8, r1
 80043c8:	4691      	mov	r9, r2
 80043ca:	eb18 0005 	adds.w	r0, r8, r5
 80043ce:	eb49 0106 	adc.w	r1, r9, r6
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	461d      	mov	r5, r3
 80043d8:	f04f 0600 	mov.w	r6, #0
 80043dc:	196b      	adds	r3, r5, r5
 80043de:	eb46 0406 	adc.w	r4, r6, r6
 80043e2:	461a      	mov	r2, r3
 80043e4:	4623      	mov	r3, r4
 80043e6:	f7fc f90f 	bl	8000608 <__aeabi_uldivmod>
 80043ea:	4603      	mov	r3, r0
 80043ec:	460c      	mov	r4, r1
 80043ee:	461a      	mov	r2, r3
 80043f0:	4ba5      	ldr	r3, [pc, #660]	; (8004688 <UART_SetConfig+0x384>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	461d      	mov	r5, r3
 8004400:	f04f 0600 	mov.w	r6, #0
 8004404:	46a9      	mov	r9, r5
 8004406:	46b2      	mov	sl, r6
 8004408:	eb19 0309 	adds.w	r3, r9, r9
 800440c:	eb4a 040a 	adc.w	r4, sl, sl
 8004410:	4699      	mov	r9, r3
 8004412:	46a2      	mov	sl, r4
 8004414:	eb19 0905 	adds.w	r9, r9, r5
 8004418:	eb4a 0a06 	adc.w	sl, sl, r6
 800441c:	f04f 0100 	mov.w	r1, #0
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004428:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800442c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004430:	4689      	mov	r9, r1
 8004432:	4692      	mov	sl, r2
 8004434:	eb19 0005 	adds.w	r0, r9, r5
 8004438:	eb4a 0106 	adc.w	r1, sl, r6
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	461d      	mov	r5, r3
 8004442:	f04f 0600 	mov.w	r6, #0
 8004446:	196b      	adds	r3, r5, r5
 8004448:	eb46 0406 	adc.w	r4, r6, r6
 800444c:	461a      	mov	r2, r3
 800444e:	4623      	mov	r3, r4
 8004450:	f7fc f8da 	bl	8000608 <__aeabi_uldivmod>
 8004454:	4603      	mov	r3, r0
 8004456:	460c      	mov	r4, r1
 8004458:	461a      	mov	r2, r3
 800445a:	4b8b      	ldr	r3, [pc, #556]	; (8004688 <UART_SetConfig+0x384>)
 800445c:	fba3 1302 	umull	r1, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	2164      	movs	r1, #100	; 0x64
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	3332      	adds	r3, #50	; 0x32
 800446e:	4a86      	ldr	r2, [pc, #536]	; (8004688 <UART_SetConfig+0x384>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800447c:	4498      	add	r8, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	461d      	mov	r5, r3
 8004482:	f04f 0600 	mov.w	r6, #0
 8004486:	46a9      	mov	r9, r5
 8004488:	46b2      	mov	sl, r6
 800448a:	eb19 0309 	adds.w	r3, r9, r9
 800448e:	eb4a 040a 	adc.w	r4, sl, sl
 8004492:	4699      	mov	r9, r3
 8004494:	46a2      	mov	sl, r4
 8004496:	eb19 0905 	adds.w	r9, r9, r5
 800449a:	eb4a 0a06 	adc.w	sl, sl, r6
 800449e:	f04f 0100 	mov.w	r1, #0
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044b2:	4689      	mov	r9, r1
 80044b4:	4692      	mov	sl, r2
 80044b6:	eb19 0005 	adds.w	r0, r9, r5
 80044ba:	eb4a 0106 	adc.w	r1, sl, r6
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	461d      	mov	r5, r3
 80044c4:	f04f 0600 	mov.w	r6, #0
 80044c8:	196b      	adds	r3, r5, r5
 80044ca:	eb46 0406 	adc.w	r4, r6, r6
 80044ce:	461a      	mov	r2, r3
 80044d0:	4623      	mov	r3, r4
 80044d2:	f7fc f899 	bl	8000608 <__aeabi_uldivmod>
 80044d6:	4603      	mov	r3, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	461a      	mov	r2, r3
 80044dc:	4b6a      	ldr	r3, [pc, #424]	; (8004688 <UART_SetConfig+0x384>)
 80044de:	fba3 1302 	umull	r1, r3, r3, r2
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	2164      	movs	r1, #100	; 0x64
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	3332      	adds	r3, #50	; 0x32
 80044f0:	4a65      	ldr	r2, [pc, #404]	; (8004688 <UART_SetConfig+0x384>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	f003 0207 	and.w	r2, r3, #7
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4442      	add	r2, r8
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	e26f      	b.n	80049e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004506:	f7fe ffbf 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 800450a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	461d      	mov	r5, r3
 8004510:	f04f 0600 	mov.w	r6, #0
 8004514:	46a8      	mov	r8, r5
 8004516:	46b1      	mov	r9, r6
 8004518:	eb18 0308 	adds.w	r3, r8, r8
 800451c:	eb49 0409 	adc.w	r4, r9, r9
 8004520:	4698      	mov	r8, r3
 8004522:	46a1      	mov	r9, r4
 8004524:	eb18 0805 	adds.w	r8, r8, r5
 8004528:	eb49 0906 	adc.w	r9, r9, r6
 800452c:	f04f 0100 	mov.w	r1, #0
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004538:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800453c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004540:	4688      	mov	r8, r1
 8004542:	4691      	mov	r9, r2
 8004544:	eb18 0005 	adds.w	r0, r8, r5
 8004548:	eb49 0106 	adc.w	r1, r9, r6
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	461d      	mov	r5, r3
 8004552:	f04f 0600 	mov.w	r6, #0
 8004556:	196b      	adds	r3, r5, r5
 8004558:	eb46 0406 	adc.w	r4, r6, r6
 800455c:	461a      	mov	r2, r3
 800455e:	4623      	mov	r3, r4
 8004560:	f7fc f852 	bl	8000608 <__aeabi_uldivmod>
 8004564:	4603      	mov	r3, r0
 8004566:	460c      	mov	r4, r1
 8004568:	461a      	mov	r2, r3
 800456a:	4b47      	ldr	r3, [pc, #284]	; (8004688 <UART_SetConfig+0x384>)
 800456c:	fba3 2302 	umull	r2, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	461d      	mov	r5, r3
 800457a:	f04f 0600 	mov.w	r6, #0
 800457e:	46a9      	mov	r9, r5
 8004580:	46b2      	mov	sl, r6
 8004582:	eb19 0309 	adds.w	r3, r9, r9
 8004586:	eb4a 040a 	adc.w	r4, sl, sl
 800458a:	4699      	mov	r9, r3
 800458c:	46a2      	mov	sl, r4
 800458e:	eb19 0905 	adds.w	r9, r9, r5
 8004592:	eb4a 0a06 	adc.w	sl, sl, r6
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045aa:	4689      	mov	r9, r1
 80045ac:	4692      	mov	sl, r2
 80045ae:	eb19 0005 	adds.w	r0, r9, r5
 80045b2:	eb4a 0106 	adc.w	r1, sl, r6
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	461d      	mov	r5, r3
 80045bc:	f04f 0600 	mov.w	r6, #0
 80045c0:	196b      	adds	r3, r5, r5
 80045c2:	eb46 0406 	adc.w	r4, r6, r6
 80045c6:	461a      	mov	r2, r3
 80045c8:	4623      	mov	r3, r4
 80045ca:	f7fc f81d 	bl	8000608 <__aeabi_uldivmod>
 80045ce:	4603      	mov	r3, r0
 80045d0:	460c      	mov	r4, r1
 80045d2:	461a      	mov	r2, r3
 80045d4:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <UART_SetConfig+0x384>)
 80045d6:	fba3 1302 	umull	r1, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2164      	movs	r1, #100	; 0x64
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a27      	ldr	r2, [pc, #156]	; (8004688 <UART_SetConfig+0x384>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045f6:	4498      	add	r8, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	461d      	mov	r5, r3
 80045fc:	f04f 0600 	mov.w	r6, #0
 8004600:	46a9      	mov	r9, r5
 8004602:	46b2      	mov	sl, r6
 8004604:	eb19 0309 	adds.w	r3, r9, r9
 8004608:	eb4a 040a 	adc.w	r4, sl, sl
 800460c:	4699      	mov	r9, r3
 800460e:	46a2      	mov	sl, r4
 8004610:	eb19 0905 	adds.w	r9, r9, r5
 8004614:	eb4a 0a06 	adc.w	sl, sl, r6
 8004618:	f04f 0100 	mov.w	r1, #0
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004624:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004628:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800462c:	4689      	mov	r9, r1
 800462e:	4692      	mov	sl, r2
 8004630:	eb19 0005 	adds.w	r0, r9, r5
 8004634:	eb4a 0106 	adc.w	r1, sl, r6
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	461d      	mov	r5, r3
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	196b      	adds	r3, r5, r5
 8004644:	eb46 0406 	adc.w	r4, r6, r6
 8004648:	461a      	mov	r2, r3
 800464a:	4623      	mov	r3, r4
 800464c:	f7fb ffdc 	bl	8000608 <__aeabi_uldivmod>
 8004650:	4603      	mov	r3, r0
 8004652:	460c      	mov	r4, r1
 8004654:	461a      	mov	r2, r3
 8004656:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <UART_SetConfig+0x384>)
 8004658:	fba3 1302 	umull	r1, r3, r3, r2
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	2164      	movs	r1, #100	; 0x64
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	3332      	adds	r3, #50	; 0x32
 800466a:	4a07      	ldr	r2, [pc, #28]	; (8004688 <UART_SetConfig+0x384>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	f003 0207 	and.w	r2, r3, #7
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4442      	add	r2, r8
 800467c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800467e:	e1b2      	b.n	80049e6 <UART_SetConfig+0x6e2>
 8004680:	40011000 	.word	0x40011000
 8004684:	40011400 	.word	0x40011400
 8004688:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4ad7      	ldr	r2, [pc, #860]	; (80049f0 <UART_SetConfig+0x6ec>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d005      	beq.n	80046a2 <UART_SetConfig+0x39e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4ad6      	ldr	r2, [pc, #856]	; (80049f4 <UART_SetConfig+0x6f0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	f040 80d1 	bne.w	8004844 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80046a2:	f7fe ff05 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 80046a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	469a      	mov	sl, r3
 80046ac:	f04f 0b00 	mov.w	fp, #0
 80046b0:	46d0      	mov	r8, sl
 80046b2:	46d9      	mov	r9, fp
 80046b4:	eb18 0308 	adds.w	r3, r8, r8
 80046b8:	eb49 0409 	adc.w	r4, r9, r9
 80046bc:	4698      	mov	r8, r3
 80046be:	46a1      	mov	r9, r4
 80046c0:	eb18 080a 	adds.w	r8, r8, sl
 80046c4:	eb49 090b 	adc.w	r9, r9, fp
 80046c8:	f04f 0100 	mov.w	r1, #0
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046dc:	4688      	mov	r8, r1
 80046de:	4691      	mov	r9, r2
 80046e0:	eb1a 0508 	adds.w	r5, sl, r8
 80046e4:	eb4b 0609 	adc.w	r6, fp, r9
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	f04f 0400 	mov.w	r4, #0
 80046fa:	0094      	lsls	r4, r2, #2
 80046fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004700:	008b      	lsls	r3, r1, #2
 8004702:	461a      	mov	r2, r3
 8004704:	4623      	mov	r3, r4
 8004706:	4628      	mov	r0, r5
 8004708:	4631      	mov	r1, r6
 800470a:	f7fb ff7d 	bl	8000608 <__aeabi_uldivmod>
 800470e:	4603      	mov	r3, r0
 8004710:	460c      	mov	r4, r1
 8004712:	461a      	mov	r2, r3
 8004714:	4bb8      	ldr	r3, [pc, #736]	; (80049f8 <UART_SetConfig+0x6f4>)
 8004716:	fba3 2302 	umull	r2, r3, r3, r2
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	469b      	mov	fp, r3
 8004724:	f04f 0c00 	mov.w	ip, #0
 8004728:	46d9      	mov	r9, fp
 800472a:	46e2      	mov	sl, ip
 800472c:	eb19 0309 	adds.w	r3, r9, r9
 8004730:	eb4a 040a 	adc.w	r4, sl, sl
 8004734:	4699      	mov	r9, r3
 8004736:	46a2      	mov	sl, r4
 8004738:	eb19 090b 	adds.w	r9, r9, fp
 800473c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800474c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004754:	4689      	mov	r9, r1
 8004756:	4692      	mov	sl, r2
 8004758:	eb1b 0509 	adds.w	r5, fp, r9
 800475c:	eb4c 060a 	adc.w	r6, ip, sl
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4619      	mov	r1, r3
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	f04f 0400 	mov.w	r4, #0
 8004772:	0094      	lsls	r4, r2, #2
 8004774:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004778:	008b      	lsls	r3, r1, #2
 800477a:	461a      	mov	r2, r3
 800477c:	4623      	mov	r3, r4
 800477e:	4628      	mov	r0, r5
 8004780:	4631      	mov	r1, r6
 8004782:	f7fb ff41 	bl	8000608 <__aeabi_uldivmod>
 8004786:	4603      	mov	r3, r0
 8004788:	460c      	mov	r4, r1
 800478a:	461a      	mov	r2, r3
 800478c:	4b9a      	ldr	r3, [pc, #616]	; (80049f8 <UART_SetConfig+0x6f4>)
 800478e:	fba3 1302 	umull	r1, r3, r3, r2
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2164      	movs	r1, #100	; 0x64
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	3332      	adds	r3, #50	; 0x32
 80047a0:	4a95      	ldr	r2, [pc, #596]	; (80049f8 <UART_SetConfig+0x6f4>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ac:	4498      	add	r8, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	469b      	mov	fp, r3
 80047b2:	f04f 0c00 	mov.w	ip, #0
 80047b6:	46d9      	mov	r9, fp
 80047b8:	46e2      	mov	sl, ip
 80047ba:	eb19 0309 	adds.w	r3, r9, r9
 80047be:	eb4a 040a 	adc.w	r4, sl, sl
 80047c2:	4699      	mov	r9, r3
 80047c4:	46a2      	mov	sl, r4
 80047c6:	eb19 090b 	adds.w	r9, r9, fp
 80047ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047e2:	4689      	mov	r9, r1
 80047e4:	4692      	mov	sl, r2
 80047e6:	eb1b 0509 	adds.w	r5, fp, r9
 80047ea:	eb4c 060a 	adc.w	r6, ip, sl
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4619      	mov	r1, r3
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	f04f 0400 	mov.w	r4, #0
 8004800:	0094      	lsls	r4, r2, #2
 8004802:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004806:	008b      	lsls	r3, r1, #2
 8004808:	461a      	mov	r2, r3
 800480a:	4623      	mov	r3, r4
 800480c:	4628      	mov	r0, r5
 800480e:	4631      	mov	r1, r6
 8004810:	f7fb fefa 	bl	8000608 <__aeabi_uldivmod>
 8004814:	4603      	mov	r3, r0
 8004816:	460c      	mov	r4, r1
 8004818:	461a      	mov	r2, r3
 800481a:	4b77      	ldr	r3, [pc, #476]	; (80049f8 <UART_SetConfig+0x6f4>)
 800481c:	fba3 1302 	umull	r1, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	2164      	movs	r1, #100	; 0x64
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	3332      	adds	r3, #50	; 0x32
 800482e:	4a72      	ldr	r2, [pc, #456]	; (80049f8 <UART_SetConfig+0x6f4>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	f003 020f 	and.w	r2, r3, #15
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4442      	add	r2, r8
 8004840:	609a      	str	r2, [r3, #8]
 8004842:	e0d0      	b.n	80049e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7fe fe20 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8004848:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	469a      	mov	sl, r3
 800484e:	f04f 0b00 	mov.w	fp, #0
 8004852:	46d0      	mov	r8, sl
 8004854:	46d9      	mov	r9, fp
 8004856:	eb18 0308 	adds.w	r3, r8, r8
 800485a:	eb49 0409 	adc.w	r4, r9, r9
 800485e:	4698      	mov	r8, r3
 8004860:	46a1      	mov	r9, r4
 8004862:	eb18 080a 	adds.w	r8, r8, sl
 8004866:	eb49 090b 	adc.w	r9, r9, fp
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004876:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800487a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800487e:	4688      	mov	r8, r1
 8004880:	4691      	mov	r9, r2
 8004882:	eb1a 0508 	adds.w	r5, sl, r8
 8004886:	eb4b 0609 	adc.w	r6, fp, r9
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4619      	mov	r1, r3
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	f04f 0400 	mov.w	r4, #0
 800489c:	0094      	lsls	r4, r2, #2
 800489e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048a2:	008b      	lsls	r3, r1, #2
 80048a4:	461a      	mov	r2, r3
 80048a6:	4623      	mov	r3, r4
 80048a8:	4628      	mov	r0, r5
 80048aa:	4631      	mov	r1, r6
 80048ac:	f7fb feac 	bl	8000608 <__aeabi_uldivmod>
 80048b0:	4603      	mov	r3, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	461a      	mov	r2, r3
 80048b6:	4b50      	ldr	r3, [pc, #320]	; (80049f8 <UART_SetConfig+0x6f4>)
 80048b8:	fba3 2302 	umull	r2, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	469b      	mov	fp, r3
 80048c6:	f04f 0c00 	mov.w	ip, #0
 80048ca:	46d9      	mov	r9, fp
 80048cc:	46e2      	mov	sl, ip
 80048ce:	eb19 0309 	adds.w	r3, r9, r9
 80048d2:	eb4a 040a 	adc.w	r4, sl, sl
 80048d6:	4699      	mov	r9, r3
 80048d8:	46a2      	mov	sl, r4
 80048da:	eb19 090b 	adds.w	r9, r9, fp
 80048de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048e2:	f04f 0100 	mov.w	r1, #0
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048f6:	4689      	mov	r9, r1
 80048f8:	4692      	mov	sl, r2
 80048fa:	eb1b 0509 	adds.w	r5, fp, r9
 80048fe:	eb4c 060a 	adc.w	r6, ip, sl
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4619      	mov	r1, r3
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	f04f 0400 	mov.w	r4, #0
 8004914:	0094      	lsls	r4, r2, #2
 8004916:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800491a:	008b      	lsls	r3, r1, #2
 800491c:	461a      	mov	r2, r3
 800491e:	4623      	mov	r3, r4
 8004920:	4628      	mov	r0, r5
 8004922:	4631      	mov	r1, r6
 8004924:	f7fb fe70 	bl	8000608 <__aeabi_uldivmod>
 8004928:	4603      	mov	r3, r0
 800492a:	460c      	mov	r4, r1
 800492c:	461a      	mov	r2, r3
 800492e:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <UART_SetConfig+0x6f4>)
 8004930:	fba3 1302 	umull	r1, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	2164      	movs	r1, #100	; 0x64
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	3332      	adds	r3, #50	; 0x32
 8004942:	4a2d      	ldr	r2, [pc, #180]	; (80049f8 <UART_SetConfig+0x6f4>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800494e:	4498      	add	r8, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	469b      	mov	fp, r3
 8004954:	f04f 0c00 	mov.w	ip, #0
 8004958:	46d9      	mov	r9, fp
 800495a:	46e2      	mov	sl, ip
 800495c:	eb19 0309 	adds.w	r3, r9, r9
 8004960:	eb4a 040a 	adc.w	r4, sl, sl
 8004964:	4699      	mov	r9, r3
 8004966:	46a2      	mov	sl, r4
 8004968:	eb19 090b 	adds.w	r9, r9, fp
 800496c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800497c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004980:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004984:	4689      	mov	r9, r1
 8004986:	4692      	mov	sl, r2
 8004988:	eb1b 0509 	adds.w	r5, fp, r9
 800498c:	eb4c 060a 	adc.w	r6, ip, sl
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4619      	mov	r1, r3
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	f04f 0400 	mov.w	r4, #0
 80049a2:	0094      	lsls	r4, r2, #2
 80049a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049a8:	008b      	lsls	r3, r1, #2
 80049aa:	461a      	mov	r2, r3
 80049ac:	4623      	mov	r3, r4
 80049ae:	4628      	mov	r0, r5
 80049b0:	4631      	mov	r1, r6
 80049b2:	f7fb fe29 	bl	8000608 <__aeabi_uldivmod>
 80049b6:	4603      	mov	r3, r0
 80049b8:	460c      	mov	r4, r1
 80049ba:	461a      	mov	r2, r3
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <UART_SetConfig+0x6f4>)
 80049be:	fba3 1302 	umull	r1, r3, r3, r2
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2164      	movs	r1, #100	; 0x64
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	3332      	adds	r3, #50	; 0x32
 80049d0:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <UART_SetConfig+0x6f4>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	f003 020f 	and.w	r2, r3, #15
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4442      	add	r2, r8
 80049e2:	609a      	str	r2, [r3, #8]
}
 80049e4:	e7ff      	b.n	80049e6 <UART_SetConfig+0x6e2>
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f0:	40011000 	.word	0x40011000
 80049f4:	40011400 	.word	0x40011400
 80049f8:	51eb851f 	.word	0x51eb851f

080049fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a0e:	2b84      	cmp	r3, #132	; 0x84
 8004a10:	d005      	beq.n	8004a1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	3303      	adds	r3, #3
 8004a1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004a30:	f000 fada 	bl	8004fe8 <vTaskStartScheduler>
  
  return osOK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3c:	b089      	sub	sp, #36	; 0x24
 8004a3e:	af04      	add	r7, sp, #16
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <osThreadCreate+0x54>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01c      	beq.n	8004a8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685c      	ldr	r4, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681d      	ldr	r5, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691e      	ldr	r6, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ffc8 	bl	80049fc <makeFreeRtosPriority>
 8004a6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a76:	9202      	str	r2, [sp, #8]
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	9100      	str	r1, [sp, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4632      	mov	r2, r6
 8004a80:	4629      	mov	r1, r5
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 f8ed 	bl	8004c62 <xTaskCreateStatic>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e01c      	b.n	8004ac8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685c      	ldr	r4, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a9a:	b29e      	uxth	r6, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ffaa 	bl	80049fc <makeFreeRtosPriority>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	f107 030c 	add.w	r3, r7, #12
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	9200      	str	r2, [sp, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 f92c 	bl	8004d16 <xTaskCreate>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d001      	beq.n	8004ac8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e000      	b.n	8004aca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ad2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <osDelay+0x16>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	e000      	b.n	8004aea <osDelay+0x18>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fa48 	bl	8004f80 <vTaskDelay>
  
  return osOK;
 8004af0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f103 0208 	add.w	r2, r3, #8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f103 0208 	add.w	r2, r3, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f103 0208 	add.w	r2, r3, #8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d103      	bne.n	8004bbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	e00c      	b.n	8004bd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e002      	b.n	8004bca <vListInsert+0x2e>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d2f6      	bcs.n	8004bc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	601a      	str	r2, [r3, #0]
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6892      	ldr	r2, [r2, #8]
 8004c24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6852      	ldr	r2, [r2, #4]
 8004c2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d103      	bne.n	8004c42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	1e5a      	subs	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b08e      	sub	sp, #56	; 0x38
 8004c66:	af04      	add	r7, sp, #16
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	e7fe      	b.n	8004c88 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <xTaskCreateStatic+0x42>
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	e7fe      	b.n	8004ca2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ca4:	2354      	movs	r3, #84	; 0x54
 8004ca6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b54      	cmp	r3, #84	; 0x54
 8004cac:	d009      	beq.n	8004cc2 <xTaskCreateStatic+0x60>
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	e7fe      	b.n	8004cc0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01e      	beq.n	8004d08 <xTaskCreateStatic+0xa6>
 8004cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	f107 0314 	add.w	r3, r7, #20
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f850 	bl	8004da0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d02:	f000 f8d3 	bl	8004eac <prvAddNewTaskToReadyList>
 8004d06:	e001      	b.n	8004d0c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d0c:	697b      	ldr	r3, [r7, #20]
	}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3728      	adds	r7, #40	; 0x28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b08c      	sub	sp, #48	; 0x30
 8004d1a:	af04      	add	r7, sp, #16
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 feb2 	bl	8005a94 <pvPortMalloc>
 8004d30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00e      	beq.n	8004d56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d38:	2054      	movs	r0, #84	; 0x54
 8004d3a:	f000 feab 	bl	8005a94 <pvPortMalloc>
 8004d3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d4c:	e005      	b.n	8004d5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f000 ff62 	bl	8005c18 <vPortFree>
 8004d54:	e001      	b.n	8004d5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d68:	88fa      	ldrh	r2, [r7, #6]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9303      	str	r3, [sp, #12]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f80e 	bl	8004da0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d84:	69f8      	ldr	r0, [r7, #28]
 8004d86:	f000 f891 	bl	8004eac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	e002      	b.n	8004d96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d90:	f04f 33ff 	mov.w	r3, #4294967295
 8004d94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d96:	69bb      	ldr	r3, [r7, #24]
	}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004db8:	3b01      	subs	r3, #1
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f023 0307 	bic.w	r3, r3, #7
 8004dc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <prvInitialiseNewTask+0x46>
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e7fe      	b.n	8004de4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01f      	beq.n	8004e2c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dec:	2300      	movs	r3, #0
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	e012      	b.n	8004e18 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	7819      	ldrb	r1, [r3, #0]
 8004dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	3334      	adds	r3, #52	; 0x34
 8004e02:	460a      	mov	r2, r1
 8004e04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d006      	beq.n	8004e20 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	3301      	adds	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	d9e9      	bls.n	8004df2 <prvInitialiseNewTask+0x52>
 8004e1e:	e000      	b.n	8004e22 <prvInitialiseNewTask+0x82>
			{
				break;
 8004e20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e2a:	e003      	b.n	8004e34 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	d901      	bls.n	8004e3e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e3a:	2306      	movs	r3, #6
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	3304      	adds	r3, #4
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fe70 	bl	8004b3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	3318      	adds	r3, #24
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fe6b 	bl	8004b3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	f1c3 0207 	rsb	r2, r3, #7
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	69b8      	ldr	r0, [r7, #24]
 8004e8e:	f000 fbfd 	bl	800568c <pxPortInitialiseStack>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ea4:	bf00      	nop
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004eb4:	f000 fd12 	bl	80058dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <prvAddNewTaskToReadyList+0xb8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	4a29      	ldr	r2, [pc, #164]	; (8004f64 <prvAddNewTaskToReadyList+0xb8>)
 8004ec0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ec2:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <prvAddNewTaskToReadyList+0xbc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004eca:	4a27      	ldr	r2, [pc, #156]	; (8004f68 <prvAddNewTaskToReadyList+0xbc>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ed0:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <prvAddNewTaskToReadyList+0xb8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d110      	bne.n	8004efa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ed8:	f000 fab8 	bl	800544c <prvInitialiseTaskLists>
 8004edc:	e00d      	b.n	8004efa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ede:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <prvAddNewTaskToReadyList+0xc0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ee6:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <prvAddNewTaskToReadyList+0xbc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d802      	bhi.n	8004efa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <prvAddNewTaskToReadyList+0xbc>)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004efa:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <prvAddNewTaskToReadyList+0xc4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <prvAddNewTaskToReadyList+0xc4>)
 8004f02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	2201      	movs	r2, #1
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <prvAddNewTaskToReadyList+0xc8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <prvAddNewTaskToReadyList+0xc8>)
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <prvAddNewTaskToReadyList+0xcc>)
 8004f24:	441a      	add	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f7ff fe11 	bl	8004b54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f32:	f000 fd01 	bl	8005938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <prvAddNewTaskToReadyList+0xc0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <prvAddNewTaskToReadyList+0xbc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d207      	bcs.n	8004f5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <prvAddNewTaskToReadyList+0xd0>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000408 	.word	0x20000408
 8004f68:	20000308 	.word	0x20000308
 8004f6c:	20000414 	.word	0x20000414
 8004f70:	20000424 	.word	0x20000424
 8004f74:	20000410 	.word	0x20000410
 8004f78:	2000030c 	.word	0x2000030c
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d016      	beq.n	8004fc0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <vTaskDelay+0x60>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <vTaskDelay+0x2e>
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	e7fe      	b.n	8004fac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004fae:	f000 f879 	bl	80050a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fb03 	bl	80055c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fba:	f000 f881 	bl	80050c0 <xTaskResumeAll>
 8004fbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d107      	bne.n	8004fd6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004fc6:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <vTaskDelay+0x64>)
 8004fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000430 	.word	0x20000430
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ff6:	463a      	mov	r2, r7
 8004ff8:	1d39      	adds	r1, r7, #4
 8004ffa:	f107 0308 	add.w	r3, r7, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb feda 	bl	8000db8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	9202      	str	r2, [sp, #8]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	460a      	mov	r2, r1
 8005016:	491d      	ldr	r1, [pc, #116]	; (800508c <vTaskStartScheduler+0xa4>)
 8005018:	481d      	ldr	r0, [pc, #116]	; (8005090 <vTaskStartScheduler+0xa8>)
 800501a:	f7ff fe22 	bl	8004c62 <xTaskCreateStatic>
 800501e:	4602      	mov	r2, r0
 8005020:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <vTaskStartScheduler+0xac>)
 8005022:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <vTaskStartScheduler+0xac>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800502c:	2301      	movs	r3, #1
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	e001      	b.n	8005036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d115      	bne.n	8005068 <vTaskStartScheduler+0x80>
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <vTaskStartScheduler+0xb0>)
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <vTaskStartScheduler+0xb4>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800505c:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <vTaskStartScheduler+0xb8>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005062:	f000 fb9d 	bl	80057a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005066:	e00d      	b.n	8005084 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d109      	bne.n	8005084 <vTaskStartScheduler+0x9c>
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e7fe      	b.n	8005082 <vTaskStartScheduler+0x9a>
}
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	08006e1c 	.word	0x08006e1c
 8005090:	0800541d 	.word	0x0800541d
 8005094:	2000042c 	.word	0x2000042c
 8005098:	20000428 	.word	0x20000428
 800509c:	20000414 	.word	0x20000414
 80050a0:	2000040c 	.word	0x2000040c

080050a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <vTaskSuspendAll+0x18>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	4a03      	ldr	r2, [pc, #12]	; (80050bc <vTaskSuspendAll+0x18>)
 80050b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80050b2:	bf00      	nop
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	20000430 	.word	0x20000430

080050c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050ce:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <xTaskResumeAll+0x114>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <xTaskResumeAll+0x2a>
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	e7fe      	b.n	80050e8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050ea:	f000 fbf7 	bl	80058dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050ee:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <xTaskResumeAll+0x114>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	4a37      	ldr	r2, [pc, #220]	; (80051d4 <xTaskResumeAll+0x114>)
 80050f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050f8:	4b36      	ldr	r3, [pc, #216]	; (80051d4 <xTaskResumeAll+0x114>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d161      	bne.n	80051c4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005100:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <xTaskResumeAll+0x118>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05d      	beq.n	80051c4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005108:	e02e      	b.n	8005168 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510a:	4b34      	ldr	r3, [pc, #208]	; (80051dc <xTaskResumeAll+0x11c>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3318      	adds	r3, #24
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fd79 	bl	8004c0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3304      	adds	r3, #4
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fd74 	bl	8004c0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	2201      	movs	r2, #1
 800512c:	409a      	lsls	r2, r3
 800512e:	4b2c      	ldr	r3, [pc, #176]	; (80051e0 <xTaskResumeAll+0x120>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4313      	orrs	r3, r2
 8005134:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <xTaskResumeAll+0x120>)
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4a27      	ldr	r2, [pc, #156]	; (80051e4 <xTaskResumeAll+0x124>)
 8005146:	441a      	add	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f7ff fd00 	bl	8004b54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005158:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <xTaskResumeAll+0x128>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005162:	4b22      	ldr	r3, [pc, #136]	; (80051ec <xTaskResumeAll+0x12c>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005168:	4b1c      	ldr	r3, [pc, #112]	; (80051dc <xTaskResumeAll+0x11c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1cc      	bne.n	800510a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005176:	f000 fa03 	bl	8005580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800517a:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <xTaskResumeAll+0x130>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d010      	beq.n	80051a8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005186:	f000 f837 	bl	80051f8 <xTaskIncrementTick>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005190:	4b16      	ldr	r3, [pc, #88]	; (80051ec <xTaskResumeAll+0x12c>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3b01      	subs	r3, #1
 800519a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f1      	bne.n	8005186 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80051a2:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <xTaskResumeAll+0x130>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <xTaskResumeAll+0x12c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051b0:	2301      	movs	r3, #1
 80051b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <xTaskResumeAll+0x134>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051c4:	f000 fbb8 	bl	8005938 <vPortExitCritical>

	return xAlreadyYielded;
 80051c8:	68bb      	ldr	r3, [r7, #8]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000430 	.word	0x20000430
 80051d8:	20000408 	.word	0x20000408
 80051dc:	200003c8 	.word	0x200003c8
 80051e0:	20000410 	.word	0x20000410
 80051e4:	2000030c 	.word	0x2000030c
 80051e8:	20000308 	.word	0x20000308
 80051ec:	2000041c 	.word	0x2000041c
 80051f0:	20000418 	.word	0x20000418
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005202:	4b4e      	ldr	r3, [pc, #312]	; (800533c <xTaskIncrementTick+0x144>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f040 8087 	bne.w	800531a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800520c:	4b4c      	ldr	r3, [pc, #304]	; (8005340 <xTaskIncrementTick+0x148>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005214:	4a4a      	ldr	r2, [pc, #296]	; (8005340 <xTaskIncrementTick+0x148>)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d11f      	bne.n	8005260 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005220:	4b48      	ldr	r3, [pc, #288]	; (8005344 <xTaskIncrementTick+0x14c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <xTaskIncrementTick+0x46>
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	e7fe      	b.n	800523c <xTaskIncrementTick+0x44>
 800523e:	4b41      	ldr	r3, [pc, #260]	; (8005344 <xTaskIncrementTick+0x14c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	4b40      	ldr	r3, [pc, #256]	; (8005348 <xTaskIncrementTick+0x150>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a3e      	ldr	r2, [pc, #248]	; (8005344 <xTaskIncrementTick+0x14c>)
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4a3e      	ldr	r2, [pc, #248]	; (8005348 <xTaskIncrementTick+0x150>)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	4b3e      	ldr	r3, [pc, #248]	; (800534c <xTaskIncrementTick+0x154>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	4a3c      	ldr	r2, [pc, #240]	; (800534c <xTaskIncrementTick+0x154>)
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	f000 f990 	bl	8005580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005260:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <xTaskIncrementTick+0x158>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	429a      	cmp	r2, r3
 8005268:	d348      	bcc.n	80052fc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800526a:	4b36      	ldr	r3, [pc, #216]	; (8005344 <xTaskIncrementTick+0x14c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005274:	4b36      	ldr	r3, [pc, #216]	; (8005350 <xTaskIncrementTick+0x158>)
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	601a      	str	r2, [r3, #0]
					break;
 800527c:	e03e      	b.n	80052fc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527e:	4b31      	ldr	r3, [pc, #196]	; (8005344 <xTaskIncrementTick+0x14c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	d203      	bcs.n	800529e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005296:	4a2e      	ldr	r2, [pc, #184]	; (8005350 <xTaskIncrementTick+0x158>)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800529c:	e02e      	b.n	80052fc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fcb3 	bl	8004c0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	3318      	adds	r3, #24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fcaa 	bl	8004c0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	2201      	movs	r2, #1
 80052c0:	409a      	lsls	r2, r3
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <xTaskIncrementTick+0x15c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	4a22      	ldr	r2, [pc, #136]	; (8005354 <xTaskIncrementTick+0x15c>)
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <xTaskIncrementTick+0x160>)
 80052da:	441a      	add	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f7ff fc36 	bl	8004b54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <xTaskIncrementTick+0x164>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d3b9      	bcc.n	800526a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80052f6:	2301      	movs	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052fa:	e7b6      	b.n	800526a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <xTaskIncrementTick+0x164>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005302:	4915      	ldr	r1, [pc, #84]	; (8005358 <xTaskIncrementTick+0x160>)
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d907      	bls.n	8005324 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e004      	b.n	8005324 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800531a:	4b11      	ldr	r3, [pc, #68]	; (8005360 <xTaskIncrementTick+0x168>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <xTaskIncrementTick+0x168>)
 8005322:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <xTaskIncrementTick+0x16c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800532c:	2301      	movs	r3, #1
 800532e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005330:	697b      	ldr	r3, [r7, #20]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000430 	.word	0x20000430
 8005340:	2000040c 	.word	0x2000040c
 8005344:	200003c0 	.word	0x200003c0
 8005348:	200003c4 	.word	0x200003c4
 800534c:	20000420 	.word	0x20000420
 8005350:	20000428 	.word	0x20000428
 8005354:	20000410 	.word	0x20000410
 8005358:	2000030c 	.word	0x2000030c
 800535c:	20000308 	.word	0x20000308
 8005360:	20000418 	.word	0x20000418
 8005364:	2000041c 	.word	0x2000041c

08005368 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800536e:	4b26      	ldr	r3, [pc, #152]	; (8005408 <vTaskSwitchContext+0xa0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005376:	4b25      	ldr	r3, [pc, #148]	; (800540c <vTaskSwitchContext+0xa4>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800537c:	e03e      	b.n	80053fc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800537e:	4b23      	ldr	r3, [pc, #140]	; (800540c <vTaskSwitchContext+0xa4>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005384:	4b22      	ldr	r3, [pc, #136]	; (8005410 <vTaskSwitchContext+0xa8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	f1c3 031f 	rsb	r3, r3, #31
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	491e      	ldr	r1, [pc, #120]	; (8005414 <vTaskSwitchContext+0xac>)
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	e7fe      	b.n	80053c0 <vTaskSwitchContext+0x58>
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4a11      	ldr	r2, [pc, #68]	; (8005414 <vTaskSwitchContext+0xac>)
 80053ce:	4413      	add	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	605a      	str	r2, [r3, #4]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	3308      	adds	r3, #8
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d104      	bne.n	80053f2 <vTaskSwitchContext+0x8a>
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	4a07      	ldr	r2, [pc, #28]	; (8005418 <vTaskSwitchContext+0xb0>)
 80053fa:	6013      	str	r3, [r2, #0]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	20000430 	.word	0x20000430
 800540c:	2000041c 	.word	0x2000041c
 8005410:	20000410 	.word	0x20000410
 8005414:	2000030c 	.word	0x2000030c
 8005418:	20000308 	.word	0x20000308

0800541c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005424:	f000 f852 	bl	80054cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <prvIdleTask+0x28>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d9f9      	bls.n	8005424 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <prvIdleTask+0x2c>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005440:	e7f0      	b.n	8005424 <prvIdleTask+0x8>
 8005442:	bf00      	nop
 8005444:	2000030c 	.word	0x2000030c
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005452:	2300      	movs	r3, #0
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	e00c      	b.n	8005472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4a12      	ldr	r2, [pc, #72]	; (80054ac <prvInitialiseTaskLists+0x60>)
 8005464:	4413      	add	r3, r2
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fb47 	bl	8004afa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3301      	adds	r3, #1
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b06      	cmp	r3, #6
 8005476:	d9ef      	bls.n	8005458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005478:	480d      	ldr	r0, [pc, #52]	; (80054b0 <prvInitialiseTaskLists+0x64>)
 800547a:	f7ff fb3e 	bl	8004afa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800547e:	480d      	ldr	r0, [pc, #52]	; (80054b4 <prvInitialiseTaskLists+0x68>)
 8005480:	f7ff fb3b 	bl	8004afa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005484:	480c      	ldr	r0, [pc, #48]	; (80054b8 <prvInitialiseTaskLists+0x6c>)
 8005486:	f7ff fb38 	bl	8004afa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800548a:	480c      	ldr	r0, [pc, #48]	; (80054bc <prvInitialiseTaskLists+0x70>)
 800548c:	f7ff fb35 	bl	8004afa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005490:	480b      	ldr	r0, [pc, #44]	; (80054c0 <prvInitialiseTaskLists+0x74>)
 8005492:	f7ff fb32 	bl	8004afa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005496:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <prvInitialiseTaskLists+0x78>)
 8005498:	4a05      	ldr	r2, [pc, #20]	; (80054b0 <prvInitialiseTaskLists+0x64>)
 800549a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <prvInitialiseTaskLists+0x7c>)
 800549e:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <prvInitialiseTaskLists+0x68>)
 80054a0:	601a      	str	r2, [r3, #0]
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	2000030c 	.word	0x2000030c
 80054b0:	20000398 	.word	0x20000398
 80054b4:	200003ac 	.word	0x200003ac
 80054b8:	200003c8 	.word	0x200003c8
 80054bc:	200003dc 	.word	0x200003dc
 80054c0:	200003f4 	.word	0x200003f4
 80054c4:	200003c0 	.word	0x200003c0
 80054c8:	200003c4 	.word	0x200003c4

080054cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054d2:	e019      	b.n	8005508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054d4:	f000 fa02 	bl	80058dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <prvCheckTasksWaitingTermination+0x4c>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fb92 	bl	8004c0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054ea:	4b0c      	ldr	r3, [pc, #48]	; (800551c <prvCheckTasksWaitingTermination+0x50>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	4a0a      	ldr	r2, [pc, #40]	; (800551c <prvCheckTasksWaitingTermination+0x50>)
 80054f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <prvCheckTasksWaitingTermination+0x54>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <prvCheckTasksWaitingTermination+0x54>)
 80054fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054fe:	f000 fa1b 	bl	8005938 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f80e 	bl	8005524 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <prvCheckTasksWaitingTermination+0x54>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e1      	bne.n	80054d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	200003dc 	.word	0x200003dc
 800551c:	20000408 	.word	0x20000408
 8005520:	200003f0 	.word	0x200003f0

08005524 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005532:	2b00      	cmp	r3, #0
 8005534:	d108      	bne.n	8005548 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fb6c 	bl	8005c18 <vPortFree>
				vPortFree( pxTCB );
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fb69 	bl	8005c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005546:	e017      	b.n	8005578 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800554e:	2b01      	cmp	r3, #1
 8005550:	d103      	bne.n	800555a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fb60 	bl	8005c18 <vPortFree>
	}
 8005558:	e00e      	b.n	8005578 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005560:	2b02      	cmp	r3, #2
 8005562:	d009      	beq.n	8005578 <prvDeleteTCB+0x54>
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e7fe      	b.n	8005576 <prvDeleteTCB+0x52>
	}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <prvResetNextTaskUnblockTime+0x38>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <prvResetNextTaskUnblockTime+0x3c>)
 8005592:	f04f 32ff 	mov.w	r2, #4294967295
 8005596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005598:	e008      	b.n	80055ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <prvResetNextTaskUnblockTime+0x38>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <prvResetNextTaskUnblockTime+0x3c>)
 80055aa:	6013      	str	r3, [r2, #0]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	200003c0 	.word	0x200003c0
 80055bc:	20000428 	.word	0x20000428

080055c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055ca:	4b29      	ldr	r3, [pc, #164]	; (8005670 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d0:	4b28      	ldr	r3, [pc, #160]	; (8005674 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fb19 	bl	8004c0e <uxListRemove>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10b      	bne.n	80055fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055e2:	4b24      	ldr	r3, [pc, #144]	; (8005674 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	2201      	movs	r2, #1
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43da      	mvns	r2, r3
 80055f0:	4b21      	ldr	r3, [pc, #132]	; (8005678 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4013      	ands	r3, r2
 80055f6:	4a20      	ldr	r2, [pc, #128]	; (8005678 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d10a      	bne.n	8005618 <prvAddCurrentTaskToDelayedList+0x58>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005608:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <prvAddCurrentTaskToDelayedList+0xb4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3304      	adds	r3, #4
 800560e:	4619      	mov	r1, r3
 8005610:	481a      	ldr	r0, [pc, #104]	; (800567c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005612:	f7ff fa9f 	bl	8004b54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005616:	e026      	b.n	8005666 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4413      	add	r3, r2
 800561e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005620:	4b14      	ldr	r3, [pc, #80]	; (8005674 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	429a      	cmp	r2, r3
 800562e:	d209      	bcs.n	8005644 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f7ff faad 	bl	8004b9c <vListInsert>
}
 8005642:	e010      	b.n	8005666 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005644:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <prvAddCurrentTaskToDelayedList+0xb4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3304      	adds	r3, #4
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f7ff faa3 	bl	8004b9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	429a      	cmp	r2, r3
 800565e:	d202      	bcs.n	8005666 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005660:	4a09      	ldr	r2, [pc, #36]	; (8005688 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6013      	str	r3, [r2, #0]
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	2000040c 	.word	0x2000040c
 8005674:	20000308 	.word	0x20000308
 8005678:	20000410 	.word	0x20000410
 800567c:	200003f4 	.word	0x200003f4
 8005680:	200003c4 	.word	0x200003c4
 8005684:	200003c0 	.word	0x200003c0
 8005688:	20000428 	.word	0x20000428

0800568c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3b04      	subs	r3, #4
 800569c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3b04      	subs	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f023 0201 	bic.w	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3b04      	subs	r3, #4
 80056ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056bc:	4a0c      	ldr	r2, [pc, #48]	; (80056f0 <pxPortInitialiseStack+0x64>)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3b14      	subs	r3, #20
 80056c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3b04      	subs	r3, #4
 80056d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f06f 0202 	mvn.w	r2, #2
 80056da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3b20      	subs	r3, #32
 80056e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056e2:	68fb      	ldr	r3, [r7, #12]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	080056f5 	.word	0x080056f5

080056f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056fe:	4b11      	ldr	r3, [pc, #68]	; (8005744 <prvTaskExitError+0x50>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d009      	beq.n	800571c <prvTaskExitError+0x28>
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	e7fe      	b.n	800571a <prvTaskExitError+0x26>
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800572e:	bf00      	nop
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0fc      	beq.n	8005730 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	2000000c 	.word	0x2000000c
	...

08005750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <pxCurrentTCBConst2>)
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	f380 8809 	msr	PSP, r0
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	4770      	bx	lr
 800576c:	f3af 8000 	nop.w

08005770 <pxCurrentTCBConst2>:
 8005770:	20000308 	.word	0x20000308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop

08005778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005778:	4808      	ldr	r0, [pc, #32]	; (800579c <prvPortStartFirstTask+0x24>)
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f380 8808 	msr	MSP, r0
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8814 	msr	CONTROL, r0
 800578a:	b662      	cpsie	i
 800578c:	b661      	cpsie	f
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	df00      	svc	0
 8005798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800579a:	bf00      	nop
 800579c:	e000ed08 	.word	0xe000ed08

080057a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057a6:	4b44      	ldr	r3, [pc, #272]	; (80058b8 <xPortStartScheduler+0x118>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a44      	ldr	r2, [pc, #272]	; (80058bc <xPortStartScheduler+0x11c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d109      	bne.n	80057c4 <xPortStartScheduler+0x24>
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e7fe      	b.n	80057c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057c4:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <xPortStartScheduler+0x118>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a3d      	ldr	r2, [pc, #244]	; (80058c0 <xPortStartScheduler+0x120>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d109      	bne.n	80057e2 <xPortStartScheduler+0x42>
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e7fe      	b.n	80057e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057e2:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <xPortStartScheduler+0x124>)
 80057e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005804:	b2da      	uxtb	r2, r3
 8005806:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <xPortStartScheduler+0x128>)
 8005808:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800580a:	4b30      	ldr	r3, [pc, #192]	; (80058cc <xPortStartScheduler+0x12c>)
 800580c:	2207      	movs	r2, #7
 800580e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005810:	e009      	b.n	8005826 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005812:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <xPortStartScheduler+0x12c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3b01      	subs	r3, #1
 8005818:	4a2c      	ldr	r2, [pc, #176]	; (80058cc <xPortStartScheduler+0x12c>)
 800581a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b80      	cmp	r3, #128	; 0x80
 8005830:	d0ef      	beq.n	8005812 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005832:	4b26      	ldr	r3, [pc, #152]	; (80058cc <xPortStartScheduler+0x12c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f1c3 0307 	rsb	r3, r3, #7
 800583a:	2b04      	cmp	r3, #4
 800583c:	d009      	beq.n	8005852 <xPortStartScheduler+0xb2>
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	e7fe      	b.n	8005850 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005852:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <xPortStartScheduler+0x12c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	4a1c      	ldr	r2, [pc, #112]	; (80058cc <xPortStartScheduler+0x12c>)
 800585a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800585c:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <xPortStartScheduler+0x12c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005864:	4a19      	ldr	r2, [pc, #100]	; (80058cc <xPortStartScheduler+0x12c>)
 8005866:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005870:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <xPortStartScheduler+0x130>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a16      	ldr	r2, [pc, #88]	; (80058d0 <xPortStartScheduler+0x130>)
 8005876:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800587a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800587c:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <xPortStartScheduler+0x130>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <xPortStartScheduler+0x130>)
 8005882:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005886:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005888:	f000 f8d6 	bl	8005a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800588c:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <xPortStartScheduler+0x134>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005892:	f000 f8f5 	bl	8005a80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <xPortStartScheduler+0x138>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a0f      	ldr	r2, [pc, #60]	; (80058d8 <xPortStartScheduler+0x138>)
 800589c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058a2:	f7ff ff69 	bl	8005778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058a6:	f7ff fd5f 	bl	8005368 <vTaskSwitchContext>
	prvTaskExitError();
 80058aa:	f7ff ff23 	bl	80056f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	e000ed00 	.word	0xe000ed00
 80058bc:	410fc271 	.word	0x410fc271
 80058c0:	410fc270 	.word	0x410fc270
 80058c4:	e000e400 	.word	0xe000e400
 80058c8:	20000434 	.word	0x20000434
 80058cc:	20000438 	.word	0x20000438
 80058d0:	e000ed20 	.word	0xe000ed20
 80058d4:	2000000c 	.word	0x2000000c
 80058d8:	e000ef34 	.word	0xe000ef34

080058dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058f4:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <vPortEnterCritical+0x54>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <vPortEnterCritical+0x54>)
 80058fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <vPortEnterCritical+0x54>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d10e      	bne.n	8005924 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <vPortEnterCritical+0x58>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <vPortEnterCritical+0x48>
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	e7fe      	b.n	8005922 <vPortEnterCritical+0x46>
	}
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	2000000c 	.word	0x2000000c
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800593e:	4b11      	ldr	r3, [pc, #68]	; (8005984 <vPortExitCritical+0x4c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <vPortExitCritical+0x22>
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	e7fe      	b.n	8005958 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800595a:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <vPortExitCritical+0x4c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3b01      	subs	r3, #1
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <vPortExitCritical+0x4c>)
 8005962:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005964:	4b07      	ldr	r3, [pc, #28]	; (8005984 <vPortExitCritical+0x4c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d104      	bne.n	8005976 <vPortExitCritical+0x3e>
 800596c:	2300      	movs	r3, #0
 800596e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	2000000c 	.word	0x2000000c
	...

08005990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005990:	f3ef 8009 	mrs	r0, PSP
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <pxCurrentTCBConst>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f01e 0f10 	tst.w	lr, #16
 80059a0:	bf08      	it	eq
 80059a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059b4:	f380 8811 	msr	BASEPRI, r0
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f7ff fcd2 	bl	8005368 <vTaskSwitchContext>
 80059c4:	f04f 0000 	mov.w	r0, #0
 80059c8:	f380 8811 	msr	BASEPRI, r0
 80059cc:	bc09      	pop	{r0, r3}
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	6808      	ldr	r0, [r1, #0]
 80059d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	f01e 0f10 	tst.w	lr, #16
 80059da:	bf08      	it	eq
 80059dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059e0:	f380 8809 	msr	PSP, r0
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst>:
 80059f0:	20000308 	.word	0x20000308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a10:	f7ff fbf2 	bl	80051f8 <xTaskIncrementTick>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a1a:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <SysTick_Handler+0x3c>)
 8005a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	2300      	movs	r3, #0
 8005a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <vPortSetupTimerInterrupt+0x34>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <vPortSetupTimerInterrupt+0x38>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <vPortSetupTimerInterrupt+0x3c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a0a      	ldr	r2, [pc, #40]	; (8005a78 <vPortSetupTimerInterrupt+0x40>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	099b      	lsrs	r3, r3, #6
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <vPortSetupTimerInterrupt+0x44>)
 8005a56:	3b01      	subs	r3, #1
 8005a58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a5a:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <vPortSetupTimerInterrupt+0x34>)
 8005a5c:	2207      	movs	r2, #7
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	bf00      	nop
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	e000e010 	.word	0xe000e010
 8005a70:	e000e018 	.word	0xe000e018
 8005a74:	20000000 	.word	0x20000000
 8005a78:	10624dd3 	.word	0x10624dd3
 8005a7c:	e000e014 	.word	0xe000e014

08005a80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a90 <vPortEnableVFP+0x10>
 8005a84:	6801      	ldr	r1, [r0, #0]
 8005a86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a8a:	6001      	str	r1, [r0, #0]
 8005a8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a8e:	bf00      	nop
 8005a90:	e000ed88 	.word	0xe000ed88

08005a94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005aa0:	f7ff fb00 	bl	80050a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005aa4:	4b57      	ldr	r3, [pc, #348]	; (8005c04 <pvPortMalloc+0x170>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005aac:	f000 f90c 	bl	8005cc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ab0:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <pvPortMalloc+0x174>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 808c 	bne.w	8005bd6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01c      	beq.n	8005afe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f023 0307 	bic.w	r3, r3, #7
 8005adc:	3308      	adds	r3, #8
 8005ade:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <pvPortMalloc+0x6a>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e7fe      	b.n	8005afc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d068      	beq.n	8005bd6 <pvPortMalloc+0x142>
 8005b04:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <pvPortMalloc+0x178>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d863      	bhi.n	8005bd6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b0e:	4b40      	ldr	r3, [pc, #256]	; (8005c10 <pvPortMalloc+0x17c>)
 8005b10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b12:	4b3f      	ldr	r3, [pc, #252]	; (8005c10 <pvPortMalloc+0x17c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b18:	e004      	b.n	8005b24 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d903      	bls.n	8005b36 <pvPortMalloc+0xa2>
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f1      	bne.n	8005b1a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b36:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <pvPortMalloc+0x170>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d04a      	beq.n	8005bd6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2208      	movs	r2, #8
 8005b46:	4413      	add	r3, r2
 8005b48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1ad2      	subs	r2, r2, r3
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d91e      	bls.n	8005ba0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4413      	add	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d009      	beq.n	8005b88 <pvPortMalloc+0xf4>
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e7fe      	b.n	8005b86 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	1ad2      	subs	r2, r2, r3
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b9a:	69b8      	ldr	r0, [r7, #24]
 8005b9c:	f000 f8f6 	bl	8005d8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <pvPortMalloc+0x178>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <pvPortMalloc+0x178>)
 8005bac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <pvPortMalloc+0x178>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <pvPortMalloc+0x180>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d203      	bcs.n	8005bc2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bba:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <pvPortMalloc+0x178>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <pvPortMalloc+0x180>)
 8005bc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <pvPortMalloc+0x174>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bd6:	f7ff fa73 	bl	80050c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d009      	beq.n	8005bf8 <pvPortMalloc+0x164>
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e7fe      	b.n	8005bf6 <pvPortMalloc+0x162>
	return pvReturn;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3728      	adds	r7, #40	; 0x28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20004044 	.word	0x20004044
 8005c08:	20004050 	.word	0x20004050
 8005c0c:	20004048 	.word	0x20004048
 8005c10:	2000403c 	.word	0x2000403c
 8005c14:	2000404c 	.word	0x2000404c

08005c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d046      	beq.n	8005cb8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <vPortFree+0xa8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <vPortFree+0x42>
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e7fe      	b.n	8005c58 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <vPortFree+0x5e>
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	e7fe      	b.n	8005c74 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <vPortFree+0xa8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d019      	beq.n	8005cb8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d115      	bne.n	8005cb8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortFree+0xa8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c9c:	f7ff fa02 	bl	80050a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <vPortFree+0xac>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4413      	add	r3, r2
 8005caa:	4a06      	ldr	r2, [pc, #24]	; (8005cc4 <vPortFree+0xac>)
 8005cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cae:	6938      	ldr	r0, [r7, #16]
 8005cb0:	f000 f86c 	bl	8005d8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005cb4:	f7ff fa04 	bl	80050c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cb8:	bf00      	nop
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20004050 	.word	0x20004050
 8005cc4:	20004048 	.word	0x20004048

08005cc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cd4:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <prvHeapInit+0xac>)
 8005cd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00c      	beq.n	8005cfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3307      	adds	r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0307 	bic.w	r3, r3, #7
 8005cee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <prvHeapInit+0xac>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d00:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <prvHeapInit+0xb0>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d06:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <prvHeapInit+0xb0>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d14:	2208      	movs	r2, #8
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0307 	bic.w	r3, r3, #7
 8005d22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <prvHeapInit+0xb4>)
 8005d28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d2a:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <prvHeapInit+0xb4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <prvHeapInit+0xb4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <prvHeapInit+0xb4>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <prvHeapInit+0xb8>)
 8005d56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <prvHeapInit+0xbc>)
 8005d5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <prvHeapInit+0xc0>)
 8005d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d66:	601a      	str	r2, [r3, #0]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	2000043c 	.word	0x2000043c
 8005d78:	2000403c 	.word	0x2000403c
 8005d7c:	20004044 	.word	0x20004044
 8005d80:	2000404c 	.word	0x2000404c
 8005d84:	20004048 	.word	0x20004048
 8005d88:	20004050 	.word	0x20004050

08005d8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d94:	4b28      	ldr	r3, [pc, #160]	; (8005e38 <prvInsertBlockIntoFreeList+0xac>)
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e002      	b.n	8005da0 <prvInsertBlockIntoFreeList+0x14>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d8f7      	bhi.n	8005d9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4413      	add	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d108      	bne.n	8005dce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	441a      	add	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d118      	bne.n	8005e14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <prvInsertBlockIntoFreeList+0xb0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d00d      	beq.n	8005e0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	441a      	add	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e008      	b.n	8005e1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <prvInsertBlockIntoFreeList+0xb0>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e003      	b.n	8005e1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d002      	beq.n	8005e2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	2000403c 	.word	0x2000403c
 8005e3c:	20004044 	.word	0x20004044

08005e40 <__errno>:
 8005e40:	4b01      	ldr	r3, [pc, #4]	; (8005e48 <__errno+0x8>)
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000010 	.word	0x20000010

08005e4c <__libc_init_array>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4e0d      	ldr	r6, [pc, #52]	; (8005e84 <__libc_init_array+0x38>)
 8005e50:	4c0d      	ldr	r4, [pc, #52]	; (8005e88 <__libc_init_array+0x3c>)
 8005e52:	1ba4      	subs	r4, r4, r6
 8005e54:	10a4      	asrs	r4, r4, #2
 8005e56:	2500      	movs	r5, #0
 8005e58:	42a5      	cmp	r5, r4
 8005e5a:	d109      	bne.n	8005e70 <__libc_init_array+0x24>
 8005e5c:	4e0b      	ldr	r6, [pc, #44]	; (8005e8c <__libc_init_array+0x40>)
 8005e5e:	4c0c      	ldr	r4, [pc, #48]	; (8005e90 <__libc_init_array+0x44>)
 8005e60:	f000 ff04 	bl	8006c6c <_init>
 8005e64:	1ba4      	subs	r4, r4, r6
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	2500      	movs	r5, #0
 8005e6a:	42a5      	cmp	r5, r4
 8005e6c:	d105      	bne.n	8005e7a <__libc_init_array+0x2e>
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e74:	4798      	blx	r3
 8005e76:	3501      	adds	r5, #1
 8005e78:	e7ee      	b.n	8005e58 <__libc_init_array+0xc>
 8005e7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e7e:	4798      	blx	r3
 8005e80:	3501      	adds	r5, #1
 8005e82:	e7f2      	b.n	8005e6a <__libc_init_array+0x1e>
 8005e84:	08006edc 	.word	0x08006edc
 8005e88:	08006edc 	.word	0x08006edc
 8005e8c:	08006edc 	.word	0x08006edc
 8005e90:	08006ee0 	.word	0x08006ee0

08005e94 <memset>:
 8005e94:	4402      	add	r2, r0
 8005e96:	4603      	mov	r3, r0
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d100      	bne.n	8005e9e <memset+0xa>
 8005e9c:	4770      	bx	lr
 8005e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ea2:	e7f9      	b.n	8005e98 <memset+0x4>

08005ea4 <iprintf>:
 8005ea4:	b40f      	push	{r0, r1, r2, r3}
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <iprintf+0x2c>)
 8005ea8:	b513      	push	{r0, r1, r4, lr}
 8005eaa:	681c      	ldr	r4, [r3, #0]
 8005eac:	b124      	cbz	r4, 8005eb8 <iprintf+0x14>
 8005eae:	69a3      	ldr	r3, [r4, #24]
 8005eb0:	b913      	cbnz	r3, 8005eb8 <iprintf+0x14>
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 f84e 	bl	8005f54 <__sinit>
 8005eb8:	ab05      	add	r3, sp, #20
 8005eba:	9a04      	ldr	r2, [sp, #16]
 8005ebc:	68a1      	ldr	r1, [r4, #8]
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 f955 	bl	8006170 <_vfiprintf_r>
 8005ec6:	b002      	add	sp, #8
 8005ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ecc:	b004      	add	sp, #16
 8005ece:	4770      	bx	lr
 8005ed0:	20000010 	.word	0x20000010

08005ed4 <std>:
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	4604      	mov	r4, r0
 8005eda:	e9c0 3300 	strd	r3, r3, [r0]
 8005ede:	6083      	str	r3, [r0, #8]
 8005ee0:	8181      	strh	r1, [r0, #12]
 8005ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ee4:	81c2      	strh	r2, [r0, #14]
 8005ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eea:	6183      	str	r3, [r0, #24]
 8005eec:	4619      	mov	r1, r3
 8005eee:	2208      	movs	r2, #8
 8005ef0:	305c      	adds	r0, #92	; 0x5c
 8005ef2:	f7ff ffcf 	bl	8005e94 <memset>
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <std+0x38>)
 8005ef8:	6263      	str	r3, [r4, #36]	; 0x24
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <std+0x3c>)
 8005efc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005efe:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <std+0x40>)
 8005f00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <std+0x44>)
 8005f04:	6224      	str	r4, [r4, #32]
 8005f06:	6323      	str	r3, [r4, #48]	; 0x30
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	bf00      	nop
 8005f0c:	080066cd 	.word	0x080066cd
 8005f10:	080066ef 	.word	0x080066ef
 8005f14:	08006727 	.word	0x08006727
 8005f18:	0800674b 	.word	0x0800674b

08005f1c <_cleanup_r>:
 8005f1c:	4901      	ldr	r1, [pc, #4]	; (8005f24 <_cleanup_r+0x8>)
 8005f1e:	f000 b885 	b.w	800602c <_fwalk_reent>
 8005f22:	bf00      	nop
 8005f24:	08006a25 	.word	0x08006a25

08005f28 <__sfmoreglue>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	1e4a      	subs	r2, r1, #1
 8005f2c:	2568      	movs	r5, #104	; 0x68
 8005f2e:	4355      	muls	r5, r2
 8005f30:	460e      	mov	r6, r1
 8005f32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f36:	f000 f897 	bl	8006068 <_malloc_r>
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	b140      	cbz	r0, 8005f50 <__sfmoreglue+0x28>
 8005f3e:	2100      	movs	r1, #0
 8005f40:	e9c0 1600 	strd	r1, r6, [r0]
 8005f44:	300c      	adds	r0, #12
 8005f46:	60a0      	str	r0, [r4, #8]
 8005f48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f4c:	f7ff ffa2 	bl	8005e94 <memset>
 8005f50:	4620      	mov	r0, r4
 8005f52:	bd70      	pop	{r4, r5, r6, pc}

08005f54 <__sinit>:
 8005f54:	6983      	ldr	r3, [r0, #24]
 8005f56:	b510      	push	{r4, lr}
 8005f58:	4604      	mov	r4, r0
 8005f5a:	bb33      	cbnz	r3, 8005faa <__sinit+0x56>
 8005f5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005f60:	6503      	str	r3, [r0, #80]	; 0x50
 8005f62:	4b12      	ldr	r3, [pc, #72]	; (8005fac <__sinit+0x58>)
 8005f64:	4a12      	ldr	r2, [pc, #72]	; (8005fb0 <__sinit+0x5c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6282      	str	r2, [r0, #40]	; 0x28
 8005f6a:	4298      	cmp	r0, r3
 8005f6c:	bf04      	itt	eq
 8005f6e:	2301      	moveq	r3, #1
 8005f70:	6183      	streq	r3, [r0, #24]
 8005f72:	f000 f81f 	bl	8005fb4 <__sfp>
 8005f76:	6060      	str	r0, [r4, #4]
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 f81b 	bl	8005fb4 <__sfp>
 8005f7e:	60a0      	str	r0, [r4, #8]
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 f817 	bl	8005fb4 <__sfp>
 8005f86:	2200      	movs	r2, #0
 8005f88:	60e0      	str	r0, [r4, #12]
 8005f8a:	2104      	movs	r1, #4
 8005f8c:	6860      	ldr	r0, [r4, #4]
 8005f8e:	f7ff ffa1 	bl	8005ed4 <std>
 8005f92:	2201      	movs	r2, #1
 8005f94:	2109      	movs	r1, #9
 8005f96:	68a0      	ldr	r0, [r4, #8]
 8005f98:	f7ff ff9c 	bl	8005ed4 <std>
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	2112      	movs	r1, #18
 8005fa0:	68e0      	ldr	r0, [r4, #12]
 8005fa2:	f7ff ff97 	bl	8005ed4 <std>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61a3      	str	r3, [r4, #24]
 8005faa:	bd10      	pop	{r4, pc}
 8005fac:	08006e3c 	.word	0x08006e3c
 8005fb0:	08005f1d 	.word	0x08005f1d

08005fb4 <__sfp>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <__sfp+0x70>)
 8005fb8:	681e      	ldr	r6, [r3, #0]
 8005fba:	69b3      	ldr	r3, [r6, #24]
 8005fbc:	4607      	mov	r7, r0
 8005fbe:	b913      	cbnz	r3, 8005fc6 <__sfp+0x12>
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f7ff ffc7 	bl	8005f54 <__sinit>
 8005fc6:	3648      	adds	r6, #72	; 0x48
 8005fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	d503      	bpl.n	8005fd8 <__sfp+0x24>
 8005fd0:	6833      	ldr	r3, [r6, #0]
 8005fd2:	b133      	cbz	r3, 8005fe2 <__sfp+0x2e>
 8005fd4:	6836      	ldr	r6, [r6, #0]
 8005fd6:	e7f7      	b.n	8005fc8 <__sfp+0x14>
 8005fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fdc:	b16d      	cbz	r5, 8005ffa <__sfp+0x46>
 8005fde:	3468      	adds	r4, #104	; 0x68
 8005fe0:	e7f4      	b.n	8005fcc <__sfp+0x18>
 8005fe2:	2104      	movs	r1, #4
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f7ff ff9f 	bl	8005f28 <__sfmoreglue>
 8005fea:	6030      	str	r0, [r6, #0]
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d1f1      	bne.n	8005fd4 <__sfp+0x20>
 8005ff0:	230c      	movs	r3, #12
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <__sfp+0x74>)
 8005ffc:	6665      	str	r5, [r4, #100]	; 0x64
 8005ffe:	e9c4 5500 	strd	r5, r5, [r4]
 8006002:	60a5      	str	r5, [r4, #8]
 8006004:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006008:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800600c:	2208      	movs	r2, #8
 800600e:	4629      	mov	r1, r5
 8006010:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006014:	f7ff ff3e 	bl	8005e94 <memset>
 8006018:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800601c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006020:	e7e9      	b.n	8005ff6 <__sfp+0x42>
 8006022:	bf00      	nop
 8006024:	08006e3c 	.word	0x08006e3c
 8006028:	ffff0001 	.word	0xffff0001

0800602c <_fwalk_reent>:
 800602c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006030:	4680      	mov	r8, r0
 8006032:	4689      	mov	r9, r1
 8006034:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006038:	2600      	movs	r6, #0
 800603a:	b914      	cbnz	r4, 8006042 <_fwalk_reent+0x16>
 800603c:	4630      	mov	r0, r6
 800603e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006042:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006046:	3f01      	subs	r7, #1
 8006048:	d501      	bpl.n	800604e <_fwalk_reent+0x22>
 800604a:	6824      	ldr	r4, [r4, #0]
 800604c:	e7f5      	b.n	800603a <_fwalk_reent+0xe>
 800604e:	89ab      	ldrh	r3, [r5, #12]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d907      	bls.n	8006064 <_fwalk_reent+0x38>
 8006054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006058:	3301      	adds	r3, #1
 800605a:	d003      	beq.n	8006064 <_fwalk_reent+0x38>
 800605c:	4629      	mov	r1, r5
 800605e:	4640      	mov	r0, r8
 8006060:	47c8      	blx	r9
 8006062:	4306      	orrs	r6, r0
 8006064:	3568      	adds	r5, #104	; 0x68
 8006066:	e7ee      	b.n	8006046 <_fwalk_reent+0x1a>

08006068 <_malloc_r>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	1ccd      	adds	r5, r1, #3
 800606c:	f025 0503 	bic.w	r5, r5, #3
 8006070:	3508      	adds	r5, #8
 8006072:	2d0c      	cmp	r5, #12
 8006074:	bf38      	it	cc
 8006076:	250c      	movcc	r5, #12
 8006078:	2d00      	cmp	r5, #0
 800607a:	4606      	mov	r6, r0
 800607c:	db01      	blt.n	8006082 <_malloc_r+0x1a>
 800607e:	42a9      	cmp	r1, r5
 8006080:	d903      	bls.n	800608a <_malloc_r+0x22>
 8006082:	230c      	movs	r3, #12
 8006084:	6033      	str	r3, [r6, #0]
 8006086:	2000      	movs	r0, #0
 8006088:	bd70      	pop	{r4, r5, r6, pc}
 800608a:	f000 fd6b 	bl	8006b64 <__malloc_lock>
 800608e:	4a21      	ldr	r2, [pc, #132]	; (8006114 <_malloc_r+0xac>)
 8006090:	6814      	ldr	r4, [r2, #0]
 8006092:	4621      	mov	r1, r4
 8006094:	b991      	cbnz	r1, 80060bc <_malloc_r+0x54>
 8006096:	4c20      	ldr	r4, [pc, #128]	; (8006118 <_malloc_r+0xb0>)
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	b91b      	cbnz	r3, 80060a4 <_malloc_r+0x3c>
 800609c:	4630      	mov	r0, r6
 800609e:	f000 fb05 	bl	80066ac <_sbrk_r>
 80060a2:	6020      	str	r0, [r4, #0]
 80060a4:	4629      	mov	r1, r5
 80060a6:	4630      	mov	r0, r6
 80060a8:	f000 fb00 	bl	80066ac <_sbrk_r>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d124      	bne.n	80060fa <_malloc_r+0x92>
 80060b0:	230c      	movs	r3, #12
 80060b2:	6033      	str	r3, [r6, #0]
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 fd56 	bl	8006b66 <__malloc_unlock>
 80060ba:	e7e4      	b.n	8006086 <_malloc_r+0x1e>
 80060bc:	680b      	ldr	r3, [r1, #0]
 80060be:	1b5b      	subs	r3, r3, r5
 80060c0:	d418      	bmi.n	80060f4 <_malloc_r+0x8c>
 80060c2:	2b0b      	cmp	r3, #11
 80060c4:	d90f      	bls.n	80060e6 <_malloc_r+0x7e>
 80060c6:	600b      	str	r3, [r1, #0]
 80060c8:	50cd      	str	r5, [r1, r3]
 80060ca:	18cc      	adds	r4, r1, r3
 80060cc:	4630      	mov	r0, r6
 80060ce:	f000 fd4a 	bl	8006b66 <__malloc_unlock>
 80060d2:	f104 000b 	add.w	r0, r4, #11
 80060d6:	1d23      	adds	r3, r4, #4
 80060d8:	f020 0007 	bic.w	r0, r0, #7
 80060dc:	1ac3      	subs	r3, r0, r3
 80060de:	d0d3      	beq.n	8006088 <_malloc_r+0x20>
 80060e0:	425a      	negs	r2, r3
 80060e2:	50e2      	str	r2, [r4, r3]
 80060e4:	e7d0      	b.n	8006088 <_malloc_r+0x20>
 80060e6:	428c      	cmp	r4, r1
 80060e8:	684b      	ldr	r3, [r1, #4]
 80060ea:	bf16      	itet	ne
 80060ec:	6063      	strne	r3, [r4, #4]
 80060ee:	6013      	streq	r3, [r2, #0]
 80060f0:	460c      	movne	r4, r1
 80060f2:	e7eb      	b.n	80060cc <_malloc_r+0x64>
 80060f4:	460c      	mov	r4, r1
 80060f6:	6849      	ldr	r1, [r1, #4]
 80060f8:	e7cc      	b.n	8006094 <_malloc_r+0x2c>
 80060fa:	1cc4      	adds	r4, r0, #3
 80060fc:	f024 0403 	bic.w	r4, r4, #3
 8006100:	42a0      	cmp	r0, r4
 8006102:	d005      	beq.n	8006110 <_malloc_r+0xa8>
 8006104:	1a21      	subs	r1, r4, r0
 8006106:	4630      	mov	r0, r6
 8006108:	f000 fad0 	bl	80066ac <_sbrk_r>
 800610c:	3001      	adds	r0, #1
 800610e:	d0cf      	beq.n	80060b0 <_malloc_r+0x48>
 8006110:	6025      	str	r5, [r4, #0]
 8006112:	e7db      	b.n	80060cc <_malloc_r+0x64>
 8006114:	20004054 	.word	0x20004054
 8006118:	20004058 	.word	0x20004058

0800611c <__sfputc_r>:
 800611c:	6893      	ldr	r3, [r2, #8]
 800611e:	3b01      	subs	r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	b410      	push	{r4}
 8006124:	6093      	str	r3, [r2, #8]
 8006126:	da08      	bge.n	800613a <__sfputc_r+0x1e>
 8006128:	6994      	ldr	r4, [r2, #24]
 800612a:	42a3      	cmp	r3, r4
 800612c:	db01      	blt.n	8006132 <__sfputc_r+0x16>
 800612e:	290a      	cmp	r1, #10
 8006130:	d103      	bne.n	800613a <__sfputc_r+0x1e>
 8006132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006136:	f000 bb0d 	b.w	8006754 <__swbuf_r>
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	1c58      	adds	r0, r3, #1
 800613e:	6010      	str	r0, [r2, #0]
 8006140:	7019      	strb	r1, [r3, #0]
 8006142:	4608      	mov	r0, r1
 8006144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006148:	4770      	bx	lr

0800614a <__sfputs_r>:
 800614a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614c:	4606      	mov	r6, r0
 800614e:	460f      	mov	r7, r1
 8006150:	4614      	mov	r4, r2
 8006152:	18d5      	adds	r5, r2, r3
 8006154:	42ac      	cmp	r4, r5
 8006156:	d101      	bne.n	800615c <__sfputs_r+0x12>
 8006158:	2000      	movs	r0, #0
 800615a:	e007      	b.n	800616c <__sfputs_r+0x22>
 800615c:	463a      	mov	r2, r7
 800615e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006162:	4630      	mov	r0, r6
 8006164:	f7ff ffda 	bl	800611c <__sfputc_r>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d1f3      	bne.n	8006154 <__sfputs_r+0xa>
 800616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006170 <_vfiprintf_r>:
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	460c      	mov	r4, r1
 8006176:	b09d      	sub	sp, #116	; 0x74
 8006178:	4617      	mov	r7, r2
 800617a:	461d      	mov	r5, r3
 800617c:	4606      	mov	r6, r0
 800617e:	b118      	cbz	r0, 8006188 <_vfiprintf_r+0x18>
 8006180:	6983      	ldr	r3, [r0, #24]
 8006182:	b90b      	cbnz	r3, 8006188 <_vfiprintf_r+0x18>
 8006184:	f7ff fee6 	bl	8005f54 <__sinit>
 8006188:	4b7c      	ldr	r3, [pc, #496]	; (800637c <_vfiprintf_r+0x20c>)
 800618a:	429c      	cmp	r4, r3
 800618c:	d158      	bne.n	8006240 <_vfiprintf_r+0xd0>
 800618e:	6874      	ldr	r4, [r6, #4]
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	0718      	lsls	r0, r3, #28
 8006194:	d55e      	bpl.n	8006254 <_vfiprintf_r+0xe4>
 8006196:	6923      	ldr	r3, [r4, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05b      	beq.n	8006254 <_vfiprintf_r+0xe4>
 800619c:	2300      	movs	r3, #0
 800619e:	9309      	str	r3, [sp, #36]	; 0x24
 80061a0:	2320      	movs	r3, #32
 80061a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061a6:	2330      	movs	r3, #48	; 0x30
 80061a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061ac:	9503      	str	r5, [sp, #12]
 80061ae:	f04f 0b01 	mov.w	fp, #1
 80061b2:	46b8      	mov	r8, r7
 80061b4:	4645      	mov	r5, r8
 80061b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061ba:	b10b      	cbz	r3, 80061c0 <_vfiprintf_r+0x50>
 80061bc:	2b25      	cmp	r3, #37	; 0x25
 80061be:	d154      	bne.n	800626a <_vfiprintf_r+0xfa>
 80061c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80061c4:	d00b      	beq.n	80061de <_vfiprintf_r+0x6e>
 80061c6:	4653      	mov	r3, sl
 80061c8:	463a      	mov	r2, r7
 80061ca:	4621      	mov	r1, r4
 80061cc:	4630      	mov	r0, r6
 80061ce:	f7ff ffbc 	bl	800614a <__sfputs_r>
 80061d2:	3001      	adds	r0, #1
 80061d4:	f000 80c2 	beq.w	800635c <_vfiprintf_r+0x1ec>
 80061d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061da:	4453      	add	r3, sl
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	f898 3000 	ldrb.w	r3, [r8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80ba 	beq.w	800635c <_vfiprintf_r+0x1ec>
 80061e8:	2300      	movs	r3, #0
 80061ea:	f04f 32ff 	mov.w	r2, #4294967295
 80061ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061f2:	9304      	str	r3, [sp, #16]
 80061f4:	9307      	str	r3, [sp, #28]
 80061f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061fa:	931a      	str	r3, [sp, #104]	; 0x68
 80061fc:	46a8      	mov	r8, r5
 80061fe:	2205      	movs	r2, #5
 8006200:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006204:	485e      	ldr	r0, [pc, #376]	; (8006380 <_vfiprintf_r+0x210>)
 8006206:	f7f9 fff3 	bl	80001f0 <memchr>
 800620a:	9b04      	ldr	r3, [sp, #16]
 800620c:	bb78      	cbnz	r0, 800626e <_vfiprintf_r+0xfe>
 800620e:	06d9      	lsls	r1, r3, #27
 8006210:	bf44      	itt	mi
 8006212:	2220      	movmi	r2, #32
 8006214:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006218:	071a      	lsls	r2, r3, #28
 800621a:	bf44      	itt	mi
 800621c:	222b      	movmi	r2, #43	; 0x2b
 800621e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006222:	782a      	ldrb	r2, [r5, #0]
 8006224:	2a2a      	cmp	r2, #42	; 0x2a
 8006226:	d02a      	beq.n	800627e <_vfiprintf_r+0x10e>
 8006228:	9a07      	ldr	r2, [sp, #28]
 800622a:	46a8      	mov	r8, r5
 800622c:	2000      	movs	r0, #0
 800622e:	250a      	movs	r5, #10
 8006230:	4641      	mov	r1, r8
 8006232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006236:	3b30      	subs	r3, #48	; 0x30
 8006238:	2b09      	cmp	r3, #9
 800623a:	d969      	bls.n	8006310 <_vfiprintf_r+0x1a0>
 800623c:	b360      	cbz	r0, 8006298 <_vfiprintf_r+0x128>
 800623e:	e024      	b.n	800628a <_vfiprintf_r+0x11a>
 8006240:	4b50      	ldr	r3, [pc, #320]	; (8006384 <_vfiprintf_r+0x214>)
 8006242:	429c      	cmp	r4, r3
 8006244:	d101      	bne.n	800624a <_vfiprintf_r+0xda>
 8006246:	68b4      	ldr	r4, [r6, #8]
 8006248:	e7a2      	b.n	8006190 <_vfiprintf_r+0x20>
 800624a:	4b4f      	ldr	r3, [pc, #316]	; (8006388 <_vfiprintf_r+0x218>)
 800624c:	429c      	cmp	r4, r3
 800624e:	bf08      	it	eq
 8006250:	68f4      	ldreq	r4, [r6, #12]
 8006252:	e79d      	b.n	8006190 <_vfiprintf_r+0x20>
 8006254:	4621      	mov	r1, r4
 8006256:	4630      	mov	r0, r6
 8006258:	f000 fae0 	bl	800681c <__swsetup_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	d09d      	beq.n	800619c <_vfiprintf_r+0x2c>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	b01d      	add	sp, #116	; 0x74
 8006266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626a:	46a8      	mov	r8, r5
 800626c:	e7a2      	b.n	80061b4 <_vfiprintf_r+0x44>
 800626e:	4a44      	ldr	r2, [pc, #272]	; (8006380 <_vfiprintf_r+0x210>)
 8006270:	1a80      	subs	r0, r0, r2
 8006272:	fa0b f000 	lsl.w	r0, fp, r0
 8006276:	4318      	orrs	r0, r3
 8006278:	9004      	str	r0, [sp, #16]
 800627a:	4645      	mov	r5, r8
 800627c:	e7be      	b.n	80061fc <_vfiprintf_r+0x8c>
 800627e:	9a03      	ldr	r2, [sp, #12]
 8006280:	1d11      	adds	r1, r2, #4
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	9103      	str	r1, [sp, #12]
 8006286:	2a00      	cmp	r2, #0
 8006288:	db01      	blt.n	800628e <_vfiprintf_r+0x11e>
 800628a:	9207      	str	r2, [sp, #28]
 800628c:	e004      	b.n	8006298 <_vfiprintf_r+0x128>
 800628e:	4252      	negs	r2, r2
 8006290:	f043 0302 	orr.w	r3, r3, #2
 8006294:	9207      	str	r2, [sp, #28]
 8006296:	9304      	str	r3, [sp, #16]
 8006298:	f898 3000 	ldrb.w	r3, [r8]
 800629c:	2b2e      	cmp	r3, #46	; 0x2e
 800629e:	d10e      	bne.n	80062be <_vfiprintf_r+0x14e>
 80062a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80062a4:	2b2a      	cmp	r3, #42	; 0x2a
 80062a6:	d138      	bne.n	800631a <_vfiprintf_r+0x1aa>
 80062a8:	9b03      	ldr	r3, [sp, #12]
 80062aa:	1d1a      	adds	r2, r3, #4
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	9203      	str	r2, [sp, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bfb8      	it	lt
 80062b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80062b8:	f108 0802 	add.w	r8, r8, #2
 80062bc:	9305      	str	r3, [sp, #20]
 80062be:	4d33      	ldr	r5, [pc, #204]	; (800638c <_vfiprintf_r+0x21c>)
 80062c0:	f898 1000 	ldrb.w	r1, [r8]
 80062c4:	2203      	movs	r2, #3
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7f9 ff92 	bl	80001f0 <memchr>
 80062cc:	b140      	cbz	r0, 80062e0 <_vfiprintf_r+0x170>
 80062ce:	2340      	movs	r3, #64	; 0x40
 80062d0:	1b40      	subs	r0, r0, r5
 80062d2:	fa03 f000 	lsl.w	r0, r3, r0
 80062d6:	9b04      	ldr	r3, [sp, #16]
 80062d8:	4303      	orrs	r3, r0
 80062da:	f108 0801 	add.w	r8, r8, #1
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	f898 1000 	ldrb.w	r1, [r8]
 80062e4:	482a      	ldr	r0, [pc, #168]	; (8006390 <_vfiprintf_r+0x220>)
 80062e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062ea:	2206      	movs	r2, #6
 80062ec:	f108 0701 	add.w	r7, r8, #1
 80062f0:	f7f9 ff7e 	bl	80001f0 <memchr>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d037      	beq.n	8006368 <_vfiprintf_r+0x1f8>
 80062f8:	4b26      	ldr	r3, [pc, #152]	; (8006394 <_vfiprintf_r+0x224>)
 80062fa:	bb1b      	cbnz	r3, 8006344 <_vfiprintf_r+0x1d4>
 80062fc:	9b03      	ldr	r3, [sp, #12]
 80062fe:	3307      	adds	r3, #7
 8006300:	f023 0307 	bic.w	r3, r3, #7
 8006304:	3308      	adds	r3, #8
 8006306:	9303      	str	r3, [sp, #12]
 8006308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800630a:	444b      	add	r3, r9
 800630c:	9309      	str	r3, [sp, #36]	; 0x24
 800630e:	e750      	b.n	80061b2 <_vfiprintf_r+0x42>
 8006310:	fb05 3202 	mla	r2, r5, r2, r3
 8006314:	2001      	movs	r0, #1
 8006316:	4688      	mov	r8, r1
 8006318:	e78a      	b.n	8006230 <_vfiprintf_r+0xc0>
 800631a:	2300      	movs	r3, #0
 800631c:	f108 0801 	add.w	r8, r8, #1
 8006320:	9305      	str	r3, [sp, #20]
 8006322:	4619      	mov	r1, r3
 8006324:	250a      	movs	r5, #10
 8006326:	4640      	mov	r0, r8
 8006328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800632c:	3a30      	subs	r2, #48	; 0x30
 800632e:	2a09      	cmp	r2, #9
 8006330:	d903      	bls.n	800633a <_vfiprintf_r+0x1ca>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0c3      	beq.n	80062be <_vfiprintf_r+0x14e>
 8006336:	9105      	str	r1, [sp, #20]
 8006338:	e7c1      	b.n	80062be <_vfiprintf_r+0x14e>
 800633a:	fb05 2101 	mla	r1, r5, r1, r2
 800633e:	2301      	movs	r3, #1
 8006340:	4680      	mov	r8, r0
 8006342:	e7f0      	b.n	8006326 <_vfiprintf_r+0x1b6>
 8006344:	ab03      	add	r3, sp, #12
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4622      	mov	r2, r4
 800634a:	4b13      	ldr	r3, [pc, #76]	; (8006398 <_vfiprintf_r+0x228>)
 800634c:	a904      	add	r1, sp, #16
 800634e:	4630      	mov	r0, r6
 8006350:	f3af 8000 	nop.w
 8006354:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006358:	4681      	mov	r9, r0
 800635a:	d1d5      	bne.n	8006308 <_vfiprintf_r+0x198>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	065b      	lsls	r3, r3, #25
 8006360:	f53f af7e 	bmi.w	8006260 <_vfiprintf_r+0xf0>
 8006364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006366:	e77d      	b.n	8006264 <_vfiprintf_r+0xf4>
 8006368:	ab03      	add	r3, sp, #12
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	4622      	mov	r2, r4
 800636e:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <_vfiprintf_r+0x228>)
 8006370:	a904      	add	r1, sp, #16
 8006372:	4630      	mov	r0, r6
 8006374:	f000 f888 	bl	8006488 <_printf_i>
 8006378:	e7ec      	b.n	8006354 <_vfiprintf_r+0x1e4>
 800637a:	bf00      	nop
 800637c:	08006e60 	.word	0x08006e60
 8006380:	08006ea0 	.word	0x08006ea0
 8006384:	08006e80 	.word	0x08006e80
 8006388:	08006e40 	.word	0x08006e40
 800638c:	08006ea6 	.word	0x08006ea6
 8006390:	08006eaa 	.word	0x08006eaa
 8006394:	00000000 	.word	0x00000000
 8006398:	0800614b 	.word	0x0800614b

0800639c <_printf_common>:
 800639c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a0:	4691      	mov	r9, r2
 80063a2:	461f      	mov	r7, r3
 80063a4:	688a      	ldr	r2, [r1, #8]
 80063a6:	690b      	ldr	r3, [r1, #16]
 80063a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063ac:	4293      	cmp	r3, r2
 80063ae:	bfb8      	it	lt
 80063b0:	4613      	movlt	r3, r2
 80063b2:	f8c9 3000 	str.w	r3, [r9]
 80063b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063ba:	4606      	mov	r6, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	b112      	cbz	r2, 80063c6 <_printf_common+0x2a>
 80063c0:	3301      	adds	r3, #1
 80063c2:	f8c9 3000 	str.w	r3, [r9]
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	0699      	lsls	r1, r3, #26
 80063ca:	bf42      	ittt	mi
 80063cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80063d0:	3302      	addmi	r3, #2
 80063d2:	f8c9 3000 	strmi.w	r3, [r9]
 80063d6:	6825      	ldr	r5, [r4, #0]
 80063d8:	f015 0506 	ands.w	r5, r5, #6
 80063dc:	d107      	bne.n	80063ee <_printf_common+0x52>
 80063de:	f104 0a19 	add.w	sl, r4, #25
 80063e2:	68e3      	ldr	r3, [r4, #12]
 80063e4:	f8d9 2000 	ldr.w	r2, [r9]
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	42ab      	cmp	r3, r5
 80063ec:	dc28      	bgt.n	8006440 <_printf_common+0xa4>
 80063ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063f2:	6822      	ldr	r2, [r4, #0]
 80063f4:	3300      	adds	r3, #0
 80063f6:	bf18      	it	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	0692      	lsls	r2, r2, #26
 80063fc:	d42d      	bmi.n	800645a <_printf_common+0xbe>
 80063fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006402:	4639      	mov	r1, r7
 8006404:	4630      	mov	r0, r6
 8006406:	47c0      	blx	r8
 8006408:	3001      	adds	r0, #1
 800640a:	d020      	beq.n	800644e <_printf_common+0xb2>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	68e5      	ldr	r5, [r4, #12]
 8006410:	f8d9 2000 	ldr.w	r2, [r9]
 8006414:	f003 0306 	and.w	r3, r3, #6
 8006418:	2b04      	cmp	r3, #4
 800641a:	bf08      	it	eq
 800641c:	1aad      	subeq	r5, r5, r2
 800641e:	68a3      	ldr	r3, [r4, #8]
 8006420:	6922      	ldr	r2, [r4, #16]
 8006422:	bf0c      	ite	eq
 8006424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006428:	2500      	movne	r5, #0
 800642a:	4293      	cmp	r3, r2
 800642c:	bfc4      	itt	gt
 800642e:	1a9b      	subgt	r3, r3, r2
 8006430:	18ed      	addgt	r5, r5, r3
 8006432:	f04f 0900 	mov.w	r9, #0
 8006436:	341a      	adds	r4, #26
 8006438:	454d      	cmp	r5, r9
 800643a:	d11a      	bne.n	8006472 <_printf_common+0xd6>
 800643c:	2000      	movs	r0, #0
 800643e:	e008      	b.n	8006452 <_printf_common+0xb6>
 8006440:	2301      	movs	r3, #1
 8006442:	4652      	mov	r2, sl
 8006444:	4639      	mov	r1, r7
 8006446:	4630      	mov	r0, r6
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d103      	bne.n	8006456 <_printf_common+0xba>
 800644e:	f04f 30ff 	mov.w	r0, #4294967295
 8006452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006456:	3501      	adds	r5, #1
 8006458:	e7c3      	b.n	80063e2 <_printf_common+0x46>
 800645a:	18e1      	adds	r1, r4, r3
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	2030      	movs	r0, #48	; 0x30
 8006460:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006464:	4422      	add	r2, r4
 8006466:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800646a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800646e:	3302      	adds	r3, #2
 8006470:	e7c5      	b.n	80063fe <_printf_common+0x62>
 8006472:	2301      	movs	r3, #1
 8006474:	4622      	mov	r2, r4
 8006476:	4639      	mov	r1, r7
 8006478:	4630      	mov	r0, r6
 800647a:	47c0      	blx	r8
 800647c:	3001      	adds	r0, #1
 800647e:	d0e6      	beq.n	800644e <_printf_common+0xb2>
 8006480:	f109 0901 	add.w	r9, r9, #1
 8006484:	e7d8      	b.n	8006438 <_printf_common+0x9c>
	...

08006488 <_printf_i>:
 8006488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800648c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006490:	460c      	mov	r4, r1
 8006492:	7e09      	ldrb	r1, [r1, #24]
 8006494:	b085      	sub	sp, #20
 8006496:	296e      	cmp	r1, #110	; 0x6e
 8006498:	4617      	mov	r7, r2
 800649a:	4606      	mov	r6, r0
 800649c:	4698      	mov	r8, r3
 800649e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064a0:	f000 80b3 	beq.w	800660a <_printf_i+0x182>
 80064a4:	d822      	bhi.n	80064ec <_printf_i+0x64>
 80064a6:	2963      	cmp	r1, #99	; 0x63
 80064a8:	d036      	beq.n	8006518 <_printf_i+0x90>
 80064aa:	d80a      	bhi.n	80064c2 <_printf_i+0x3a>
 80064ac:	2900      	cmp	r1, #0
 80064ae:	f000 80b9 	beq.w	8006624 <_printf_i+0x19c>
 80064b2:	2958      	cmp	r1, #88	; 0x58
 80064b4:	f000 8083 	beq.w	80065be <_printf_i+0x136>
 80064b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064c0:	e032      	b.n	8006528 <_printf_i+0xa0>
 80064c2:	2964      	cmp	r1, #100	; 0x64
 80064c4:	d001      	beq.n	80064ca <_printf_i+0x42>
 80064c6:	2969      	cmp	r1, #105	; 0x69
 80064c8:	d1f6      	bne.n	80064b8 <_printf_i+0x30>
 80064ca:	6820      	ldr	r0, [r4, #0]
 80064cc:	6813      	ldr	r3, [r2, #0]
 80064ce:	0605      	lsls	r5, r0, #24
 80064d0:	f103 0104 	add.w	r1, r3, #4
 80064d4:	d52a      	bpl.n	800652c <_printf_i+0xa4>
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6011      	str	r1, [r2, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	da03      	bge.n	80064e6 <_printf_i+0x5e>
 80064de:	222d      	movs	r2, #45	; 0x2d
 80064e0:	425b      	negs	r3, r3
 80064e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064e6:	486f      	ldr	r0, [pc, #444]	; (80066a4 <_printf_i+0x21c>)
 80064e8:	220a      	movs	r2, #10
 80064ea:	e039      	b.n	8006560 <_printf_i+0xd8>
 80064ec:	2973      	cmp	r1, #115	; 0x73
 80064ee:	f000 809d 	beq.w	800662c <_printf_i+0x1a4>
 80064f2:	d808      	bhi.n	8006506 <_printf_i+0x7e>
 80064f4:	296f      	cmp	r1, #111	; 0x6f
 80064f6:	d020      	beq.n	800653a <_printf_i+0xb2>
 80064f8:	2970      	cmp	r1, #112	; 0x70
 80064fa:	d1dd      	bne.n	80064b8 <_printf_i+0x30>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	f043 0320 	orr.w	r3, r3, #32
 8006502:	6023      	str	r3, [r4, #0]
 8006504:	e003      	b.n	800650e <_printf_i+0x86>
 8006506:	2975      	cmp	r1, #117	; 0x75
 8006508:	d017      	beq.n	800653a <_printf_i+0xb2>
 800650a:	2978      	cmp	r1, #120	; 0x78
 800650c:	d1d4      	bne.n	80064b8 <_printf_i+0x30>
 800650e:	2378      	movs	r3, #120	; 0x78
 8006510:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006514:	4864      	ldr	r0, [pc, #400]	; (80066a8 <_printf_i+0x220>)
 8006516:	e055      	b.n	80065c4 <_printf_i+0x13c>
 8006518:	6813      	ldr	r3, [r2, #0]
 800651a:	1d19      	adds	r1, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6011      	str	r1, [r2, #0]
 8006520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006528:	2301      	movs	r3, #1
 800652a:	e08c      	b.n	8006646 <_printf_i+0x1be>
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6011      	str	r1, [r2, #0]
 8006530:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006534:	bf18      	it	ne
 8006536:	b21b      	sxthne	r3, r3
 8006538:	e7cf      	b.n	80064da <_printf_i+0x52>
 800653a:	6813      	ldr	r3, [r2, #0]
 800653c:	6825      	ldr	r5, [r4, #0]
 800653e:	1d18      	adds	r0, r3, #4
 8006540:	6010      	str	r0, [r2, #0]
 8006542:	0628      	lsls	r0, r5, #24
 8006544:	d501      	bpl.n	800654a <_printf_i+0xc2>
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	e002      	b.n	8006550 <_printf_i+0xc8>
 800654a:	0668      	lsls	r0, r5, #25
 800654c:	d5fb      	bpl.n	8006546 <_printf_i+0xbe>
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	4854      	ldr	r0, [pc, #336]	; (80066a4 <_printf_i+0x21c>)
 8006552:	296f      	cmp	r1, #111	; 0x6f
 8006554:	bf14      	ite	ne
 8006556:	220a      	movne	r2, #10
 8006558:	2208      	moveq	r2, #8
 800655a:	2100      	movs	r1, #0
 800655c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006560:	6865      	ldr	r5, [r4, #4]
 8006562:	60a5      	str	r5, [r4, #8]
 8006564:	2d00      	cmp	r5, #0
 8006566:	f2c0 8095 	blt.w	8006694 <_printf_i+0x20c>
 800656a:	6821      	ldr	r1, [r4, #0]
 800656c:	f021 0104 	bic.w	r1, r1, #4
 8006570:	6021      	str	r1, [r4, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d13d      	bne.n	80065f2 <_printf_i+0x16a>
 8006576:	2d00      	cmp	r5, #0
 8006578:	f040 808e 	bne.w	8006698 <_printf_i+0x210>
 800657c:	4665      	mov	r5, ip
 800657e:	2a08      	cmp	r2, #8
 8006580:	d10b      	bne.n	800659a <_printf_i+0x112>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	07db      	lsls	r3, r3, #31
 8006586:	d508      	bpl.n	800659a <_printf_i+0x112>
 8006588:	6923      	ldr	r3, [r4, #16]
 800658a:	6862      	ldr	r2, [r4, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	bfde      	ittt	le
 8006590:	2330      	movle	r3, #48	; 0x30
 8006592:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006596:	f105 35ff 	addle.w	r5, r5, #4294967295
 800659a:	ebac 0305 	sub.w	r3, ip, r5
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	f8cd 8000 	str.w	r8, [sp]
 80065a4:	463b      	mov	r3, r7
 80065a6:	aa03      	add	r2, sp, #12
 80065a8:	4621      	mov	r1, r4
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7ff fef6 	bl	800639c <_printf_common>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d14d      	bne.n	8006650 <_printf_i+0x1c8>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b005      	add	sp, #20
 80065ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065be:	4839      	ldr	r0, [pc, #228]	; (80066a4 <_printf_i+0x21c>)
 80065c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065c4:	6813      	ldr	r3, [r2, #0]
 80065c6:	6821      	ldr	r1, [r4, #0]
 80065c8:	1d1d      	adds	r5, r3, #4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6015      	str	r5, [r2, #0]
 80065ce:	060a      	lsls	r2, r1, #24
 80065d0:	d50b      	bpl.n	80065ea <_printf_i+0x162>
 80065d2:	07ca      	lsls	r2, r1, #31
 80065d4:	bf44      	itt	mi
 80065d6:	f041 0120 	orrmi.w	r1, r1, #32
 80065da:	6021      	strmi	r1, [r4, #0]
 80065dc:	b91b      	cbnz	r3, 80065e6 <_printf_i+0x15e>
 80065de:	6822      	ldr	r2, [r4, #0]
 80065e0:	f022 0220 	bic.w	r2, r2, #32
 80065e4:	6022      	str	r2, [r4, #0]
 80065e6:	2210      	movs	r2, #16
 80065e8:	e7b7      	b.n	800655a <_printf_i+0xd2>
 80065ea:	064d      	lsls	r5, r1, #25
 80065ec:	bf48      	it	mi
 80065ee:	b29b      	uxthmi	r3, r3
 80065f0:	e7ef      	b.n	80065d2 <_printf_i+0x14a>
 80065f2:	4665      	mov	r5, ip
 80065f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80065f8:	fb02 3311 	mls	r3, r2, r1, r3
 80065fc:	5cc3      	ldrb	r3, [r0, r3]
 80065fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006602:	460b      	mov	r3, r1
 8006604:	2900      	cmp	r1, #0
 8006606:	d1f5      	bne.n	80065f4 <_printf_i+0x16c>
 8006608:	e7b9      	b.n	800657e <_printf_i+0xf6>
 800660a:	6813      	ldr	r3, [r2, #0]
 800660c:	6825      	ldr	r5, [r4, #0]
 800660e:	6961      	ldr	r1, [r4, #20]
 8006610:	1d18      	adds	r0, r3, #4
 8006612:	6010      	str	r0, [r2, #0]
 8006614:	0628      	lsls	r0, r5, #24
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	d501      	bpl.n	800661e <_printf_i+0x196>
 800661a:	6019      	str	r1, [r3, #0]
 800661c:	e002      	b.n	8006624 <_printf_i+0x19c>
 800661e:	066a      	lsls	r2, r5, #25
 8006620:	d5fb      	bpl.n	800661a <_printf_i+0x192>
 8006622:	8019      	strh	r1, [r3, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	6123      	str	r3, [r4, #16]
 8006628:	4665      	mov	r5, ip
 800662a:	e7b9      	b.n	80065a0 <_printf_i+0x118>
 800662c:	6813      	ldr	r3, [r2, #0]
 800662e:	1d19      	adds	r1, r3, #4
 8006630:	6011      	str	r1, [r2, #0]
 8006632:	681d      	ldr	r5, [r3, #0]
 8006634:	6862      	ldr	r2, [r4, #4]
 8006636:	2100      	movs	r1, #0
 8006638:	4628      	mov	r0, r5
 800663a:	f7f9 fdd9 	bl	80001f0 <memchr>
 800663e:	b108      	cbz	r0, 8006644 <_printf_i+0x1bc>
 8006640:	1b40      	subs	r0, r0, r5
 8006642:	6060      	str	r0, [r4, #4]
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	6123      	str	r3, [r4, #16]
 8006648:	2300      	movs	r3, #0
 800664a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800664e:	e7a7      	b.n	80065a0 <_printf_i+0x118>
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	462a      	mov	r2, r5
 8006654:	4639      	mov	r1, r7
 8006656:	4630      	mov	r0, r6
 8006658:	47c0      	blx	r8
 800665a:	3001      	adds	r0, #1
 800665c:	d0aa      	beq.n	80065b4 <_printf_i+0x12c>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	079b      	lsls	r3, r3, #30
 8006662:	d413      	bmi.n	800668c <_printf_i+0x204>
 8006664:	68e0      	ldr	r0, [r4, #12]
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	4298      	cmp	r0, r3
 800666a:	bfb8      	it	lt
 800666c:	4618      	movlt	r0, r3
 800666e:	e7a3      	b.n	80065b8 <_printf_i+0x130>
 8006670:	2301      	movs	r3, #1
 8006672:	464a      	mov	r2, r9
 8006674:	4639      	mov	r1, r7
 8006676:	4630      	mov	r0, r6
 8006678:	47c0      	blx	r8
 800667a:	3001      	adds	r0, #1
 800667c:	d09a      	beq.n	80065b4 <_printf_i+0x12c>
 800667e:	3501      	adds	r5, #1
 8006680:	68e3      	ldr	r3, [r4, #12]
 8006682:	9a03      	ldr	r2, [sp, #12]
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	42ab      	cmp	r3, r5
 8006688:	dcf2      	bgt.n	8006670 <_printf_i+0x1e8>
 800668a:	e7eb      	b.n	8006664 <_printf_i+0x1dc>
 800668c:	2500      	movs	r5, #0
 800668e:	f104 0919 	add.w	r9, r4, #25
 8006692:	e7f5      	b.n	8006680 <_printf_i+0x1f8>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1ac      	bne.n	80065f2 <_printf_i+0x16a>
 8006698:	7803      	ldrb	r3, [r0, #0]
 800669a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800669e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a2:	e76c      	b.n	800657e <_printf_i+0xf6>
 80066a4:	08006eb1 	.word	0x08006eb1
 80066a8:	08006ec2 	.word	0x08006ec2

080066ac <_sbrk_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4c06      	ldr	r4, [pc, #24]	; (80066c8 <_sbrk_r+0x1c>)
 80066b0:	2300      	movs	r3, #0
 80066b2:	4605      	mov	r5, r0
 80066b4:	4608      	mov	r0, r1
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	f7fa fed0 	bl	800145c <_sbrk>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_sbrk_r+0x1a>
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_sbrk_r+0x1a>
 80066c4:	602b      	str	r3, [r5, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	20004200 	.word	0x20004200

080066cc <__sread>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	460c      	mov	r4, r1
 80066d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d4:	f000 fa96 	bl	8006c04 <_read_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	bfab      	itete	ge
 80066dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066de:	89a3      	ldrhlt	r3, [r4, #12]
 80066e0:	181b      	addge	r3, r3, r0
 80066e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066e6:	bfac      	ite	ge
 80066e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ea:	81a3      	strhlt	r3, [r4, #12]
 80066ec:	bd10      	pop	{r4, pc}

080066ee <__swrite>:
 80066ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f2:	461f      	mov	r7, r3
 80066f4:	898b      	ldrh	r3, [r1, #12]
 80066f6:	05db      	lsls	r3, r3, #23
 80066f8:	4605      	mov	r5, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	4616      	mov	r6, r2
 80066fe:	d505      	bpl.n	800670c <__swrite+0x1e>
 8006700:	2302      	movs	r3, #2
 8006702:	2200      	movs	r2, #0
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	f000 f9b6 	bl	8006a78 <_lseek_r>
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006712:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	4632      	mov	r2, r6
 800671a:	463b      	mov	r3, r7
 800671c:	4628      	mov	r0, r5
 800671e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006722:	f000 b869 	b.w	80067f8 <_write_r>

08006726 <__sseek>:
 8006726:	b510      	push	{r4, lr}
 8006728:	460c      	mov	r4, r1
 800672a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672e:	f000 f9a3 	bl	8006a78 <_lseek_r>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	bf15      	itete	ne
 8006738:	6560      	strne	r0, [r4, #84]	; 0x54
 800673a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800673e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006742:	81a3      	strheq	r3, [r4, #12]
 8006744:	bf18      	it	ne
 8006746:	81a3      	strhne	r3, [r4, #12]
 8006748:	bd10      	pop	{r4, pc}

0800674a <__sclose>:
 800674a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674e:	f000 b8d3 	b.w	80068f8 <_close_r>
	...

08006754 <__swbuf_r>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	460e      	mov	r6, r1
 8006758:	4614      	mov	r4, r2
 800675a:	4605      	mov	r5, r0
 800675c:	b118      	cbz	r0, 8006766 <__swbuf_r+0x12>
 800675e:	6983      	ldr	r3, [r0, #24]
 8006760:	b90b      	cbnz	r3, 8006766 <__swbuf_r+0x12>
 8006762:	f7ff fbf7 	bl	8005f54 <__sinit>
 8006766:	4b21      	ldr	r3, [pc, #132]	; (80067ec <__swbuf_r+0x98>)
 8006768:	429c      	cmp	r4, r3
 800676a:	d12a      	bne.n	80067c2 <__swbuf_r+0x6e>
 800676c:	686c      	ldr	r4, [r5, #4]
 800676e:	69a3      	ldr	r3, [r4, #24]
 8006770:	60a3      	str	r3, [r4, #8]
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	071a      	lsls	r2, r3, #28
 8006776:	d52e      	bpl.n	80067d6 <__swbuf_r+0x82>
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	b363      	cbz	r3, 80067d6 <__swbuf_r+0x82>
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	6820      	ldr	r0, [r4, #0]
 8006780:	1ac0      	subs	r0, r0, r3
 8006782:	6963      	ldr	r3, [r4, #20]
 8006784:	b2f6      	uxtb	r6, r6
 8006786:	4283      	cmp	r3, r0
 8006788:	4637      	mov	r7, r6
 800678a:	dc04      	bgt.n	8006796 <__swbuf_r+0x42>
 800678c:	4621      	mov	r1, r4
 800678e:	4628      	mov	r0, r5
 8006790:	f000 f948 	bl	8006a24 <_fflush_r>
 8006794:	bb28      	cbnz	r0, 80067e2 <__swbuf_r+0x8e>
 8006796:	68a3      	ldr	r3, [r4, #8]
 8006798:	3b01      	subs	r3, #1
 800679a:	60a3      	str	r3, [r4, #8]
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	6022      	str	r2, [r4, #0]
 80067a2:	701e      	strb	r6, [r3, #0]
 80067a4:	6963      	ldr	r3, [r4, #20]
 80067a6:	3001      	adds	r0, #1
 80067a8:	4283      	cmp	r3, r0
 80067aa:	d004      	beq.n	80067b6 <__swbuf_r+0x62>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	07db      	lsls	r3, r3, #31
 80067b0:	d519      	bpl.n	80067e6 <__swbuf_r+0x92>
 80067b2:	2e0a      	cmp	r6, #10
 80067b4:	d117      	bne.n	80067e6 <__swbuf_r+0x92>
 80067b6:	4621      	mov	r1, r4
 80067b8:	4628      	mov	r0, r5
 80067ba:	f000 f933 	bl	8006a24 <_fflush_r>
 80067be:	b190      	cbz	r0, 80067e6 <__swbuf_r+0x92>
 80067c0:	e00f      	b.n	80067e2 <__swbuf_r+0x8e>
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <__swbuf_r+0x9c>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	d101      	bne.n	80067cc <__swbuf_r+0x78>
 80067c8:	68ac      	ldr	r4, [r5, #8]
 80067ca:	e7d0      	b.n	800676e <__swbuf_r+0x1a>
 80067cc:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <__swbuf_r+0xa0>)
 80067ce:	429c      	cmp	r4, r3
 80067d0:	bf08      	it	eq
 80067d2:	68ec      	ldreq	r4, [r5, #12]
 80067d4:	e7cb      	b.n	800676e <__swbuf_r+0x1a>
 80067d6:	4621      	mov	r1, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	f000 f81f 	bl	800681c <__swsetup_r>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d0cc      	beq.n	800677c <__swbuf_r+0x28>
 80067e2:	f04f 37ff 	mov.w	r7, #4294967295
 80067e6:	4638      	mov	r0, r7
 80067e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ea:	bf00      	nop
 80067ec:	08006e60 	.word	0x08006e60
 80067f0:	08006e80 	.word	0x08006e80
 80067f4:	08006e40 	.word	0x08006e40

080067f8 <_write_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4c07      	ldr	r4, [pc, #28]	; (8006818 <_write_r+0x20>)
 80067fc:	4605      	mov	r5, r0
 80067fe:	4608      	mov	r0, r1
 8006800:	4611      	mov	r1, r2
 8006802:	2200      	movs	r2, #0
 8006804:	6022      	str	r2, [r4, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	f7fa fdd7 	bl	80013ba <_write>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_write_r+0x1e>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	b103      	cbz	r3, 8006816 <_write_r+0x1e>
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	20004200 	.word	0x20004200

0800681c <__swsetup_r>:
 800681c:	4b32      	ldr	r3, [pc, #200]	; (80068e8 <__swsetup_r+0xcc>)
 800681e:	b570      	push	{r4, r5, r6, lr}
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	4606      	mov	r6, r0
 8006824:	460c      	mov	r4, r1
 8006826:	b125      	cbz	r5, 8006832 <__swsetup_r+0x16>
 8006828:	69ab      	ldr	r3, [r5, #24]
 800682a:	b913      	cbnz	r3, 8006832 <__swsetup_r+0x16>
 800682c:	4628      	mov	r0, r5
 800682e:	f7ff fb91 	bl	8005f54 <__sinit>
 8006832:	4b2e      	ldr	r3, [pc, #184]	; (80068ec <__swsetup_r+0xd0>)
 8006834:	429c      	cmp	r4, r3
 8006836:	d10f      	bne.n	8006858 <__swsetup_r+0x3c>
 8006838:	686c      	ldr	r4, [r5, #4]
 800683a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683e:	b29a      	uxth	r2, r3
 8006840:	0715      	lsls	r5, r2, #28
 8006842:	d42c      	bmi.n	800689e <__swsetup_r+0x82>
 8006844:	06d0      	lsls	r0, r2, #27
 8006846:	d411      	bmi.n	800686c <__swsetup_r+0x50>
 8006848:	2209      	movs	r2, #9
 800684a:	6032      	str	r2, [r6, #0]
 800684c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	f04f 30ff 	mov.w	r0, #4294967295
 8006856:	e03e      	b.n	80068d6 <__swsetup_r+0xba>
 8006858:	4b25      	ldr	r3, [pc, #148]	; (80068f0 <__swsetup_r+0xd4>)
 800685a:	429c      	cmp	r4, r3
 800685c:	d101      	bne.n	8006862 <__swsetup_r+0x46>
 800685e:	68ac      	ldr	r4, [r5, #8]
 8006860:	e7eb      	b.n	800683a <__swsetup_r+0x1e>
 8006862:	4b24      	ldr	r3, [pc, #144]	; (80068f4 <__swsetup_r+0xd8>)
 8006864:	429c      	cmp	r4, r3
 8006866:	bf08      	it	eq
 8006868:	68ec      	ldreq	r4, [r5, #12]
 800686a:	e7e6      	b.n	800683a <__swsetup_r+0x1e>
 800686c:	0751      	lsls	r1, r2, #29
 800686e:	d512      	bpl.n	8006896 <__swsetup_r+0x7a>
 8006870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006872:	b141      	cbz	r1, 8006886 <__swsetup_r+0x6a>
 8006874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006878:	4299      	cmp	r1, r3
 800687a:	d002      	beq.n	8006882 <__swsetup_r+0x66>
 800687c:	4630      	mov	r0, r6
 800687e:	f000 f973 	bl	8006b68 <_free_r>
 8006882:	2300      	movs	r3, #0
 8006884:	6363      	str	r3, [r4, #52]	; 0x34
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	2300      	movs	r3, #0
 8006890:	6063      	str	r3, [r4, #4]
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	f043 0308 	orr.w	r3, r3, #8
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	b94b      	cbnz	r3, 80068b6 <__swsetup_r+0x9a>
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ac:	d003      	beq.n	80068b6 <__swsetup_r+0x9a>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4630      	mov	r0, r6
 80068b2:	f000 f917 	bl	8006ae4 <__smakebuf_r>
 80068b6:	89a2      	ldrh	r2, [r4, #12]
 80068b8:	f012 0301 	ands.w	r3, r2, #1
 80068bc:	d00c      	beq.n	80068d8 <__swsetup_r+0xbc>
 80068be:	2300      	movs	r3, #0
 80068c0:	60a3      	str	r3, [r4, #8]
 80068c2:	6963      	ldr	r3, [r4, #20]
 80068c4:	425b      	negs	r3, r3
 80068c6:	61a3      	str	r3, [r4, #24]
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	b953      	cbnz	r3, 80068e2 <__swsetup_r+0xc6>
 80068cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80068d4:	d1ba      	bne.n	800684c <__swsetup_r+0x30>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	0792      	lsls	r2, r2, #30
 80068da:	bf58      	it	pl
 80068dc:	6963      	ldrpl	r3, [r4, #20]
 80068de:	60a3      	str	r3, [r4, #8]
 80068e0:	e7f2      	b.n	80068c8 <__swsetup_r+0xac>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e7f7      	b.n	80068d6 <__swsetup_r+0xba>
 80068e6:	bf00      	nop
 80068e8:	20000010 	.word	0x20000010
 80068ec:	08006e60 	.word	0x08006e60
 80068f0:	08006e80 	.word	0x08006e80
 80068f4:	08006e40 	.word	0x08006e40

080068f8 <_close_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4c06      	ldr	r4, [pc, #24]	; (8006914 <_close_r+0x1c>)
 80068fc:	2300      	movs	r3, #0
 80068fe:	4605      	mov	r5, r0
 8006900:	4608      	mov	r0, r1
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	f7fa fd75 	bl	80013f2 <_close>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d102      	bne.n	8006912 <_close_r+0x1a>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	b103      	cbz	r3, 8006912 <_close_r+0x1a>
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	20004200 	.word	0x20004200

08006918 <__sflush_r>:
 8006918:	898a      	ldrh	r2, [r1, #12]
 800691a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691e:	4605      	mov	r5, r0
 8006920:	0710      	lsls	r0, r2, #28
 8006922:	460c      	mov	r4, r1
 8006924:	d458      	bmi.n	80069d8 <__sflush_r+0xc0>
 8006926:	684b      	ldr	r3, [r1, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	dc05      	bgt.n	8006938 <__sflush_r+0x20>
 800692c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	dc02      	bgt.n	8006938 <__sflush_r+0x20>
 8006932:	2000      	movs	r0, #0
 8006934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800693a:	2e00      	cmp	r6, #0
 800693c:	d0f9      	beq.n	8006932 <__sflush_r+0x1a>
 800693e:	2300      	movs	r3, #0
 8006940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006944:	682f      	ldr	r7, [r5, #0]
 8006946:	6a21      	ldr	r1, [r4, #32]
 8006948:	602b      	str	r3, [r5, #0]
 800694a:	d032      	beq.n	80069b2 <__sflush_r+0x9a>
 800694c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	075a      	lsls	r2, r3, #29
 8006952:	d505      	bpl.n	8006960 <__sflush_r+0x48>
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	1ac0      	subs	r0, r0, r3
 8006958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800695a:	b10b      	cbz	r3, 8006960 <__sflush_r+0x48>
 800695c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800695e:	1ac0      	subs	r0, r0, r3
 8006960:	2300      	movs	r3, #0
 8006962:	4602      	mov	r2, r0
 8006964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006966:	6a21      	ldr	r1, [r4, #32]
 8006968:	4628      	mov	r0, r5
 800696a:	47b0      	blx	r6
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	d106      	bne.n	8006980 <__sflush_r+0x68>
 8006972:	6829      	ldr	r1, [r5, #0]
 8006974:	291d      	cmp	r1, #29
 8006976:	d848      	bhi.n	8006a0a <__sflush_r+0xf2>
 8006978:	4a29      	ldr	r2, [pc, #164]	; (8006a20 <__sflush_r+0x108>)
 800697a:	40ca      	lsrs	r2, r1
 800697c:	07d6      	lsls	r6, r2, #31
 800697e:	d544      	bpl.n	8006a0a <__sflush_r+0xf2>
 8006980:	2200      	movs	r2, #0
 8006982:	6062      	str	r2, [r4, #4]
 8006984:	04d9      	lsls	r1, r3, #19
 8006986:	6922      	ldr	r2, [r4, #16]
 8006988:	6022      	str	r2, [r4, #0]
 800698a:	d504      	bpl.n	8006996 <__sflush_r+0x7e>
 800698c:	1c42      	adds	r2, r0, #1
 800698e:	d101      	bne.n	8006994 <__sflush_r+0x7c>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b903      	cbnz	r3, 8006996 <__sflush_r+0x7e>
 8006994:	6560      	str	r0, [r4, #84]	; 0x54
 8006996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006998:	602f      	str	r7, [r5, #0]
 800699a:	2900      	cmp	r1, #0
 800699c:	d0c9      	beq.n	8006932 <__sflush_r+0x1a>
 800699e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a2:	4299      	cmp	r1, r3
 80069a4:	d002      	beq.n	80069ac <__sflush_r+0x94>
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 f8de 	bl	8006b68 <_free_r>
 80069ac:	2000      	movs	r0, #0
 80069ae:	6360      	str	r0, [r4, #52]	; 0x34
 80069b0:	e7c0      	b.n	8006934 <__sflush_r+0x1c>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b0      	blx	r6
 80069b8:	1c41      	adds	r1, r0, #1
 80069ba:	d1c8      	bne.n	800694e <__sflush_r+0x36>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0c5      	beq.n	800694e <__sflush_r+0x36>
 80069c2:	2b1d      	cmp	r3, #29
 80069c4:	d001      	beq.n	80069ca <__sflush_r+0xb2>
 80069c6:	2b16      	cmp	r3, #22
 80069c8:	d101      	bne.n	80069ce <__sflush_r+0xb6>
 80069ca:	602f      	str	r7, [r5, #0]
 80069cc:	e7b1      	b.n	8006932 <__sflush_r+0x1a>
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	e7ad      	b.n	8006934 <__sflush_r+0x1c>
 80069d8:	690f      	ldr	r7, [r1, #16]
 80069da:	2f00      	cmp	r7, #0
 80069dc:	d0a9      	beq.n	8006932 <__sflush_r+0x1a>
 80069de:	0793      	lsls	r3, r2, #30
 80069e0:	680e      	ldr	r6, [r1, #0]
 80069e2:	bf08      	it	eq
 80069e4:	694b      	ldreq	r3, [r1, #20]
 80069e6:	600f      	str	r7, [r1, #0]
 80069e8:	bf18      	it	ne
 80069ea:	2300      	movne	r3, #0
 80069ec:	eba6 0807 	sub.w	r8, r6, r7
 80069f0:	608b      	str	r3, [r1, #8]
 80069f2:	f1b8 0f00 	cmp.w	r8, #0
 80069f6:	dd9c      	ble.n	8006932 <__sflush_r+0x1a>
 80069f8:	4643      	mov	r3, r8
 80069fa:	463a      	mov	r2, r7
 80069fc:	6a21      	ldr	r1, [r4, #32]
 80069fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b0      	blx	r6
 8006a04:	2800      	cmp	r0, #0
 8006a06:	dc06      	bgt.n	8006a16 <__sflush_r+0xfe>
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a0e:	81a3      	strh	r3, [r4, #12]
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	e78e      	b.n	8006934 <__sflush_r+0x1c>
 8006a16:	4407      	add	r7, r0
 8006a18:	eba8 0800 	sub.w	r8, r8, r0
 8006a1c:	e7e9      	b.n	80069f2 <__sflush_r+0xda>
 8006a1e:	bf00      	nop
 8006a20:	20400001 	.word	0x20400001

08006a24 <_fflush_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	690b      	ldr	r3, [r1, #16]
 8006a28:	4605      	mov	r5, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	b1db      	cbz	r3, 8006a66 <_fflush_r+0x42>
 8006a2e:	b118      	cbz	r0, 8006a38 <_fflush_r+0x14>
 8006a30:	6983      	ldr	r3, [r0, #24]
 8006a32:	b90b      	cbnz	r3, 8006a38 <_fflush_r+0x14>
 8006a34:	f7ff fa8e 	bl	8005f54 <__sinit>
 8006a38:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <_fflush_r+0x48>)
 8006a3a:	429c      	cmp	r4, r3
 8006a3c:	d109      	bne.n	8006a52 <_fflush_r+0x2e>
 8006a3e:	686c      	ldr	r4, [r5, #4]
 8006a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a44:	b17b      	cbz	r3, 8006a66 <_fflush_r+0x42>
 8006a46:	4621      	mov	r1, r4
 8006a48:	4628      	mov	r0, r5
 8006a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a4e:	f7ff bf63 	b.w	8006918 <__sflush_r>
 8006a52:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <_fflush_r+0x4c>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d101      	bne.n	8006a5c <_fflush_r+0x38>
 8006a58:	68ac      	ldr	r4, [r5, #8]
 8006a5a:	e7f1      	b.n	8006a40 <_fflush_r+0x1c>
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <_fflush_r+0x50>)
 8006a5e:	429c      	cmp	r4, r3
 8006a60:	bf08      	it	eq
 8006a62:	68ec      	ldreq	r4, [r5, #12]
 8006a64:	e7ec      	b.n	8006a40 <_fflush_r+0x1c>
 8006a66:	2000      	movs	r0, #0
 8006a68:	bd38      	pop	{r3, r4, r5, pc}
 8006a6a:	bf00      	nop
 8006a6c:	08006e60 	.word	0x08006e60
 8006a70:	08006e80 	.word	0x08006e80
 8006a74:	08006e40 	.word	0x08006e40

08006a78 <_lseek_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4c07      	ldr	r4, [pc, #28]	; (8006a98 <_lseek_r+0x20>)
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fa fcda 	bl	8001440 <_lseek>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_lseek_r+0x1e>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_lseek_r+0x1e>
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	20004200 	.word	0x20004200

08006a9c <__swhatbuf_r>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	460e      	mov	r6, r1
 8006aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	b096      	sub	sp, #88	; 0x58
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	461d      	mov	r5, r3
 8006aac:	da07      	bge.n	8006abe <__swhatbuf_r+0x22>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	89b3      	ldrh	r3, [r6, #12]
 8006ab4:	061a      	lsls	r2, r3, #24
 8006ab6:	d410      	bmi.n	8006ada <__swhatbuf_r+0x3e>
 8006ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006abc:	e00e      	b.n	8006adc <__swhatbuf_r+0x40>
 8006abe:	466a      	mov	r2, sp
 8006ac0:	f000 f8b2 	bl	8006c28 <_fstat_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	dbf2      	blt.n	8006aae <__swhatbuf_r+0x12>
 8006ac8:	9a01      	ldr	r2, [sp, #4]
 8006aca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ace:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ad2:	425a      	negs	r2, r3
 8006ad4:	415a      	adcs	r2, r3
 8006ad6:	602a      	str	r2, [r5, #0]
 8006ad8:	e7ee      	b.n	8006ab8 <__swhatbuf_r+0x1c>
 8006ada:	2340      	movs	r3, #64	; 0x40
 8006adc:	2000      	movs	r0, #0
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	b016      	add	sp, #88	; 0x58
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}

08006ae4 <__smakebuf_r>:
 8006ae4:	898b      	ldrh	r3, [r1, #12]
 8006ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ae8:	079d      	lsls	r5, r3, #30
 8006aea:	4606      	mov	r6, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	d507      	bpl.n	8006b00 <__smakebuf_r+0x1c>
 8006af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	2301      	movs	r3, #1
 8006afa:	6163      	str	r3, [r4, #20]
 8006afc:	b002      	add	sp, #8
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	ab01      	add	r3, sp, #4
 8006b02:	466a      	mov	r2, sp
 8006b04:	f7ff ffca 	bl	8006a9c <__swhatbuf_r>
 8006b08:	9900      	ldr	r1, [sp, #0]
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f7ff faab 	bl	8006068 <_malloc_r>
 8006b12:	b948      	cbnz	r0, 8006b28 <__smakebuf_r+0x44>
 8006b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b18:	059a      	lsls	r2, r3, #22
 8006b1a:	d4ef      	bmi.n	8006afc <__smakebuf_r+0x18>
 8006b1c:	f023 0303 	bic.w	r3, r3, #3
 8006b20:	f043 0302 	orr.w	r3, r3, #2
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	e7e3      	b.n	8006af0 <__smakebuf_r+0xc>
 8006b28:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <__smakebuf_r+0x7c>)
 8006b2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	6020      	str	r0, [r4, #0]
 8006b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	9b00      	ldr	r3, [sp, #0]
 8006b38:	6163      	str	r3, [r4, #20]
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	6120      	str	r0, [r4, #16]
 8006b3e:	b15b      	cbz	r3, 8006b58 <__smakebuf_r+0x74>
 8006b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b44:	4630      	mov	r0, r6
 8006b46:	f000 f881 	bl	8006c4c <_isatty_r>
 8006b4a:	b128      	cbz	r0, 8006b58 <__smakebuf_r+0x74>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	81a3      	strh	r3, [r4, #12]
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	431d      	orrs	r5, r3
 8006b5c:	81a5      	strh	r5, [r4, #12]
 8006b5e:	e7cd      	b.n	8006afc <__smakebuf_r+0x18>
 8006b60:	08005f1d 	.word	0x08005f1d

08006b64 <__malloc_lock>:
 8006b64:	4770      	bx	lr

08006b66 <__malloc_unlock>:
 8006b66:	4770      	bx	lr

08006b68 <_free_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	d045      	beq.n	8006bfc <_free_r+0x94>
 8006b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b74:	1f0c      	subs	r4, r1, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bfb8      	it	lt
 8006b7a:	18e4      	addlt	r4, r4, r3
 8006b7c:	f7ff fff2 	bl	8006b64 <__malloc_lock>
 8006b80:	4a1f      	ldr	r2, [pc, #124]	; (8006c00 <_free_r+0x98>)
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	4610      	mov	r0, r2
 8006b86:	b933      	cbnz	r3, 8006b96 <_free_r+0x2e>
 8006b88:	6063      	str	r3, [r4, #4]
 8006b8a:	6014      	str	r4, [r2, #0]
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b92:	f7ff bfe8 	b.w	8006b66 <__malloc_unlock>
 8006b96:	42a3      	cmp	r3, r4
 8006b98:	d90c      	bls.n	8006bb4 <_free_r+0x4c>
 8006b9a:	6821      	ldr	r1, [r4, #0]
 8006b9c:	1862      	adds	r2, r4, r1
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bf04      	itt	eq
 8006ba2:	681a      	ldreq	r2, [r3, #0]
 8006ba4:	685b      	ldreq	r3, [r3, #4]
 8006ba6:	6063      	str	r3, [r4, #4]
 8006ba8:	bf04      	itt	eq
 8006baa:	1852      	addeq	r2, r2, r1
 8006bac:	6022      	streq	r2, [r4, #0]
 8006bae:	6004      	str	r4, [r0, #0]
 8006bb0:	e7ec      	b.n	8006b8c <_free_r+0x24>
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	b10a      	cbz	r2, 8006bbc <_free_r+0x54>
 8006bb8:	42a2      	cmp	r2, r4
 8006bba:	d9fa      	bls.n	8006bb2 <_free_r+0x4a>
 8006bbc:	6819      	ldr	r1, [r3, #0]
 8006bbe:	1858      	adds	r0, r3, r1
 8006bc0:	42a0      	cmp	r0, r4
 8006bc2:	d10b      	bne.n	8006bdc <_free_r+0x74>
 8006bc4:	6820      	ldr	r0, [r4, #0]
 8006bc6:	4401      	add	r1, r0
 8006bc8:	1858      	adds	r0, r3, r1
 8006bca:	4282      	cmp	r2, r0
 8006bcc:	6019      	str	r1, [r3, #0]
 8006bce:	d1dd      	bne.n	8006b8c <_free_r+0x24>
 8006bd0:	6810      	ldr	r0, [r2, #0]
 8006bd2:	6852      	ldr	r2, [r2, #4]
 8006bd4:	605a      	str	r2, [r3, #4]
 8006bd6:	4401      	add	r1, r0
 8006bd8:	6019      	str	r1, [r3, #0]
 8006bda:	e7d7      	b.n	8006b8c <_free_r+0x24>
 8006bdc:	d902      	bls.n	8006be4 <_free_r+0x7c>
 8006bde:	230c      	movs	r3, #12
 8006be0:	602b      	str	r3, [r5, #0]
 8006be2:	e7d3      	b.n	8006b8c <_free_r+0x24>
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	1821      	adds	r1, r4, r0
 8006be8:	428a      	cmp	r2, r1
 8006bea:	bf04      	itt	eq
 8006bec:	6811      	ldreq	r1, [r2, #0]
 8006bee:	6852      	ldreq	r2, [r2, #4]
 8006bf0:	6062      	str	r2, [r4, #4]
 8006bf2:	bf04      	itt	eq
 8006bf4:	1809      	addeq	r1, r1, r0
 8006bf6:	6021      	streq	r1, [r4, #0]
 8006bf8:	605c      	str	r4, [r3, #4]
 8006bfa:	e7c7      	b.n	8006b8c <_free_r+0x24>
 8006bfc:	bd38      	pop	{r3, r4, r5, pc}
 8006bfe:	bf00      	nop
 8006c00:	20004054 	.word	0x20004054

08006c04 <_read_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4c07      	ldr	r4, [pc, #28]	; (8006c24 <_read_r+0x20>)
 8006c08:	4605      	mov	r5, r0
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	6022      	str	r2, [r4, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fa fbb4 	bl	8001380 <_read>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_read_r+0x1e>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_read_r+0x1e>
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20004200 	.word	0x20004200

08006c28 <_fstat_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4c07      	ldr	r4, [pc, #28]	; (8006c48 <_fstat_r+0x20>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4605      	mov	r5, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	f7fa fbe8 	bl	800140a <_fstat>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d102      	bne.n	8006c44 <_fstat_r+0x1c>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	b103      	cbz	r3, 8006c44 <_fstat_r+0x1c>
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	bd38      	pop	{r3, r4, r5, pc}
 8006c46:	bf00      	nop
 8006c48:	20004200 	.word	0x20004200

08006c4c <_isatty_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4c06      	ldr	r4, [pc, #24]	; (8006c68 <_isatty_r+0x1c>)
 8006c50:	2300      	movs	r3, #0
 8006c52:	4605      	mov	r5, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	f7fa fbe7 	bl	800142a <_isatty>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_isatty_r+0x1a>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_isatty_r+0x1a>
 8006c64:	602b      	str	r3, [r5, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	20004200 	.word	0x20004200

08006c6c <_init>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr

08006c78 <_fini>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr

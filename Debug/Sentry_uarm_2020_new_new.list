
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08008ef8  08008ef8  00018ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009160  08009160  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009168  08009168  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004328  20000078  080091e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043a0  080091e8  000243a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f350  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004333  00000000  00000000  0003f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  00043730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  00044c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000290cd  00000000  00000000  00045f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d96  00000000  00000000  0006eff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e39ad  00000000  00000000  00082d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  00166738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f94  00000000  00000000  00166808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008edc 	.word	0x08008edc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08008edc 	.word	0x08008edc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <Chassis_Task_Func>:
* @brief Function implementing the Chassis_Task thread.
* @param argument: Not used
* @retval None
*/
void Chassis_Task_Func(void const * argument)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	buzzer_play_mario(200);
 8000ed0:	20c8      	movs	r0, #200	; 0xc8
 8000ed2:	f000 fbeb 	bl	80016ac <buzzer_play_mario>


  int32_t direction = CLOCKWISE; // direction of motor
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
  double vel = 1000; //Velocity of motor
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	4c06      	ldr	r4, [pc, #24]	; (8000ef8 <Chassis_Task_Func+0x30>)
 8000ee0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  uint32_t cycles_s=5; //Time period is 1 seconds per cycle, 5=5 cycles=5s, the timer is controlled by TIM13
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

	 // Forever loop
	  motor_move_period(cycles_s, vel, direction);
 8000ee8:	69f9      	ldr	r1, [r7, #28]
 8000eea:	ed97 0b04 	vldr	d0, [r7, #16]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f000 f804 	bl	8000efc <motor_move_period>
 8000ef4:	e7f8      	b.n	8000ee8 <Chassis_Task_Func+0x20>
 8000ef6:	bf00      	nop
 8000ef8:	408f4000 	.word	0x408f4000

08000efc <motor_move_period>:
 * 		initial_direction: initial direction for motors
 *
 * @ Return: Null
 * @ Author: Haoran, Adan
 */
void motor_move_period(uint32_t cycles, double vel, int32_t initial_direction){
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	ed87 0b00 	vstr	d0, [r7]
 8000f08:	60b9      	str	r1, [r7, #8]
	int32_t direction;

	//If first loop
	if (first_loop){
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <motor_move_period+0xac>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <motor_move_period+0x1a>
		direction = initial_direction;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	617b      	str	r3, [r7, #20]
	else{

	}
	//TIMEBASE = (APBxTIMCLK / (Prescaler + 1)) / (Period + 1) (Hertz)
	//currently set 1 Hz, if want 0.1s, set Prescaler of TIM13 to 839 (10 Hz)
	if(direction == CLOCKWISE){
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d115      	bne.n	8000f48 <motor_move_period+0x4c>
		HAL_GPIO_WritePin(LD_A_GPIO_Port,LD_A_Pin,GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	4822      	ldr	r0, [pc, #136]	; (8000fac <motor_move_period+0xb0>)
 8000f24:	f002 fe7c 	bl	8003c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_B_GPIO_Port,LD_B_Pin,GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <motor_move_period+0xb0>)
 8000f2e:	f002 fe77 	bl	8003c20 <HAL_GPIO_WritePin>
		// Clockwise Direction
		// give time counter here
		if (period_counter >= cycles) {
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <motor_move_period+0xb4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d805      	bhi.n	8000f48 <motor_move_period+0x4c>
			period_counter = 0;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <motor_move_period+0xb4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
			direction = COUNTER_CLOCKWISE;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	617b      	str	r3, [r7, #20]
		}
	}
	if(direction == COUNTER_CLOCKWISE){
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f4e:	d109      	bne.n	8000f64 <motor_move_period+0x68>
		// Counter Clockwise Direction
		if (period_counter >= cycles){
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <motor_move_period+0xb4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d804      	bhi.n	8000f64 <motor_move_period+0x68>
			period_counter = 0;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <motor_move_period+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
			direction = CLOCKWISE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
		}
	}
	//Calculate velocity via direction * speed
	vel = direction*vel;
 8000f64:	6978      	ldr	r0, [r7, #20]
 8000f66:	f7ff faed 	bl	8000544 <__aeabi_i2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f72:	f7ff fb51 	bl	8000618 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9c7 2300 	strd	r2, r3, [r7]

	//Send velocity to motor
	//and function should be written to control the RPM rather than just setting raw value
	Motor_set_raw_value(&motor_data[0], vel);
 8000f7e:	ed97 0b00 	vldr	d0, [r7]
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <motor_move_period+0xb8>)
 8000f84:	f000 facf 	bl	8001526 <Motor_set_raw_value>
	Motor_set_raw_value(&motor_data[1], -vel);
 8000f88:	683c      	ldr	r4, [r7, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000f90:	ec45 4b10 	vmov	d0, r4, r5
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <motor_move_period+0xbc>)
 8000f96:	f000 fac6 	bl	8001526 <Motor_set_raw_value>
	osDelay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f004 fe6b 	bl	8005c76 <osDelay>
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa8:	2000418c 	.word	0x2000418c
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	200002e8 	.word	0x200002e8
 8000fb4:	20004084 	.word	0x20004084
 8000fb8:	200040a0 	.word	0x200040a0
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Gimbal_Task_Function */
  char *pdata; // data packet from computer
  double vmax=30000;
 8000fc8:	a432      	add	r4, pc, #200	; (adr r4, 8001094 <Gimbal_Task_Function+0xd4>)
 8000fca:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000fce:	e9c7 3406 	strd	r3, r4, [r7, #24]
  double max_angle=4096;
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	4c28      	ldr	r4, [pc, #160]	; (8001078 <Gimbal_Task_Function+0xb8>)
 8000fd8:	e9c7 3404 	strd	r3, r4, [r7, #16]
  pdata = malloc(PACKLEN+1);
 8000fdc:	2007      	movs	r0, #7
 8000fde:	f006 f829 	bl	8007034 <malloc>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	//buzzer_play_chromatic(100);
	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4824      	ldr	r0, [pc, #144]	; (800107c <Gimbal_Task_Function+0xbc>)
 8000fea:	f002 f93e 	bl	800326a <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <Gimbal_Task_Function+0xc0>)
 8000ff0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ff4:	801a      	strh	r2, [r3, #0]
  for(;;)
  {
	  //Motor_pid_set_angle(&motor_data[4],360,vmax/max_angle,0,0);
	 // packet total size, referring to comm protocol

	  if (HAL_UART_Receive(&husart6, (char*)pdata, (PACKLEN+1), HAL_MAX_DELAY) == HAL_OK){ // origin:huart7
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	68f9      	ldr	r1, [r7, #12]
 8000ffe:	4821      	ldr	r0, [pc, #132]	; (8001084 <Gimbal_Task_Function+0xc4>)
 8001000:	f004 f962 	bl	80052c8 <HAL_UART_Receive>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d11b      	bne.n	8001042 <Gimbal_Task_Function+0x82>
		  HAL_GPIO_TogglePin(GPIOG, LD_H_Pin);
 800100a:	2102      	movs	r1, #2
 800100c:	481e      	ldr	r0, [pc, #120]	; (8001088 <Gimbal_Task_Function+0xc8>)
 800100e:	f002 fe20 	bl	8003c52 <HAL_GPIO_TogglePin>
		  comm_pack.yaw_data = parse_pack_indv(pdata, YAW_POS, DATALEN);
 8001012:	2204      	movs	r2, #4
 8001014:	2106      	movs	r1, #6
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f842 	bl	80010a0 <parse_pack_indv>
 800101c:	4602      	mov	r2, r0
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <Gimbal_Task_Function+0xcc>)
 8001020:	601a      	str	r2, [r3, #0]
		  // comm_pack.yaw_data = parse_pack_indv(pdata, TARGET_POS, STATELEN);
		  //comm_pack = parse_pack_string(pdata);
		  if (comm_pack.pack_cond == PACKCOR){ //&& comm_pack.pitch_data == 5678 && comm_pack.fire_cmd == 0){
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <Gimbal_Task_Function+0xcc>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d104      	bne.n	8001034 <Gimbal_Task_Function+0x74>
				 HAL_GPIO_WritePin(GPIOG, LD_C_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2140      	movs	r1, #64	; 0x40
 800102e:	4816      	ldr	r0, [pc, #88]	; (8001088 <Gimbal_Task_Function+0xc8>)
 8001030:	f002 fdf6 	bl	8003c20 <HAL_GPIO_WritePin>
		  }
		  HAL_UART_Transmit(&husart6, (char*)pdata, (PACKLEN+1),HAL_MAX_DELAY);
 8001034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001038:	2207      	movs	r2, #7
 800103a:	68f9      	ldr	r1, [r7, #12]
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <Gimbal_Task_Function+0xc4>)
 800103e:	f004 f8aa 	bl	8005196 <HAL_UART_Transmit>
	 }
	 if (comm_pack.yaw_data == 1234){ //&& comm_pack.pitch_data == 5678 && comm_pack.fire_cmd == 0){
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <Gimbal_Task_Function+0xcc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f240 42d2 	movw	r2, #1234	; 0x4d2
 800104a:	4293      	cmp	r3, r2
 800104c:	d104      	bne.n	8001058 <Gimbal_Task_Function+0x98>
		 HAL_GPIO_WritePin(GPIOG, LD_B_Pin, RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <Gimbal_Task_Function+0xc8>)
 8001054:	f002 fde4 	bl	8003c20 <HAL_GPIO_WritePin>
	  }

	  //HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_RESET);
	  Motor_set_raw_value(&motor_data[0], comm_pack.yaw_data);
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <Gimbal_Task_Function+0xcc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa71 	bl	8000544 <__aeabi_i2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	ec44 3b10 	vmov	d0, r3, r4
 800106a:	4809      	ldr	r0, [pc, #36]	; (8001090 <Gimbal_Task_Function+0xd0>)
 800106c:	f000 fa5b 	bl	8001526 <Motor_set_raw_value>
	  osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f004 fe00 	bl	8005c76 <osDelay>
	  if (HAL_UART_Receive(&husart6, (char*)pdata, (PACKLEN+1), HAL_MAX_DELAY) == HAL_OK){ // origin:huart7
 8001076:	e7be      	b.n	8000ff6 <Gimbal_Task_Function+0x36>
 8001078:	40b00000 	.word	0x40b00000
 800107c:	20004190 	.word	0x20004190
 8001080:	2000423a 	.word	0x2000423a
 8001084:	20004318 	.word	0x20004318
 8001088:	40021800 	.word	0x40021800
 800108c:	2000423c 	.word	0x2000423c
 8001090:	20004084 	.word	0x20004084
 8001094:	00000000 	.word	0x00000000
 8001098:	40dd4c00 	.word	0x40dd4c00
 800109c:	00000000 	.word	0x00000000

080010a0 <parse_pack_indv>:
 * 			     pos: The position of the last byte of the currently extracted data, e.g. yaw.
 * 			     lens: the length of current data, e.g. yaw.
 * @ Return:
 * @ Author: Haoran Qi, Created on: Jan, 2022
 */
int32_t parse_pack_indv(char* pack, int pos, int lens){
 80010a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	466b      	mov	r3, sp
 80010ae:	461e      	mov	r6, r3

    char pdata[(strlen(pack)+1)]; //pack content size + '\0'
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff f89d 	bl	80001f0 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	1c58      	adds	r0, r3, #1
 80010ba:	4603      	mov	r3, r0
 80010bc:	3b01      	subs	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	4601      	mov	r1, r0
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	f04f 0400 	mov.w	r4, #0
 80010ce:	00d4      	lsls	r4, r2, #3
 80010d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010d4:	00cb      	lsls	r3, r1, #3
 80010d6:	4601      	mov	r1, r0
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	f04f 0400 	mov.w	r4, #0
 80010e4:	00d4      	lsls	r4, r2, #3
 80010e6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010ea:	00cb      	lsls	r3, r1, #3
 80010ec:	1dc3      	adds	r3, r0, #7
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	ebad 0d03 	sub.w	sp, sp, r3
 80010f6:	466b      	mov	r3, sp
 80010f8:	3300      	adds	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
    int32_t data = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
    strcpy(pdata, pack);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	4618      	mov	r0, r3
 8001106:	f006 f875 	bl	80071f4 <strcpy>

    if (pdata[0] == 0x41){ //check received correct pack head frame， modify here to 0xAA in real world test
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b41      	cmp	r3, #65	; 0x41
 8001110:	d131      	bne.n	8001176 <parse_pack_indv+0xd6>
		for(int i=0; i<lens; i++){
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e029      	b.n	800116c <parse_pack_indv+0xcc>
            data += (int32_t)((pdata[pos-i-1] - '0')*pow(10,i)); // decoding, referring to the vision code.
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	3b01      	subs	r3, #1
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	3b30      	subs	r3, #48	; 0x30
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fa0c 	bl	8000544 <__aeabi_i2d>
 800112c:	4604      	mov	r4, r0
 800112e:	460d      	mov	r5, r1
 8001130:	69f8      	ldr	r0, [r7, #28]
 8001132:	f7ff fa07 	bl	8000544 <__aeabi_i2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	ec43 2b11 	vmov	d1, r2, r3
 800113e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001190 <parse_pack_indv+0xf0>
 8001142:	f006 fe73 	bl	8007e2c <pow>
 8001146:	ec53 2b10 	vmov	r2, r3, d0
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff fa63 	bl	8000618 <__aeabi_dmul>
 8001152:	4603      	mov	r3, r0
 8001154:	460c      	mov	r4, r1
 8001156:	4618      	mov	r0, r3
 8001158:	4621      	mov	r1, r4
 800115a:	f7ff fd0d 	bl	8000b78 <__aeabi_d2iz>
 800115e:	4602      	mov	r2, r0
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	4413      	add	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
		for(int i=0; i<lens; i++){
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3301      	adds	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbd1      	blt.n	8001118 <parse_pack_indv+0x78>
 8001174:	e002      	b.n	800117c <parse_pack_indv+0xdc>
		}
    }
	else{
		data = -1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117a:	61bb      	str	r3, [r7, #24]
	}
    osDelay(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f004 fd7a 	bl	8005c76 <osDelay>
    return data;
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	46b5      	mov	sp, r6
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	40240000 	.word	0x40240000

08001198 <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 80011a0:	f000 f818 	bl	80011d4 <shoot_init>
  double fric_wheel_speed_percent=50;
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	4c08      	ldr	r4, [pc, #32]	; (80011cc <Shoot_Task_Func+0x34>)
 80011aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double mag_load_speed_percent=10;
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	4c07      	ldr	r4, [pc, #28]	; (80011d0 <Shoot_Task_Func+0x38>)
 80011b4:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 80011b8:	ed97 1b04 	vldr	d1, [r7, #16]
 80011bc:	ed97 0b02 	vldr	d0, [r7, #8]
 80011c0:	f000 f832 	bl	8001228 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f004 fd56 	bl	8005c76 <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 80011ca:	e7f5      	b.n	80011b8 <Shoot_Task_Func+0x20>
 80011cc:	40490000 	.word	0x40490000
 80011d0:	40240000 	.word	0x40240000

080011d4 <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	4812      	ldr	r0, [pc, #72]	; (8001224 <shoot_init+0x50>)
 80011dc:	f003 fa54 	bl	8004688 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80011e0:	2108      	movs	r1, #8
 80011e2:	4810      	ldr	r0, [pc, #64]	; (8001224 <shoot_init+0x50>)
 80011e4:	f003 fa50 	bl	8004688 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <shoot_init+0x50>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f640 0298 	movw	r2, #2200	; 0x898
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <shoot_init+0x50>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f640 0298 	movw	r2, #2200	; 0x898
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 80011fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001200:	f004 fd39 	bl	8005c76 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <shoot_init+0x50>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <shoot_init+0x50>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001216:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8001218:	f240 60d6 	movw	r0, #1750	; 0x6d6
 800121c:	f004 fd2b 	bl	8005c76 <osDelay>

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20004044 	.word	0x20004044

08001228 <cmd_execute_shoot>:
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,input);
}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001232:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <cmd_execute_shoot+0x50>)
 800123c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001240:	f7ff fb14 	bl	800086c <__aeabi_ddiv>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	a308      	add	r3, pc, #32	; (adr r3, 8001270 <cmd_execute_shoot+0x48>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f9e1 	bl	8000618 <__aeabi_dmul>
 8001256:	4603      	mov	r3, r0
 8001258:	460c      	mov	r4, r1
 800125a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 800125e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <cmd_execute_shoot+0x54>)
 8001264:	f000 f95f 	bl	8001526 <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 8001268:	bf00      	nop
 800126a:	371c      	adds	r7, #28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	00000000 	.word	0x00000000
 8001274:	40c38800 	.word	0x40c38800
 8001278:	40590000 	.word	0x40590000
 800127c:	200040d8 	.word	0x200040d8

08001280 <Timer_Task_Func>:
 */

#include "Timer_App.h"


void Timer_Task_Func(void const * argument){
 8001280:	b580      	push	{r7, lr}
 8001282:	b090      	sub	sp, #64	; 0x40
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

	uint32_t tick;

	for (;;){

		Motor_Data_Read();
 8001288:	f000 f816 	bl	80012b8 <Motor_Data_Read>
		Motor_Data_Sent();
 800128c:	f000 f87a 	bl	8001384 <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <Timer_Task_Func+0x30>)
 8001298:	f000 f8f8 	bl	800148c <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4619      	mov	r1, r3
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <Timer_Task_Func+0x34>)
 80012a4:	f000 f8f2 	bl	800148c <get_Motor_buffer>
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f004 fce4 	bl	8005c76 <osDelay>
	for (;;){
 80012ae:	e7eb      	b.n	8001288 <Timer_Task_Func+0x8>
 80012b0:	200040f4 	.word	0x200040f4
 80012b4:	20004084 	.word	0x20004084

080012b8 <Motor_Data_Read>:


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	e052      	b.n	800136a <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 80012c4:	482c      	ldr	r0, [pc, #176]	; (8001378 <Motor_Data_Read+0xc0>)
 80012c6:	f000 fc17 	bl	8001af8 <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4a2b      	ldr	r2, [pc, #172]	; (800137c <Motor_Data_Read+0xc4>)
 80012d0:	441a      	add	r2, r3
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	6810      	ldr	r0, [r2, #0]
 80012d6:	6851      	ldr	r1, [r2, #4]
 80012d8:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 80012da:	793b      	ldrb	r3, [r7, #4]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	b21a      	sxth	r2, r3
 80012e0:	797b      	ldrb	r3, [r7, #5]
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b218      	sxth	r0, r3
 80012e8:	4925      	ldr	r1, [pc, #148]	; (8001380 <Motor_Data_Read+0xc8>)
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	3310      	adds	r3, #16
 80012f8:	4602      	mov	r2, r0
 80012fa:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b218      	sxth	r0, r3
 800130a:	491d      	ldr	r1, [pc, #116]	; (8001380 <Motor_Data_Read+0xc8>)
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4613      	mov	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	3312      	adds	r3, #18
 800131a:	4602      	mov	r2, r0
 800131c:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 800131e:	7a3b      	ldrb	r3, [r7, #8]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	7a7b      	ldrb	r3, [r7, #9]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b218      	sxth	r0, r3
 800132c:	4914      	ldr	r1, [pc, #80]	; (8001380 <Motor_Data_Read+0xc8>)
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4613      	mov	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	3314      	adds	r3, #20
 800133c:	4602      	mov	r2, r0
 800133e:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	b218      	sxth	r0, r3
 8001344:	490e      	ldr	r1, [pc, #56]	; (8001380 <Motor_Data_Read+0xc8>)
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	3316      	adds	r3, #22
 8001354:	4602      	mov	r2, r0
 8001356:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 8001358:	2001      	movs	r0, #1
 800135a:	f004 fc8c 	bl	8005c76 <osDelay>

		can_filter_disable(&hcan1);
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <Motor_Data_Read+0xc0>)
 8001360:	f000 fbec 	bl	8001b3c <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b07      	cmp	r3, #7
 800136e:	dda9      	ble.n	80012c4 <Motor_Data_Read+0xc>
	}
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20004190 	.word	0x20004190
 800137c:	200041b8 	.word	0x200041b8
 8001380:	20004084 	.word	0x20004084

08001384 <Motor_Data_Sent>:
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 8001392:	2308      	movs	r3, #8
 8001394:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
 800139a:	e06c      	b.n	8001476 <Motor_Data_Sent+0xf2>
		if (i == 0) {
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d12b      	bne.n	80013fa <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 80013a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a6:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <Motor_Data_Sent+0x100>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	121b      	asrs	r3, r3, #8
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <Motor_Data_Sent+0x100>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <Motor_Data_Sent+0x100>)
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	121b      	asrs	r3, r3, #8
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <Motor_Data_Sent+0x100>)
 80013c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <Motor_Data_Sent+0x100>)
 80013ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d0:	121b      	asrs	r3, r3, #8
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <Motor_Data_Sent+0x100>)
 80013da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <Motor_Data_Sent+0x100>)
 80013e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013e6:	121b      	asrs	r3, r3, #8
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <Motor_Data_Sent+0x100>)
 80013f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80013f8:	e032      	b.n	8001460 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 80013fa:	f240 13ff 	movw	r3, #511	; 0x1ff
 80013fe:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <Motor_Data_Sent+0x100>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	121b      	asrs	r3, r3, #8
 8001408:	b2db      	uxtb	r3, r3
 800140a:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <Motor_Data_Sent+0x100>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001412:	b2db      	uxtb	r3, r3
 8001414:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <Motor_Data_Sent+0x100>)
 8001418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800141c:	121b      	asrs	r3, r3, #8
 800141e:	b2db      	uxtb	r3, r3
 8001420:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <Motor_Data_Sent+0x100>)
 8001424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001428:	b2db      	uxtb	r3, r3
 800142a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <Motor_Data_Sent+0x100>)
 800142e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001432:	121b      	asrs	r3, r3, #8
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <Motor_Data_Sent+0x100>)
 800143c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <Motor_Data_Sent+0x100>)
 8001448:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800144c:	121b      	asrs	r3, r3, #8
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <Motor_Data_Sent+0x100>)
 8001456:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8001460:	f107 0318 	add.w	r3, r7, #24
 8001464:	f107 021c 	add.w	r2, r7, #28
 8001468:	4639      	mov	r1, r7
 800146a:	4807      	ldr	r0, [pc, #28]	; (8001488 <Motor_Data_Sent+0x104>)
 800146c:	f001 fd10 	bl	8002e90 <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	3301      	adds	r3, #1
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	2b01      	cmp	r3, #1
 800147a:	dd8f      	ble.n	800139c <Motor_Data_Sent+0x18>
	}
}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20004084 	.word	0x20004084
 8001488:	20004190 	.word	0x20004190

0800148c <get_Motor_buffer>:

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f811 	bl	80014c0 <Motor_Data_Replacement>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f804 	bl	80014c0 <Motor_Data_Replacement>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	60da      	str	r2, [r3, #12]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <Motor_set_raw_value>:

}

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 8001526:	b580      	push	{r7, lr}
 8001528:	b08c      	sub	sp, #48	; 0x30
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff ffa7 	bl	800148c <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 800153e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001542:	f7ff fb19 	bl	8000b78 <__aeabi_d2iz>
 8001546:	4603      	mov	r3, r0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ffa8 	bl	80014a6 <set_Motor_buffer>
}
 8001556:	bf00      	nop
 8001558:	3730      	adds	r7, #48	; 0x30
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001564:	2100      	movs	r1, #0
 8001566:	4802      	ldr	r0, [pc, #8]	; (8001570 <buzzer_init+0x10>)
 8001568:	f003 f88e 	bl	8004688 <HAL_TIM_PWM_Start>

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200041f8 	.word	0x200041f8

08001574 <buzzer_play_g0>:

void buzzer_play_g0(int32_t duration){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <buzzer_play_g0+0x44>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,9523);
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <buzzer_play_g0+0x44>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f242 5233 	movw	r2, #9523	; 0x2533
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <buzzer_play_g0+0x44>)
 8001590:	f242 5233 	movw	r2, #9523	; 0x2533
 8001594:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <buzzer_play_g0+0x44>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2264      	movs	r2, #100	; 0x64
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 fb68 	bl	8005c76 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <buzzer_play_g0+0x44>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200041f8 	.word	0x200041f8

080015bc <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <buzzer_play_c1+0x44>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,7135);
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <buzzer_play_c1+0x44>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f641 32df 	movw	r2, #7135	; 0x1bdf
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <buzzer_play_c1+0x44>)
 80015d8:	f641 32df 	movw	r2, #7135	; 0x1bdf
 80015dc:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <buzzer_play_c1+0x44>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2264      	movs	r2, #100	; 0x64
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 fb44 	bl	8005c76 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <buzzer_play_c1+0x44>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2200      	movs	r2, #0
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200041f8 	.word	0x200041f8

08001604 <buzzer_play_e1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_e1(int32_t duration){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 25);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <buzzer_play_e1+0x44>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5662);
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <buzzer_play_e1+0x44>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f241 621e 	movw	r2, #5662	; 0x161e
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <buzzer_play_e1+0x44>)
 8001620:	f241 621e 	movw	r2, #5662	; 0x161e
 8001624:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <buzzer_play_e1+0x44>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2264      	movs	r2, #100	; 0x64
 800162c:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	f004 fb20 	bl	8005c76 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <buzzer_play_e1+0x44>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200041f8 	.word	0x200041f8

0800164c <buzzer_play_g1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_g1(int32_t duration){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 21);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <buzzer_play_g1+0x44>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4761);
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <buzzer_play_g1+0x44>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f241 2299 	movw	r2, #4761	; 0x1299
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <buzzer_play_g1+0x44>)
 8001668:	f241 2299 	movw	r2, #4761	; 0x1299
 800166c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <buzzer_play_g1+0x44>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2264      	movs	r2, #100	; 0x64
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	f004 fafc 	bl	8005c76 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <buzzer_play_g1+0x44>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200041f8 	.word	0x200041f8

08001694 <buzzer_rest>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_rest(int32_t duration){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	osDelay(duration);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 fae9 	bl	8005c76 <osDelay>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <buzzer_play_mario>:



}

void buzzer_play_mario(int32_t bpm){
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b08d      	sub	sp, #52	; 0x34
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7fe ff45 	bl	8000544 <__aeabi_i2d>
 80016ba:	4603      	mov	r3, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	461a      	mov	r2, r3
 80016c0:	4623      	mov	r3, r4
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	49bf      	ldr	r1, [pc, #764]	; (80019c4 <buzzer_play_mario+0x318>)
 80016c8:	f7ff f8d0 	bl	800086c <__aeabi_ddiv>
 80016cc:	4603      	mov	r3, r0
 80016ce:	460c      	mov	r4, r1
 80016d0:	4618      	mov	r0, r3
 80016d2:	4621      	mov	r1, r4
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4bbb      	ldr	r3, [pc, #748]	; (80019c8 <buzzer_play_mario+0x31c>)
 80016da:	f7fe ff9d 	bl	8000618 <__aeabi_dmul>
 80016de:	4603      	mov	r3, r0
 80016e0:	460c      	mov	r4, r1
 80016e2:	4618      	mov	r0, r3
 80016e4:	4621      	mov	r1, r4
 80016e6:	f7ff fa47 	bl	8000b78 <__aeabi_d2iz>
 80016ea:	4603      	mov	r3, r0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t quarter_dot=(double)60/bpm*1000*1.5;
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7fe ff28 	bl	8000544 <__aeabi_i2d>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	461a      	mov	r2, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	f04f 0000 	mov.w	r0, #0
 8001700:	49b0      	ldr	r1, [pc, #704]	; (80019c4 <buzzer_play_mario+0x318>)
 8001702:	f7ff f8b3 	bl	800086c <__aeabi_ddiv>
 8001706:	4603      	mov	r3, r0
 8001708:	460c      	mov	r4, r1
 800170a:	4618      	mov	r0, r3
 800170c:	4621      	mov	r1, r4
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4bad      	ldr	r3, [pc, #692]	; (80019c8 <buzzer_play_mario+0x31c>)
 8001714:	f7fe ff80 	bl	8000618 <__aeabi_dmul>
 8001718:	4603      	mov	r3, r0
 800171a:	460c      	mov	r4, r1
 800171c:	4618      	mov	r0, r3
 800171e:	4621      	mov	r1, r4
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4ba9      	ldr	r3, [pc, #676]	; (80019cc <buzzer_play_mario+0x320>)
 8001726:	f7fe ff77 	bl	8000618 <__aeabi_dmul>
 800172a:	4603      	mov	r3, r0
 800172c:	460c      	mov	r4, r1
 800172e:	4618      	mov	r0, r3
 8001730:	4621      	mov	r1, r4
 8001732:	f7ff fa21 	bl	8000b78 <__aeabi_d2iz>
 8001736:	4603      	mov	r3, r0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t eighth=(double)60/bpm*1000*0.5;
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe ff02 	bl	8000544 <__aeabi_i2d>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	f04f 0000 	mov.w	r0, #0
 800174c:	499d      	ldr	r1, [pc, #628]	; (80019c4 <buzzer_play_mario+0x318>)
 800174e:	f7ff f88d 	bl	800086c <__aeabi_ddiv>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	4618      	mov	r0, r3
 8001758:	4621      	mov	r1, r4
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4b9a      	ldr	r3, [pc, #616]	; (80019c8 <buzzer_play_mario+0x31c>)
 8001760:	f7fe ff5a 	bl	8000618 <__aeabi_dmul>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	4618      	mov	r0, r3
 800176a:	4621      	mov	r1, r4
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4b97      	ldr	r3, [pc, #604]	; (80019d0 <buzzer_play_mario+0x324>)
 8001772:	f7fe ff51 	bl	8000618 <__aeabi_dmul>
 8001776:	4603      	mov	r3, r0
 8001778:	460c      	mov	r4, r1
 800177a:	4618      	mov	r0, r3
 800177c:	4621      	mov	r1, r4
 800177e:	f7ff f9fb 	bl	8000b78 <__aeabi_d2iz>
 8001782:	4603      	mov	r3, r0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t eighth_dot=(double)60/bpm*1000*0.5*1.5;
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7fe fedc 	bl	8000544 <__aeabi_i2d>
 800178c:	4603      	mov	r3, r0
 800178e:	460c      	mov	r4, r1
 8001790:	461a      	mov	r2, r3
 8001792:	4623      	mov	r3, r4
 8001794:	f04f 0000 	mov.w	r0, #0
 8001798:	498a      	ldr	r1, [pc, #552]	; (80019c4 <buzzer_play_mario+0x318>)
 800179a:	f7ff f867 	bl	800086c <__aeabi_ddiv>
 800179e:	4603      	mov	r3, r0
 80017a0:	460c      	mov	r4, r1
 80017a2:	4618      	mov	r0, r3
 80017a4:	4621      	mov	r1, r4
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b87      	ldr	r3, [pc, #540]	; (80019c8 <buzzer_play_mario+0x31c>)
 80017ac:	f7fe ff34 	bl	8000618 <__aeabi_dmul>
 80017b0:	4603      	mov	r3, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	4618      	mov	r0, r3
 80017b6:	4621      	mov	r1, r4
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b84      	ldr	r3, [pc, #528]	; (80019d0 <buzzer_play_mario+0x324>)
 80017be:	f7fe ff2b 	bl	8000618 <__aeabi_dmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	460c      	mov	r4, r1
 80017c6:	4618      	mov	r0, r3
 80017c8:	4621      	mov	r1, r4
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <buzzer_play_mario+0x320>)
 80017d0:	f7fe ff22 	bl	8000618 <__aeabi_dmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	4618      	mov	r0, r3
 80017da:	4621      	mov	r1, r4
 80017dc:	f7ff f9cc 	bl	8000b78 <__aeabi_d2iz>
 80017e0:	4603      	mov	r3, r0
 80017e2:	623b      	str	r3, [r7, #32]
	int32_t sixteenth=(double)60/bpm*0.25*1000;
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7fe fead 	bl	8000544 <__aeabi_i2d>
 80017ea:	4603      	mov	r3, r0
 80017ec:	460c      	mov	r4, r1
 80017ee:	461a      	mov	r2, r3
 80017f0:	4623      	mov	r3, r4
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	4973      	ldr	r1, [pc, #460]	; (80019c4 <buzzer_play_mario+0x318>)
 80017f8:	f7ff f838 	bl	800086c <__aeabi_ddiv>
 80017fc:	4603      	mov	r3, r0
 80017fe:	460c      	mov	r4, r1
 8001800:	4618      	mov	r0, r3
 8001802:	4621      	mov	r1, r4
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <buzzer_play_mario+0x328>)
 800180a:	f7fe ff05 	bl	8000618 <__aeabi_dmul>
 800180e:	4603      	mov	r3, r0
 8001810:	460c      	mov	r4, r1
 8001812:	4618      	mov	r0, r3
 8001814:	4621      	mov	r1, r4
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b6b      	ldr	r3, [pc, #428]	; (80019c8 <buzzer_play_mario+0x31c>)
 800181c:	f7fe fefc 	bl	8000618 <__aeabi_dmul>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	4618      	mov	r0, r3
 8001826:	4621      	mov	r1, r4
 8001828:	f7ff f9a6 	bl	8000b78 <__aeabi_d2iz>
 800182c:	4603      	mov	r3, r0
 800182e:	61fb      	str	r3, [r7, #28]
	int32_t sixteenth_dot=(double)60/bpm*0.25*1000*1.5;
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7fe fe87 	bl	8000544 <__aeabi_i2d>
 8001836:	4603      	mov	r3, r0
 8001838:	460c      	mov	r4, r1
 800183a:	461a      	mov	r2, r3
 800183c:	4623      	mov	r3, r4
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	4960      	ldr	r1, [pc, #384]	; (80019c4 <buzzer_play_mario+0x318>)
 8001844:	f7ff f812 	bl	800086c <__aeabi_ddiv>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	4618      	mov	r0, r3
 800184e:	4621      	mov	r1, r4
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <buzzer_play_mario+0x328>)
 8001856:	f7fe fedf 	bl	8000618 <__aeabi_dmul>
 800185a:	4603      	mov	r3, r0
 800185c:	460c      	mov	r4, r1
 800185e:	4618      	mov	r0, r3
 8001860:	4621      	mov	r1, r4
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <buzzer_play_mario+0x31c>)
 8001868:	f7fe fed6 	bl	8000618 <__aeabi_dmul>
 800186c:	4603      	mov	r3, r0
 800186e:	460c      	mov	r4, r1
 8001870:	4618      	mov	r0, r3
 8001872:	4621      	mov	r1, r4
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b54      	ldr	r3, [pc, #336]	; (80019cc <buzzer_play_mario+0x320>)
 800187a:	f7fe fecd 	bl	8000618 <__aeabi_dmul>
 800187e:	4603      	mov	r3, r0
 8001880:	460c      	mov	r4, r1
 8001882:	4618      	mov	r0, r3
 8001884:	4621      	mov	r1, r4
 8001886:	f7ff f977 	bl	8000b78 <__aeabi_d2iz>
 800188a:	4603      	mov	r3, r0
 800188c:	61bb      	str	r3, [r7, #24]
	int32_t half=(double)60/bpm*2*1000;
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7fe fe58 	bl	8000544 <__aeabi_i2d>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	4948      	ldr	r1, [pc, #288]	; (80019c4 <buzzer_play_mario+0x318>)
 80018a2:	f7fe ffe3 	bl	800086c <__aeabi_ddiv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	4618      	mov	r0, r3
 80018ac:	4621      	mov	r1, r4
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	f7fe fcfb 	bl	80002ac <__adddf3>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	4618      	mov	r0, r3
 80018bc:	4621      	mov	r1, r4
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <buzzer_play_mario+0x31c>)
 80018c4:	f7fe fea8 	bl	8000618 <__aeabi_dmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	4618      	mov	r0, r3
 80018ce:	4621      	mov	r1, r4
 80018d0:	f7ff f952 	bl	8000b78 <__aeabi_d2iz>
 80018d4:	4603      	mov	r3, r0
 80018d6:	617b      	str	r3, [r7, #20]
	int32_t half_dot=(double)60/bpm*2*1000*1.5;
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7fe fe33 	bl	8000544 <__aeabi_i2d>
 80018de:	4603      	mov	r3, r0
 80018e0:	460c      	mov	r4, r1
 80018e2:	461a      	mov	r2, r3
 80018e4:	4623      	mov	r3, r4
 80018e6:	f04f 0000 	mov.w	r0, #0
 80018ea:	4936      	ldr	r1, [pc, #216]	; (80019c4 <buzzer_play_mario+0x318>)
 80018ec:	f7fe ffbe 	bl	800086c <__aeabi_ddiv>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	4618      	mov	r0, r3
 80018f6:	4621      	mov	r1, r4
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	f7fe fcd6 	bl	80002ac <__adddf3>
 8001900:	4603      	mov	r3, r0
 8001902:	460c      	mov	r4, r1
 8001904:	4618      	mov	r0, r3
 8001906:	4621      	mov	r1, r4
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <buzzer_play_mario+0x31c>)
 800190e:	f7fe fe83 	bl	8000618 <__aeabi_dmul>
 8001912:	4603      	mov	r3, r0
 8001914:	460c      	mov	r4, r1
 8001916:	4618      	mov	r0, r3
 8001918:	4621      	mov	r1, r4
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <buzzer_play_mario+0x320>)
 8001920:	f7fe fe7a 	bl	8000618 <__aeabi_dmul>
 8001924:	4603      	mov	r3, r0
 8001926:	460c      	mov	r4, r1
 8001928:	4618      	mov	r0, r3
 800192a:	4621      	mov	r1, r4
 800192c:	f7ff f924 	bl	8000b78 <__aeabi_d2iz>
 8001930:	4603      	mov	r3, r0
 8001932:	613b      	str	r3, [r7, #16]
	int32_t whole=(double)60/bpm*4*1000;
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7fe fe05 	bl	8000544 <__aeabi_i2d>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	461a      	mov	r2, r3
 8001940:	4623      	mov	r3, r4
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	491f      	ldr	r1, [pc, #124]	; (80019c4 <buzzer_play_mario+0x318>)
 8001948:	f7fe ff90 	bl	800086c <__aeabi_ddiv>
 800194c:	4603      	mov	r3, r0
 800194e:	460c      	mov	r4, r1
 8001950:	4618      	mov	r0, r3
 8001952:	4621      	mov	r1, r4
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <buzzer_play_mario+0x32c>)
 800195a:	f7fe fe5d 	bl	8000618 <__aeabi_dmul>
 800195e:	4603      	mov	r3, r0
 8001960:	460c      	mov	r4, r1
 8001962:	4618      	mov	r0, r3
 8001964:	4621      	mov	r1, r4
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <buzzer_play_mario+0x31c>)
 800196c:	f7fe fe54 	bl	8000618 <__aeabi_dmul>
 8001970:	4603      	mov	r3, r0
 8001972:	460c      	mov	r4, r1
 8001974:	4618      	mov	r0, r3
 8001976:	4621      	mov	r1, r4
 8001978:	f7ff f8fe 	bl	8000b78 <__aeabi_d2iz>
 800197c:	4603      	mov	r3, r0
 800197e:	60fb      	str	r3, [r7, #12]

	buzzer_play_e1(eighth);
 8001980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001982:	f7ff fe3f 	bl	8001604 <buzzer_play_e1>
	buzzer_play_e1(eighth);
 8001986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001988:	f7ff fe3c 	bl	8001604 <buzzer_play_e1>
	buzzer_rest(eighth);
 800198c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800198e:	f7ff fe81 	bl	8001694 <buzzer_rest>
	buzzer_play_e1(eighth);
 8001992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001994:	f7ff fe36 	bl	8001604 <buzzer_play_e1>
	buzzer_rest(eighth);
 8001998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800199a:	f7ff fe7b 	bl	8001694 <buzzer_rest>
	buzzer_play_c1(eighth);
 800199e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019a0:	f7ff fe0c 	bl	80015bc <buzzer_play_c1>
	buzzer_play_e1(quarter);
 80019a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019a6:	f7ff fe2d 	bl	8001604 <buzzer_play_e1>
	buzzer_play_g1(quarter);
 80019aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ac:	f7ff fe4e 	bl	800164c <buzzer_play_g1>
	buzzer_rest(quarter);
 80019b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019b2:	f7ff fe6f 	bl	8001694 <buzzer_rest>
	buzzer_play_g0(quarter);
 80019b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019b8:	f7ff fddc 	bl	8001574 <buzzer_play_g0>


}
 80019bc:	bf00      	nop
 80019be:	3734      	adds	r7, #52	; 0x34
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	404e0000 	.word	0x404e0000
 80019c8:	408f4000 	.word	0x408f4000
 80019cc:	3ff80000 	.word	0x3ff80000
 80019d0:	3fe00000 	.word	0x3fe00000
 80019d4:	3fd00000 	.word	0x3fd00000
 80019d8:	40100000 	.word	0x40100000

080019dc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_CAN1_Init+0x64>)
 80019e2:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <MX_CAN1_Init+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_CAN1_Init+0x64>)
 80019e8:	2203      	movs	r2, #3
 80019ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_CAN1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_CAN1_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_CAN1_Init+0x64>)
 80019fa:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80019fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_CAN1_Init+0x64>)
 8001a02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a06:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <MX_CAN1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_CAN1_Init+0x64>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <MX_CAN1_Init+0x64>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_CAN1_Init+0x64>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <MX_CAN1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_CAN1_Init+0x64>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <MX_CAN1_Init+0x64>)
 8001a2e:	f001 f80f 	bl	8002a50 <HAL_CAN_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001a38:	f000 fb38 	bl	80020ac <Error_Handler>
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20004190 	.word	0x20004190
 8001a44:	40006400 	.word	0x40006400

08001a48 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a21      	ldr	r2, [pc, #132]	; (8001aec <HAL_CAN_MspInit+0xa4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d13b      	bne.n	8001ae2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_CAN_MspInit+0xa8>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <HAL_CAN_MspInit+0xa8>)
 8001a74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_CAN_MspInit+0xa8>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_CAN_MspInit+0xa8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_CAN_MspInit+0xa8>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_CAN_MspInit+0xa8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	480d      	ldr	r0, [pc, #52]	; (8001af4 <HAL_CAN_MspInit+0xac>)
 8001abe:	f001 ff05 	bl	80038cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	2013      	movs	r0, #19
 8001ac8:	f001 fed6 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001acc:	2013      	movs	r0, #19
 8001ace:	f001 feef 	bl	80038b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	2014      	movs	r0, #20
 8001ad8:	f001 fece 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001adc:	2014      	movs	r0, #20
 8001ade:	f001 fee7 	bl	80038b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40006400 	.word	0x40006400
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001b20:	231b      	movs	r3, #27
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f001 f88a 	bl	8002c48 <HAL_CAN_ConfigFilter>
}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	; 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001b64:	231b      	movs	r3, #27
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	4619      	mov	r1, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f001 f868 	bl	8002c48 <HAL_CAN_ConfigFilter>
}
 8001b78:	bf00      	nop
 8001b7a:	3730      	adds	r7, #48	; 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001b90:	0d5b      	lsrs	r3, r3, #21
 8001b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b96:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 8001ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001baa:	4413      	add	r3, r2
 8001bac:	f107 0208 	add.w	r2, r7, #8
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f001 fa47 	bl	8003046 <HAL_CAN_GetRxMessage>
}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	; 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200041b8 	.word	0x200041b8

08001bc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001bd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <vApplicationGetIdleTaskMemory+0x30>)
 8001bda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000094 	.word	0x20000094
 8001bf4:	200000e8 	.word	0x200000e8

08001bf8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b0a8      	sub	sp, #160	; 0xa0
 8001bfc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <MX_FREERTOS_Init+0xc0>)
 8001c00:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001c04:	461d      	mov	r5, r3
 8001c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c12:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 ffe0 	bl	8005bde <osThreadCreate>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <MX_FREERTOS_Init+0xc4>)
 8001c22:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_FREERTOS_Init+0xc8>)
 8001c26:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001c2a:	461d      	mov	r5, r3
 8001c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8001c38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 ffcd 	bl	8005bde <osThreadCreate>
 8001c44:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MX_FREERTOS_Init+0xcc>)
 8001c4a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001c4e:	461d      	mov	r5, r3
 8001c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8001c5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 ffbb 	bl	8005bde <osThreadCreate>
 8001c68:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_FREERTOS_Init+0xd0>)
 8001c6e:	f107 0420 	add.w	r4, r7, #32
 8001c72:	461d      	mov	r5, r3
 8001c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 ffa9 	bl	8005bde <osThreadCreate>
 8001c8c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_FREERTOS_Init+0xd4>)
 8001c92:	1d3c      	adds	r4, r7, #4
 8001c94:	461d      	mov	r5, r3
 8001c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 ff99 	bl	8005bde <osThreadCreate>
 8001cac:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001cb0:	bf00      	nop
 8001cb2:	37a0      	adds	r7, #160	; 0xa0
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb8:	08008f04 	.word	0x08008f04
 8001cbc:	20004254 	.word	0x20004254
 8001cc0:	08008f2c 	.word	0x08008f2c
 8001cc4:	08008f54 	.word	0x08008f54
 8001cc8:	08008f7c 	.word	0x08008f7c
 8001ccc:	08008fa4 	.word	0x08008fa4

08001cd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f003 ffcc 	bl	8005c76 <osDelay>
 8001cde:	e7fb      	b.n	8001cd8 <StartDefaultTask+0x8>

08001ce0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a69      	ldr	r2, [pc, #420]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a62      	ldr	r2, [pc, #392]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d1c:	f043 0310 	orr.w	r3, r3, #16
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a5b      	ldr	r2, [pc, #364]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a54      	ldr	r2, [pc, #336]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b52      	ldr	r3, [pc, #328]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a4d      	ldr	r2, [pc, #308]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a46      	ldr	r2, [pc, #280]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d8c:	f043 0320 	orr.w	r3, r3, #32
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b44      	ldr	r3, [pc, #272]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a3f      	ldr	r2, [pc, #252]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <MX_GPIO_Init+0x1c4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001dc0:	4839      	ldr	r0, [pc, #228]	; (8001ea8 <MX_GPIO_Init+0x1c8>)
 8001dc2:	f001 ff2d 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	211e      	movs	r1, #30
 8001dca:	4837      	ldr	r0, [pc, #220]	; (8001ea8 <MX_GPIO_Init+0x1c8>)
 8001dcc:	f001 ff28 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd6:	4835      	ldr	r0, [pc, #212]	; (8001eac <MX_GPIO_Init+0x1cc>)
 8001dd8:	f001 ff22 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de2:	4833      	ldr	r0, [pc, #204]	; (8001eb0 <MX_GPIO_Init+0x1d0>)
 8001de4:	f001 ff1c 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 8001de8:	2320      	movs	r3, #32
 8001dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	482c      	ldr	r0, [pc, #176]	; (8001eac <MX_GPIO_Init+0x1cc>)
 8001dfc:	f001 fd66 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8001e00:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001e04:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	4823      	ldr	r0, [pc, #140]	; (8001ea8 <MX_GPIO_Init+0x1c8>)
 8001e1a:	f001 fd57 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 8001e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	481f      	ldr	r0, [pc, #124]	; (8001eb0 <MX_GPIO_Init+0x1d0>)
 8001e34:	f001 fd4a 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <MX_GPIO_Init+0x1d4>)
 8001e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	481b      	ldr	r0, [pc, #108]	; (8001eb8 <MX_GPIO_Init+0x1d8>)
 8001e4c:	f001 fd3e 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	4810      	ldr	r0, [pc, #64]	; (8001eac <MX_GPIO_Init+0x1cc>)
 8001e6a:	f001 fd2f 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8001e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	480a      	ldr	r0, [pc, #40]	; (8001eb0 <MX_GPIO_Init+0x1d0>)
 8001e88:	f001 fd20 	bl	80038cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2105      	movs	r1, #5
 8001e90:	2008      	movs	r0, #8
 8001e92:	f001 fcf1 	bl	8003878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e96:	2008      	movs	r0, #8
 8001e98:	f001 fd0a 	bl	80038b0 <HAL_NVIC_EnableIRQ>

}
 8001e9c:	bf00      	nop
 8001e9e:	3730      	adds	r7, #48	; 0x30
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40021800 	.word	0x40021800
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40021400 	.word	0x40021400
 8001eb4:	10110000 	.word	0x10110000
 8001eb8:	40020400 	.word	0x40020400

08001ebc <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d12b      	bne.n	8001f24 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8001ecc:	4817      	ldr	r0, [pc, #92]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8001ece:	f7ff fe13 	bl	8001af8 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8001ed2:	4a17      	ldr	r2, [pc, #92]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	6810      	ldr	r0, [r2, #0]
 8001eda:	6851      	ldr	r1, [r2, #4]
 8001edc:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8001ede:	7a3b      	ldrb	r3, [r7, #8]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	7a7b      	ldrb	r3, [r7, #9]
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001eec:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8001eee:	7abb      	ldrb	r3, [r7, #10]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	b21a      	sxth	r2, r3
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
 8001ef6:	b21b      	sxth	r3, r3
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001efc:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8001efe:	7b3b      	ldrb	r3, [r7, #12]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	7b7b      	ldrb	r3, [r7, #13]
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001f0e:	9201      	str	r2, [sp, #4]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4603      	mov	r3, r0
 8001f14:	460a      	mov	r2, r1
 8001f16:	2101      	movs	r1, #1
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <HAL_GPIO_EXTI_Callback+0x78>)
 8001f1a:	f005 f943 	bl	80071a4 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8001f20:	f7ff fe0c 	bl	8001b3c <can_filter_disable>


	}
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20004190 	.word	0x20004190
 8001f30:	200041b8 	.word	0x200041b8
 8001f34:	08008fc0 	.word	0x08008fc0

08001f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3c:	f000 fd46 	bl	80029cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f40:	f000 f822 	bl	8001f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f44:	f7ff fecc 	bl	8001ce0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001f48:	f7ff fd48 	bl	80019dc <MX_CAN1_Init>
  MX_TIM4_Init();
 8001f4c:	f000 fa42 	bl	80023d4 <MX_TIM4_Init>
  MX_TIM12_Init();
 8001f50:	f000 faa6 	bl	80024a0 <MX_TIM12_Init>
  MX_UART7_Init();
 8001f54:	f000 fc3e 	bl	80027d4 <MX_UART7_Init>
  MX_USART6_Init();
 8001f58:	f000 fc66 	bl	8002828 <MX_USART6_Init>
  MX_TIM14_Init();
 8001f5c:	f000 fb0a 	bl	8002574 <MX_TIM14_Init>
  MX_TIM13_Init();
 8001f60:	f000 fae4 	bl	800252c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8001f64:	f7ff fafc 	bl	8001560 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <main+0x48>)
 8001f6a:	f000 ff4d 	bl	8002e08 <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <main+0x4c>)
 8001f70:	f002 fb3b 	bl	80045ea <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001f74:	f7ff fe40 	bl	8001bf8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001f78:	f003 fe2a 	bl	8005bd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <main+0x44>
 8001f7e:	bf00      	nop
 8001f80:	20004190 	.word	0x20004190
 8001f84:	20004298 	.word	0x20004298

08001f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b094      	sub	sp, #80	; 0x50
 8001f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8e:	f107 0320 	add.w	r3, r7, #32
 8001f92:	2230      	movs	r2, #48	; 0x30
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f005 f854 	bl	8007044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <SystemClock_Config+0xd0>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a28      	ldr	r2, [pc, #160]	; (8002058 <SystemClock_Config+0xd0>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <SystemClock_Config+0xd0>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <SystemClock_Config+0xd4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <SystemClock_Config+0xd4>)
 8001fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <SystemClock_Config+0xd4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001ffc:	2306      	movs	r3, #6
 8001ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002000:	23a8      	movs	r3, #168	; 0xa8
 8002002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002004:	2302      	movs	r3, #2
 8002006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002008:	2304      	movs	r3, #4
 800200a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200c:	f107 0320 	add.w	r3, r7, #32
 8002010:	4618      	mov	r0, r3
 8002012:	f001 fe51 	bl	8003cb8 <HAL_RCC_OscConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800201c:	f000 f846 	bl	80020ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002020:	230f      	movs	r3, #15
 8002022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002024:	2302      	movs	r3, #2
 8002026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2102      	movs	r1, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f002 f8aa 	bl	8004198 <HAL_RCC_ClockConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800204a:	f000 f82f 	bl	80020ac <Error_Handler>
  }
}
 800204e:	bf00      	nop
 8002050:	3750      	adds	r7, #80	; 0x50
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000

08002060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0b      	ldr	r2, [pc, #44]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d109      	bne.n	8002086 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800207a:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 800207c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002080:	4808      	ldr	r0, [pc, #32]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002082:	f001 fde6 	bl	8003c52 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8002090:	f000 fcbe 	bl	8002a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40001c00 	.word	0x40001c00
 80020a0:	200002e8 	.word	0x200002e8
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40000c00 	.word	0x40000c00

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <Error_Handler+0x6>

080020b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_MspInit+0x54>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_MspInit+0x54>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_MspInit+0x54>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_MspInit+0x54>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_MspInit+0x54>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_MspInit+0x54>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	210f      	movs	r1, #15
 80020f6:	f06f 0001 	mvn.w	r0, #1
 80020fa:	f001 fbbd 	bl	8003878 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	; 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	2032      	movs	r0, #50	; 0x32
 8002122:	f001 fba9 	bl	8003878 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002126:	2032      	movs	r0, #50	; 0x32
 8002128:	f001 fbc2 	bl	80038b0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_InitTick+0xa4>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_InitTick+0xa4>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_InitTick+0xa4>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002148:	f107 0210 	add.w	r2, r7, #16
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f002 f9ec 	bl	8004530 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002158:	f002 f9c2 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 800215c:	4603      	mov	r3, r0
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <HAL_InitTick+0xa8>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9b      	lsrs	r3, r3, #18
 800216c:	3b01      	subs	r3, #1
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_InitTick+0xac>)
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_InitTick+0xb0>)
 8002174:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_InitTick+0xac>)
 8002178:	f240 32e7 	movw	r2, #999	; 0x3e7
 800217c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800217e:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_InitTick+0xac>)
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_InitTick+0xac>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_InitTick+0xac>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <HAL_InitTick+0xac>)
 8002192:	f002 f9ff 	bl	8004594 <HAL_TIM_Base_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d104      	bne.n	80021a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800219c:	4806      	ldr	r0, [pc, #24]	; (80021b8 <HAL_InitTick+0xac>)
 800219e:	f002 fa24 	bl	80045ea <HAL_TIM_Base_Start_IT>
 80021a2:	4603      	mov	r3, r0
 80021a4:	e000      	b.n	80021a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3730      	adds	r7, #48	; 0x30
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	431bde83 	.word	0x431bde83
 80021b8:	20004258 	.word	0x20004258
 80021bc:	40000c00 	.word	0x40000c00

080021c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <NMI_Handler+0x4>

080021c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <MemManage_Handler+0x4>

080021d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <BusFault_Handler+0x4>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <UsageFault_Handler+0x4>

080021de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80021f0:	2004      	movs	r0, #4
 80021f2:	f001 fd49 	bl	8003c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <CAN1_TX_IRQHandler+0x10>)
 8002202:	f001 f858 	bl	80032b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20004190 	.word	0x20004190

08002210 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <CAN1_RX0_IRQHandler+0x10>)
 8002216:	f001 f84e 	bl	80032b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20004190 	.word	0x20004190

08002224 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800222a:	f002 fa6b 	bl	8004704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20004298 	.word	0x20004298

08002238 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800223e:	f002 fa61 	bl	8004704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200042d8 	.word	0x200042d8

0800224c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <TIM5_IRQHandler+0x10>)
 8002252:	f002 fa57 	bl	8004704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20004258 	.word	0x20004258

08002260 <_read>:
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e00a      	b.n	8002288 <_read+0x28>
 8002272:	f3af 8000 	nop.w
 8002276:	4601      	mov	r1, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60ba      	str	r2, [r7, #8]
 800227e:	b2ca      	uxtb	r2, r1
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	dbf0      	blt.n	8002272 <_read+0x12>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_write>:
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e009      	b.n	80022c0 <_write+0x26>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fa7b 	bl	80027b0 <__io_putchar>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbf1      	blt.n	80022ac <_write+0x12>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_close>:
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_fstat>:
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	2300      	movs	r3, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_isatty>:
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	2301      	movs	r3, #1
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_lseek>:
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	2300      	movs	r3, #0
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <_sbrk>:
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <_sbrk+0x5c>)
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <_sbrk+0x60>)
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <_sbrk+0x22>
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <_sbrk+0x64>)
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <_sbrk+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d207      	bcs.n	800237c <_sbrk+0x40>
 800236c:	f004 fe38 	bl	8006fe0 <__errno>
 8002370:	4603      	mov	r3, r0
 8002372:	220c      	movs	r2, #12
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800237a:	e009      	b.n	8002390 <_sbrk+0x54>
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <_sbrk+0x64>)
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20030000 	.word	0x20030000
 800239c:	00000400 	.word	0x00000400
 80023a0:	200002ec 	.word	0x200002ec
 80023a4:	200043a0 	.word	0x200043a0

080023a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <SystemInit+0x28>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <SystemInit+0x28>)
 80023b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SystemInit+0x28>)
 80023be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023c2:	609a      	str	r2, [r3, #8]
#endif
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023da:	f107 0320 	add.w	r3, r7, #32
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]
 80023f2:	615a      	str	r2, [r3, #20]
 80023f4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80023f6:	4b28      	ldr	r3, [pc, #160]	; (8002498 <MX_TIM4_Init+0xc4>)
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <MX_TIM4_Init+0xc8>)
 80023fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80023fc:	4b26      	ldr	r3, [pc, #152]	; (8002498 <MX_TIM4_Init+0xc4>)
 80023fe:	2253      	movs	r2, #83	; 0x53
 8002400:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002402:	4b25      	ldr	r3, [pc, #148]	; (8002498 <MX_TIM4_Init+0xc4>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <MX_TIM4_Init+0xc4>)
 800240a:	f242 720f 	movw	r2, #9999	; 0x270f
 800240e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002410:	4b21      	ldr	r3, [pc, #132]	; (8002498 <MX_TIM4_Init+0xc4>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <MX_TIM4_Init+0xc4>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800241c:	481e      	ldr	r0, [pc, #120]	; (8002498 <MX_TIM4_Init+0xc4>)
 800241e:	f002 f908 	bl	8004632 <HAL_TIM_PWM_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002428:	f7ff fe40 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002434:	f107 0320 	add.w	r3, r7, #32
 8002438:	4619      	mov	r1, r3
 800243a:	4817      	ldr	r0, [pc, #92]	; (8002498 <MX_TIM4_Init+0xc4>)
 800243c:	f002 fdce 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002446:	f7ff fe31 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244a:	2360      	movs	r3, #96	; 0x60
 800244c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	4619      	mov	r1, r3
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <MX_TIM4_Init+0xc4>)
 8002464:	f002 fa56 	bl	8004914 <HAL_TIM_PWM_ConfigChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800246e:	f7ff fe1d 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	2208      	movs	r2, #8
 8002476:	4619      	mov	r1, r3
 8002478:	4807      	ldr	r0, [pc, #28]	; (8002498 <MX_TIM4_Init+0xc4>)
 800247a:	f002 fa4b 	bl	8004914 <HAL_TIM_PWM_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002484:	f7ff fe12 	bl	80020ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <MX_TIM4_Init+0xc4>)
 800248a:	f000 f92f 	bl	80026ec <HAL_TIM_MspPostInit>

}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20004044 	.word	0x20004044
 800249c:	40000800 	.word	0x40000800

080024a0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
 80024b4:	615a      	str	r2, [r3, #20]
 80024b6:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <MX_TIM12_Init+0x84>)
 80024ba:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <MX_TIM12_Init+0x88>)
 80024bc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <MX_TIM12_Init+0x84>)
 80024c0:	2223      	movs	r2, #35	; 0x23
 80024c2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <MX_TIM12_Init+0x84>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <MX_TIM12_Init+0x84>)
 80024cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80024d0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <MX_TIM12_Init+0x84>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <MX_TIM12_Init+0x84>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80024de:	4811      	ldr	r0, [pc, #68]	; (8002524 <MX_TIM12_Init+0x84>)
 80024e0:	f002 f8a7 	bl	8004632 <HAL_TIM_PWM_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80024ea:	f7ff fddf 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ee:	2360      	movs	r3, #96	; 0x60
 80024f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2200      	movs	r2, #0
 8002502:	4619      	mov	r1, r3
 8002504:	4807      	ldr	r0, [pc, #28]	; (8002524 <MX_TIM12_Init+0x84>)
 8002506:	f002 fa05 	bl	8004914 <HAL_TIM_PWM_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002510:	f7ff fdcc 	bl	80020ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <MX_TIM12_Init+0x84>)
 8002516:	f000 f8e9 	bl	80026ec <HAL_TIM_MspPostInit>

}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200041f8 	.word	0x200041f8
 8002528:	40001800 	.word	0x40001800

0800252c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_TIM13_Init+0x40>)
 8002532:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <MX_TIM13_Init+0x44>)
 8002534:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <MX_TIM13_Init+0x40>)
 8002538:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800253c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_TIM13_Init+0x40>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_TIM13_Init+0x40>)
 8002546:	f242 720f 	movw	r2, #9999	; 0x270f
 800254a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <MX_TIM13_Init+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_TIM13_Init+0x40>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_TIM13_Init+0x40>)
 800255a:	f002 f81b 	bl	8004594 <HAL_TIM_Base_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002564:	f7ff fda2 	bl	80020ac <Error_Handler>
  }

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20004298 	.word	0x20004298
 8002570:	40001c00 	.word	0x40001c00

08002574 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <MX_TIM14_Init+0x40>)
 800257a:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <MX_TIM14_Init+0x44>)
 800257c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <MX_TIM14_Init+0x40>)
 8002580:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002584:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <MX_TIM14_Init+0x40>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <MX_TIM14_Init+0x40>)
 800258e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002592:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <MX_TIM14_Init+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <MX_TIM14_Init+0x40>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025a0:	4804      	ldr	r0, [pc, #16]	; (80025b4 <MX_TIM14_Init+0x40>)
 80025a2:	f001 fff7 	bl	8004594 <HAL_TIM_Base_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80025ac:	f7ff fd7e 	bl	80020ac <Error_Handler>
  }

}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200042d8 	.word	0x200042d8
 80025b8:	40002000 	.word	0x40002000

080025bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a15      	ldr	r2, [pc, #84]	; (8002620 <HAL_TIM_PWM_MspInit+0x64>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10e      	bne.n	80025ec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_TIM_PWM_MspInit+0x68>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a13      	ldr	r2, [pc, #76]	; (8002624 <HAL_TIM_PWM_MspInit+0x68>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_TIM_PWM_MspInit+0x68>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80025ea:	e012      	b.n	8002612 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <HAL_TIM_PWM_MspInit+0x6c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10d      	bne.n	8002612 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_TIM_PWM_MspInit+0x68>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_TIM_PWM_MspInit+0x68>)
 8002600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002604:	6413      	str	r3, [r2, #64]	; 0x40
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <HAL_TIM_PWM_MspInit+0x68>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40000800 	.word	0x40000800
 8002624:	40023800 	.word	0x40023800
 8002628:	40001800 	.word	0x40001800

0800262c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <HAL_TIM_Base_MspInit+0xb4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d116      	bne.n	800266c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2105      	movs	r1, #5
 800265e:	202c      	movs	r0, #44	; 0x2c
 8002660:	f001 f90a 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002664:	202c      	movs	r0, #44	; 0x2c
 8002666:	f001 f923 	bl	80038b0 <HAL_NVIC_EnableIRQ>
 800266a:	e01a      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <HAL_TIM_Base_MspInit+0xbc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d115      	bne.n	80026a2 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_TIM_Base_MspInit+0xb8>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2105      	movs	r1, #5
 8002696:	202d      	movs	r0, #45	; 0x2d
 8002698:	f001 f8ee 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800269c:	202d      	movs	r0, #45	; 0x2d
 800269e:	f001 f907 	bl	80038b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <HAL_TIM_Base_MspInit+0xb4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d115      	bne.n	80026d8 <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_TIM_Base_MspInit+0xb8>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <HAL_TIM_Base_MspInit+0xb8>)
 80026b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ba:	6413      	str	r3, [r2, #64]	; 0x40
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_TIM_Base_MspInit+0xb8>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2101      	movs	r1, #1
 80026cc:	202c      	movs	r0, #44	; 0x2c
 80026ce:	f001 f8d3 	bl	8003878 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80026d2:	202c      	movs	r0, #44	; 0x2c
 80026d4:	f001 f8ec 	bl	80038b0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40001c00 	.word	0x40001c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40002000 	.word	0x40002000

080026ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a24      	ldr	r2, [pc, #144]	; (800279c <HAL_TIM_MspPostInit+0xb0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d11f      	bne.n	800274e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <HAL_TIM_MspPostInit+0xb4>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a22      	ldr	r2, [pc, #136]	; (80027a0 <HAL_TIM_MspPostInit+0xb4>)
 8002718:	f043 0308 	orr.w	r3, r3, #8
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_TIM_MspPostInit+0xb4>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 800272a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800272e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800273c:	2302      	movs	r3, #2
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4817      	ldr	r0, [pc, #92]	; (80027a4 <HAL_TIM_MspPostInit+0xb8>)
 8002748:	f001 f8c0 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800274c:	e022      	b.n	8002794 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_TIM_MspPostInit+0xbc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d11d      	bne.n	8002794 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_TIM_MspPostInit+0xb4>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_TIM_MspPostInit+0xb4>)
 8002762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002766:	6313      	str	r3, [r2, #48]	; 0x30
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_TIM_MspPostInit+0xb4>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002774:	2340      	movs	r3, #64	; 0x40
 8002776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002784:	2309      	movs	r3, #9
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4619      	mov	r1, r3
 800278e:	4807      	ldr	r0, [pc, #28]	; (80027ac <HAL_TIM_MspPostInit+0xc0>)
 8002790:	f001 f89c 	bl	80038cc <HAL_GPIO_Init>
}
 8002794:	bf00      	nop
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40000800 	.word	0x40000800
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020c00 	.word	0x40020c00
 80027a8:	40001800 	.word	0x40001800
 80027ac:	40021c00 	.word	0x40021c00

080027b0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 80027b8:	1d39      	adds	r1, r7, #4
 80027ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027be:	2201      	movs	r2, #1
 80027c0:	4803      	ldr	r0, [pc, #12]	; (80027d0 <__io_putchar+0x20>)
 80027c2:	f002 fce8 	bl	8005196 <HAL_UART_Transmit>

  return ch;
 80027c6:	687b      	ldr	r3, [r7, #4]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20004358 	.word	0x20004358

080027d4 <MX_UART7_Init>:
// For RM competition and latest A type board, use huart7
UART_HandleTypeDef husart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <MX_UART7_Init+0x4c>)
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <MX_UART7_Init+0x50>)
 80027dc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <MX_UART7_Init+0x4c>)
 80027e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027e4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <MX_UART7_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <MX_UART7_Init+0x4c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <MX_UART7_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <MX_UART7_Init+0x4c>)
 80027fa:	220c      	movs	r2, #12
 80027fc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <MX_UART7_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <MX_UART7_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <MX_UART7_Init+0x4c>)
 800280c:	f002 fc76 	bl	80050fc <HAL_UART_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002816:	f7ff fc49 	bl	80020ac <Error_Handler>
  }

}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20004358 	.word	0x20004358
 8002824:	40007800 	.word	0x40007800

08002828 <MX_USART6_Init>:

/* USART6 init function */
void MX_USART6_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0

  husart6.Instance = USART6;
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <MX_USART6_Init+0x4c>)
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <MX_USART6_Init+0x50>)
 8002830:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <MX_USART6_Init+0x4c>)
 8002834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002838:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = UART_WORDLENGTH_8B;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <MX_USART6_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = UART_STOPBITS_1;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <MX_USART6_Init+0x4c>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = UART_PARITY_NONE;
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <MX_USART6_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = UART_MODE_TX_RX;
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <MX_USART6_Init+0x4c>)
 800284e:	220c      	movs	r2, #12
 8002850:	615a      	str	r2, [r3, #20]
  husart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <MX_USART6_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  husart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <MX_USART6_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&husart6) != HAL_OK)
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <MX_USART6_Init+0x4c>)
 8002860:	f002 fc4c 	bl	80050fc <HAL_UART_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_USART6_Init+0x46>
  {
    Error_Handler();
 800286a:	f7ff fc1f 	bl	80020ac <Error_Handler>
  }

}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20004318 	.word	0x20004318
 8002878:	40011400 	.word	0x40011400

0800287c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a32      	ldr	r2, [pc, #200]	; (8002964 <HAL_UART_MspInit+0xe8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d12c      	bne.n	80028f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	4b31      	ldr	r3, [pc, #196]	; (8002968 <HAL_UART_MspInit+0xec>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a30      	ldr	r2, [pc, #192]	; (8002968 <HAL_UART_MspInit+0xec>)
 80028a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_UART_MspInit+0xec>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_UART_MspInit+0xec>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a29      	ldr	r2, [pc, #164]	; (8002968 <HAL_UART_MspInit+0xec>)
 80028c4:	f043 0310 	orr.w	r3, r3, #16
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <HAL_UART_MspInit+0xec>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80028d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80028e8:	2308      	movs	r3, #8
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4619      	mov	r1, r3
 80028f2:	481e      	ldr	r0, [pc, #120]	; (800296c <HAL_UART_MspInit+0xf0>)
 80028f4:	f000 ffea 	bl	80038cc <HAL_GPIO_Init>
  }

  if(uartHandle->Instance==USART6)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_UART_MspInit+0xf4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d12c      	bne.n	800295c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
	/* UART7 clock enable */
	__HAL_RCC_USART6_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_UART_MspInit+0xec>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_UART_MspInit+0xec>)
 800290c:	f043 0320 	orr.w	r3, r3, #32
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_UART_MspInit+0xec>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_UART_MspInit+0xec>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <HAL_UART_MspInit+0xec>)
 8002928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_UART_MspInit+0xec>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
	/**USART6 GPIO Configuration
	  PG14     ------> USART6_TX
	  PG9     ------> USART6_RX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800293a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800293e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002944:	2301      	movs	r3, #1
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800294c:	2308      	movs	r3, #8
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	4619      	mov	r1, r3
 8002956:	4807      	ldr	r0, [pc, #28]	; (8002974 <HAL_UART_MspInit+0xf8>)
 8002958:	f000 ffb8 	bl	80038cc <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 800295c:	bf00      	nop
 800295e:	3730      	adds	r7, #48	; 0x30
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40007800 	.word	0x40007800
 8002968:	40023800 	.word	0x40023800
 800296c:	40021000 	.word	0x40021000
 8002970:	40011400 	.word	0x40011400
 8002974:	40021800 	.word	0x40021800

08002978 <Reset_Handler>:
 8002978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b0 <LoopFillZerobss+0x14>
 800297c:	2100      	movs	r1, #0
 800297e:	e003      	b.n	8002988 <LoopCopyDataInit>

08002980 <CopyDataInit>:
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <LoopFillZerobss+0x18>)
 8002982:	585b      	ldr	r3, [r3, r1]
 8002984:	5043      	str	r3, [r0, r1]
 8002986:	3104      	adds	r1, #4

08002988 <LoopCopyDataInit>:
 8002988:	480b      	ldr	r0, [pc, #44]	; (80029b8 <LoopFillZerobss+0x1c>)
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <LoopFillZerobss+0x20>)
 800298c:	1842      	adds	r2, r0, r1
 800298e:	429a      	cmp	r2, r3
 8002990:	d3f6      	bcc.n	8002980 <CopyDataInit>
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <LoopFillZerobss+0x24>)
 8002994:	e002      	b.n	800299c <LoopFillZerobss>

08002996 <FillZerobss>:
 8002996:	2300      	movs	r3, #0
 8002998:	f842 3b04 	str.w	r3, [r2], #4

0800299c <LoopFillZerobss>:
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <LoopFillZerobss+0x28>)
 800299e:	429a      	cmp	r2, r3
 80029a0:	d3f9      	bcc.n	8002996 <FillZerobss>
 80029a2:	f7ff fd01 	bl	80023a8 <SystemInit>
 80029a6:	f004 fb21 	bl	8006fec <__libc_init_array>
 80029aa:	f7ff fac5 	bl	8001f38 <main>
 80029ae:	4770      	bx	lr
 80029b0:	20030000 	.word	0x20030000
 80029b4:	08009170 	.word	0x08009170
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000078 	.word	0x20000078
 80029c0:	20000078 	.word	0x20000078
 80029c4:	200043a0 	.word	0x200043a0

080029c8 <ADC_IRQHandler>:
 80029c8:	e7fe      	b.n	80029c8 <ADC_IRQHandler>
	...

080029cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <HAL_Init+0x40>)
 80029d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_Init+0x40>)
 80029e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_Init+0x40>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_Init+0x40>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f4:	2003      	movs	r0, #3
 80029f6:	f000 ff34 	bl	8003862 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7ff fb86 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a00:	f7ff fb58 	bl	80020b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00

08002a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x20>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_IncTick+0x24>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_IncTick+0x24>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000008 	.word	0x20000008
 8002a34:	20004398 	.word	0x20004398

08002a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_GetTick+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20004398 	.word	0x20004398

08002a50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0ed      	b.n	8002c3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe ffea 	bl	8001a48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0202 	bic.w	r2, r2, #2
 8002a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a84:	f7ff ffd8 	bl	8002a38 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a8a:	e012      	b.n	8002ab2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a8c:	f7ff ffd4 	bl	8002a38 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b0a      	cmp	r3, #10
 8002a98:	d90b      	bls.n	8002ab2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0c5      	b.n	8002c3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e5      	bne.n	8002a8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad0:	f7ff ffb2 	bl	8002a38 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ad6:	e012      	b.n	8002afe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ad8:	f7ff ffae 	bl	8002a38 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b0a      	cmp	r3, #10
 8002ae4:	d90b      	bls.n	8002afe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2205      	movs	r2, #5
 8002af6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e09f      	b.n	8002c3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0e5      	beq.n	8002ad8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7e1b      	ldrb	r3, [r3, #24]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d108      	bne.n	8002b26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e007      	b.n	8002b36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7e5b      	ldrb	r3, [r3, #25]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d108      	bne.n	8002b50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e007      	b.n	8002b60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7e9b      	ldrb	r3, [r3, #26]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d108      	bne.n	8002b7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0220 	orr.w	r2, r2, #32
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e007      	b.n	8002b8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0220 	bic.w	r2, r2, #32
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7edb      	ldrb	r3, [r3, #27]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d108      	bne.n	8002ba4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0210 	bic.w	r2, r2, #16
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e007      	b.n	8002bb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0210 	orr.w	r2, r2, #16
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7f1b      	ldrb	r3, [r3, #28]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d108      	bne.n	8002bce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0208 	orr.w	r2, r2, #8
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e007      	b.n	8002bde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0208 	bic.w	r2, r2, #8
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7f5b      	ldrb	r3, [r3, #29]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d108      	bne.n	8002bf8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0204 	orr.w	r2, r2, #4
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e007      	b.n	8002c08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	ea42 0103 	orr.w	r1, r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	1e5a      	subs	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d003      	beq.n	8002c6e <HAL_CAN_ConfigFilter+0x26>
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	f040 80be 	bne.w	8002dea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002c6e:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_CAN_ConfigFilter+0x1bc>)
 8002c70:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2201      	movs	r2, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d123      	bne.n	8002d18 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002cf2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3248      	adds	r2, #72	; 0x48
 8002cf8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d0e:	6979      	ldr	r1, [r7, #20]
 8002d10:	3348      	adds	r3, #72	; 0x48
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d122      	bne.n	8002d66 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3248      	adds	r2, #72	; 0x48
 8002d46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d5c:	6979      	ldr	r1, [r7, #20]
 8002d5e:	3348      	adds	r3, #72	; 0x48
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	401a      	ands	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d80:	e007      	b.n	8002d92 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	401a      	ands	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002dac:	e007      	b.n	8002dbe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d107      	bne.n	8002dd6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ddc:	f023 0201 	bic.w	r2, r3, #1
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e006      	b.n	8002df8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40006400 	.word	0x40006400

08002e08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d12e      	bne.n	8002e7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e34:	f7ff fe00 	bl	8002a38 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e3a:	e012      	b.n	8002e62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e3c:	f7ff fdfc 	bl	8002a38 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b0a      	cmp	r3, #10
 8002e48:	d90b      	bls.n	8002e62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2205      	movs	r2, #5
 8002e5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e012      	b.n	8002e88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e5      	bne.n	8002e3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e006      	b.n	8002e88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	; 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eae:	7ffb      	ldrb	r3, [r7, #31]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d003      	beq.n	8002ebc <HAL_CAN_AddTxMessage+0x2c>
 8002eb4:	7ffb      	ldrb	r3, [r7, #31]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	f040 80b8 	bne.w	800302c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80a0 	beq.w	800301c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	0e1b      	lsrs	r3, r3, #24
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d907      	bls.n	8002efc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e09e      	b.n	800303a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002efc:	2201      	movs	r2, #1
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	409a      	lsls	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10d      	bne.n	8002f2a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f18:	68f9      	ldr	r1, [r7, #12]
 8002f1a:	6809      	ldr	r1, [r1, #0]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3318      	adds	r3, #24
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	440b      	add	r3, r1
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e00f      	b.n	8002f4a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f34:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f3e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3318      	adds	r3, #24
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	440b      	add	r3, r1
 8002f48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3318      	adds	r3, #24
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	440b      	add	r3, r1
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	7d1b      	ldrb	r3, [r3, #20]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d111      	bne.n	8002f8a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	4413      	add	r3, r2
 8002f72:	3304      	adds	r3, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	6811      	ldr	r1, [r2, #0]
 8002f7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3318      	adds	r3, #24
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	440b      	add	r3, r1
 8002f86:	3304      	adds	r3, #4
 8002f88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3307      	adds	r3, #7
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	061a      	lsls	r2, r3, #24
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3306      	adds	r3, #6
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3305      	adds	r3, #5
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	3204      	adds	r2, #4
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	4610      	mov	r0, r2
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	6811      	ldr	r1, [r2, #0]
 8002fb2:	ea43 0200 	orr.w	r2, r3, r0
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	440b      	add	r3, r1
 8002fbc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002fc0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3303      	adds	r3, #3
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	061a      	lsls	r2, r3, #24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3302      	adds	r3, #2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	6811      	ldr	r1, [r2, #0]
 8002fe8:	ea43 0200 	orr.w	r2, r3, r0
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ff6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3318      	adds	r3, #24
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	4413      	add	r3, r2
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	6811      	ldr	r1, [r2, #0]
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3318      	adds	r3, #24
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	440b      	add	r3, r1
 8003016:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e00e      	b.n	800303a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e006      	b.n	800303a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003046:	b480      	push	{r7}
 8003048:	b087      	sub	sp, #28
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800305a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d003      	beq.n	800306a <HAL_CAN_GetRxMessage+0x24>
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b02      	cmp	r3, #2
 8003066:	f040 80f3 	bne.w	8003250 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10e      	bne.n	800308e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d116      	bne.n	80030ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0e7      	b.n	800325e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0d8      	b.n	800325e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	331b      	adds	r3, #27
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	4413      	add	r3, r2
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0204 	and.w	r2, r3, #4
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10c      	bne.n	80030e4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	331b      	adds	r3, #27
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	4413      	add	r3, r2
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0d5b      	lsrs	r3, r3, #21
 80030da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e00b      	b.n	80030fc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	331b      	adds	r3, #27
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	4413      	add	r3, r2
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	331b      	adds	r3, #27
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	4413      	add	r3, r2
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0202 	and.w	r2, r3, #2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	331b      	adds	r3, #27
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	4413      	add	r3, r2
 800311e:	3304      	adds	r3, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	331b      	adds	r3, #27
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	4413      	add	r3, r2
 8003136:	3304      	adds	r3, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	b2da      	uxtb	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	331b      	adds	r3, #27
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	4413      	add	r3, r2
 800314e:	3304      	adds	r3, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	b29a      	uxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	4413      	add	r3, r2
 8003164:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	4413      	add	r3, r2
 800317a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	0a1a      	lsrs	r2, r3, #8
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4413      	add	r3, r2
 8003194:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0c1a      	lsrs	r2, r3, #16
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	3302      	adds	r3, #2
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0e1a      	lsrs	r2, r3, #24
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	3303      	adds	r3, #3
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	3304      	adds	r3, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	4413      	add	r3, r2
 80031e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0a1a      	lsrs	r2, r3, #8
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	3305      	adds	r3, #5
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0c1a      	lsrs	r2, r3, #16
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	3306      	adds	r3, #6
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	4413      	add	r3, r2
 8003214:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0e1a      	lsrs	r2, r3, #24
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	3307      	adds	r3, #7
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d108      	bne.n	800323c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	e007      	b.n	800324c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0220 	orr.w	r2, r2, #32
 800324a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e006      	b.n	800325e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d002      	beq.n	8003288 <HAL_CAN_ActivateNotification+0x1e>
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d109      	bne.n	800329c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6959      	ldr	r1, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e006      	b.n	80032aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b08a      	sub	sp, #40	; 0x28
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d07c      	beq.n	80033f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d023      	beq.n	800334e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f97d 	bl	8003618 <HAL_CAN_TxMailbox0CompleteCallback>
 800331e:	e016      	b.n	800334e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e00c      	b.n	800334e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
 8003346:	e002      	b.n	800334e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f983 	bl	8003654 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d024      	beq.n	80033a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003360:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f95d 	bl	800362c <HAL_CAN_TxMailbox1CompleteCallback>
 8003372:	e016      	b.n	80033a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	e00c      	b.n	80033a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	e002      	b.n	80033a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f963 	bl	8003668 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d024      	beq.n	80033f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f93d 	bl	8003640 <HAL_CAN_TxMailbox2CompleteCallback>
 80033c6:	e016      	b.n	80033f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	e00c      	b.n	80033f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
 80033ee:	e002      	b.n	80033f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f943 	bl	800367c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00c      	beq.n	800341a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003410:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2210      	movs	r2, #16
 8003418:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00b      	beq.n	800343c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2208      	movs	r2, #8
 8003434:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f92a 	bl	8003690 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fe fb93 	bl	8001b80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00c      	beq.n	800347e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003474:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2210      	movs	r2, #16
 800347c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00b      	beq.n	80034a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d006      	beq.n	80034a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2208      	movs	r2, #8
 8003498:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f90c 	bl	80036b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f8f3 	bl	80036a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00b      	beq.n	80034e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d006      	beq.n	80034e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2210      	movs	r2, #16
 80034d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8f6 	bl	80036cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2208      	movs	r2, #8
 80034fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8ef 	bl	80036e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d075      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d06c      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	f043 0304 	orr.w	r3, r3, #4
 8003568:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003570:	2b00      	cmp	r3, #0
 8003572:	d03d      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800357a:	2b00      	cmp	r3, #0
 800357c:	d038      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003584:	2b30      	cmp	r3, #48	; 0x30
 8003586:	d017      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x302>
 8003588:	2b30      	cmp	r3, #48	; 0x30
 800358a:	d804      	bhi.n	8003596 <HAL_CAN_IRQHandler+0x2e0>
 800358c:	2b10      	cmp	r3, #16
 800358e:	d009      	beq.n	80035a4 <HAL_CAN_IRQHandler+0x2ee>
 8003590:	2b20      	cmp	r3, #32
 8003592:	d00c      	beq.n	80035ae <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003594:	e024      	b.n	80035e0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003596:	2b50      	cmp	r3, #80	; 0x50
 8003598:	d018      	beq.n	80035cc <HAL_CAN_IRQHandler+0x316>
 800359a:	2b60      	cmp	r3, #96	; 0x60
 800359c:	d01b      	beq.n	80035d6 <HAL_CAN_IRQHandler+0x320>
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d00f      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x30c>
            break;
 80035a2:	e01d      	b.n	80035e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f043 0308 	orr.w	r3, r3, #8
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ac:	e018      	b.n	80035e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	f043 0310 	orr.w	r3, r3, #16
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035b6:	e013      	b.n	80035e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	f043 0320 	orr.w	r3, r3, #32
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035c0:	e00e      	b.n	80035e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ca:	e009      	b.n	80035e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035d4:	e004      	b.n	80035e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2204      	movs	r2, #4
 80035f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f872 	bl	80036f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003610:	bf00      	nop
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373a:	4a04      	ldr	r2, [pc, #16]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	60d3      	str	r3, [r2, #12]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <__NVIC_EnableIRQ+0x38>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	; (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	; (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
         );
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff4c 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800388a:	f7ff ff61 	bl	8003750 <__NVIC_GetPriorityGrouping>
 800388e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	6978      	ldr	r0, [r7, #20]
 8003896:	f7ff ffb1 	bl	80037fc <NVIC_EncodePriority>
 800389a:	4602      	mov	r2, r0
 800389c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ff80 	bl	80037a8 <__NVIC_SetPriority>
}
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ff54 	bl	800376c <__NVIC_EnableIRQ>
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	e177      	b.n	8003bd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038e8:	2201      	movs	r2, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	f040 8166 	bne.w	8003bd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d00b      	beq.n	8003926 <HAL_GPIO_Init+0x5a>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d007      	beq.n	8003926 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800391a:	2b11      	cmp	r3, #17
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b12      	cmp	r3, #18
 8003924:	d130      	bne.n	8003988 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800395c:	2201      	movs	r2, #1
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 0201 	and.w	r2, r3, #1
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	2203      	movs	r2, #3
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0xfc>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b12      	cmp	r3, #18
 80039c6:	d123      	bne.n	8003a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	08da      	lsrs	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3208      	adds	r2, #8
 80039d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	220f      	movs	r2, #15
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	08da      	lsrs	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3208      	adds	r2, #8
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80c0 	beq.w	8003bd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	4b65      	ldr	r3, [pc, #404]	; (8003bec <HAL_GPIO_Init+0x320>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4a64      	ldr	r2, [pc, #400]	; (8003bec <HAL_GPIO_Init+0x320>)
 8003a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44
 8003a62:	4b62      	ldr	r3, [pc, #392]	; (8003bec <HAL_GPIO_Init+0x320>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6e:	4a60      	ldr	r2, [pc, #384]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3302      	adds	r3, #2
 8003a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a57      	ldr	r2, [pc, #348]	; (8003bf4 <HAL_GPIO_Init+0x328>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d037      	beq.n	8003b0a <HAL_GPIO_Init+0x23e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a56      	ldr	r2, [pc, #344]	; (8003bf8 <HAL_GPIO_Init+0x32c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d031      	beq.n	8003b06 <HAL_GPIO_Init+0x23a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a55      	ldr	r2, [pc, #340]	; (8003bfc <HAL_GPIO_Init+0x330>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02b      	beq.n	8003b02 <HAL_GPIO_Init+0x236>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_GPIO_Init+0x334>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d025      	beq.n	8003afe <HAL_GPIO_Init+0x232>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a53      	ldr	r2, [pc, #332]	; (8003c04 <HAL_GPIO_Init+0x338>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <HAL_GPIO_Init+0x22e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_GPIO_Init+0x33c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d019      	beq.n	8003af6 <HAL_GPIO_Init+0x22a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a51      	ldr	r2, [pc, #324]	; (8003c0c <HAL_GPIO_Init+0x340>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0x226>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a50      	ldr	r2, [pc, #320]	; (8003c10 <HAL_GPIO_Init+0x344>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00d      	beq.n	8003aee <HAL_GPIO_Init+0x222>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4f      	ldr	r2, [pc, #316]	; (8003c14 <HAL_GPIO_Init+0x348>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <HAL_GPIO_Init+0x21e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4e      	ldr	r2, [pc, #312]	; (8003c18 <HAL_GPIO_Init+0x34c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_GPIO_Init+0x21a>
 8003ae2:	2309      	movs	r3, #9
 8003ae4:	e012      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003ae6:	230a      	movs	r3, #10
 8003ae8:	e010      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003aea:	2308      	movs	r3, #8
 8003aec:	e00e      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003aee:	2307      	movs	r3, #7
 8003af0:	e00c      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003af2:	2306      	movs	r3, #6
 8003af4:	e00a      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003af6:	2305      	movs	r3, #5
 8003af8:	e008      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e006      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003afe:	2303      	movs	r3, #3
 8003b00:	e004      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e002      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_GPIO_Init+0x240>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	f002 0203 	and.w	r2, r2, #3
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	4093      	lsls	r3, r2
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b1c:	4934      	ldr	r1, [pc, #208]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	3302      	adds	r3, #2
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b2a:	4b3c      	ldr	r3, [pc, #240]	; (8003c1c <HAL_GPIO_Init+0x350>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b4e:	4a33      	ldr	r2, [pc, #204]	; (8003c1c <HAL_GPIO_Init+0x350>)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b54:	4b31      	ldr	r3, [pc, #196]	; (8003c1c <HAL_GPIO_Init+0x350>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <HAL_GPIO_Init+0x350>)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <HAL_GPIO_Init+0x350>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ba2:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <HAL_GPIO_Init+0x350>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba8:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <HAL_GPIO_Init+0x350>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bcc:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <HAL_GPIO_Init+0x350>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	f67f ae84 	bls.w	80038e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003be0:	bf00      	nop
 8003be2:	3724      	adds	r7, #36	; 0x24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	40020000 	.word	0x40020000
 8003bf8:	40020400 	.word	0x40020400
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	40020c00 	.word	0x40020c00
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40021400 	.word	0x40021400
 8003c0c:	40021800 	.word	0x40021800
 8003c10:	40021c00 	.word	0x40021c00
 8003c14:	40022000 	.word	0x40022000
 8003c18:	40022400 	.word	0x40022400
 8003c1c:	40013c00 	.word	0x40013c00

08003c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c30:	787b      	ldrb	r3, [r7, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c3c:	e003      	b.n	8003c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	041a      	lsls	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	401a      	ands	r2, r3
 8003c66:	887b      	ldrh	r3, [r7, #2]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d104      	bne.n	8003c76 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c6c:	887b      	ldrh	r3, [r7, #2]
 8003c6e:	041a      	lsls	r2, r3, #16
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003c74:	e002      	b.n	8003c7c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	619a      	str	r2, [r3, #24]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d006      	beq.n	8003cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe f908 	bl	8001ebc <HAL_GPIO_EXTI_Callback>
  }
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40013c00 	.word	0x40013c00

08003cb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e25b      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d075      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd6:	4ba3      	ldr	r3, [pc, #652]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d00c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ce2:	4ba0      	ldr	r3, [pc, #640]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d112      	bne.n	8003d14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cee:	4b9d      	ldr	r3, [pc, #628]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	4b99      	ldr	r3, [pc, #612]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d05b      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x108>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d157      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e236      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCC_OscConfig+0x74>
 8003d1e:	4b91      	ldr	r3, [pc, #580]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a90      	ldr	r2, [pc, #576]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e01d      	b.n	8003d68 <HAL_RCC_OscConfig+0xb0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x98>
 8003d36:	4b8b      	ldr	r3, [pc, #556]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a8a      	ldr	r2, [pc, #552]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a87      	ldr	r2, [pc, #540]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0xb0>
 8003d50:	4b84      	ldr	r3, [pc, #528]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a83      	ldr	r2, [pc, #524]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b81      	ldr	r3, [pc, #516]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a80      	ldr	r2, [pc, #512]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d013      	beq.n	8003d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fe fe62 	bl	8002a38 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fe fe5e 	bl	8002a38 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1fb      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	4b76      	ldr	r3, [pc, #472]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0xc0>
 8003d96:	e014      	b.n	8003dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fe fe4e 	bl	8002a38 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da0:	f7fe fe4a 	bl	8002a38 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e1e7      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db2:	4b6c      	ldr	r3, [pc, #432]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0xe8>
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d063      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dda:	4b62      	ldr	r3, [pc, #392]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d11c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de6:	4b5f      	ldr	r3, [pc, #380]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d116      	bne.n	8003e20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df2:	4b5c      	ldr	r3, [pc, #368]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_RCC_OscConfig+0x152>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e1bb      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0a:	4b56      	ldr	r3, [pc, #344]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4952      	ldr	r1, [pc, #328]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	e03a      	b.n	8003e96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e28:	4b4f      	ldr	r3, [pc, #316]	; (8003f68 <HAL_RCC_OscConfig+0x2b0>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fe fe03 	bl	8002a38 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e36:	f7fe fdff 	bl	8002a38 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e19c      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e48:	4b46      	ldr	r3, [pc, #280]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e54:	4b43      	ldr	r3, [pc, #268]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4940      	ldr	r1, [pc, #256]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]
 8003e68:	e015      	b.n	8003e96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6a:	4b3f      	ldr	r3, [pc, #252]	; (8003f68 <HAL_RCC_OscConfig+0x2b0>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe fde2 	bl	8002a38 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e78:	f7fe fdde 	bl	8002a38 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e17b      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8a:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d030      	beq.n	8003f04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d016      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eaa:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <HAL_RCC_OscConfig+0x2b4>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fe fdc2 	bl	8002a38 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb8:	f7fe fdbe 	bl	8002a38 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e15b      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eca:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x200>
 8003ed6:	e015      	b.n	8003f04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed8:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_OscConfig+0x2b4>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ede:	f7fe fdab 	bl	8002a38 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee6:	f7fe fda7 	bl	8002a38 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e144      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef8:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80a0 	beq.w	8004052 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f12:	2300      	movs	r3, #0
 8003f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10f      	bne.n	8003f42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6413      	str	r3, [r2, #64]	; 0x40
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_OscConfig+0x2b8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d121      	bne.n	8003f92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_RCC_OscConfig+0x2b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a07      	ldr	r2, [pc, #28]	; (8003f70 <HAL_RCC_OscConfig+0x2b8>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5a:	f7fe fd6d 	bl	8002a38 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f60:	e011      	b.n	8003f86 <HAL_RCC_OscConfig+0x2ce>
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
 8003f68:	42470000 	.word	0x42470000
 8003f6c:	42470e80 	.word	0x42470e80
 8003f70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f74:	f7fe fd60 	bl	8002a38 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e0fd      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f86:	4b81      	ldr	r3, [pc, #516]	; (800418c <HAL_RCC_OscConfig+0x4d4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x2f0>
 8003f9a:	4b7d      	ldr	r3, [pc, #500]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	4a7c      	ldr	r2, [pc, #496]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa6:	e01c      	b.n	8003fe2 <HAL_RCC_OscConfig+0x32a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d10c      	bne.n	8003fca <HAL_RCC_OscConfig+0x312>
 8003fb0:	4b77      	ldr	r3, [pc, #476]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a76      	ldr	r2, [pc, #472]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003fb6:	f043 0304 	orr.w	r3, r3, #4
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	4b74      	ldr	r3, [pc, #464]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	4a73      	ldr	r2, [pc, #460]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc8:	e00b      	b.n	8003fe2 <HAL_RCC_OscConfig+0x32a>
 8003fca:	4b71      	ldr	r3, [pc, #452]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	4a70      	ldr	r2, [pc, #448]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd6:	4b6e      	ldr	r3, [pc, #440]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	4a6d      	ldr	r2, [pc, #436]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8003fdc:	f023 0304 	bic.w	r3, r3, #4
 8003fe0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d015      	beq.n	8004016 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fea:	f7fe fd25 	bl	8002a38 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fe fd21 	bl	8002a38 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e0bc      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004008:	4b61      	ldr	r3, [pc, #388]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ee      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x33a>
 8004014:	e014      	b.n	8004040 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004016:	f7fe fd0f 	bl	8002a38 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401c:	e00a      	b.n	8004034 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fe fd0b 	bl	8002a38 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	; 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0a6      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004034:	4b56      	ldr	r3, [pc, #344]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ee      	bne.n	800401e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d105      	bne.n	8004052 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004046:	4b52      	ldr	r3, [pc, #328]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	4a51      	ldr	r2, [pc, #324]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 800404c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004050:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8092 	beq.w	8004180 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800405c:	4b4c      	ldr	r3, [pc, #304]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b08      	cmp	r3, #8
 8004066:	d05c      	beq.n	8004122 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d141      	bne.n	80040f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004070:	4b48      	ldr	r3, [pc, #288]	; (8004194 <HAL_RCC_OscConfig+0x4dc>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004076:	f7fe fcdf 	bl	8002a38 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407e:	f7fe fcdb 	bl	8002a38 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e078      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004090:	4b3f      	ldr	r3, [pc, #252]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	019b      	lsls	r3, r3, #6
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	3b01      	subs	r3, #1
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	061b      	lsls	r3, r3, #24
 80040c0:	4933      	ldr	r1, [pc, #204]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c6:	4b33      	ldr	r3, [pc, #204]	; (8004194 <HAL_RCC_OscConfig+0x4dc>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe fcb4 	bl	8002a38 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fe fcb0 	bl	8002a38 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e04d      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b2a      	ldr	r3, [pc, #168]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x41c>
 80040f2:	e045      	b.n	8004180 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <HAL_RCC_OscConfig+0x4dc>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fe fc9d 	bl	8002a38 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004102:	f7fe fc99 	bl	8002a38 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e036      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f0      	bne.n	8004102 <HAL_RCC_OscConfig+0x44a>
 8004120:	e02e      	b.n	8004180 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e029      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <HAL_RCC_OscConfig+0x4d8>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	429a      	cmp	r2, r3
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d115      	bne.n	800417c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004156:	4013      	ands	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800415c:	4293      	cmp	r3, r2
 800415e:	d10d      	bne.n	800417c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d106      	bne.n	800417c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40007000 	.word	0x40007000
 8004190:	40023800 	.word	0x40023800
 8004194:	42470060 	.word	0x42470060

08004198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0cc      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ac:	4b68      	ldr	r3, [pc, #416]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d90c      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b65      	ldr	r3, [pc, #404]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b63      	ldr	r3, [pc, #396]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0b8      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041ec:	4b59      	ldr	r3, [pc, #356]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a58      	ldr	r2, [pc, #352]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004204:	4b53      	ldr	r3, [pc, #332]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a52      	ldr	r2, [pc, #328]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800420e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004210:	4b50      	ldr	r3, [pc, #320]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	494d      	ldr	r1, [pc, #308]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d044      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b47      	ldr	r3, [pc, #284]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d119      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e07f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d003      	beq.n	8004256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004252:	2b03      	cmp	r3, #3
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004256:	4b3f      	ldr	r3, [pc, #252]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004266:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e067      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004276:	4b37      	ldr	r3, [pc, #220]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f023 0203 	bic.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4934      	ldr	r1, [pc, #208]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004288:	f7fe fbd6 	bl	8002a38 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004290:	f7fe fbd2 	bl	8002a38 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e04f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 020c 	and.w	r2, r3, #12
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1eb      	bne.n	8004290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d20c      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e032      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4916      	ldr	r1, [pc, #88]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	490e      	ldr	r1, [pc, #56]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431e:	f000 f821 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 8004322:	4601      	mov	r1, r0
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	5cd3      	ldrb	r3, [r2, r3]
 8004332:	fa21 f303 	lsr.w	r3, r1, r3
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd fee4 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40023c00 	.word	0x40023c00
 8004354:	40023800 	.word	0x40023800
 8004358:	08009068 	.word	0x08009068
 800435c:	20000000 	.word	0x20000000
 8004360:	20000004 	.word	0x20000004

08004364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	2300      	movs	r3, #0
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800437a:	4b50      	ldr	r3, [pc, #320]	; (80044bc <HAL_RCC_GetSysClockFreq+0x158>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b04      	cmp	r3, #4
 8004384:	d007      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x32>
 8004386:	2b08      	cmp	r3, #8
 8004388:	d008      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x38>
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 808d 	bne.w	80044aa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004390:	4b4b      	ldr	r3, [pc, #300]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004392:	60bb      	str	r3, [r7, #8]
       break;
 8004394:	e08c      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004396:	4b4b      	ldr	r3, [pc, #300]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004398:	60bb      	str	r3, [r7, #8]
      break;
 800439a:	e089      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800439c:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCC_GetSysClockFreq+0x158>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a6:	4b45      	ldr	r3, [pc, #276]	; (80044bc <HAL_RCC_GetSysClockFreq+0x158>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d023      	beq.n	80043fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	4b42      	ldr	r3, [pc, #264]	; (80044bc <HAL_RCC_GetSysClockFreq+0x158>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	f04f 0400 	mov.w	r4, #0
 80043bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	ea03 0501 	and.w	r5, r3, r1
 80043c8:	ea04 0602 	and.w	r6, r4, r2
 80043cc:	4a3d      	ldr	r2, [pc, #244]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80043ce:	fb02 f106 	mul.w	r1, r2, r6
 80043d2:	2200      	movs	r2, #0
 80043d4:	fb02 f205 	mul.w	r2, r2, r5
 80043d8:	440a      	add	r2, r1
 80043da:	493a      	ldr	r1, [pc, #232]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80043dc:	fba5 0101 	umull	r0, r1, r5, r1
 80043e0:	1853      	adds	r3, r2, r1
 80043e2:	4619      	mov	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f04f 0400 	mov.w	r4, #0
 80043ea:	461a      	mov	r2, r3
 80043ec:	4623      	mov	r3, r4
 80043ee:	f7fc fbeb 	bl	8000bc8 <__aeabi_uldivmod>
 80043f2:	4603      	mov	r3, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e049      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fa:	4b30      	ldr	r3, [pc, #192]	; (80044bc <HAL_RCC_GetSysClockFreq+0x158>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	f04f 0400 	mov.w	r4, #0
 8004404:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	ea03 0501 	and.w	r5, r3, r1
 8004410:	ea04 0602 	and.w	r6, r4, r2
 8004414:	4629      	mov	r1, r5
 8004416:	4632      	mov	r2, r6
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f04f 0400 	mov.w	r4, #0
 8004420:	0154      	lsls	r4, r2, #5
 8004422:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004426:	014b      	lsls	r3, r1, #5
 8004428:	4619      	mov	r1, r3
 800442a:	4622      	mov	r2, r4
 800442c:	1b49      	subs	r1, r1, r5
 800442e:	eb62 0206 	sbc.w	r2, r2, r6
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	f04f 0400 	mov.w	r4, #0
 800443a:	0194      	lsls	r4, r2, #6
 800443c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004440:	018b      	lsls	r3, r1, #6
 8004442:	1a5b      	subs	r3, r3, r1
 8004444:	eb64 0402 	sbc.w	r4, r4, r2
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	00e2      	lsls	r2, r4, #3
 8004452:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004456:	00d9      	lsls	r1, r3, #3
 8004458:	460b      	mov	r3, r1
 800445a:	4614      	mov	r4, r2
 800445c:	195b      	adds	r3, r3, r5
 800445e:	eb44 0406 	adc.w	r4, r4, r6
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	02a2      	lsls	r2, r4, #10
 800446c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004470:	0299      	lsls	r1, r3, #10
 8004472:	460b      	mov	r3, r1
 8004474:	4614      	mov	r4, r2
 8004476:	4618      	mov	r0, r3
 8004478:	4621      	mov	r1, r4
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f04f 0400 	mov.w	r4, #0
 8004480:	461a      	mov	r2, r3
 8004482:	4623      	mov	r3, r4
 8004484:	f7fc fba0 	bl	8000bc8 <__aeabi_uldivmod>
 8004488:	4603      	mov	r3, r0
 800448a:	460c      	mov	r4, r1
 800448c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_GetSysClockFreq+0x158>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	0c1b      	lsrs	r3, r3, #16
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	3301      	adds	r3, #1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	60bb      	str	r3, [r7, #8]
      break;
 80044a8:	e002      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80044ac:	60bb      	str	r3, [r7, #8]
      break;
 80044ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044b0:	68bb      	ldr	r3, [r7, #8]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800
 80044c0:	00f42400 	.word	0x00f42400
 80044c4:	00b71b00 	.word	0x00b71b00

080044c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000000 	.word	0x20000000

080044e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044e4:	f7ff fff0 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 80044e8:	4601      	mov	r1, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0a9b      	lsrs	r3, r3, #10
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4a03      	ldr	r2, [pc, #12]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f6:	5cd3      	ldrb	r3, [r2, r3]
 80044f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	08009078 	.word	0x08009078

08004508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800450c:	f7ff ffdc 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 8004510:	4601      	mov	r1, r0
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0b5b      	lsrs	r3, r3, #13
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4a03      	ldr	r2, [pc, #12]	; (800452c <HAL_RCC_GetPCLK2Freq+0x24>)
 800451e:	5cd3      	ldrb	r3, [r2, r3]
 8004520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	08009078 	.word	0x08009078

08004530 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	220f      	movs	r2, #15
 800453e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 0203 	and.w	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	08db      	lsrs	r3, r3, #3
 800456a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_RCC_GetClockConfig+0x60>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 020f 	and.w	r2, r3, #15
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	601a      	str	r2, [r3, #0]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	40023c00 	.word	0x40023c00

08004594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e01d      	b.n	80045e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fe f836 	bl	800262c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f000 fa8c 	bl	8004af0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d007      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e01d      	b.n	8004680 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7fd ffaf 	bl	80025bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 fa3d 	bl	8004af0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2201      	movs	r2, #1
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fc78 	bl	8004f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a15      	ldr	r2, [pc, #84]	; (80046fc <HAL_TIM_PWM_Start+0x74>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_TIM_PWM_Start+0x2c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a14      	ldr	r2, [pc, #80]	; (8004700 <HAL_TIM_PWM_Start+0x78>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d101      	bne.n	80046b8 <HAL_TIM_PWM_Start+0x30>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_TIM_PWM_Start+0x32>
 80046b8:	2300      	movs	r3, #0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d007      	beq.n	80046f0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40010400 	.word	0x40010400

08004704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b02      	cmp	r3, #2
 8004718:	d122      	bne.n	8004760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d11b      	bne.n	8004760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0202 	mvn.w	r2, #2
 8004730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9b4 	bl	8004ab4 <HAL_TIM_IC_CaptureCallback>
 800474c:	e005      	b.n	800475a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f9a6 	bl	8004aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f9b7 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d122      	bne.n	80047b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d11b      	bne.n	80047b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0204 	mvn.w	r2, #4
 8004784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f98a 	bl	8004ab4 <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f97c 	bl	8004aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f98d 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d122      	bne.n	8004808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d11b      	bne.n	8004808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0208 	mvn.w	r2, #8
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2204      	movs	r2, #4
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f960 	bl	8004ab4 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f952 	bl	8004aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f963 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b10      	cmp	r3, #16
 8004814:	d122      	bne.n	800485c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b10      	cmp	r3, #16
 8004822:	d11b      	bne.n	800485c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0210 	mvn.w	r2, #16
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2208      	movs	r2, #8
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f936 	bl	8004ab4 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f928 	bl	8004aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f939 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d10e      	bne.n	8004888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d107      	bne.n	8004888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0201 	mvn.w	r2, #1
 8004880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fd fbec 	bl	8002060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b80      	cmp	r3, #128	; 0x80
 8004894:	d10e      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d107      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fc1a 	bl	80050e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d10e      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d107      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8fe 	bl	8004adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d10e      	bne.n	800490c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d107      	bne.n	800490c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0220 	mvn.w	r2, #32
 8004904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fbe4 	bl	80050d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800490c:	bf00      	nop
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800492a:	2302      	movs	r3, #2
 800492c:	e0b4      	b.n	8004a98 <HAL_TIM_PWM_ConfigChannel+0x184>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	f200 809f 	bhi.w	8004a84 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004946:	a201      	add	r2, pc, #4	; (adr r2, 800494c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	08004981 	.word	0x08004981
 8004950:	08004a85 	.word	0x08004a85
 8004954:	08004a85 	.word	0x08004a85
 8004958:	08004a85 	.word	0x08004a85
 800495c:	080049c1 	.word	0x080049c1
 8004960:	08004a85 	.word	0x08004a85
 8004964:	08004a85 	.word	0x08004a85
 8004968:	08004a85 	.word	0x08004a85
 800496c:	08004a03 	.word	0x08004a03
 8004970:	08004a85 	.word	0x08004a85
 8004974:	08004a85 	.word	0x08004a85
 8004978:	08004a85 	.word	0x08004a85
 800497c:	08004a43 	.word	0x08004a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f952 	bl	8004c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0204 	bic.w	r2, r2, #4
 80049aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6999      	ldr	r1, [r3, #24]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	619a      	str	r2, [r3, #24]
      break;
 80049be:	e062      	b.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f9a2 	bl	8004d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	619a      	str	r2, [r3, #24]
      break;
 8004a00:	e041      	b.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 f9f7 	bl	8004dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0208 	orr.w	r2, r2, #8
 8004a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0204 	bic.w	r2, r2, #4
 8004a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69d9      	ldr	r1, [r3, #28]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	61da      	str	r2, [r3, #28]
      break;
 8004a40:	e021      	b.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fa4b 	bl	8004ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	021a      	lsls	r2, r3, #8
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	61da      	str	r2, [r3, #28]
      break;
 8004a82:	e000      	b.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004a84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a40      	ldr	r2, [pc, #256]	; (8004c04 <TIM_Base_SetConfig+0x114>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0e:	d00f      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3d      	ldr	r2, [pc, #244]	; (8004c08 <TIM_Base_SetConfig+0x118>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a3c      	ldr	r2, [pc, #240]	; (8004c0c <TIM_Base_SetConfig+0x11c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a3b      	ldr	r2, [pc, #236]	; (8004c10 <TIM_Base_SetConfig+0x120>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_Base_SetConfig+0x40>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a3a      	ldr	r2, [pc, #232]	; (8004c14 <TIM_Base_SetConfig+0x124>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d108      	bne.n	8004b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2f      	ldr	r2, [pc, #188]	; (8004c04 <TIM_Base_SetConfig+0x114>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d02b      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b50:	d027      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <TIM_Base_SetConfig+0x118>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d023      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <TIM_Base_SetConfig+0x11c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01f      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2a      	ldr	r2, [pc, #168]	; (8004c10 <TIM_Base_SetConfig+0x120>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d01b      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a29      	ldr	r2, [pc, #164]	; (8004c14 <TIM_Base_SetConfig+0x124>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d017      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a28      	ldr	r2, [pc, #160]	; (8004c18 <TIM_Base_SetConfig+0x128>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a27      	ldr	r2, [pc, #156]	; (8004c1c <TIM_Base_SetConfig+0x12c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00f      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a26      	ldr	r2, [pc, #152]	; (8004c20 <TIM_Base_SetConfig+0x130>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00b      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <TIM_Base_SetConfig+0x134>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d007      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a24      	ldr	r2, [pc, #144]	; (8004c28 <TIM_Base_SetConfig+0x138>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d003      	beq.n	8004ba2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <TIM_Base_SetConfig+0x13c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <TIM_Base_SetConfig+0x114>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0xf8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <TIM_Base_SetConfig+0x124>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d103      	bne.n	8004bf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	615a      	str	r2, [r3, #20]
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40010400 	.word	0x40010400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40014400 	.word	0x40014400
 8004c20:	40014800 	.word	0x40014800
 8004c24:	40001800 	.word	0x40001800
 8004c28:	40001c00 	.word	0x40001c00
 8004c2c:	40002000 	.word	0x40002000

08004c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0201 	bic.w	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f023 0302 	bic.w	r3, r3, #2
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <TIM_OC1_SetConfig+0xd8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <TIM_OC1_SetConfig+0x64>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <TIM_OC1_SetConfig+0xdc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10c      	bne.n	8004cae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0308 	bic.w	r3, r3, #8
 8004c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <TIM_OC1_SetConfig+0xd8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d003      	beq.n	8004cbe <TIM_OC1_SetConfig+0x8e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <TIM_OC1_SetConfig+0xdc>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d111      	bne.n	8004ce2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40010000 	.word	0x40010000
 8004d0c:	40010400 	.word	0x40010400

08004d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f023 0210 	bic.w	r2, r3, #16
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 0320 	bic.w	r3, r3, #32
 8004d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <TIM_OC2_SetConfig+0xe4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_OC2_SetConfig+0x68>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a21      	ldr	r2, [pc, #132]	; (8004df8 <TIM_OC2_SetConfig+0xe8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10d      	bne.n	8004d94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <TIM_OC2_SetConfig+0xe4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_OC2_SetConfig+0x94>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <TIM_OC2_SetConfig+0xe8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d113      	bne.n	8004dcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004daa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40010000 	.word	0x40010000
 8004df8:	40010400 	.word	0x40010400

08004dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0303 	bic.w	r3, r3, #3
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a21      	ldr	r2, [pc, #132]	; (8004edc <TIM_OC3_SetConfig+0xe0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC3_SetConfig+0x66>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a20      	ldr	r2, [pc, #128]	; (8004ee0 <TIM_OC3_SetConfig+0xe4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d10d      	bne.n	8004e7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a16      	ldr	r2, [pc, #88]	; (8004edc <TIM_OC3_SetConfig+0xe0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_OC3_SetConfig+0x92>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <TIM_OC3_SetConfig+0xe4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d113      	bne.n	8004eb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40010400 	.word	0x40010400

08004ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	031b      	lsls	r3, r3, #12
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <TIM_OC4_SetConfig+0xa4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC4_SetConfig+0x68>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <TIM_OC4_SetConfig+0xa8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d109      	bne.n	8004f60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40010400 	.word	0x40010400

08004f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1a      	ldr	r2, [r3, #32]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1a      	ldr	r2, [r3, #32]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e05a      	b.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d022      	beq.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005040:	d01d      	beq.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d018      	beq.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1a      	ldr	r2, [pc, #104]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00e      	beq.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d009      	beq.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a17      	ldr	r2, [pc, #92]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d004      	beq.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d10c      	bne.n	8005098 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	4313      	orrs	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40001800 	.word	0x40001800

080050d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e03f      	b.n	800518e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fd fbaa 	bl	800287c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2224      	movs	r2, #36	; 0x24
 800512c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800513e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f9b1 	bl	80054a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b088      	sub	sp, #32
 800519a:	af02      	add	r7, sp, #8
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	f040 8083 	bne.w	80052be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_UART_Transmit+0x2e>
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e07b      	b.n	80052c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_UART_Transmit+0x40>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e074      	b.n	80052c0 <HAL_UART_Transmit+0x12a>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2221      	movs	r2, #33	; 0x21
 80051e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80051ec:	f7fd fc24 	bl	8002a38 <HAL_GetTick>
 80051f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005206:	e042      	b.n	800528e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521e:	d122      	bne.n	8005266 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2200      	movs	r2, #0
 8005228:	2180      	movs	r1, #128	; 0x80
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f8f2 	bl	8005414 <UART_WaitOnFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e042      	b.n	80052c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800524c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	3302      	adds	r3, #2
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	e017      	b.n	800528e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	3301      	adds	r3, #1
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	e013      	b.n	800528e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f8cf 	bl	8005414 <UART_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e01f      	b.n	80052c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	60ba      	str	r2, [r7, #8]
 8005286:	781a      	ldrb	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1b7      	bne.n	8005208 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f8b6 	bl	8005414 <UART_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e006      	b.n	80052c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e000      	b.n	80052c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
  }
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	f040 8090 	bne.w	800540a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <HAL_UART_Receive+0x2e>
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e088      	b.n	800540c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_UART_Receive+0x40>
 8005304:	2302      	movs	r3, #2
 8005306:	e081      	b.n	800540c <HAL_UART_Receive+0x144>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2222      	movs	r2, #34	; 0x22
 800531a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800531e:	f7fd fb8b 	bl	8002a38 <HAL_GetTick>
 8005322:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	88fa      	ldrh	r2, [r7, #6]
 8005328:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	88fa      	ldrh	r2, [r7, #6]
 800532e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005338:	e05c      	b.n	80053f4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005350:	d12b      	bne.n	80053aa <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	2120      	movs	r1, #32
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f859 	bl	8005414 <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e04f      	b.n	800540c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10c      	bne.n	8005392 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005384:	b29a      	uxth	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	3302      	adds	r3, #2
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	e030      	b.n	80053f4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	b29b      	uxth	r3, r3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	b29a      	uxth	r2, r3
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	3301      	adds	r3, #1
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	e024      	b.n	80053f4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2120      	movs	r1, #32
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f82d 	bl	8005414 <UART_WaitOnFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e023      	b.n	800540c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d108      	bne.n	80053de <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	60ba      	str	r2, [r7, #8]
 80053d8:	b2ca      	uxtb	r2, r1
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e00a      	b.n	80053f4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1c59      	adds	r1, r3, #1
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d19d      	bne.n	800533a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	e000      	b.n	800540c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800540a:	2302      	movs	r3, #2
  }
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005424:	e02c      	b.n	8005480 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800542c:	d028      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <UART_WaitOnFlagUntilTimeout+0x30>
 8005434:	f7fd fb00 	bl	8002a38 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	429a      	cmp	r2, r3
 8005442:	d21d      	bcs.n	8005480 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005452:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e00f      	b.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	429a      	cmp	r2, r3
 800549c:	d0c3      	beq.n	8005426 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80054ea:	f023 030c 	bic.w	r3, r3, #12
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005516:	f040 818b 	bne.w	8005830 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4ac1      	ldr	r2, [pc, #772]	; (8005824 <UART_SetConfig+0x37c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d005      	beq.n	8005530 <UART_SetConfig+0x88>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4abf      	ldr	r2, [pc, #764]	; (8005828 <UART_SetConfig+0x380>)
 800552a:	4293      	cmp	r3, r2
 800552c:	f040 80bd 	bne.w	80056aa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005530:	f7fe ffea 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 8005534:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	461d      	mov	r5, r3
 800553a:	f04f 0600 	mov.w	r6, #0
 800553e:	46a8      	mov	r8, r5
 8005540:	46b1      	mov	r9, r6
 8005542:	eb18 0308 	adds.w	r3, r8, r8
 8005546:	eb49 0409 	adc.w	r4, r9, r9
 800554a:	4698      	mov	r8, r3
 800554c:	46a1      	mov	r9, r4
 800554e:	eb18 0805 	adds.w	r8, r8, r5
 8005552:	eb49 0906 	adc.w	r9, r9, r6
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005562:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005566:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800556a:	4688      	mov	r8, r1
 800556c:	4691      	mov	r9, r2
 800556e:	eb18 0005 	adds.w	r0, r8, r5
 8005572:	eb49 0106 	adc.w	r1, r9, r6
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	461d      	mov	r5, r3
 800557c:	f04f 0600 	mov.w	r6, #0
 8005580:	196b      	adds	r3, r5, r5
 8005582:	eb46 0406 	adc.w	r4, r6, r6
 8005586:	461a      	mov	r2, r3
 8005588:	4623      	mov	r3, r4
 800558a:	f7fb fb1d 	bl	8000bc8 <__aeabi_uldivmod>
 800558e:	4603      	mov	r3, r0
 8005590:	460c      	mov	r4, r1
 8005592:	461a      	mov	r2, r3
 8005594:	4ba5      	ldr	r3, [pc, #660]	; (800582c <UART_SetConfig+0x384>)
 8005596:	fba3 2302 	umull	r2, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	461d      	mov	r5, r3
 80055a4:	f04f 0600 	mov.w	r6, #0
 80055a8:	46a9      	mov	r9, r5
 80055aa:	46b2      	mov	sl, r6
 80055ac:	eb19 0309 	adds.w	r3, r9, r9
 80055b0:	eb4a 040a 	adc.w	r4, sl, sl
 80055b4:	4699      	mov	r9, r3
 80055b6:	46a2      	mov	sl, r4
 80055b8:	eb19 0905 	adds.w	r9, r9, r5
 80055bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055d4:	4689      	mov	r9, r1
 80055d6:	4692      	mov	sl, r2
 80055d8:	eb19 0005 	adds.w	r0, r9, r5
 80055dc:	eb4a 0106 	adc.w	r1, sl, r6
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	461d      	mov	r5, r3
 80055e6:	f04f 0600 	mov.w	r6, #0
 80055ea:	196b      	adds	r3, r5, r5
 80055ec:	eb46 0406 	adc.w	r4, r6, r6
 80055f0:	461a      	mov	r2, r3
 80055f2:	4623      	mov	r3, r4
 80055f4:	f7fb fae8 	bl	8000bc8 <__aeabi_uldivmod>
 80055f8:	4603      	mov	r3, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	461a      	mov	r2, r3
 80055fe:	4b8b      	ldr	r3, [pc, #556]	; (800582c <UART_SetConfig+0x384>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	; 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	3332      	adds	r3, #50	; 0x32
 8005612:	4a86      	ldr	r2, [pc, #536]	; (800582c <UART_SetConfig+0x384>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005620:	4498      	add	r8, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	461d      	mov	r5, r3
 8005626:	f04f 0600 	mov.w	r6, #0
 800562a:	46a9      	mov	r9, r5
 800562c:	46b2      	mov	sl, r6
 800562e:	eb19 0309 	adds.w	r3, r9, r9
 8005632:	eb4a 040a 	adc.w	r4, sl, sl
 8005636:	4699      	mov	r9, r3
 8005638:	46a2      	mov	sl, r4
 800563a:	eb19 0905 	adds.w	r9, r9, r5
 800563e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005642:	f04f 0100 	mov.w	r1, #0
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800564e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005656:	4689      	mov	r9, r1
 8005658:	4692      	mov	sl, r2
 800565a:	eb19 0005 	adds.w	r0, r9, r5
 800565e:	eb4a 0106 	adc.w	r1, sl, r6
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	461d      	mov	r5, r3
 8005668:	f04f 0600 	mov.w	r6, #0
 800566c:	196b      	adds	r3, r5, r5
 800566e:	eb46 0406 	adc.w	r4, r6, r6
 8005672:	461a      	mov	r2, r3
 8005674:	4623      	mov	r3, r4
 8005676:	f7fb faa7 	bl	8000bc8 <__aeabi_uldivmod>
 800567a:	4603      	mov	r3, r0
 800567c:	460c      	mov	r4, r1
 800567e:	461a      	mov	r2, r3
 8005680:	4b6a      	ldr	r3, [pc, #424]	; (800582c <UART_SetConfig+0x384>)
 8005682:	fba3 1302 	umull	r1, r3, r3, r2
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2164      	movs	r1, #100	; 0x64
 800568a:	fb01 f303 	mul.w	r3, r1, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	3332      	adds	r3, #50	; 0x32
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <UART_SetConfig+0x384>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	f003 0207 	and.w	r2, r3, #7
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4442      	add	r2, r8
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	e26f      	b.n	8005b8a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056aa:	f7fe ff19 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 80056ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	461d      	mov	r5, r3
 80056b4:	f04f 0600 	mov.w	r6, #0
 80056b8:	46a8      	mov	r8, r5
 80056ba:	46b1      	mov	r9, r6
 80056bc:	eb18 0308 	adds.w	r3, r8, r8
 80056c0:	eb49 0409 	adc.w	r4, r9, r9
 80056c4:	4698      	mov	r8, r3
 80056c6:	46a1      	mov	r9, r4
 80056c8:	eb18 0805 	adds.w	r8, r8, r5
 80056cc:	eb49 0906 	adc.w	r9, r9, r6
 80056d0:	f04f 0100 	mov.w	r1, #0
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056e4:	4688      	mov	r8, r1
 80056e6:	4691      	mov	r9, r2
 80056e8:	eb18 0005 	adds.w	r0, r8, r5
 80056ec:	eb49 0106 	adc.w	r1, r9, r6
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	461d      	mov	r5, r3
 80056f6:	f04f 0600 	mov.w	r6, #0
 80056fa:	196b      	adds	r3, r5, r5
 80056fc:	eb46 0406 	adc.w	r4, r6, r6
 8005700:	461a      	mov	r2, r3
 8005702:	4623      	mov	r3, r4
 8005704:	f7fb fa60 	bl	8000bc8 <__aeabi_uldivmod>
 8005708:	4603      	mov	r3, r0
 800570a:	460c      	mov	r4, r1
 800570c:	461a      	mov	r2, r3
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <UART_SetConfig+0x384>)
 8005710:	fba3 2302 	umull	r2, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	461d      	mov	r5, r3
 800571e:	f04f 0600 	mov.w	r6, #0
 8005722:	46a9      	mov	r9, r5
 8005724:	46b2      	mov	sl, r6
 8005726:	eb19 0309 	adds.w	r3, r9, r9
 800572a:	eb4a 040a 	adc.w	r4, sl, sl
 800572e:	4699      	mov	r9, r3
 8005730:	46a2      	mov	sl, r4
 8005732:	eb19 0905 	adds.w	r9, r9, r5
 8005736:	eb4a 0a06 	adc.w	sl, sl, r6
 800573a:	f04f 0100 	mov.w	r1, #0
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005746:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800574a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800574e:	4689      	mov	r9, r1
 8005750:	4692      	mov	sl, r2
 8005752:	eb19 0005 	adds.w	r0, r9, r5
 8005756:	eb4a 0106 	adc.w	r1, sl, r6
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	461d      	mov	r5, r3
 8005760:	f04f 0600 	mov.w	r6, #0
 8005764:	196b      	adds	r3, r5, r5
 8005766:	eb46 0406 	adc.w	r4, r6, r6
 800576a:	461a      	mov	r2, r3
 800576c:	4623      	mov	r3, r4
 800576e:	f7fb fa2b 	bl	8000bc8 <__aeabi_uldivmod>
 8005772:	4603      	mov	r3, r0
 8005774:	460c      	mov	r4, r1
 8005776:	461a      	mov	r2, r3
 8005778:	4b2c      	ldr	r3, [pc, #176]	; (800582c <UART_SetConfig+0x384>)
 800577a:	fba3 1302 	umull	r1, r3, r3, r2
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2164      	movs	r1, #100	; 0x64
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	3332      	adds	r3, #50	; 0x32
 800578c:	4a27      	ldr	r2, [pc, #156]	; (800582c <UART_SetConfig+0x384>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800579a:	4498      	add	r8, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	461d      	mov	r5, r3
 80057a0:	f04f 0600 	mov.w	r6, #0
 80057a4:	46a9      	mov	r9, r5
 80057a6:	46b2      	mov	sl, r6
 80057a8:	eb19 0309 	adds.w	r3, r9, r9
 80057ac:	eb4a 040a 	adc.w	r4, sl, sl
 80057b0:	4699      	mov	r9, r3
 80057b2:	46a2      	mov	sl, r4
 80057b4:	eb19 0905 	adds.w	r9, r9, r5
 80057b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80057bc:	f04f 0100 	mov.w	r1, #0
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057d0:	4689      	mov	r9, r1
 80057d2:	4692      	mov	sl, r2
 80057d4:	eb19 0005 	adds.w	r0, r9, r5
 80057d8:	eb4a 0106 	adc.w	r1, sl, r6
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	461d      	mov	r5, r3
 80057e2:	f04f 0600 	mov.w	r6, #0
 80057e6:	196b      	adds	r3, r5, r5
 80057e8:	eb46 0406 	adc.w	r4, r6, r6
 80057ec:	461a      	mov	r2, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	f7fb f9ea 	bl	8000bc8 <__aeabi_uldivmod>
 80057f4:	4603      	mov	r3, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <UART_SetConfig+0x384>)
 80057fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	2164      	movs	r1, #100	; 0x64
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	3332      	adds	r3, #50	; 0x32
 800580e:	4a07      	ldr	r2, [pc, #28]	; (800582c <UART_SetConfig+0x384>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	f003 0207 	and.w	r2, r3, #7
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4442      	add	r2, r8
 8005820:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005822:	e1b2      	b.n	8005b8a <UART_SetConfig+0x6e2>
 8005824:	40011000 	.word	0x40011000
 8005828:	40011400 	.word	0x40011400
 800582c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4ad7      	ldr	r2, [pc, #860]	; (8005b94 <UART_SetConfig+0x6ec>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d005      	beq.n	8005846 <UART_SetConfig+0x39e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4ad6      	ldr	r2, [pc, #856]	; (8005b98 <UART_SetConfig+0x6f0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	f040 80d1 	bne.w	80059e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005846:	f7fe fe5f 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 800584a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	469a      	mov	sl, r3
 8005850:	f04f 0b00 	mov.w	fp, #0
 8005854:	46d0      	mov	r8, sl
 8005856:	46d9      	mov	r9, fp
 8005858:	eb18 0308 	adds.w	r3, r8, r8
 800585c:	eb49 0409 	adc.w	r4, r9, r9
 8005860:	4698      	mov	r8, r3
 8005862:	46a1      	mov	r9, r4
 8005864:	eb18 080a 	adds.w	r8, r8, sl
 8005868:	eb49 090b 	adc.w	r9, r9, fp
 800586c:	f04f 0100 	mov.w	r1, #0
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005878:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800587c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005880:	4688      	mov	r8, r1
 8005882:	4691      	mov	r9, r2
 8005884:	eb1a 0508 	adds.w	r5, sl, r8
 8005888:	eb4b 0609 	adc.w	r6, fp, r9
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4619      	mov	r1, r3
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	f04f 0400 	mov.w	r4, #0
 800589e:	0094      	lsls	r4, r2, #2
 80058a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058a4:	008b      	lsls	r3, r1, #2
 80058a6:	461a      	mov	r2, r3
 80058a8:	4623      	mov	r3, r4
 80058aa:	4628      	mov	r0, r5
 80058ac:	4631      	mov	r1, r6
 80058ae:	f7fb f98b 	bl	8000bc8 <__aeabi_uldivmod>
 80058b2:	4603      	mov	r3, r0
 80058b4:	460c      	mov	r4, r1
 80058b6:	461a      	mov	r2, r3
 80058b8:	4bb8      	ldr	r3, [pc, #736]	; (8005b9c <UART_SetConfig+0x6f4>)
 80058ba:	fba3 2302 	umull	r2, r3, r3, r2
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	469b      	mov	fp, r3
 80058c8:	f04f 0c00 	mov.w	ip, #0
 80058cc:	46d9      	mov	r9, fp
 80058ce:	46e2      	mov	sl, ip
 80058d0:	eb19 0309 	adds.w	r3, r9, r9
 80058d4:	eb4a 040a 	adc.w	r4, sl, sl
 80058d8:	4699      	mov	r9, r3
 80058da:	46a2      	mov	sl, r4
 80058dc:	eb19 090b 	adds.w	r9, r9, fp
 80058e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058e4:	f04f 0100 	mov.w	r1, #0
 80058e8:	f04f 0200 	mov.w	r2, #0
 80058ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058f8:	4689      	mov	r9, r1
 80058fa:	4692      	mov	sl, r2
 80058fc:	eb1b 0509 	adds.w	r5, fp, r9
 8005900:	eb4c 060a 	adc.w	r6, ip, sl
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4619      	mov	r1, r3
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	f04f 0400 	mov.w	r4, #0
 8005916:	0094      	lsls	r4, r2, #2
 8005918:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800591c:	008b      	lsls	r3, r1, #2
 800591e:	461a      	mov	r2, r3
 8005920:	4623      	mov	r3, r4
 8005922:	4628      	mov	r0, r5
 8005924:	4631      	mov	r1, r6
 8005926:	f7fb f94f 	bl	8000bc8 <__aeabi_uldivmod>
 800592a:	4603      	mov	r3, r0
 800592c:	460c      	mov	r4, r1
 800592e:	461a      	mov	r2, r3
 8005930:	4b9a      	ldr	r3, [pc, #616]	; (8005b9c <UART_SetConfig+0x6f4>)
 8005932:	fba3 1302 	umull	r1, r3, r3, r2
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	2164      	movs	r1, #100	; 0x64
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	3332      	adds	r3, #50	; 0x32
 8005944:	4a95      	ldr	r2, [pc, #596]	; (8005b9c <UART_SetConfig+0x6f4>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005950:	4498      	add	r8, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	469b      	mov	fp, r3
 8005956:	f04f 0c00 	mov.w	ip, #0
 800595a:	46d9      	mov	r9, fp
 800595c:	46e2      	mov	sl, ip
 800595e:	eb19 0309 	adds.w	r3, r9, r9
 8005962:	eb4a 040a 	adc.w	r4, sl, sl
 8005966:	4699      	mov	r9, r3
 8005968:	46a2      	mov	sl, r4
 800596a:	eb19 090b 	adds.w	r9, r9, fp
 800596e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005972:	f04f 0100 	mov.w	r1, #0
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800597e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005982:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005986:	4689      	mov	r9, r1
 8005988:	4692      	mov	sl, r2
 800598a:	eb1b 0509 	adds.w	r5, fp, r9
 800598e:	eb4c 060a 	adc.w	r6, ip, sl
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4619      	mov	r1, r3
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	f04f 0400 	mov.w	r4, #0
 80059a4:	0094      	lsls	r4, r2, #2
 80059a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059aa:	008b      	lsls	r3, r1, #2
 80059ac:	461a      	mov	r2, r3
 80059ae:	4623      	mov	r3, r4
 80059b0:	4628      	mov	r0, r5
 80059b2:	4631      	mov	r1, r6
 80059b4:	f7fb f908 	bl	8000bc8 <__aeabi_uldivmod>
 80059b8:	4603      	mov	r3, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	461a      	mov	r2, r3
 80059be:	4b77      	ldr	r3, [pc, #476]	; (8005b9c <UART_SetConfig+0x6f4>)
 80059c0:	fba3 1302 	umull	r1, r3, r3, r2
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	2164      	movs	r1, #100	; 0x64
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	3332      	adds	r3, #50	; 0x32
 80059d2:	4a72      	ldr	r2, [pc, #456]	; (8005b9c <UART_SetConfig+0x6f4>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	f003 020f 	and.w	r2, r3, #15
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4442      	add	r2, r8
 80059e4:	609a      	str	r2, [r3, #8]
 80059e6:	e0d0      	b.n	8005b8a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fe fd7a 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 80059ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	469a      	mov	sl, r3
 80059f2:	f04f 0b00 	mov.w	fp, #0
 80059f6:	46d0      	mov	r8, sl
 80059f8:	46d9      	mov	r9, fp
 80059fa:	eb18 0308 	adds.w	r3, r8, r8
 80059fe:	eb49 0409 	adc.w	r4, r9, r9
 8005a02:	4698      	mov	r8, r3
 8005a04:	46a1      	mov	r9, r4
 8005a06:	eb18 080a 	adds.w	r8, r8, sl
 8005a0a:	eb49 090b 	adc.w	r9, r9, fp
 8005a0e:	f04f 0100 	mov.w	r1, #0
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a22:	4688      	mov	r8, r1
 8005a24:	4691      	mov	r9, r2
 8005a26:	eb1a 0508 	adds.w	r5, sl, r8
 8005a2a:	eb4b 0609 	adc.w	r6, fp, r9
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4619      	mov	r1, r3
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	f04f 0400 	mov.w	r4, #0
 8005a40:	0094      	lsls	r4, r2, #2
 8005a42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a46:	008b      	lsls	r3, r1, #2
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	4631      	mov	r1, r6
 8005a50:	f7fb f8ba 	bl	8000bc8 <__aeabi_uldivmod>
 8005a54:	4603      	mov	r3, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4b50      	ldr	r3, [pc, #320]	; (8005b9c <UART_SetConfig+0x6f4>)
 8005a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	469b      	mov	fp, r3
 8005a6a:	f04f 0c00 	mov.w	ip, #0
 8005a6e:	46d9      	mov	r9, fp
 8005a70:	46e2      	mov	sl, ip
 8005a72:	eb19 0309 	adds.w	r3, r9, r9
 8005a76:	eb4a 040a 	adc.w	r4, sl, sl
 8005a7a:	4699      	mov	r9, r3
 8005a7c:	46a2      	mov	sl, r4
 8005a7e:	eb19 090b 	adds.w	r9, r9, fp
 8005a82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a86:	f04f 0100 	mov.w	r1, #0
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a9a:	4689      	mov	r9, r1
 8005a9c:	4692      	mov	sl, r2
 8005a9e:	eb1b 0509 	adds.w	r5, fp, r9
 8005aa2:	eb4c 060a 	adc.w	r6, ip, sl
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	f04f 0400 	mov.w	r4, #0
 8005ab8:	0094      	lsls	r4, r2, #2
 8005aba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005abe:	008b      	lsls	r3, r1, #2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	f7fb f87e 	bl	8000bc8 <__aeabi_uldivmod>
 8005acc:	4603      	mov	r3, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4b32      	ldr	r3, [pc, #200]	; (8005b9c <UART_SetConfig+0x6f4>)
 8005ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	2164      	movs	r1, #100	; 0x64
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	3332      	adds	r3, #50	; 0x32
 8005ae6:	4a2d      	ldr	r2, [pc, #180]	; (8005b9c <UART_SetConfig+0x6f4>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af2:	4498      	add	r8, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	469b      	mov	fp, r3
 8005af8:	f04f 0c00 	mov.w	ip, #0
 8005afc:	46d9      	mov	r9, fp
 8005afe:	46e2      	mov	sl, ip
 8005b00:	eb19 0309 	adds.w	r3, r9, r9
 8005b04:	eb4a 040a 	adc.w	r4, sl, sl
 8005b08:	4699      	mov	r9, r3
 8005b0a:	46a2      	mov	sl, r4
 8005b0c:	eb19 090b 	adds.w	r9, r9, fp
 8005b10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b14:	f04f 0100 	mov.w	r1, #0
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b28:	4689      	mov	r9, r1
 8005b2a:	4692      	mov	sl, r2
 8005b2c:	eb1b 0509 	adds.w	r5, fp, r9
 8005b30:	eb4c 060a 	adc.w	r6, ip, sl
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	f04f 0400 	mov.w	r4, #0
 8005b46:	0094      	lsls	r4, r2, #2
 8005b48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b4c:	008b      	lsls	r3, r1, #2
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4623      	mov	r3, r4
 8005b52:	4628      	mov	r0, r5
 8005b54:	4631      	mov	r1, r6
 8005b56:	f7fb f837 	bl	8000bc8 <__aeabi_uldivmod>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <UART_SetConfig+0x6f4>)
 8005b62:	fba3 1302 	umull	r1, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2164      	movs	r1, #100	; 0x64
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	3332      	adds	r3, #50	; 0x32
 8005b74:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <UART_SetConfig+0x6f4>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	f003 020f 	and.w	r2, r3, #15
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4442      	add	r2, r8
 8005b86:	609a      	str	r2, [r3, #8]
}
 8005b88:	e7ff      	b.n	8005b8a <UART_SetConfig+0x6e2>
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b94:	40011000 	.word	0x40011000
 8005b98:	40011400 	.word	0x40011400
 8005b9c:	51eb851f 	.word	0x51eb851f

08005ba0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bb2:	2b84      	cmp	r3, #132	; 0x84
 8005bb4:	d005      	beq.n	8005bc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005bb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3303      	adds	r3, #3
 8005bc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005bd4:	f000 fada 	bl	800618c <vTaskStartScheduler>
  
  return osOK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be0:	b089      	sub	sp, #36	; 0x24
 8005be2:	af04      	add	r7, sp, #16
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d020      	beq.n	8005c32 <osThreadCreate+0x54>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01c      	beq.n	8005c32 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685c      	ldr	r4, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681d      	ldr	r5, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691e      	ldr	r6, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff ffc8 	bl	8005ba0 <makeFreeRtosPriority>
 8005c10:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c1a:	9202      	str	r2, [sp, #8]
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	9100      	str	r1, [sp, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	4632      	mov	r2, r6
 8005c24:	4629      	mov	r1, r5
 8005c26:	4620      	mov	r0, r4
 8005c28:	f000 f8ed 	bl	8005e06 <xTaskCreateStatic>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e01c      	b.n	8005c6c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685c      	ldr	r4, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c3e:	b29e      	uxth	r6, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff ffaa 	bl	8005ba0 <makeFreeRtosPriority>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f107 030c 	add.w	r3, r7, #12
 8005c52:	9301      	str	r3, [sp, #4]
 8005c54:	9200      	str	r2, [sp, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	4632      	mov	r2, r6
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f000 f92c 	bl	8005eba <xTaskCreate>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d001      	beq.n	8005c6c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e000      	b.n	8005c6e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <osDelay+0x16>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	e000      	b.n	8005c8e <osDelay+0x18>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fa48 	bl	8006124 <vTaskDelay>
  
  return osOK;
 8005c94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f103 0208 	add.w	r2, r3, #8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cb6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f103 0208 	add.w	r2, r3, #8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f103 0208 	add.w	r2, r3, #8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d56:	d103      	bne.n	8005d60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e00c      	b.n	8005d7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3308      	adds	r3, #8
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	e002      	b.n	8005d6e <vListInsert+0x2e>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d2f6      	bcs.n	8005d68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6892      	ldr	r2, [r2, #8]
 8005dc8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6852      	ldr	r2, [r2, #4]
 8005dd2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d103      	bne.n	8005de6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	1e5a      	subs	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b08e      	sub	sp, #56	; 0x38
 8005e0a:	af04      	add	r7, sp, #16
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	623b      	str	r3, [r7, #32]
 8005e2c:	e7fe      	b.n	8005e2c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <xTaskCreateStatic+0x42>
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	e7fe      	b.n	8005e46 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e48:	2354      	movs	r3, #84	; 0x54
 8005e4a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b54      	cmp	r3, #84	; 0x54
 8005e50:	d009      	beq.n	8005e66 <xTaskCreateStatic+0x60>
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	e7fe      	b.n	8005e64 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01e      	beq.n	8005eac <xTaskCreateStatic+0xa6>
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01b      	beq.n	8005eac <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	2202      	movs	r2, #2
 8005e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e86:	2300      	movs	r3, #0
 8005e88:	9303      	str	r3, [sp, #12]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	9302      	str	r3, [sp, #8]
 8005e8e:	f107 0314 	add.w	r3, r7, #20
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f850 	bl	8005f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ea6:	f000 f8d3 	bl	8006050 <prvAddNewTaskToReadyList>
 8005eaa:	e001      	b.n	8005eb0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eb0:	697b      	ldr	r3, [r7, #20]
	}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3728      	adds	r7, #40	; 0x28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b08c      	sub	sp, #48	; 0x30
 8005ebe:	af04      	add	r7, sp, #16
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	603b      	str	r3, [r7, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 feb0 	bl	8006c34 <pvPortMalloc>
 8005ed4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00e      	beq.n	8005efa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005edc:	2054      	movs	r0, #84	; 0x54
 8005ede:	f000 fea9 	bl	8006c34 <pvPortMalloc>
 8005ee2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30
 8005ef0:	e005      	b.n	8005efe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ef2:	6978      	ldr	r0, [r7, #20]
 8005ef4:	f000 ff60 	bl	8006db8 <vPortFree>
 8005ef8:	e001      	b.n	8005efe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d017      	beq.n	8005f34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f0c:	88fa      	ldrh	r2, [r7, #6]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9303      	str	r3, [sp, #12]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	9302      	str	r3, [sp, #8]
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f80e 	bl	8005f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f28:	69f8      	ldr	r0, [r7, #28]
 8005f2a:	f000 f891 	bl	8006050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e002      	b.n	8005f3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3720      	adds	r7, #32
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <prvInitialiseNewTask+0x46>
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e7fe      	b.n	8005f88 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01f      	beq.n	8005fd0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
 8005f94:	e012      	b.n	8005fbc <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	7819      	ldrb	r1, [r3, #0]
 8005f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3334      	adds	r3, #52	; 0x34
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d006      	beq.n	8005fc4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	61fb      	str	r3, [r7, #28]
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2b0f      	cmp	r3, #15
 8005fc0:	d9e9      	bls.n	8005f96 <prvInitialiseNewTask+0x52>
 8005fc2:	e000      	b.n	8005fc6 <prvInitialiseNewTask+0x82>
			{
				break;
 8005fc4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fce:	e003      	b.n	8005fd8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	2b06      	cmp	r3, #6
 8005fdc:	d901      	bls.n	8005fe2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fde:	2306      	movs	r3, #6
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fe70 	bl	8005cde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	3318      	adds	r3, #24
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff fe6b 	bl	8005cde <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	f1c3 0207 	rsb	r2, r3, #7
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	2200      	movs	r2, #0
 8006022:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	69b8      	ldr	r0, [r7, #24]
 8006032:	f000 fbfd 	bl	8006830 <pxPortInitialiseStack>
 8006036:	4602      	mov	r2, r0
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006048:	bf00      	nop
 800604a:	3720      	adds	r7, #32
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006058:	f000 fd10 	bl	8006a7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800605c:	4b2a      	ldr	r3, [pc, #168]	; (8006108 <prvAddNewTaskToReadyList+0xb8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	4a29      	ldr	r2, [pc, #164]	; (8006108 <prvAddNewTaskToReadyList+0xb8>)
 8006064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800606e:	4a27      	ldr	r2, [pc, #156]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006074:	4b24      	ldr	r3, [pc, #144]	; (8006108 <prvAddNewTaskToReadyList+0xb8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d110      	bne.n	800609e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800607c:	f000 fab8 	bl	80065f0 <prvInitialiseTaskLists>
 8006080:	e00d      	b.n	800609e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006082:	4b23      	ldr	r3, [pc, #140]	; (8006110 <prvAddNewTaskToReadyList+0xc0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d109      	bne.n	800609e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800608a:	4b20      	ldr	r3, [pc, #128]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	429a      	cmp	r2, r3
 8006096:	d802      	bhi.n	800609e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006098:	4a1c      	ldr	r2, [pc, #112]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800609e:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <prvAddNewTaskToReadyList+0xc4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a1b      	ldr	r2, [pc, #108]	; (8006114 <prvAddNewTaskToReadyList+0xc4>)
 80060a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	2201      	movs	r2, #1
 80060ae:	409a      	lsls	r2, r3
 80060b0:	4b19      	ldr	r3, [pc, #100]	; (8006118 <prvAddNewTaskToReadyList+0xc8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <prvAddNewTaskToReadyList+0xc8>)
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <prvAddNewTaskToReadyList+0xcc>)
 80060c8:	441a      	add	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f7ff fe11 	bl	8005cf8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060d6:	f000 fcff 	bl	8006ad8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <prvAddNewTaskToReadyList+0xc0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00e      	beq.n	8006100 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <prvAddNewTaskToReadyList+0xbc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d207      	bcs.n	8006100 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <prvAddNewTaskToReadyList+0xd0>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	200003f0 	.word	0x200003f0
 800610c:	200002f0 	.word	0x200002f0
 8006110:	200003fc 	.word	0x200003fc
 8006114:	2000040c 	.word	0x2000040c
 8006118:	200003f8 	.word	0x200003f8
 800611c:	200002f4 	.word	0x200002f4
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d016      	beq.n	8006164 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <vTaskDelay+0x60>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <vTaskDelay+0x2e>
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	e7fe      	b.n	8006150 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006152:	f000 f879 	bl	8006248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006156:	2100      	movs	r1, #0
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fb03 	bl	8006764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800615e:	f000 f881 	bl	8006264 <xTaskResumeAll>
 8006162:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d107      	bne.n	800617a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800616a:	4b07      	ldr	r3, [pc, #28]	; (8006188 <vTaskDelay+0x64>)
 800616c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000418 	.word	0x20000418
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800619a:	463a      	mov	r2, r7
 800619c:	1d39      	adds	r1, r7, #4
 800619e:	f107 0308 	add.w	r3, r7, #8
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fb fd0e 	bl	8001bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	9202      	str	r2, [sp, #8]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	2300      	movs	r3, #0
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	2300      	movs	r3, #0
 80061b8:	460a      	mov	r2, r1
 80061ba:	491d      	ldr	r1, [pc, #116]	; (8006230 <vTaskStartScheduler+0xa4>)
 80061bc:	481d      	ldr	r0, [pc, #116]	; (8006234 <vTaskStartScheduler+0xa8>)
 80061be:	f7ff fe22 	bl	8005e06 <xTaskCreateStatic>
 80061c2:	4602      	mov	r2, r0
 80061c4:	4b1c      	ldr	r3, [pc, #112]	; (8006238 <vTaskStartScheduler+0xac>)
 80061c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061c8:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <vTaskStartScheduler+0xac>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061d0:	2301      	movs	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	e001      	b.n	80061da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d115      	bne.n	800620c <vTaskStartScheduler+0x80>
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061f2:	4b12      	ldr	r3, [pc, #72]	; (800623c <vTaskStartScheduler+0xb0>)
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <vTaskStartScheduler+0xb4>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006200:	4b10      	ldr	r3, [pc, #64]	; (8006244 <vTaskStartScheduler+0xb8>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006206:	f000 fb9b 	bl	8006940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800620a:	e00d      	b.n	8006228 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006212:	d109      	bne.n	8006228 <vTaskStartScheduler+0x9c>
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	e7fe      	b.n	8006226 <vTaskStartScheduler+0x9a>
}
 8006228:	bf00      	nop
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	08009060 	.word	0x08009060
 8006234:	080065c1 	.word	0x080065c1
 8006238:	20000414 	.word	0x20000414
 800623c:	20000410 	.word	0x20000410
 8006240:	200003fc 	.word	0x200003fc
 8006244:	200003f4 	.word	0x200003f4

08006248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <vTaskSuspendAll+0x18>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	4a03      	ldr	r2, [pc, #12]	; (8006260 <vTaskSuspendAll+0x18>)
 8006254:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	20000418 	.word	0x20000418

08006264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006272:	4b41      	ldr	r3, [pc, #260]	; (8006378 <xTaskResumeAll+0x114>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <xTaskResumeAll+0x2a>
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	e7fe      	b.n	800628c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800628e:	f000 fbf5 	bl	8006a7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006292:	4b39      	ldr	r3, [pc, #228]	; (8006378 <xTaskResumeAll+0x114>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3b01      	subs	r3, #1
 8006298:	4a37      	ldr	r2, [pc, #220]	; (8006378 <xTaskResumeAll+0x114>)
 800629a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800629c:	4b36      	ldr	r3, [pc, #216]	; (8006378 <xTaskResumeAll+0x114>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d161      	bne.n	8006368 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062a4:	4b35      	ldr	r3, [pc, #212]	; (800637c <xTaskResumeAll+0x118>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d05d      	beq.n	8006368 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ac:	e02e      	b.n	800630c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ae:	4b34      	ldr	r3, [pc, #208]	; (8006380 <xTaskResumeAll+0x11c>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3318      	adds	r3, #24
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fd79 	bl	8005db2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fd74 	bl	8005db2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	2201      	movs	r2, #1
 80062d0:	409a      	lsls	r2, r3
 80062d2:	4b2c      	ldr	r3, [pc, #176]	; (8006384 <xTaskResumeAll+0x120>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <xTaskResumeAll+0x120>)
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4a27      	ldr	r2, [pc, #156]	; (8006388 <xTaskResumeAll+0x124>)
 80062ea:	441a      	add	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7ff fd00 	bl	8005cf8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4b23      	ldr	r3, [pc, #140]	; (800638c <xTaskResumeAll+0x128>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	429a      	cmp	r2, r3
 8006304:	d302      	bcc.n	800630c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006306:	4b22      	ldr	r3, [pc, #136]	; (8006390 <xTaskResumeAll+0x12c>)
 8006308:	2201      	movs	r2, #1
 800630a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800630c:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <xTaskResumeAll+0x11c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1cc      	bne.n	80062ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800631a:	f000 fa03 	bl	8006724 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800631e:	4b1d      	ldr	r3, [pc, #116]	; (8006394 <xTaskResumeAll+0x130>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d010      	beq.n	800634c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800632a:	f000 f837 	bl	800639c <xTaskIncrementTick>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006334:	4b16      	ldr	r3, [pc, #88]	; (8006390 <xTaskResumeAll+0x12c>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3b01      	subs	r3, #1
 800633e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f1      	bne.n	800632a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <xTaskResumeAll+0x130>)
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xTaskResumeAll+0x12c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d009      	beq.n	8006368 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006354:	2301      	movs	r3, #1
 8006356:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006358:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <xTaskResumeAll+0x134>)
 800635a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006368:	f000 fbb6 	bl	8006ad8 <vPortExitCritical>

	return xAlreadyYielded;
 800636c:	68bb      	ldr	r3, [r7, #8]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000418 	.word	0x20000418
 800637c:	200003f0 	.word	0x200003f0
 8006380:	200003b0 	.word	0x200003b0
 8006384:	200003f8 	.word	0x200003f8
 8006388:	200002f4 	.word	0x200002f4
 800638c:	200002f0 	.word	0x200002f0
 8006390:	20000404 	.word	0x20000404
 8006394:	20000400 	.word	0x20000400
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a6:	4b4e      	ldr	r3, [pc, #312]	; (80064e0 <xTaskIncrementTick+0x144>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f040 8087 	bne.w	80064be <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063b0:	4b4c      	ldr	r3, [pc, #304]	; (80064e4 <xTaskIncrementTick+0x148>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063b8:	4a4a      	ldr	r2, [pc, #296]	; (80064e4 <xTaskIncrementTick+0x148>)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11f      	bne.n	8006404 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80063c4:	4b48      	ldr	r3, [pc, #288]	; (80064e8 <xTaskIncrementTick+0x14c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <xTaskIncrementTick+0x46>
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	e7fe      	b.n	80063e0 <xTaskIncrementTick+0x44>
 80063e2:	4b41      	ldr	r3, [pc, #260]	; (80064e8 <xTaskIncrementTick+0x14c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	4b40      	ldr	r3, [pc, #256]	; (80064ec <xTaskIncrementTick+0x150>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a3e      	ldr	r2, [pc, #248]	; (80064e8 <xTaskIncrementTick+0x14c>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	4a3e      	ldr	r2, [pc, #248]	; (80064ec <xTaskIncrementTick+0x150>)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	4b3e      	ldr	r3, [pc, #248]	; (80064f0 <xTaskIncrementTick+0x154>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3301      	adds	r3, #1
 80063fc:	4a3c      	ldr	r2, [pc, #240]	; (80064f0 <xTaskIncrementTick+0x154>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	f000 f990 	bl	8006724 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006404:	4b3b      	ldr	r3, [pc, #236]	; (80064f4 <xTaskIncrementTick+0x158>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	429a      	cmp	r2, r3
 800640c:	d348      	bcc.n	80064a0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800640e:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <xTaskIncrementTick+0x14c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006418:	4b36      	ldr	r3, [pc, #216]	; (80064f4 <xTaskIncrementTick+0x158>)
 800641a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800641e:	601a      	str	r2, [r3, #0]
					break;
 8006420:	e03e      	b.n	80064a0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006422:	4b31      	ldr	r3, [pc, #196]	; (80064e8 <xTaskIncrementTick+0x14c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d203      	bcs.n	8006442 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800643a:	4a2e      	ldr	r2, [pc, #184]	; (80064f4 <xTaskIncrementTick+0x158>)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006440:	e02e      	b.n	80064a0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	3304      	adds	r3, #4
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff fcb3 	bl	8005db2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	3318      	adds	r3, #24
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff fcaa 	bl	8005db2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	2201      	movs	r2, #1
 8006464:	409a      	lsls	r2, r3
 8006466:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <xTaskIncrementTick+0x15c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4313      	orrs	r3, r2
 800646c:	4a22      	ldr	r2, [pc, #136]	; (80064f8 <xTaskIncrementTick+0x15c>)
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	4613      	mov	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4a1f      	ldr	r2, [pc, #124]	; (80064fc <xTaskIncrementTick+0x160>)
 800647e:	441a      	add	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f7ff fc36 	bl	8005cf8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006490:	4b1b      	ldr	r3, [pc, #108]	; (8006500 <xTaskIncrementTick+0x164>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	429a      	cmp	r2, r3
 8006498:	d3b9      	bcc.n	800640e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800649a:	2301      	movs	r3, #1
 800649c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800649e:	e7b6      	b.n	800640e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064a0:	4b17      	ldr	r3, [pc, #92]	; (8006500 <xTaskIncrementTick+0x164>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a6:	4915      	ldr	r1, [pc, #84]	; (80064fc <xTaskIncrementTick+0x160>)
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d907      	bls.n	80064c8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e004      	b.n	80064c8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064be:	4b11      	ldr	r3, [pc, #68]	; (8006504 <xTaskIncrementTick+0x168>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	4a0f      	ldr	r2, [pc, #60]	; (8006504 <xTaskIncrementTick+0x168>)
 80064c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064c8:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <xTaskIncrementTick+0x16c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064d4:	697b      	ldr	r3, [r7, #20]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000418 	.word	0x20000418
 80064e4:	200003f4 	.word	0x200003f4
 80064e8:	200003a8 	.word	0x200003a8
 80064ec:	200003ac 	.word	0x200003ac
 80064f0:	20000408 	.word	0x20000408
 80064f4:	20000410 	.word	0x20000410
 80064f8:	200003f8 	.word	0x200003f8
 80064fc:	200002f4 	.word	0x200002f4
 8006500:	200002f0 	.word	0x200002f0
 8006504:	20000400 	.word	0x20000400
 8006508:	20000404 	.word	0x20000404

0800650c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006512:	4b26      	ldr	r3, [pc, #152]	; (80065ac <vTaskSwitchContext+0xa0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800651a:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <vTaskSwitchContext+0xa4>)
 800651c:	2201      	movs	r2, #1
 800651e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006520:	e03e      	b.n	80065a0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006522:	4b23      	ldr	r3, [pc, #140]	; (80065b0 <vTaskSwitchContext+0xa4>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006528:	4b22      	ldr	r3, [pc, #136]	; (80065b4 <vTaskSwitchContext+0xa8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	fab3 f383 	clz	r3, r3
 8006534:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006536:	7afb      	ldrb	r3, [r7, #11]
 8006538:	f1c3 031f 	rsb	r3, r3, #31
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	491e      	ldr	r1, [pc, #120]	; (80065b8 <vTaskSwitchContext+0xac>)
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	e7fe      	b.n	8006564 <vTaskSwitchContext+0x58>
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <vTaskSwitchContext+0xac>)
 8006572:	4413      	add	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	605a      	str	r2, [r3, #4]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	3308      	adds	r3, #8
 8006588:	429a      	cmp	r2, r3
 800658a:	d104      	bne.n	8006596 <vTaskSwitchContext+0x8a>
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	4a07      	ldr	r2, [pc, #28]	; (80065bc <vTaskSwitchContext+0xb0>)
 800659e:	6013      	str	r3, [r2, #0]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000418 	.word	0x20000418
 80065b0:	20000404 	.word	0x20000404
 80065b4:	200003f8 	.word	0x200003f8
 80065b8:	200002f4 	.word	0x200002f4
 80065bc:	200002f0 	.word	0x200002f0

080065c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065c8:	f000 f852 	bl	8006670 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <prvIdleTask+0x28>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d9f9      	bls.n	80065c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <prvIdleTask+0x2c>)
 80065d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065e4:	e7f0      	b.n	80065c8 <prvIdleTask+0x8>
 80065e6:	bf00      	nop
 80065e8:	200002f4 	.word	0x200002f4
 80065ec:	e000ed04 	.word	0xe000ed04

080065f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065f6:	2300      	movs	r3, #0
 80065f8:	607b      	str	r3, [r7, #4]
 80065fa:	e00c      	b.n	8006616 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4a12      	ldr	r2, [pc, #72]	; (8006650 <prvInitialiseTaskLists+0x60>)
 8006608:	4413      	add	r3, r2
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fb47 	bl	8005c9e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3301      	adds	r3, #1
 8006614:	607b      	str	r3, [r7, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b06      	cmp	r3, #6
 800661a:	d9ef      	bls.n	80065fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800661c:	480d      	ldr	r0, [pc, #52]	; (8006654 <prvInitialiseTaskLists+0x64>)
 800661e:	f7ff fb3e 	bl	8005c9e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006622:	480d      	ldr	r0, [pc, #52]	; (8006658 <prvInitialiseTaskLists+0x68>)
 8006624:	f7ff fb3b 	bl	8005c9e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006628:	480c      	ldr	r0, [pc, #48]	; (800665c <prvInitialiseTaskLists+0x6c>)
 800662a:	f7ff fb38 	bl	8005c9e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800662e:	480c      	ldr	r0, [pc, #48]	; (8006660 <prvInitialiseTaskLists+0x70>)
 8006630:	f7ff fb35 	bl	8005c9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006634:	480b      	ldr	r0, [pc, #44]	; (8006664 <prvInitialiseTaskLists+0x74>)
 8006636:	f7ff fb32 	bl	8005c9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800663a:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <prvInitialiseTaskLists+0x78>)
 800663c:	4a05      	ldr	r2, [pc, #20]	; (8006654 <prvInitialiseTaskLists+0x64>)
 800663e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <prvInitialiseTaskLists+0x7c>)
 8006642:	4a05      	ldr	r2, [pc, #20]	; (8006658 <prvInitialiseTaskLists+0x68>)
 8006644:	601a      	str	r2, [r3, #0]
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	200002f4 	.word	0x200002f4
 8006654:	20000380 	.word	0x20000380
 8006658:	20000394 	.word	0x20000394
 800665c:	200003b0 	.word	0x200003b0
 8006660:	200003c4 	.word	0x200003c4
 8006664:	200003dc 	.word	0x200003dc
 8006668:	200003a8 	.word	0x200003a8
 800666c:	200003ac 	.word	0x200003ac

08006670 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006676:	e019      	b.n	80066ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006678:	f000 fa00 	bl	8006a7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800667c:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <prvCheckTasksWaitingTermination+0x4c>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3304      	adds	r3, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fb92 	bl	8005db2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800668e:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <prvCheckTasksWaitingTermination+0x50>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3b01      	subs	r3, #1
 8006694:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <prvCheckTasksWaitingTermination+0x50>)
 8006696:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006698:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <prvCheckTasksWaitingTermination+0x54>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3b01      	subs	r3, #1
 800669e:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <prvCheckTasksWaitingTermination+0x54>)
 80066a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066a2:	f000 fa19 	bl	8006ad8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f80e 	bl	80066c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <prvCheckTasksWaitingTermination+0x54>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e1      	bne.n	8006678 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	200003c4 	.word	0x200003c4
 80066c0:	200003f0 	.word	0x200003f0
 80066c4:	200003d8 	.word	0x200003d8

080066c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d108      	bne.n	80066ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fb6a 	bl	8006db8 <vPortFree>
				vPortFree( pxTCB );
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fb67 	bl	8006db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066ea:	e017      	b.n	800671c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d103      	bne.n	80066fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fb5e 	bl	8006db8 <vPortFree>
	}
 80066fc:	e00e      	b.n	800671c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006704:	2b02      	cmp	r3, #2
 8006706:	d009      	beq.n	800671c <prvDeleteTCB+0x54>
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e7fe      	b.n	800671a <prvDeleteTCB+0x52>
	}
 800671c:	bf00      	nop
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800672a:	4b0c      	ldr	r3, [pc, #48]	; (800675c <prvResetNextTaskUnblockTime+0x38>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <prvResetNextTaskUnblockTime+0x3c>)
 8006736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800673a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800673c:	e008      	b.n	8006750 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800673e:	4b07      	ldr	r3, [pc, #28]	; (800675c <prvResetNextTaskUnblockTime+0x38>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4a04      	ldr	r2, [pc, #16]	; (8006760 <prvResetNextTaskUnblockTime+0x3c>)
 800674e:	6013      	str	r3, [r2, #0]
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	200003a8 	.word	0x200003a8
 8006760:	20000410 	.word	0x20000410

08006764 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800676e:	4b29      	ldr	r3, [pc, #164]	; (8006814 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006774:	4b28      	ldr	r3, [pc, #160]	; (8006818 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3304      	adds	r3, #4
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fb19 	bl	8005db2 <uxListRemove>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006786:	4b24      	ldr	r3, [pc, #144]	; (8006818 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	2201      	movs	r2, #1
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43da      	mvns	r2, r3
 8006794:	4b21      	ldr	r3, [pc, #132]	; (800681c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4013      	ands	r3, r2
 800679a:	4a20      	ldr	r2, [pc, #128]	; (800681c <prvAddCurrentTaskToDelayedList+0xb8>)
 800679c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a4:	d10a      	bne.n	80067bc <prvAddCurrentTaskToDelayedList+0x58>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ac:	4b1a      	ldr	r3, [pc, #104]	; (8006818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	481a      	ldr	r0, [pc, #104]	; (8006820 <prvAddCurrentTaskToDelayedList+0xbc>)
 80067b6:	f7ff fa9f 	bl	8005cf8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067ba:	e026      	b.n	800680a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067c4:	4b14      	ldr	r3, [pc, #80]	; (8006818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d209      	bcs.n	80067e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067d4:	4b13      	ldr	r3, [pc, #76]	; (8006824 <prvAddCurrentTaskToDelayedList+0xc0>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3304      	adds	r3, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f7ff faad 	bl	8005d40 <vListInsert>
}
 80067e6:	e010      	b.n	800680a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067e8:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <prvAddCurrentTaskToDelayedList+0xc4>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4619      	mov	r1, r3
 80067f4:	4610      	mov	r0, r2
 80067f6:	f7ff faa3 	bl	8005d40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067fa:	4b0c      	ldr	r3, [pc, #48]	; (800682c <prvAddCurrentTaskToDelayedList+0xc8>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	d202      	bcs.n	800680a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006804:	4a09      	ldr	r2, [pc, #36]	; (800682c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6013      	str	r3, [r2, #0]
}
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	200003f4 	.word	0x200003f4
 8006818:	200002f0 	.word	0x200002f0
 800681c:	200003f8 	.word	0x200003f8
 8006820:	200003dc 	.word	0x200003dc
 8006824:	200003ac 	.word	0x200003ac
 8006828:	200003a8 	.word	0x200003a8
 800682c:	20000410 	.word	0x20000410

08006830 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3b04      	subs	r3, #4
 8006840:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3b04      	subs	r3, #4
 800684e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f023 0201 	bic.w	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3b04      	subs	r3, #4
 800685e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006860:	4a0c      	ldr	r2, [pc, #48]	; (8006894 <pxPortInitialiseStack+0x64>)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3b14      	subs	r3, #20
 800686a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3b04      	subs	r3, #4
 8006876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f06f 0202 	mvn.w	r2, #2
 800687e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3b20      	subs	r3, #32
 8006884:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006886:	68fb      	ldr	r3, [r7, #12]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	08006899 	.word	0x08006899

08006898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068a2:	4b11      	ldr	r3, [pc, #68]	; (80068e8 <prvTaskExitError+0x50>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068aa:	d009      	beq.n	80068c0 <prvTaskExitError+0x28>
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e7fe      	b.n	80068be <prvTaskExitError+0x26>
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068d2:	bf00      	nop
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0fc      	beq.n	80068d4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	2000000c 	.word	0x2000000c
 80068ec:	00000000 	.word	0x00000000

080068f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <pxCurrentTCBConst2>)
 80068f2:	6819      	ldr	r1, [r3, #0]
 80068f4:	6808      	ldr	r0, [r1, #0]
 80068f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fa:	f380 8809 	msr	PSP, r0
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f380 8811 	msr	BASEPRI, r0
 800690a:	4770      	bx	lr
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst2>:
 8006910:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006918:	4808      	ldr	r0, [pc, #32]	; (800693c <prvPortStartFirstTask+0x24>)
 800691a:	6800      	ldr	r0, [r0, #0]
 800691c:	6800      	ldr	r0, [r0, #0]
 800691e:	f380 8808 	msr	MSP, r0
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8814 	msr	CONTROL, r0
 800692a:	b662      	cpsie	i
 800692c:	b661      	cpsie	f
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	df00      	svc	0
 8006938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800693a:	bf00      	nop
 800693c:	e000ed08 	.word	0xe000ed08

08006940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006946:	4b44      	ldr	r3, [pc, #272]	; (8006a58 <xPortStartScheduler+0x118>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a44      	ldr	r2, [pc, #272]	; (8006a5c <xPortStartScheduler+0x11c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d109      	bne.n	8006964 <xPortStartScheduler+0x24>
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	e7fe      	b.n	8006962 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006964:	4b3c      	ldr	r3, [pc, #240]	; (8006a58 <xPortStartScheduler+0x118>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a3d      	ldr	r2, [pc, #244]	; (8006a60 <xPortStartScheduler+0x120>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d109      	bne.n	8006982 <xPortStartScheduler+0x42>
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	e7fe      	b.n	8006980 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006982:	4b38      	ldr	r3, [pc, #224]	; (8006a64 <xPortStartScheduler+0x124>)
 8006984:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	22ff      	movs	r2, #255	; 0xff
 8006992:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	4b30      	ldr	r3, [pc, #192]	; (8006a68 <xPortStartScheduler+0x128>)
 80069a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069aa:	4b30      	ldr	r3, [pc, #192]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069ac:	2207      	movs	r2, #7
 80069ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069b0:	e009      	b.n	80069c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80069b2:	4b2e      	ldr	r3, [pc, #184]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4a2c      	ldr	r2, [pc, #176]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d0ef      	beq.n	80069b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069d2:	4b26      	ldr	r3, [pc, #152]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f1c3 0307 	rsb	r3, r3, #7
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d009      	beq.n	80069f2 <xPortStartScheduler+0xb2>
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60bb      	str	r3, [r7, #8]
 80069f0:	e7fe      	b.n	80069f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069f2:	4b1e      	ldr	r3, [pc, #120]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069fc:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a04:	4a19      	ldr	r2, [pc, #100]	; (8006a6c <xPortStartScheduler+0x12c>)
 8006a06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a10:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <xPortStartScheduler+0x130>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <xPortStartScheduler+0x130>)
 8006a16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a1c:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <xPortStartScheduler+0x130>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a13      	ldr	r2, [pc, #76]	; (8006a70 <xPortStartScheduler+0x130>)
 8006a22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a28:	f000 f8d6 	bl	8006bd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a2c:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <xPortStartScheduler+0x134>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a32:	f000 f8f5 	bl	8006c20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a36:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <xPortStartScheduler+0x138>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a0f      	ldr	r2, [pc, #60]	; (8006a78 <xPortStartScheduler+0x138>)
 8006a3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a42:	f7ff ff69 	bl	8006918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a46:	f7ff fd61 	bl	800650c <vTaskSwitchContext>
	prvTaskExitError();
 8006a4a:	f7ff ff25 	bl	8006898 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	e000ed00 	.word	0xe000ed00
 8006a5c:	410fc271 	.word	0x410fc271
 8006a60:	410fc270 	.word	0x410fc270
 8006a64:	e000e400 	.word	0xe000e400
 8006a68:	2000041c 	.word	0x2000041c
 8006a6c:	20000420 	.word	0x20000420
 8006a70:	e000ed20 	.word	0xe000ed20
 8006a74:	2000000c 	.word	0x2000000c
 8006a78:	e000ef34 	.word	0xe000ef34

08006a7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <vPortEnterCritical+0x54>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	4a0d      	ldr	r2, [pc, #52]	; (8006ad0 <vPortEnterCritical+0x54>)
 8006a9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <vPortEnterCritical+0x54>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d10e      	bne.n	8006ac4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <vPortEnterCritical+0x58>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d009      	beq.n	8006ac4 <vPortEnterCritical+0x48>
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	603b      	str	r3, [r7, #0]
 8006ac2:	e7fe      	b.n	8006ac2 <vPortEnterCritical+0x46>
	}
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	2000000c 	.word	0x2000000c
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <vPortExitCritical+0x4c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <vPortExitCritical+0x22>
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	e7fe      	b.n	8006af8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <vPortExitCritical+0x4c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <vPortExitCritical+0x4c>)
 8006b02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b04:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <vPortExitCritical+0x4c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <vPortExitCritical+0x3e>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	2000000c 	.word	0x2000000c
	...

08006b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b30:	f3ef 8009 	mrs	r0, PSP
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <pxCurrentTCBConst>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f01e 0f10 	tst.w	lr, #16
 8006b40:	bf08      	it	eq
 8006b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	6010      	str	r0, [r2, #0]
 8006b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b54:	f380 8811 	msr	BASEPRI, r0
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f7ff fcd4 	bl	800650c <vTaskSwitchContext>
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f380 8811 	msr	BASEPRI, r0
 8006b6c:	bc09      	pop	{r0, r3}
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b76:	f01e 0f10 	tst.w	lr, #16
 8006b7a:	bf08      	it	eq
 8006b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b80:	f380 8809 	msr	PSP, r0
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w

08006b90 <pxCurrentTCBConst>:
 8006b90:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bb0:	f7ff fbf4 	bl	800639c <xTaskIncrementTick>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bba:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <SysTick_Handler+0x3c>)
 8006bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <vPortSetupTimerInterrupt+0x34>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <vPortSetupTimerInterrupt+0x38>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <vPortSetupTimerInterrupt+0x3c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a0a      	ldr	r2, [pc, #40]	; (8006c18 <vPortSetupTimerInterrupt+0x40>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	099b      	lsrs	r3, r3, #6
 8006bf4:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <vPortSetupTimerInterrupt+0x44>)
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <vPortSetupTimerInterrupt+0x34>)
 8006bfc:	2207      	movs	r2, #7
 8006bfe:	601a      	str	r2, [r3, #0]
}
 8006c00:	bf00      	nop
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000e010 	.word	0xe000e010
 8006c10:	e000e018 	.word	0xe000e018
 8006c14:	20000000 	.word	0x20000000
 8006c18:	10624dd3 	.word	0x10624dd3
 8006c1c:	e000e014 	.word	0xe000e014

08006c20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c30 <vPortEnableVFP+0x10>
 8006c24:	6801      	ldr	r1, [r0, #0]
 8006c26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c2a:	6001      	str	r1, [r0, #0]
 8006c2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c2e:	bf00      	nop
 8006c30:	e000ed88 	.word	0xe000ed88

08006c34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c40:	f7ff fb02 	bl	8006248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c44:	4b57      	ldr	r3, [pc, #348]	; (8006da4 <pvPortMalloc+0x170>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c4c:	f000 f90c 	bl	8006e68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c50:	4b55      	ldr	r3, [pc, #340]	; (8006da8 <pvPortMalloc+0x174>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 808c 	bne.w	8006d76 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01c      	beq.n	8006c9e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006c64:	2208      	movs	r2, #8
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4413      	add	r3, r2
 8006c6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d013      	beq.n	8006c9e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f023 0307 	bic.w	r3, r3, #7
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <pvPortMalloc+0x6a>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	e7fe      	b.n	8006c9c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d068      	beq.n	8006d76 <pvPortMalloc+0x142>
 8006ca4:	4b41      	ldr	r3, [pc, #260]	; (8006dac <pvPortMalloc+0x178>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d863      	bhi.n	8006d76 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cae:	4b40      	ldr	r3, [pc, #256]	; (8006db0 <pvPortMalloc+0x17c>)
 8006cb0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cb2:	4b3f      	ldr	r3, [pc, #252]	; (8006db0 <pvPortMalloc+0x17c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cb8:	e004      	b.n	8006cc4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d903      	bls.n	8006cd6 <pvPortMalloc+0xa2>
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f1      	bne.n	8006cba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cd6:	4b33      	ldr	r3, [pc, #204]	; (8006da4 <pvPortMalloc+0x170>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d04a      	beq.n	8006d76 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	4413      	add	r3, r2
 8006ce8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	1ad2      	subs	r2, r2, r3
 8006cfa:	2308      	movs	r3, #8
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d91e      	bls.n	8006d40 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4413      	add	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <pvPortMalloc+0xf4>
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	e7fe      	b.n	8006d26 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d3a:	69b8      	ldr	r0, [r7, #24]
 8006d3c:	f000 f8f6 	bl	8006f2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d40:	4b1a      	ldr	r3, [pc, #104]	; (8006dac <pvPortMalloc+0x178>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	4a18      	ldr	r2, [pc, #96]	; (8006dac <pvPortMalloc+0x178>)
 8006d4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d4e:	4b17      	ldr	r3, [pc, #92]	; (8006dac <pvPortMalloc+0x178>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b18      	ldr	r3, [pc, #96]	; (8006db4 <pvPortMalloc+0x180>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d203      	bcs.n	8006d62 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <pvPortMalloc+0x178>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <pvPortMalloc+0x180>)
 8006d60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <pvPortMalloc+0x174>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d76:	f7ff fa75 	bl	8006264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <pvPortMalloc+0x164>
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	e7fe      	b.n	8006d96 <pvPortMalloc+0x162>
	return pvReturn;
 8006d98:	69fb      	ldr	r3, [r7, #28]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3728      	adds	r7, #40	; 0x28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2000402c 	.word	0x2000402c
 8006da8:	20004038 	.word	0x20004038
 8006dac:	20004030 	.word	0x20004030
 8006db0:	20004024 	.word	0x20004024
 8006db4:	20004034 	.word	0x20004034

08006db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d046      	beq.n	8006e58 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dca:	2308      	movs	r3, #8
 8006dcc:	425b      	negs	r3, r3
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <vPortFree+0xa8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <vPortFree+0x42>
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	e7fe      	b.n	8006df8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <vPortFree+0x5e>
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60bb      	str	r3, [r7, #8]
 8006e14:	e7fe      	b.n	8006e14 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <vPortFree+0xa8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d019      	beq.n	8006e58 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d115      	bne.n	8006e58 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <vPortFree+0xa8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	43db      	mvns	r3, r3
 8006e36:	401a      	ands	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e3c:	f7ff fa04 	bl	8006248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <vPortFree+0xac>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4413      	add	r3, r2
 8006e4a:	4a06      	ldr	r2, [pc, #24]	; (8006e64 <vPortFree+0xac>)
 8006e4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e4e:	6938      	ldr	r0, [r7, #16]
 8006e50:	f000 f86c 	bl	8006f2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e54:	f7ff fa06 	bl	8006264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e58:	bf00      	nop
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20004038 	.word	0x20004038
 8006e64:	20004030 	.word	0x20004030

08006e68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e6e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e74:	4b27      	ldr	r3, [pc, #156]	; (8006f14 <prvHeapInit+0xac>)
 8006e76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00c      	beq.n	8006e9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3307      	adds	r3, #7
 8006e86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <prvHeapInit+0xac>)
 8006e98:	4413      	add	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <prvHeapInit+0xb0>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ea6:	4b1c      	ldr	r3, [pc, #112]	; (8006f18 <prvHeapInit+0xb0>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006eb4:	2208      	movs	r2, #8
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0307 	bic.w	r3, r3, #7
 8006ec2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <prvHeapInit+0xb4>)
 8006ec8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006eca:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <prvHeapInit+0xb4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ed2:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <prvHeapInit+0xb4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	1ad2      	subs	r2, r2, r3
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ee8:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <prvHeapInit+0xb4>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4a0a      	ldr	r2, [pc, #40]	; (8006f20 <prvHeapInit+0xb8>)
 8006ef6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <prvHeapInit+0xbc>)
 8006efe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f00:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <prvHeapInit+0xc0>)
 8006f02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f06:	601a      	str	r2, [r3, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	20000424 	.word	0x20000424
 8006f18:	20004024 	.word	0x20004024
 8006f1c:	2000402c 	.word	0x2000402c
 8006f20:	20004034 	.word	0x20004034
 8006f24:	20004030 	.word	0x20004030
 8006f28:	20004038 	.word	0x20004038

08006f2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f34:	4b28      	ldr	r3, [pc, #160]	; (8006fd8 <prvInsertBlockIntoFreeList+0xac>)
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e002      	b.n	8006f40 <prvInsertBlockIntoFreeList+0x14>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d8f7      	bhi.n	8006f3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	4413      	add	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d108      	bne.n	8006f6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	441a      	add	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	441a      	add	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d118      	bne.n	8006fb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <prvInsertBlockIntoFreeList+0xb0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d00d      	beq.n	8006faa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	441a      	add	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	e008      	b.n	8006fbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006faa:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <prvInsertBlockIntoFreeList+0xb0>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	e003      	b.n	8006fbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d002      	beq.n	8006fca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20004024 	.word	0x20004024
 8006fdc:	2000402c 	.word	0x2000402c

08006fe0 <__errno>:
 8006fe0:	4b01      	ldr	r3, [pc, #4]	; (8006fe8 <__errno+0x8>)
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000010 	.word	0x20000010

08006fec <__libc_init_array>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	4e0d      	ldr	r6, [pc, #52]	; (8007024 <__libc_init_array+0x38>)
 8006ff0:	4c0d      	ldr	r4, [pc, #52]	; (8007028 <__libc_init_array+0x3c>)
 8006ff2:	1ba4      	subs	r4, r4, r6
 8006ff4:	10a4      	asrs	r4, r4, #2
 8006ff6:	2500      	movs	r5, #0
 8006ff8:	42a5      	cmp	r5, r4
 8006ffa:	d109      	bne.n	8007010 <__libc_init_array+0x24>
 8006ffc:	4e0b      	ldr	r6, [pc, #44]	; (800702c <__libc_init_array+0x40>)
 8006ffe:	4c0c      	ldr	r4, [pc, #48]	; (8007030 <__libc_init_array+0x44>)
 8007000:	f001 ff6c 	bl	8008edc <_init>
 8007004:	1ba4      	subs	r4, r4, r6
 8007006:	10a4      	asrs	r4, r4, #2
 8007008:	2500      	movs	r5, #0
 800700a:	42a5      	cmp	r5, r4
 800700c:	d105      	bne.n	800701a <__libc_init_array+0x2e>
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007014:	4798      	blx	r3
 8007016:	3501      	adds	r5, #1
 8007018:	e7ee      	b.n	8006ff8 <__libc_init_array+0xc>
 800701a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800701e:	4798      	blx	r3
 8007020:	3501      	adds	r5, #1
 8007022:	e7f2      	b.n	800700a <__libc_init_array+0x1e>
 8007024:	08009168 	.word	0x08009168
 8007028:	08009168 	.word	0x08009168
 800702c:	08009168 	.word	0x08009168
 8007030:	0800916c 	.word	0x0800916c

08007034 <malloc>:
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <malloc+0xc>)
 8007036:	4601      	mov	r1, r0
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	f000 b859 	b.w	80070f0 <_malloc_r>
 800703e:	bf00      	nop
 8007040:	20000010 	.word	0x20000010

08007044 <memset>:
 8007044:	4402      	add	r2, r0
 8007046:	4603      	mov	r3, r0
 8007048:	4293      	cmp	r3, r2
 800704a:	d100      	bne.n	800704e <memset+0xa>
 800704c:	4770      	bx	lr
 800704e:	f803 1b01 	strb.w	r1, [r3], #1
 8007052:	e7f9      	b.n	8007048 <memset+0x4>

08007054 <_free_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4605      	mov	r5, r0
 8007058:	2900      	cmp	r1, #0
 800705a:	d045      	beq.n	80070e8 <_free_r+0x94>
 800705c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007060:	1f0c      	subs	r4, r1, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	bfb8      	it	lt
 8007066:	18e4      	addlt	r4, r4, r3
 8007068:	f000 f996 	bl	8007398 <__malloc_lock>
 800706c:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <_free_r+0x98>)
 800706e:	6813      	ldr	r3, [r2, #0]
 8007070:	4610      	mov	r0, r2
 8007072:	b933      	cbnz	r3, 8007082 <_free_r+0x2e>
 8007074:	6063      	str	r3, [r4, #4]
 8007076:	6014      	str	r4, [r2, #0]
 8007078:	4628      	mov	r0, r5
 800707a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800707e:	f000 b98c 	b.w	800739a <__malloc_unlock>
 8007082:	42a3      	cmp	r3, r4
 8007084:	d90c      	bls.n	80070a0 <_free_r+0x4c>
 8007086:	6821      	ldr	r1, [r4, #0]
 8007088:	1862      	adds	r2, r4, r1
 800708a:	4293      	cmp	r3, r2
 800708c:	bf04      	itt	eq
 800708e:	681a      	ldreq	r2, [r3, #0]
 8007090:	685b      	ldreq	r3, [r3, #4]
 8007092:	6063      	str	r3, [r4, #4]
 8007094:	bf04      	itt	eq
 8007096:	1852      	addeq	r2, r2, r1
 8007098:	6022      	streq	r2, [r4, #0]
 800709a:	6004      	str	r4, [r0, #0]
 800709c:	e7ec      	b.n	8007078 <_free_r+0x24>
 800709e:	4613      	mov	r3, r2
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	b10a      	cbz	r2, 80070a8 <_free_r+0x54>
 80070a4:	42a2      	cmp	r2, r4
 80070a6:	d9fa      	bls.n	800709e <_free_r+0x4a>
 80070a8:	6819      	ldr	r1, [r3, #0]
 80070aa:	1858      	adds	r0, r3, r1
 80070ac:	42a0      	cmp	r0, r4
 80070ae:	d10b      	bne.n	80070c8 <_free_r+0x74>
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	4401      	add	r1, r0
 80070b4:	1858      	adds	r0, r3, r1
 80070b6:	4282      	cmp	r2, r0
 80070b8:	6019      	str	r1, [r3, #0]
 80070ba:	d1dd      	bne.n	8007078 <_free_r+0x24>
 80070bc:	6810      	ldr	r0, [r2, #0]
 80070be:	6852      	ldr	r2, [r2, #4]
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	4401      	add	r1, r0
 80070c4:	6019      	str	r1, [r3, #0]
 80070c6:	e7d7      	b.n	8007078 <_free_r+0x24>
 80070c8:	d902      	bls.n	80070d0 <_free_r+0x7c>
 80070ca:	230c      	movs	r3, #12
 80070cc:	602b      	str	r3, [r5, #0]
 80070ce:	e7d3      	b.n	8007078 <_free_r+0x24>
 80070d0:	6820      	ldr	r0, [r4, #0]
 80070d2:	1821      	adds	r1, r4, r0
 80070d4:	428a      	cmp	r2, r1
 80070d6:	bf04      	itt	eq
 80070d8:	6811      	ldreq	r1, [r2, #0]
 80070da:	6852      	ldreq	r2, [r2, #4]
 80070dc:	6062      	str	r2, [r4, #4]
 80070de:	bf04      	itt	eq
 80070e0:	1809      	addeq	r1, r1, r0
 80070e2:	6021      	streq	r1, [r4, #0]
 80070e4:	605c      	str	r4, [r3, #4]
 80070e6:	e7c7      	b.n	8007078 <_free_r+0x24>
 80070e8:	bd38      	pop	{r3, r4, r5, pc}
 80070ea:	bf00      	nop
 80070ec:	2000403c 	.word	0x2000403c

080070f0 <_malloc_r>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	1ccd      	adds	r5, r1, #3
 80070f4:	f025 0503 	bic.w	r5, r5, #3
 80070f8:	3508      	adds	r5, #8
 80070fa:	2d0c      	cmp	r5, #12
 80070fc:	bf38      	it	cc
 80070fe:	250c      	movcc	r5, #12
 8007100:	2d00      	cmp	r5, #0
 8007102:	4606      	mov	r6, r0
 8007104:	db01      	blt.n	800710a <_malloc_r+0x1a>
 8007106:	42a9      	cmp	r1, r5
 8007108:	d903      	bls.n	8007112 <_malloc_r+0x22>
 800710a:	230c      	movs	r3, #12
 800710c:	6033      	str	r3, [r6, #0]
 800710e:	2000      	movs	r0, #0
 8007110:	bd70      	pop	{r4, r5, r6, pc}
 8007112:	f000 f941 	bl	8007398 <__malloc_lock>
 8007116:	4a21      	ldr	r2, [pc, #132]	; (800719c <_malloc_r+0xac>)
 8007118:	6814      	ldr	r4, [r2, #0]
 800711a:	4621      	mov	r1, r4
 800711c:	b991      	cbnz	r1, 8007144 <_malloc_r+0x54>
 800711e:	4c20      	ldr	r4, [pc, #128]	; (80071a0 <_malloc_r+0xb0>)
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	b91b      	cbnz	r3, 800712c <_malloc_r+0x3c>
 8007124:	4630      	mov	r0, r6
 8007126:	f000 f855 	bl	80071d4 <_sbrk_r>
 800712a:	6020      	str	r0, [r4, #0]
 800712c:	4629      	mov	r1, r5
 800712e:	4630      	mov	r0, r6
 8007130:	f000 f850 	bl	80071d4 <_sbrk_r>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d124      	bne.n	8007182 <_malloc_r+0x92>
 8007138:	230c      	movs	r3, #12
 800713a:	6033      	str	r3, [r6, #0]
 800713c:	4630      	mov	r0, r6
 800713e:	f000 f92c 	bl	800739a <__malloc_unlock>
 8007142:	e7e4      	b.n	800710e <_malloc_r+0x1e>
 8007144:	680b      	ldr	r3, [r1, #0]
 8007146:	1b5b      	subs	r3, r3, r5
 8007148:	d418      	bmi.n	800717c <_malloc_r+0x8c>
 800714a:	2b0b      	cmp	r3, #11
 800714c:	d90f      	bls.n	800716e <_malloc_r+0x7e>
 800714e:	600b      	str	r3, [r1, #0]
 8007150:	50cd      	str	r5, [r1, r3]
 8007152:	18cc      	adds	r4, r1, r3
 8007154:	4630      	mov	r0, r6
 8007156:	f000 f920 	bl	800739a <__malloc_unlock>
 800715a:	f104 000b 	add.w	r0, r4, #11
 800715e:	1d23      	adds	r3, r4, #4
 8007160:	f020 0007 	bic.w	r0, r0, #7
 8007164:	1ac3      	subs	r3, r0, r3
 8007166:	d0d3      	beq.n	8007110 <_malloc_r+0x20>
 8007168:	425a      	negs	r2, r3
 800716a:	50e2      	str	r2, [r4, r3]
 800716c:	e7d0      	b.n	8007110 <_malloc_r+0x20>
 800716e:	428c      	cmp	r4, r1
 8007170:	684b      	ldr	r3, [r1, #4]
 8007172:	bf16      	itet	ne
 8007174:	6063      	strne	r3, [r4, #4]
 8007176:	6013      	streq	r3, [r2, #0]
 8007178:	460c      	movne	r4, r1
 800717a:	e7eb      	b.n	8007154 <_malloc_r+0x64>
 800717c:	460c      	mov	r4, r1
 800717e:	6849      	ldr	r1, [r1, #4]
 8007180:	e7cc      	b.n	800711c <_malloc_r+0x2c>
 8007182:	1cc4      	adds	r4, r0, #3
 8007184:	f024 0403 	bic.w	r4, r4, #3
 8007188:	42a0      	cmp	r0, r4
 800718a:	d005      	beq.n	8007198 <_malloc_r+0xa8>
 800718c:	1a21      	subs	r1, r4, r0
 800718e:	4630      	mov	r0, r6
 8007190:	f000 f820 	bl	80071d4 <_sbrk_r>
 8007194:	3001      	adds	r0, #1
 8007196:	d0cf      	beq.n	8007138 <_malloc_r+0x48>
 8007198:	6025      	str	r5, [r4, #0]
 800719a:	e7db      	b.n	8007154 <_malloc_r+0x64>
 800719c:	2000403c 	.word	0x2000403c
 80071a0:	20004040 	.word	0x20004040

080071a4 <iprintf>:
 80071a4:	b40f      	push	{r0, r1, r2, r3}
 80071a6:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <iprintf+0x2c>)
 80071a8:	b513      	push	{r0, r1, r4, lr}
 80071aa:	681c      	ldr	r4, [r3, #0]
 80071ac:	b124      	cbz	r4, 80071b8 <iprintf+0x14>
 80071ae:	69a3      	ldr	r3, [r4, #24]
 80071b0:	b913      	cbnz	r3, 80071b8 <iprintf+0x14>
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 f866 	bl	8007284 <__sinit>
 80071b8:	ab05      	add	r3, sp, #20
 80071ba:	9a04      	ldr	r2, [sp, #16]
 80071bc:	68a1      	ldr	r1, [r4, #8]
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 f915 	bl	80073f0 <_vfiprintf_r>
 80071c6:	b002      	add	sp, #8
 80071c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071cc:	b004      	add	sp, #16
 80071ce:	4770      	bx	lr
 80071d0:	20000010 	.word	0x20000010

080071d4 <_sbrk_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4c06      	ldr	r4, [pc, #24]	; (80071f0 <_sbrk_r+0x1c>)
 80071d8:	2300      	movs	r3, #0
 80071da:	4605      	mov	r5, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	f7fb f8ac 	bl	800233c <_sbrk>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_sbrk_r+0x1a>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_sbrk_r+0x1a>
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	2000439c 	.word	0x2000439c

080071f4 <strcpy>:
 80071f4:	4603      	mov	r3, r0
 80071f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071fa:	f803 2b01 	strb.w	r2, [r3], #1
 80071fe:	2a00      	cmp	r2, #0
 8007200:	d1f9      	bne.n	80071f6 <strcpy+0x2>
 8007202:	4770      	bx	lr

08007204 <std>:
 8007204:	2300      	movs	r3, #0
 8007206:	b510      	push	{r4, lr}
 8007208:	4604      	mov	r4, r0
 800720a:	e9c0 3300 	strd	r3, r3, [r0]
 800720e:	6083      	str	r3, [r0, #8]
 8007210:	8181      	strh	r1, [r0, #12]
 8007212:	6643      	str	r3, [r0, #100]	; 0x64
 8007214:	81c2      	strh	r2, [r0, #14]
 8007216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800721a:	6183      	str	r3, [r0, #24]
 800721c:	4619      	mov	r1, r3
 800721e:	2208      	movs	r2, #8
 8007220:	305c      	adds	r0, #92	; 0x5c
 8007222:	f7ff ff0f 	bl	8007044 <memset>
 8007226:	4b05      	ldr	r3, [pc, #20]	; (800723c <std+0x38>)
 8007228:	6263      	str	r3, [r4, #36]	; 0x24
 800722a:	4b05      	ldr	r3, [pc, #20]	; (8007240 <std+0x3c>)
 800722c:	62a3      	str	r3, [r4, #40]	; 0x28
 800722e:	4b05      	ldr	r3, [pc, #20]	; (8007244 <std+0x40>)
 8007230:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007232:	4b05      	ldr	r3, [pc, #20]	; (8007248 <std+0x44>)
 8007234:	6224      	str	r4, [r4, #32]
 8007236:	6323      	str	r3, [r4, #48]	; 0x30
 8007238:	bd10      	pop	{r4, pc}
 800723a:	bf00      	nop
 800723c:	0800792d 	.word	0x0800792d
 8007240:	0800794f 	.word	0x0800794f
 8007244:	08007987 	.word	0x08007987
 8007248:	080079ab 	.word	0x080079ab

0800724c <_cleanup_r>:
 800724c:	4901      	ldr	r1, [pc, #4]	; (8007254 <_cleanup_r+0x8>)
 800724e:	f000 b885 	b.w	800735c <_fwalk_reent>
 8007252:	bf00      	nop
 8007254:	08007c85 	.word	0x08007c85

08007258 <__sfmoreglue>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	1e4a      	subs	r2, r1, #1
 800725c:	2568      	movs	r5, #104	; 0x68
 800725e:	4355      	muls	r5, r2
 8007260:	460e      	mov	r6, r1
 8007262:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007266:	f7ff ff43 	bl	80070f0 <_malloc_r>
 800726a:	4604      	mov	r4, r0
 800726c:	b140      	cbz	r0, 8007280 <__sfmoreglue+0x28>
 800726e:	2100      	movs	r1, #0
 8007270:	e9c0 1600 	strd	r1, r6, [r0]
 8007274:	300c      	adds	r0, #12
 8007276:	60a0      	str	r0, [r4, #8]
 8007278:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800727c:	f7ff fee2 	bl	8007044 <memset>
 8007280:	4620      	mov	r0, r4
 8007282:	bd70      	pop	{r4, r5, r6, pc}

08007284 <__sinit>:
 8007284:	6983      	ldr	r3, [r0, #24]
 8007286:	b510      	push	{r4, lr}
 8007288:	4604      	mov	r4, r0
 800728a:	bb33      	cbnz	r3, 80072da <__sinit+0x56>
 800728c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007290:	6503      	str	r3, [r0, #80]	; 0x50
 8007292:	4b12      	ldr	r3, [pc, #72]	; (80072dc <__sinit+0x58>)
 8007294:	4a12      	ldr	r2, [pc, #72]	; (80072e0 <__sinit+0x5c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6282      	str	r2, [r0, #40]	; 0x28
 800729a:	4298      	cmp	r0, r3
 800729c:	bf04      	itt	eq
 800729e:	2301      	moveq	r3, #1
 80072a0:	6183      	streq	r3, [r0, #24]
 80072a2:	f000 f81f 	bl	80072e4 <__sfp>
 80072a6:	6060      	str	r0, [r4, #4]
 80072a8:	4620      	mov	r0, r4
 80072aa:	f000 f81b 	bl	80072e4 <__sfp>
 80072ae:	60a0      	str	r0, [r4, #8]
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 f817 	bl	80072e4 <__sfp>
 80072b6:	2200      	movs	r2, #0
 80072b8:	60e0      	str	r0, [r4, #12]
 80072ba:	2104      	movs	r1, #4
 80072bc:	6860      	ldr	r0, [r4, #4]
 80072be:	f7ff ffa1 	bl	8007204 <std>
 80072c2:	2201      	movs	r2, #1
 80072c4:	2109      	movs	r1, #9
 80072c6:	68a0      	ldr	r0, [r4, #8]
 80072c8:	f7ff ff9c 	bl	8007204 <std>
 80072cc:	2202      	movs	r2, #2
 80072ce:	2112      	movs	r1, #18
 80072d0:	68e0      	ldr	r0, [r4, #12]
 80072d2:	f7ff ff97 	bl	8007204 <std>
 80072d6:	2301      	movs	r3, #1
 80072d8:	61a3      	str	r3, [r4, #24]
 80072da:	bd10      	pop	{r4, pc}
 80072dc:	08009080 	.word	0x08009080
 80072e0:	0800724d 	.word	0x0800724d

080072e4 <__sfp>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	4b1b      	ldr	r3, [pc, #108]	; (8007354 <__sfp+0x70>)
 80072e8:	681e      	ldr	r6, [r3, #0]
 80072ea:	69b3      	ldr	r3, [r6, #24]
 80072ec:	4607      	mov	r7, r0
 80072ee:	b913      	cbnz	r3, 80072f6 <__sfp+0x12>
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7ff ffc7 	bl	8007284 <__sinit>
 80072f6:	3648      	adds	r6, #72	; 0x48
 80072f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	d503      	bpl.n	8007308 <__sfp+0x24>
 8007300:	6833      	ldr	r3, [r6, #0]
 8007302:	b133      	cbz	r3, 8007312 <__sfp+0x2e>
 8007304:	6836      	ldr	r6, [r6, #0]
 8007306:	e7f7      	b.n	80072f8 <__sfp+0x14>
 8007308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800730c:	b16d      	cbz	r5, 800732a <__sfp+0x46>
 800730e:	3468      	adds	r4, #104	; 0x68
 8007310:	e7f4      	b.n	80072fc <__sfp+0x18>
 8007312:	2104      	movs	r1, #4
 8007314:	4638      	mov	r0, r7
 8007316:	f7ff ff9f 	bl	8007258 <__sfmoreglue>
 800731a:	6030      	str	r0, [r6, #0]
 800731c:	2800      	cmp	r0, #0
 800731e:	d1f1      	bne.n	8007304 <__sfp+0x20>
 8007320:	230c      	movs	r3, #12
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	4604      	mov	r4, r0
 8007326:	4620      	mov	r0, r4
 8007328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <__sfp+0x74>)
 800732c:	6665      	str	r5, [r4, #100]	; 0x64
 800732e:	e9c4 5500 	strd	r5, r5, [r4]
 8007332:	60a5      	str	r5, [r4, #8]
 8007334:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007338:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800733c:	2208      	movs	r2, #8
 800733e:	4629      	mov	r1, r5
 8007340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007344:	f7ff fe7e 	bl	8007044 <memset>
 8007348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800734c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007350:	e7e9      	b.n	8007326 <__sfp+0x42>
 8007352:	bf00      	nop
 8007354:	08009080 	.word	0x08009080
 8007358:	ffff0001 	.word	0xffff0001

0800735c <_fwalk_reent>:
 800735c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007360:	4680      	mov	r8, r0
 8007362:	4689      	mov	r9, r1
 8007364:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007368:	2600      	movs	r6, #0
 800736a:	b914      	cbnz	r4, 8007372 <_fwalk_reent+0x16>
 800736c:	4630      	mov	r0, r6
 800736e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007372:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007376:	3f01      	subs	r7, #1
 8007378:	d501      	bpl.n	800737e <_fwalk_reent+0x22>
 800737a:	6824      	ldr	r4, [r4, #0]
 800737c:	e7f5      	b.n	800736a <_fwalk_reent+0xe>
 800737e:	89ab      	ldrh	r3, [r5, #12]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d907      	bls.n	8007394 <_fwalk_reent+0x38>
 8007384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007388:	3301      	adds	r3, #1
 800738a:	d003      	beq.n	8007394 <_fwalk_reent+0x38>
 800738c:	4629      	mov	r1, r5
 800738e:	4640      	mov	r0, r8
 8007390:	47c8      	blx	r9
 8007392:	4306      	orrs	r6, r0
 8007394:	3568      	adds	r5, #104	; 0x68
 8007396:	e7ee      	b.n	8007376 <_fwalk_reent+0x1a>

08007398 <__malloc_lock>:
 8007398:	4770      	bx	lr

0800739a <__malloc_unlock>:
 800739a:	4770      	bx	lr

0800739c <__sfputc_r>:
 800739c:	6893      	ldr	r3, [r2, #8]
 800739e:	3b01      	subs	r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	b410      	push	{r4}
 80073a4:	6093      	str	r3, [r2, #8]
 80073a6:	da08      	bge.n	80073ba <__sfputc_r+0x1e>
 80073a8:	6994      	ldr	r4, [r2, #24]
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	db01      	blt.n	80073b2 <__sfputc_r+0x16>
 80073ae:	290a      	cmp	r1, #10
 80073b0:	d103      	bne.n	80073ba <__sfputc_r+0x1e>
 80073b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073b6:	f000 bafd 	b.w	80079b4 <__swbuf_r>
 80073ba:	6813      	ldr	r3, [r2, #0]
 80073bc:	1c58      	adds	r0, r3, #1
 80073be:	6010      	str	r0, [r2, #0]
 80073c0:	7019      	strb	r1, [r3, #0]
 80073c2:	4608      	mov	r0, r1
 80073c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <__sfputs_r>:
 80073ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073cc:	4606      	mov	r6, r0
 80073ce:	460f      	mov	r7, r1
 80073d0:	4614      	mov	r4, r2
 80073d2:	18d5      	adds	r5, r2, r3
 80073d4:	42ac      	cmp	r4, r5
 80073d6:	d101      	bne.n	80073dc <__sfputs_r+0x12>
 80073d8:	2000      	movs	r0, #0
 80073da:	e007      	b.n	80073ec <__sfputs_r+0x22>
 80073dc:	463a      	mov	r2, r7
 80073de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7ff ffda 	bl	800739c <__sfputc_r>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d1f3      	bne.n	80073d4 <__sfputs_r+0xa>
 80073ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073f0 <_vfiprintf_r>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	460c      	mov	r4, r1
 80073f6:	b09d      	sub	sp, #116	; 0x74
 80073f8:	4617      	mov	r7, r2
 80073fa:	461d      	mov	r5, r3
 80073fc:	4606      	mov	r6, r0
 80073fe:	b118      	cbz	r0, 8007408 <_vfiprintf_r+0x18>
 8007400:	6983      	ldr	r3, [r0, #24]
 8007402:	b90b      	cbnz	r3, 8007408 <_vfiprintf_r+0x18>
 8007404:	f7ff ff3e 	bl	8007284 <__sinit>
 8007408:	4b7c      	ldr	r3, [pc, #496]	; (80075fc <_vfiprintf_r+0x20c>)
 800740a:	429c      	cmp	r4, r3
 800740c:	d158      	bne.n	80074c0 <_vfiprintf_r+0xd0>
 800740e:	6874      	ldr	r4, [r6, #4]
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	0718      	lsls	r0, r3, #28
 8007414:	d55e      	bpl.n	80074d4 <_vfiprintf_r+0xe4>
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d05b      	beq.n	80074d4 <_vfiprintf_r+0xe4>
 800741c:	2300      	movs	r3, #0
 800741e:	9309      	str	r3, [sp, #36]	; 0x24
 8007420:	2320      	movs	r3, #32
 8007422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007426:	2330      	movs	r3, #48	; 0x30
 8007428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800742c:	9503      	str	r5, [sp, #12]
 800742e:	f04f 0b01 	mov.w	fp, #1
 8007432:	46b8      	mov	r8, r7
 8007434:	4645      	mov	r5, r8
 8007436:	f815 3b01 	ldrb.w	r3, [r5], #1
 800743a:	b10b      	cbz	r3, 8007440 <_vfiprintf_r+0x50>
 800743c:	2b25      	cmp	r3, #37	; 0x25
 800743e:	d154      	bne.n	80074ea <_vfiprintf_r+0xfa>
 8007440:	ebb8 0a07 	subs.w	sl, r8, r7
 8007444:	d00b      	beq.n	800745e <_vfiprintf_r+0x6e>
 8007446:	4653      	mov	r3, sl
 8007448:	463a      	mov	r2, r7
 800744a:	4621      	mov	r1, r4
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff ffbc 	bl	80073ca <__sfputs_r>
 8007452:	3001      	adds	r0, #1
 8007454:	f000 80c2 	beq.w	80075dc <_vfiprintf_r+0x1ec>
 8007458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745a:	4453      	add	r3, sl
 800745c:	9309      	str	r3, [sp, #36]	; 0x24
 800745e:	f898 3000 	ldrb.w	r3, [r8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 80ba 	beq.w	80075dc <_vfiprintf_r+0x1ec>
 8007468:	2300      	movs	r3, #0
 800746a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800746e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	9307      	str	r3, [sp, #28]
 8007476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800747a:	931a      	str	r3, [sp, #104]	; 0x68
 800747c:	46a8      	mov	r8, r5
 800747e:	2205      	movs	r2, #5
 8007480:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007484:	485e      	ldr	r0, [pc, #376]	; (8007600 <_vfiprintf_r+0x210>)
 8007486:	f7f8 febb 	bl	8000200 <memchr>
 800748a:	9b04      	ldr	r3, [sp, #16]
 800748c:	bb78      	cbnz	r0, 80074ee <_vfiprintf_r+0xfe>
 800748e:	06d9      	lsls	r1, r3, #27
 8007490:	bf44      	itt	mi
 8007492:	2220      	movmi	r2, #32
 8007494:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007498:	071a      	lsls	r2, r3, #28
 800749a:	bf44      	itt	mi
 800749c:	222b      	movmi	r2, #43	; 0x2b
 800749e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074a2:	782a      	ldrb	r2, [r5, #0]
 80074a4:	2a2a      	cmp	r2, #42	; 0x2a
 80074a6:	d02a      	beq.n	80074fe <_vfiprintf_r+0x10e>
 80074a8:	9a07      	ldr	r2, [sp, #28]
 80074aa:	46a8      	mov	r8, r5
 80074ac:	2000      	movs	r0, #0
 80074ae:	250a      	movs	r5, #10
 80074b0:	4641      	mov	r1, r8
 80074b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074b6:	3b30      	subs	r3, #48	; 0x30
 80074b8:	2b09      	cmp	r3, #9
 80074ba:	d969      	bls.n	8007590 <_vfiprintf_r+0x1a0>
 80074bc:	b360      	cbz	r0, 8007518 <_vfiprintf_r+0x128>
 80074be:	e024      	b.n	800750a <_vfiprintf_r+0x11a>
 80074c0:	4b50      	ldr	r3, [pc, #320]	; (8007604 <_vfiprintf_r+0x214>)
 80074c2:	429c      	cmp	r4, r3
 80074c4:	d101      	bne.n	80074ca <_vfiprintf_r+0xda>
 80074c6:	68b4      	ldr	r4, [r6, #8]
 80074c8:	e7a2      	b.n	8007410 <_vfiprintf_r+0x20>
 80074ca:	4b4f      	ldr	r3, [pc, #316]	; (8007608 <_vfiprintf_r+0x218>)
 80074cc:	429c      	cmp	r4, r3
 80074ce:	bf08      	it	eq
 80074d0:	68f4      	ldreq	r4, [r6, #12]
 80074d2:	e79d      	b.n	8007410 <_vfiprintf_r+0x20>
 80074d4:	4621      	mov	r1, r4
 80074d6:	4630      	mov	r0, r6
 80074d8:	f000 fad0 	bl	8007a7c <__swsetup_r>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d09d      	beq.n	800741c <_vfiprintf_r+0x2c>
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074e4:	b01d      	add	sp, #116	; 0x74
 80074e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ea:	46a8      	mov	r8, r5
 80074ec:	e7a2      	b.n	8007434 <_vfiprintf_r+0x44>
 80074ee:	4a44      	ldr	r2, [pc, #272]	; (8007600 <_vfiprintf_r+0x210>)
 80074f0:	1a80      	subs	r0, r0, r2
 80074f2:	fa0b f000 	lsl.w	r0, fp, r0
 80074f6:	4318      	orrs	r0, r3
 80074f8:	9004      	str	r0, [sp, #16]
 80074fa:	4645      	mov	r5, r8
 80074fc:	e7be      	b.n	800747c <_vfiprintf_r+0x8c>
 80074fe:	9a03      	ldr	r2, [sp, #12]
 8007500:	1d11      	adds	r1, r2, #4
 8007502:	6812      	ldr	r2, [r2, #0]
 8007504:	9103      	str	r1, [sp, #12]
 8007506:	2a00      	cmp	r2, #0
 8007508:	db01      	blt.n	800750e <_vfiprintf_r+0x11e>
 800750a:	9207      	str	r2, [sp, #28]
 800750c:	e004      	b.n	8007518 <_vfiprintf_r+0x128>
 800750e:	4252      	negs	r2, r2
 8007510:	f043 0302 	orr.w	r3, r3, #2
 8007514:	9207      	str	r2, [sp, #28]
 8007516:	9304      	str	r3, [sp, #16]
 8007518:	f898 3000 	ldrb.w	r3, [r8]
 800751c:	2b2e      	cmp	r3, #46	; 0x2e
 800751e:	d10e      	bne.n	800753e <_vfiprintf_r+0x14e>
 8007520:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007524:	2b2a      	cmp	r3, #42	; 0x2a
 8007526:	d138      	bne.n	800759a <_vfiprintf_r+0x1aa>
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	1d1a      	adds	r2, r3, #4
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	9203      	str	r2, [sp, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfb8      	it	lt
 8007534:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007538:	f108 0802 	add.w	r8, r8, #2
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	4d33      	ldr	r5, [pc, #204]	; (800760c <_vfiprintf_r+0x21c>)
 8007540:	f898 1000 	ldrb.w	r1, [r8]
 8007544:	2203      	movs	r2, #3
 8007546:	4628      	mov	r0, r5
 8007548:	f7f8 fe5a 	bl	8000200 <memchr>
 800754c:	b140      	cbz	r0, 8007560 <_vfiprintf_r+0x170>
 800754e:	2340      	movs	r3, #64	; 0x40
 8007550:	1b40      	subs	r0, r0, r5
 8007552:	fa03 f000 	lsl.w	r0, r3, r0
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	4303      	orrs	r3, r0
 800755a:	f108 0801 	add.w	r8, r8, #1
 800755e:	9304      	str	r3, [sp, #16]
 8007560:	f898 1000 	ldrb.w	r1, [r8]
 8007564:	482a      	ldr	r0, [pc, #168]	; (8007610 <_vfiprintf_r+0x220>)
 8007566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800756a:	2206      	movs	r2, #6
 800756c:	f108 0701 	add.w	r7, r8, #1
 8007570:	f7f8 fe46 	bl	8000200 <memchr>
 8007574:	2800      	cmp	r0, #0
 8007576:	d037      	beq.n	80075e8 <_vfiprintf_r+0x1f8>
 8007578:	4b26      	ldr	r3, [pc, #152]	; (8007614 <_vfiprintf_r+0x224>)
 800757a:	bb1b      	cbnz	r3, 80075c4 <_vfiprintf_r+0x1d4>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	3307      	adds	r3, #7
 8007580:	f023 0307 	bic.w	r3, r3, #7
 8007584:	3308      	adds	r3, #8
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758a:	444b      	add	r3, r9
 800758c:	9309      	str	r3, [sp, #36]	; 0x24
 800758e:	e750      	b.n	8007432 <_vfiprintf_r+0x42>
 8007590:	fb05 3202 	mla	r2, r5, r2, r3
 8007594:	2001      	movs	r0, #1
 8007596:	4688      	mov	r8, r1
 8007598:	e78a      	b.n	80074b0 <_vfiprintf_r+0xc0>
 800759a:	2300      	movs	r3, #0
 800759c:	f108 0801 	add.w	r8, r8, #1
 80075a0:	9305      	str	r3, [sp, #20]
 80075a2:	4619      	mov	r1, r3
 80075a4:	250a      	movs	r5, #10
 80075a6:	4640      	mov	r0, r8
 80075a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ac:	3a30      	subs	r2, #48	; 0x30
 80075ae:	2a09      	cmp	r2, #9
 80075b0:	d903      	bls.n	80075ba <_vfiprintf_r+0x1ca>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0c3      	beq.n	800753e <_vfiprintf_r+0x14e>
 80075b6:	9105      	str	r1, [sp, #20]
 80075b8:	e7c1      	b.n	800753e <_vfiprintf_r+0x14e>
 80075ba:	fb05 2101 	mla	r1, r5, r1, r2
 80075be:	2301      	movs	r3, #1
 80075c0:	4680      	mov	r8, r0
 80075c2:	e7f0      	b.n	80075a6 <_vfiprintf_r+0x1b6>
 80075c4:	ab03      	add	r3, sp, #12
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	4622      	mov	r2, r4
 80075ca:	4b13      	ldr	r3, [pc, #76]	; (8007618 <_vfiprintf_r+0x228>)
 80075cc:	a904      	add	r1, sp, #16
 80075ce:	4630      	mov	r0, r6
 80075d0:	f3af 8000 	nop.w
 80075d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80075d8:	4681      	mov	r9, r0
 80075da:	d1d5      	bne.n	8007588 <_vfiprintf_r+0x198>
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	065b      	lsls	r3, r3, #25
 80075e0:	f53f af7e 	bmi.w	80074e0 <_vfiprintf_r+0xf0>
 80075e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075e6:	e77d      	b.n	80074e4 <_vfiprintf_r+0xf4>
 80075e8:	ab03      	add	r3, sp, #12
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	4622      	mov	r2, r4
 80075ee:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <_vfiprintf_r+0x228>)
 80075f0:	a904      	add	r1, sp, #16
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 f888 	bl	8007708 <_printf_i>
 80075f8:	e7ec      	b.n	80075d4 <_vfiprintf_r+0x1e4>
 80075fa:	bf00      	nop
 80075fc:	080090a4 	.word	0x080090a4
 8007600:	080090e4 	.word	0x080090e4
 8007604:	080090c4 	.word	0x080090c4
 8007608:	08009084 	.word	0x08009084
 800760c:	080090ea 	.word	0x080090ea
 8007610:	080090ee 	.word	0x080090ee
 8007614:	00000000 	.word	0x00000000
 8007618:	080073cb 	.word	0x080073cb

0800761c <_printf_common>:
 800761c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007620:	4691      	mov	r9, r2
 8007622:	461f      	mov	r7, r3
 8007624:	688a      	ldr	r2, [r1, #8]
 8007626:	690b      	ldr	r3, [r1, #16]
 8007628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800762c:	4293      	cmp	r3, r2
 800762e:	bfb8      	it	lt
 8007630:	4613      	movlt	r3, r2
 8007632:	f8c9 3000 	str.w	r3, [r9]
 8007636:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800763a:	4606      	mov	r6, r0
 800763c:	460c      	mov	r4, r1
 800763e:	b112      	cbz	r2, 8007646 <_printf_common+0x2a>
 8007640:	3301      	adds	r3, #1
 8007642:	f8c9 3000 	str.w	r3, [r9]
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	0699      	lsls	r1, r3, #26
 800764a:	bf42      	ittt	mi
 800764c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007650:	3302      	addmi	r3, #2
 8007652:	f8c9 3000 	strmi.w	r3, [r9]
 8007656:	6825      	ldr	r5, [r4, #0]
 8007658:	f015 0506 	ands.w	r5, r5, #6
 800765c:	d107      	bne.n	800766e <_printf_common+0x52>
 800765e:	f104 0a19 	add.w	sl, r4, #25
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	f8d9 2000 	ldr.w	r2, [r9]
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	42ab      	cmp	r3, r5
 800766c:	dc28      	bgt.n	80076c0 <_printf_common+0xa4>
 800766e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	3300      	adds	r3, #0
 8007676:	bf18      	it	ne
 8007678:	2301      	movne	r3, #1
 800767a:	0692      	lsls	r2, r2, #26
 800767c:	d42d      	bmi.n	80076da <_printf_common+0xbe>
 800767e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007682:	4639      	mov	r1, r7
 8007684:	4630      	mov	r0, r6
 8007686:	47c0      	blx	r8
 8007688:	3001      	adds	r0, #1
 800768a:	d020      	beq.n	80076ce <_printf_common+0xb2>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	68e5      	ldr	r5, [r4, #12]
 8007690:	f8d9 2000 	ldr.w	r2, [r9]
 8007694:	f003 0306 	and.w	r3, r3, #6
 8007698:	2b04      	cmp	r3, #4
 800769a:	bf08      	it	eq
 800769c:	1aad      	subeq	r5, r5, r2
 800769e:	68a3      	ldr	r3, [r4, #8]
 80076a0:	6922      	ldr	r2, [r4, #16]
 80076a2:	bf0c      	ite	eq
 80076a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076a8:	2500      	movne	r5, #0
 80076aa:	4293      	cmp	r3, r2
 80076ac:	bfc4      	itt	gt
 80076ae:	1a9b      	subgt	r3, r3, r2
 80076b0:	18ed      	addgt	r5, r5, r3
 80076b2:	f04f 0900 	mov.w	r9, #0
 80076b6:	341a      	adds	r4, #26
 80076b8:	454d      	cmp	r5, r9
 80076ba:	d11a      	bne.n	80076f2 <_printf_common+0xd6>
 80076bc:	2000      	movs	r0, #0
 80076be:	e008      	b.n	80076d2 <_printf_common+0xb6>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4652      	mov	r2, sl
 80076c4:	4639      	mov	r1, r7
 80076c6:	4630      	mov	r0, r6
 80076c8:	47c0      	blx	r8
 80076ca:	3001      	adds	r0, #1
 80076cc:	d103      	bne.n	80076d6 <_printf_common+0xba>
 80076ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d6:	3501      	adds	r5, #1
 80076d8:	e7c3      	b.n	8007662 <_printf_common+0x46>
 80076da:	18e1      	adds	r1, r4, r3
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	2030      	movs	r0, #48	; 0x30
 80076e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076e4:	4422      	add	r2, r4
 80076e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ee:	3302      	adds	r3, #2
 80076f0:	e7c5      	b.n	800767e <_printf_common+0x62>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4622      	mov	r2, r4
 80076f6:	4639      	mov	r1, r7
 80076f8:	4630      	mov	r0, r6
 80076fa:	47c0      	blx	r8
 80076fc:	3001      	adds	r0, #1
 80076fe:	d0e6      	beq.n	80076ce <_printf_common+0xb2>
 8007700:	f109 0901 	add.w	r9, r9, #1
 8007704:	e7d8      	b.n	80076b8 <_printf_common+0x9c>
	...

08007708 <_printf_i>:
 8007708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800770c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007710:	460c      	mov	r4, r1
 8007712:	7e09      	ldrb	r1, [r1, #24]
 8007714:	b085      	sub	sp, #20
 8007716:	296e      	cmp	r1, #110	; 0x6e
 8007718:	4617      	mov	r7, r2
 800771a:	4606      	mov	r6, r0
 800771c:	4698      	mov	r8, r3
 800771e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007720:	f000 80b3 	beq.w	800788a <_printf_i+0x182>
 8007724:	d822      	bhi.n	800776c <_printf_i+0x64>
 8007726:	2963      	cmp	r1, #99	; 0x63
 8007728:	d036      	beq.n	8007798 <_printf_i+0x90>
 800772a:	d80a      	bhi.n	8007742 <_printf_i+0x3a>
 800772c:	2900      	cmp	r1, #0
 800772e:	f000 80b9 	beq.w	80078a4 <_printf_i+0x19c>
 8007732:	2958      	cmp	r1, #88	; 0x58
 8007734:	f000 8083 	beq.w	800783e <_printf_i+0x136>
 8007738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800773c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007740:	e032      	b.n	80077a8 <_printf_i+0xa0>
 8007742:	2964      	cmp	r1, #100	; 0x64
 8007744:	d001      	beq.n	800774a <_printf_i+0x42>
 8007746:	2969      	cmp	r1, #105	; 0x69
 8007748:	d1f6      	bne.n	8007738 <_printf_i+0x30>
 800774a:	6820      	ldr	r0, [r4, #0]
 800774c:	6813      	ldr	r3, [r2, #0]
 800774e:	0605      	lsls	r5, r0, #24
 8007750:	f103 0104 	add.w	r1, r3, #4
 8007754:	d52a      	bpl.n	80077ac <_printf_i+0xa4>
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	da03      	bge.n	8007766 <_printf_i+0x5e>
 800775e:	222d      	movs	r2, #45	; 0x2d
 8007760:	425b      	negs	r3, r3
 8007762:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007766:	486f      	ldr	r0, [pc, #444]	; (8007924 <_printf_i+0x21c>)
 8007768:	220a      	movs	r2, #10
 800776a:	e039      	b.n	80077e0 <_printf_i+0xd8>
 800776c:	2973      	cmp	r1, #115	; 0x73
 800776e:	f000 809d 	beq.w	80078ac <_printf_i+0x1a4>
 8007772:	d808      	bhi.n	8007786 <_printf_i+0x7e>
 8007774:	296f      	cmp	r1, #111	; 0x6f
 8007776:	d020      	beq.n	80077ba <_printf_i+0xb2>
 8007778:	2970      	cmp	r1, #112	; 0x70
 800777a:	d1dd      	bne.n	8007738 <_printf_i+0x30>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	f043 0320 	orr.w	r3, r3, #32
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	e003      	b.n	800778e <_printf_i+0x86>
 8007786:	2975      	cmp	r1, #117	; 0x75
 8007788:	d017      	beq.n	80077ba <_printf_i+0xb2>
 800778a:	2978      	cmp	r1, #120	; 0x78
 800778c:	d1d4      	bne.n	8007738 <_printf_i+0x30>
 800778e:	2378      	movs	r3, #120	; 0x78
 8007790:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007794:	4864      	ldr	r0, [pc, #400]	; (8007928 <_printf_i+0x220>)
 8007796:	e055      	b.n	8007844 <_printf_i+0x13c>
 8007798:	6813      	ldr	r3, [r2, #0]
 800779a:	1d19      	adds	r1, r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6011      	str	r1, [r2, #0]
 80077a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077a8:	2301      	movs	r3, #1
 80077aa:	e08c      	b.n	80078c6 <_printf_i+0x1be>
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6011      	str	r1, [r2, #0]
 80077b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077b4:	bf18      	it	ne
 80077b6:	b21b      	sxthne	r3, r3
 80077b8:	e7cf      	b.n	800775a <_printf_i+0x52>
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	6825      	ldr	r5, [r4, #0]
 80077be:	1d18      	adds	r0, r3, #4
 80077c0:	6010      	str	r0, [r2, #0]
 80077c2:	0628      	lsls	r0, r5, #24
 80077c4:	d501      	bpl.n	80077ca <_printf_i+0xc2>
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	e002      	b.n	80077d0 <_printf_i+0xc8>
 80077ca:	0668      	lsls	r0, r5, #25
 80077cc:	d5fb      	bpl.n	80077c6 <_printf_i+0xbe>
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	4854      	ldr	r0, [pc, #336]	; (8007924 <_printf_i+0x21c>)
 80077d2:	296f      	cmp	r1, #111	; 0x6f
 80077d4:	bf14      	ite	ne
 80077d6:	220a      	movne	r2, #10
 80077d8:	2208      	moveq	r2, #8
 80077da:	2100      	movs	r1, #0
 80077dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077e0:	6865      	ldr	r5, [r4, #4]
 80077e2:	60a5      	str	r5, [r4, #8]
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	f2c0 8095 	blt.w	8007914 <_printf_i+0x20c>
 80077ea:	6821      	ldr	r1, [r4, #0]
 80077ec:	f021 0104 	bic.w	r1, r1, #4
 80077f0:	6021      	str	r1, [r4, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d13d      	bne.n	8007872 <_printf_i+0x16a>
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	f040 808e 	bne.w	8007918 <_printf_i+0x210>
 80077fc:	4665      	mov	r5, ip
 80077fe:	2a08      	cmp	r2, #8
 8007800:	d10b      	bne.n	800781a <_printf_i+0x112>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	07db      	lsls	r3, r3, #31
 8007806:	d508      	bpl.n	800781a <_printf_i+0x112>
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	6862      	ldr	r2, [r4, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	bfde      	ittt	le
 8007810:	2330      	movle	r3, #48	; 0x30
 8007812:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007816:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800781a:	ebac 0305 	sub.w	r3, ip, r5
 800781e:	6123      	str	r3, [r4, #16]
 8007820:	f8cd 8000 	str.w	r8, [sp]
 8007824:	463b      	mov	r3, r7
 8007826:	aa03      	add	r2, sp, #12
 8007828:	4621      	mov	r1, r4
 800782a:	4630      	mov	r0, r6
 800782c:	f7ff fef6 	bl	800761c <_printf_common>
 8007830:	3001      	adds	r0, #1
 8007832:	d14d      	bne.n	80078d0 <_printf_i+0x1c8>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007838:	b005      	add	sp, #20
 800783a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800783e:	4839      	ldr	r0, [pc, #228]	; (8007924 <_printf_i+0x21c>)
 8007840:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007844:	6813      	ldr	r3, [r2, #0]
 8007846:	6821      	ldr	r1, [r4, #0]
 8007848:	1d1d      	adds	r5, r3, #4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6015      	str	r5, [r2, #0]
 800784e:	060a      	lsls	r2, r1, #24
 8007850:	d50b      	bpl.n	800786a <_printf_i+0x162>
 8007852:	07ca      	lsls	r2, r1, #31
 8007854:	bf44      	itt	mi
 8007856:	f041 0120 	orrmi.w	r1, r1, #32
 800785a:	6021      	strmi	r1, [r4, #0]
 800785c:	b91b      	cbnz	r3, 8007866 <_printf_i+0x15e>
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	f022 0220 	bic.w	r2, r2, #32
 8007864:	6022      	str	r2, [r4, #0]
 8007866:	2210      	movs	r2, #16
 8007868:	e7b7      	b.n	80077da <_printf_i+0xd2>
 800786a:	064d      	lsls	r5, r1, #25
 800786c:	bf48      	it	mi
 800786e:	b29b      	uxthmi	r3, r3
 8007870:	e7ef      	b.n	8007852 <_printf_i+0x14a>
 8007872:	4665      	mov	r5, ip
 8007874:	fbb3 f1f2 	udiv	r1, r3, r2
 8007878:	fb02 3311 	mls	r3, r2, r1, r3
 800787c:	5cc3      	ldrb	r3, [r0, r3]
 800787e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007882:	460b      	mov	r3, r1
 8007884:	2900      	cmp	r1, #0
 8007886:	d1f5      	bne.n	8007874 <_printf_i+0x16c>
 8007888:	e7b9      	b.n	80077fe <_printf_i+0xf6>
 800788a:	6813      	ldr	r3, [r2, #0]
 800788c:	6825      	ldr	r5, [r4, #0]
 800788e:	6961      	ldr	r1, [r4, #20]
 8007890:	1d18      	adds	r0, r3, #4
 8007892:	6010      	str	r0, [r2, #0]
 8007894:	0628      	lsls	r0, r5, #24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	d501      	bpl.n	800789e <_printf_i+0x196>
 800789a:	6019      	str	r1, [r3, #0]
 800789c:	e002      	b.n	80078a4 <_printf_i+0x19c>
 800789e:	066a      	lsls	r2, r5, #25
 80078a0:	d5fb      	bpl.n	800789a <_printf_i+0x192>
 80078a2:	8019      	strh	r1, [r3, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	4665      	mov	r5, ip
 80078aa:	e7b9      	b.n	8007820 <_printf_i+0x118>
 80078ac:	6813      	ldr	r3, [r2, #0]
 80078ae:	1d19      	adds	r1, r3, #4
 80078b0:	6011      	str	r1, [r2, #0]
 80078b2:	681d      	ldr	r5, [r3, #0]
 80078b4:	6862      	ldr	r2, [r4, #4]
 80078b6:	2100      	movs	r1, #0
 80078b8:	4628      	mov	r0, r5
 80078ba:	f7f8 fca1 	bl	8000200 <memchr>
 80078be:	b108      	cbz	r0, 80078c4 <_printf_i+0x1bc>
 80078c0:	1b40      	subs	r0, r0, r5
 80078c2:	6060      	str	r0, [r4, #4]
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	6123      	str	r3, [r4, #16]
 80078c8:	2300      	movs	r3, #0
 80078ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ce:	e7a7      	b.n	8007820 <_printf_i+0x118>
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	462a      	mov	r2, r5
 80078d4:	4639      	mov	r1, r7
 80078d6:	4630      	mov	r0, r6
 80078d8:	47c0      	blx	r8
 80078da:	3001      	adds	r0, #1
 80078dc:	d0aa      	beq.n	8007834 <_printf_i+0x12c>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	079b      	lsls	r3, r3, #30
 80078e2:	d413      	bmi.n	800790c <_printf_i+0x204>
 80078e4:	68e0      	ldr	r0, [r4, #12]
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	4298      	cmp	r0, r3
 80078ea:	bfb8      	it	lt
 80078ec:	4618      	movlt	r0, r3
 80078ee:	e7a3      	b.n	8007838 <_printf_i+0x130>
 80078f0:	2301      	movs	r3, #1
 80078f2:	464a      	mov	r2, r9
 80078f4:	4639      	mov	r1, r7
 80078f6:	4630      	mov	r0, r6
 80078f8:	47c0      	blx	r8
 80078fa:	3001      	adds	r0, #1
 80078fc:	d09a      	beq.n	8007834 <_printf_i+0x12c>
 80078fe:	3501      	adds	r5, #1
 8007900:	68e3      	ldr	r3, [r4, #12]
 8007902:	9a03      	ldr	r2, [sp, #12]
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	42ab      	cmp	r3, r5
 8007908:	dcf2      	bgt.n	80078f0 <_printf_i+0x1e8>
 800790a:	e7eb      	b.n	80078e4 <_printf_i+0x1dc>
 800790c:	2500      	movs	r5, #0
 800790e:	f104 0919 	add.w	r9, r4, #25
 8007912:	e7f5      	b.n	8007900 <_printf_i+0x1f8>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ac      	bne.n	8007872 <_printf_i+0x16a>
 8007918:	7803      	ldrb	r3, [r0, #0]
 800791a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800791e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007922:	e76c      	b.n	80077fe <_printf_i+0xf6>
 8007924:	080090f5 	.word	0x080090f5
 8007928:	08009106 	.word	0x08009106

0800792c <__sread>:
 800792c:	b510      	push	{r4, lr}
 800792e:	460c      	mov	r4, r1
 8007930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007934:	f000 fa46 	bl	8007dc4 <_read_r>
 8007938:	2800      	cmp	r0, #0
 800793a:	bfab      	itete	ge
 800793c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800793e:	89a3      	ldrhlt	r3, [r4, #12]
 8007940:	181b      	addge	r3, r3, r0
 8007942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007946:	bfac      	ite	ge
 8007948:	6563      	strge	r3, [r4, #84]	; 0x54
 800794a:	81a3      	strhlt	r3, [r4, #12]
 800794c:	bd10      	pop	{r4, pc}

0800794e <__swrite>:
 800794e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007952:	461f      	mov	r7, r3
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	05db      	lsls	r3, r3, #23
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	4616      	mov	r6, r2
 800795e:	d505      	bpl.n	800796c <__swrite+0x1e>
 8007960:	2302      	movs	r3, #2
 8007962:	2200      	movs	r2, #0
 8007964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007968:	f000 f9b6 	bl	8007cd8 <_lseek_r>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	4632      	mov	r2, r6
 800797a:	463b      	mov	r3, r7
 800797c:	4628      	mov	r0, r5
 800797e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	f000 b869 	b.w	8007a58 <_write_r>

08007986 <__sseek>:
 8007986:	b510      	push	{r4, lr}
 8007988:	460c      	mov	r4, r1
 800798a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798e:	f000 f9a3 	bl	8007cd8 <_lseek_r>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	bf15      	itete	ne
 8007998:	6560      	strne	r0, [r4, #84]	; 0x54
 800799a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800799e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079a2:	81a3      	strheq	r3, [r4, #12]
 80079a4:	bf18      	it	ne
 80079a6:	81a3      	strhne	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__sclose>:
 80079aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ae:	f000 b8d3 	b.w	8007b58 <_close_r>
	...

080079b4 <__swbuf_r>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	460e      	mov	r6, r1
 80079b8:	4614      	mov	r4, r2
 80079ba:	4605      	mov	r5, r0
 80079bc:	b118      	cbz	r0, 80079c6 <__swbuf_r+0x12>
 80079be:	6983      	ldr	r3, [r0, #24]
 80079c0:	b90b      	cbnz	r3, 80079c6 <__swbuf_r+0x12>
 80079c2:	f7ff fc5f 	bl	8007284 <__sinit>
 80079c6:	4b21      	ldr	r3, [pc, #132]	; (8007a4c <__swbuf_r+0x98>)
 80079c8:	429c      	cmp	r4, r3
 80079ca:	d12a      	bne.n	8007a22 <__swbuf_r+0x6e>
 80079cc:	686c      	ldr	r4, [r5, #4]
 80079ce:	69a3      	ldr	r3, [r4, #24]
 80079d0:	60a3      	str	r3, [r4, #8]
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	071a      	lsls	r2, r3, #28
 80079d6:	d52e      	bpl.n	8007a36 <__swbuf_r+0x82>
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	b363      	cbz	r3, 8007a36 <__swbuf_r+0x82>
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	6820      	ldr	r0, [r4, #0]
 80079e0:	1ac0      	subs	r0, r0, r3
 80079e2:	6963      	ldr	r3, [r4, #20]
 80079e4:	b2f6      	uxtb	r6, r6
 80079e6:	4283      	cmp	r3, r0
 80079e8:	4637      	mov	r7, r6
 80079ea:	dc04      	bgt.n	80079f6 <__swbuf_r+0x42>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f948 	bl	8007c84 <_fflush_r>
 80079f4:	bb28      	cbnz	r0, 8007a42 <__swbuf_r+0x8e>
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	60a3      	str	r3, [r4, #8]
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	6022      	str	r2, [r4, #0]
 8007a02:	701e      	strb	r6, [r3, #0]
 8007a04:	6963      	ldr	r3, [r4, #20]
 8007a06:	3001      	adds	r0, #1
 8007a08:	4283      	cmp	r3, r0
 8007a0a:	d004      	beq.n	8007a16 <__swbuf_r+0x62>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	07db      	lsls	r3, r3, #31
 8007a10:	d519      	bpl.n	8007a46 <__swbuf_r+0x92>
 8007a12:	2e0a      	cmp	r6, #10
 8007a14:	d117      	bne.n	8007a46 <__swbuf_r+0x92>
 8007a16:	4621      	mov	r1, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 f933 	bl	8007c84 <_fflush_r>
 8007a1e:	b190      	cbz	r0, 8007a46 <__swbuf_r+0x92>
 8007a20:	e00f      	b.n	8007a42 <__swbuf_r+0x8e>
 8007a22:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <__swbuf_r+0x9c>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d101      	bne.n	8007a2c <__swbuf_r+0x78>
 8007a28:	68ac      	ldr	r4, [r5, #8]
 8007a2a:	e7d0      	b.n	80079ce <__swbuf_r+0x1a>
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <__swbuf_r+0xa0>)
 8007a2e:	429c      	cmp	r4, r3
 8007a30:	bf08      	it	eq
 8007a32:	68ec      	ldreq	r4, [r5, #12]
 8007a34:	e7cb      	b.n	80079ce <__swbuf_r+0x1a>
 8007a36:	4621      	mov	r1, r4
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f000 f81f 	bl	8007a7c <__swsetup_r>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d0cc      	beq.n	80079dc <__swbuf_r+0x28>
 8007a42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a46:	4638      	mov	r0, r7
 8007a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	080090a4 	.word	0x080090a4
 8007a50:	080090c4 	.word	0x080090c4
 8007a54:	08009084 	.word	0x08009084

08007a58 <_write_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4c07      	ldr	r4, [pc, #28]	; (8007a78 <_write_r+0x20>)
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	4608      	mov	r0, r1
 8007a60:	4611      	mov	r1, r2
 8007a62:	2200      	movs	r2, #0
 8007a64:	6022      	str	r2, [r4, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f7fa fc17 	bl	800229a <_write>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_write_r+0x1e>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_write_r+0x1e>
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	2000439c 	.word	0x2000439c

08007a7c <__swsetup_r>:
 8007a7c:	4b32      	ldr	r3, [pc, #200]	; (8007b48 <__swsetup_r+0xcc>)
 8007a7e:	b570      	push	{r4, r5, r6, lr}
 8007a80:	681d      	ldr	r5, [r3, #0]
 8007a82:	4606      	mov	r6, r0
 8007a84:	460c      	mov	r4, r1
 8007a86:	b125      	cbz	r5, 8007a92 <__swsetup_r+0x16>
 8007a88:	69ab      	ldr	r3, [r5, #24]
 8007a8a:	b913      	cbnz	r3, 8007a92 <__swsetup_r+0x16>
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f7ff fbf9 	bl	8007284 <__sinit>
 8007a92:	4b2e      	ldr	r3, [pc, #184]	; (8007b4c <__swsetup_r+0xd0>)
 8007a94:	429c      	cmp	r4, r3
 8007a96:	d10f      	bne.n	8007ab8 <__swsetup_r+0x3c>
 8007a98:	686c      	ldr	r4, [r5, #4]
 8007a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	0715      	lsls	r5, r2, #28
 8007aa2:	d42c      	bmi.n	8007afe <__swsetup_r+0x82>
 8007aa4:	06d0      	lsls	r0, r2, #27
 8007aa6:	d411      	bmi.n	8007acc <__swsetup_r+0x50>
 8007aa8:	2209      	movs	r2, #9
 8007aaa:	6032      	str	r2, [r6, #0]
 8007aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab6:	e03e      	b.n	8007b36 <__swsetup_r+0xba>
 8007ab8:	4b25      	ldr	r3, [pc, #148]	; (8007b50 <__swsetup_r+0xd4>)
 8007aba:	429c      	cmp	r4, r3
 8007abc:	d101      	bne.n	8007ac2 <__swsetup_r+0x46>
 8007abe:	68ac      	ldr	r4, [r5, #8]
 8007ac0:	e7eb      	b.n	8007a9a <__swsetup_r+0x1e>
 8007ac2:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <__swsetup_r+0xd8>)
 8007ac4:	429c      	cmp	r4, r3
 8007ac6:	bf08      	it	eq
 8007ac8:	68ec      	ldreq	r4, [r5, #12]
 8007aca:	e7e6      	b.n	8007a9a <__swsetup_r+0x1e>
 8007acc:	0751      	lsls	r1, r2, #29
 8007ace:	d512      	bpl.n	8007af6 <__swsetup_r+0x7a>
 8007ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ad2:	b141      	cbz	r1, 8007ae6 <__swsetup_r+0x6a>
 8007ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ad8:	4299      	cmp	r1, r3
 8007ada:	d002      	beq.n	8007ae2 <__swsetup_r+0x66>
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff fab9 	bl	8007054 <_free_r>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	2300      	movs	r3, #0
 8007af0:	6063      	str	r3, [r4, #4]
 8007af2:	6923      	ldr	r3, [r4, #16]
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f043 0308 	orr.w	r3, r3, #8
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	b94b      	cbnz	r3, 8007b16 <__swsetup_r+0x9a>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b0c:	d003      	beq.n	8007b16 <__swsetup_r+0x9a>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4630      	mov	r0, r6
 8007b12:	f000 f917 	bl	8007d44 <__smakebuf_r>
 8007b16:	89a2      	ldrh	r2, [r4, #12]
 8007b18:	f012 0301 	ands.w	r3, r2, #1
 8007b1c:	d00c      	beq.n	8007b38 <__swsetup_r+0xbc>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60a3      	str	r3, [r4, #8]
 8007b22:	6963      	ldr	r3, [r4, #20]
 8007b24:	425b      	negs	r3, r3
 8007b26:	61a3      	str	r3, [r4, #24]
 8007b28:	6923      	ldr	r3, [r4, #16]
 8007b2a:	b953      	cbnz	r3, 8007b42 <__swsetup_r+0xc6>
 8007b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007b34:	d1ba      	bne.n	8007aac <__swsetup_r+0x30>
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	0792      	lsls	r2, r2, #30
 8007b3a:	bf58      	it	pl
 8007b3c:	6963      	ldrpl	r3, [r4, #20]
 8007b3e:	60a3      	str	r3, [r4, #8]
 8007b40:	e7f2      	b.n	8007b28 <__swsetup_r+0xac>
 8007b42:	2000      	movs	r0, #0
 8007b44:	e7f7      	b.n	8007b36 <__swsetup_r+0xba>
 8007b46:	bf00      	nop
 8007b48:	20000010 	.word	0x20000010
 8007b4c:	080090a4 	.word	0x080090a4
 8007b50:	080090c4 	.word	0x080090c4
 8007b54:	08009084 	.word	0x08009084

08007b58 <_close_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4c06      	ldr	r4, [pc, #24]	; (8007b74 <_close_r+0x1c>)
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4605      	mov	r5, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	6023      	str	r3, [r4, #0]
 8007b64:	f7fa fbb5 	bl	80022d2 <_close>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_close_r+0x1a>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_close_r+0x1a>
 8007b70:	602b      	str	r3, [r5, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	2000439c 	.word	0x2000439c

08007b78 <__sflush_r>:
 8007b78:	898a      	ldrh	r2, [r1, #12]
 8007b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7e:	4605      	mov	r5, r0
 8007b80:	0710      	lsls	r0, r2, #28
 8007b82:	460c      	mov	r4, r1
 8007b84:	d458      	bmi.n	8007c38 <__sflush_r+0xc0>
 8007b86:	684b      	ldr	r3, [r1, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	dc05      	bgt.n	8007b98 <__sflush_r+0x20>
 8007b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dc02      	bgt.n	8007b98 <__sflush_r+0x20>
 8007b92:	2000      	movs	r0, #0
 8007b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b9a:	2e00      	cmp	r6, #0
 8007b9c:	d0f9      	beq.n	8007b92 <__sflush_r+0x1a>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ba4:	682f      	ldr	r7, [r5, #0]
 8007ba6:	6a21      	ldr	r1, [r4, #32]
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	d032      	beq.n	8007c12 <__sflush_r+0x9a>
 8007bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	075a      	lsls	r2, r3, #29
 8007bb2:	d505      	bpl.n	8007bc0 <__sflush_r+0x48>
 8007bb4:	6863      	ldr	r3, [r4, #4]
 8007bb6:	1ac0      	subs	r0, r0, r3
 8007bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bba:	b10b      	cbz	r3, 8007bc0 <__sflush_r+0x48>
 8007bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bbe:	1ac0      	subs	r0, r0, r3
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bc6:	6a21      	ldr	r1, [r4, #32]
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b0      	blx	r6
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	d106      	bne.n	8007be0 <__sflush_r+0x68>
 8007bd2:	6829      	ldr	r1, [r5, #0]
 8007bd4:	291d      	cmp	r1, #29
 8007bd6:	d848      	bhi.n	8007c6a <__sflush_r+0xf2>
 8007bd8:	4a29      	ldr	r2, [pc, #164]	; (8007c80 <__sflush_r+0x108>)
 8007bda:	40ca      	lsrs	r2, r1
 8007bdc:	07d6      	lsls	r6, r2, #31
 8007bde:	d544      	bpl.n	8007c6a <__sflush_r+0xf2>
 8007be0:	2200      	movs	r2, #0
 8007be2:	6062      	str	r2, [r4, #4]
 8007be4:	04d9      	lsls	r1, r3, #19
 8007be6:	6922      	ldr	r2, [r4, #16]
 8007be8:	6022      	str	r2, [r4, #0]
 8007bea:	d504      	bpl.n	8007bf6 <__sflush_r+0x7e>
 8007bec:	1c42      	adds	r2, r0, #1
 8007bee:	d101      	bne.n	8007bf4 <__sflush_r+0x7c>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b903      	cbnz	r3, 8007bf6 <__sflush_r+0x7e>
 8007bf4:	6560      	str	r0, [r4, #84]	; 0x54
 8007bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bf8:	602f      	str	r7, [r5, #0]
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	d0c9      	beq.n	8007b92 <__sflush_r+0x1a>
 8007bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c02:	4299      	cmp	r1, r3
 8007c04:	d002      	beq.n	8007c0c <__sflush_r+0x94>
 8007c06:	4628      	mov	r0, r5
 8007c08:	f7ff fa24 	bl	8007054 <_free_r>
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	6360      	str	r0, [r4, #52]	; 0x34
 8007c10:	e7c0      	b.n	8007b94 <__sflush_r+0x1c>
 8007c12:	2301      	movs	r3, #1
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b0      	blx	r6
 8007c18:	1c41      	adds	r1, r0, #1
 8007c1a:	d1c8      	bne.n	8007bae <__sflush_r+0x36>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0c5      	beq.n	8007bae <__sflush_r+0x36>
 8007c22:	2b1d      	cmp	r3, #29
 8007c24:	d001      	beq.n	8007c2a <__sflush_r+0xb2>
 8007c26:	2b16      	cmp	r3, #22
 8007c28:	d101      	bne.n	8007c2e <__sflush_r+0xb6>
 8007c2a:	602f      	str	r7, [r5, #0]
 8007c2c:	e7b1      	b.n	8007b92 <__sflush_r+0x1a>
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c34:	81a3      	strh	r3, [r4, #12]
 8007c36:	e7ad      	b.n	8007b94 <__sflush_r+0x1c>
 8007c38:	690f      	ldr	r7, [r1, #16]
 8007c3a:	2f00      	cmp	r7, #0
 8007c3c:	d0a9      	beq.n	8007b92 <__sflush_r+0x1a>
 8007c3e:	0793      	lsls	r3, r2, #30
 8007c40:	680e      	ldr	r6, [r1, #0]
 8007c42:	bf08      	it	eq
 8007c44:	694b      	ldreq	r3, [r1, #20]
 8007c46:	600f      	str	r7, [r1, #0]
 8007c48:	bf18      	it	ne
 8007c4a:	2300      	movne	r3, #0
 8007c4c:	eba6 0807 	sub.w	r8, r6, r7
 8007c50:	608b      	str	r3, [r1, #8]
 8007c52:	f1b8 0f00 	cmp.w	r8, #0
 8007c56:	dd9c      	ble.n	8007b92 <__sflush_r+0x1a>
 8007c58:	4643      	mov	r3, r8
 8007c5a:	463a      	mov	r2, r7
 8007c5c:	6a21      	ldr	r1, [r4, #32]
 8007c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b0      	blx	r6
 8007c64:	2800      	cmp	r0, #0
 8007c66:	dc06      	bgt.n	8007c76 <__sflush_r+0xfe>
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c74:	e78e      	b.n	8007b94 <__sflush_r+0x1c>
 8007c76:	4407      	add	r7, r0
 8007c78:	eba8 0800 	sub.w	r8, r8, r0
 8007c7c:	e7e9      	b.n	8007c52 <__sflush_r+0xda>
 8007c7e:	bf00      	nop
 8007c80:	20400001 	.word	0x20400001

08007c84 <_fflush_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	690b      	ldr	r3, [r1, #16]
 8007c88:	4605      	mov	r5, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	b1db      	cbz	r3, 8007cc6 <_fflush_r+0x42>
 8007c8e:	b118      	cbz	r0, 8007c98 <_fflush_r+0x14>
 8007c90:	6983      	ldr	r3, [r0, #24]
 8007c92:	b90b      	cbnz	r3, 8007c98 <_fflush_r+0x14>
 8007c94:	f7ff faf6 	bl	8007284 <__sinit>
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <_fflush_r+0x48>)
 8007c9a:	429c      	cmp	r4, r3
 8007c9c:	d109      	bne.n	8007cb2 <_fflush_r+0x2e>
 8007c9e:	686c      	ldr	r4, [r5, #4]
 8007ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca4:	b17b      	cbz	r3, 8007cc6 <_fflush_r+0x42>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4628      	mov	r0, r5
 8007caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cae:	f7ff bf63 	b.w	8007b78 <__sflush_r>
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <_fflush_r+0x4c>)
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	d101      	bne.n	8007cbc <_fflush_r+0x38>
 8007cb8:	68ac      	ldr	r4, [r5, #8]
 8007cba:	e7f1      	b.n	8007ca0 <_fflush_r+0x1c>
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <_fflush_r+0x50>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	bf08      	it	eq
 8007cc2:	68ec      	ldreq	r4, [r5, #12]
 8007cc4:	e7ec      	b.n	8007ca0 <_fflush_r+0x1c>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	bd38      	pop	{r3, r4, r5, pc}
 8007cca:	bf00      	nop
 8007ccc:	080090a4 	.word	0x080090a4
 8007cd0:	080090c4 	.word	0x080090c4
 8007cd4:	08009084 	.word	0x08009084

08007cd8 <_lseek_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4c07      	ldr	r4, [pc, #28]	; (8007cf8 <_lseek_r+0x20>)
 8007cdc:	4605      	mov	r5, r0
 8007cde:	4608      	mov	r0, r1
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	6022      	str	r2, [r4, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f7fa fb1a 	bl	8002320 <_lseek>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d102      	bne.n	8007cf6 <_lseek_r+0x1e>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	b103      	cbz	r3, 8007cf6 <_lseek_r+0x1e>
 8007cf4:	602b      	str	r3, [r5, #0]
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	2000439c 	.word	0x2000439c

08007cfc <__swhatbuf_r>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	460e      	mov	r6, r1
 8007d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d04:	2900      	cmp	r1, #0
 8007d06:	b096      	sub	sp, #88	; 0x58
 8007d08:	4614      	mov	r4, r2
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	da07      	bge.n	8007d1e <__swhatbuf_r+0x22>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	89b3      	ldrh	r3, [r6, #12]
 8007d14:	061a      	lsls	r2, r3, #24
 8007d16:	d410      	bmi.n	8007d3a <__swhatbuf_r+0x3e>
 8007d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1c:	e00e      	b.n	8007d3c <__swhatbuf_r+0x40>
 8007d1e:	466a      	mov	r2, sp
 8007d20:	f000 f862 	bl	8007de8 <_fstat_r>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	dbf2      	blt.n	8007d0e <__swhatbuf_r+0x12>
 8007d28:	9a01      	ldr	r2, [sp, #4]
 8007d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d32:	425a      	negs	r2, r3
 8007d34:	415a      	adcs	r2, r3
 8007d36:	602a      	str	r2, [r5, #0]
 8007d38:	e7ee      	b.n	8007d18 <__swhatbuf_r+0x1c>
 8007d3a:	2340      	movs	r3, #64	; 0x40
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	b016      	add	sp, #88	; 0x58
 8007d42:	bd70      	pop	{r4, r5, r6, pc}

08007d44 <__smakebuf_r>:
 8007d44:	898b      	ldrh	r3, [r1, #12]
 8007d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d48:	079d      	lsls	r5, r3, #30
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	d507      	bpl.n	8007d60 <__smakebuf_r+0x1c>
 8007d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	2301      	movs	r3, #1
 8007d5a:	6163      	str	r3, [r4, #20]
 8007d5c:	b002      	add	sp, #8
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	ab01      	add	r3, sp, #4
 8007d62:	466a      	mov	r2, sp
 8007d64:	f7ff ffca 	bl	8007cfc <__swhatbuf_r>
 8007d68:	9900      	ldr	r1, [sp, #0]
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7ff f9bf 	bl	80070f0 <_malloc_r>
 8007d72:	b948      	cbnz	r0, 8007d88 <__smakebuf_r+0x44>
 8007d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d78:	059a      	lsls	r2, r3, #22
 8007d7a:	d4ef      	bmi.n	8007d5c <__smakebuf_r+0x18>
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	f043 0302 	orr.w	r3, r3, #2
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	e7e3      	b.n	8007d50 <__smakebuf_r+0xc>
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <__smakebuf_r+0x7c>)
 8007d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	6020      	str	r0, [r4, #0]
 8007d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	6163      	str	r3, [r4, #20]
 8007d9a:	9b01      	ldr	r3, [sp, #4]
 8007d9c:	6120      	str	r0, [r4, #16]
 8007d9e:	b15b      	cbz	r3, 8007db8 <__smakebuf_r+0x74>
 8007da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da4:	4630      	mov	r0, r6
 8007da6:	f000 f831 	bl	8007e0c <_isatty_r>
 8007daa:	b128      	cbz	r0, 8007db8 <__smakebuf_r+0x74>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	431d      	orrs	r5, r3
 8007dbc:	81a5      	strh	r5, [r4, #12]
 8007dbe:	e7cd      	b.n	8007d5c <__smakebuf_r+0x18>
 8007dc0:	0800724d 	.word	0x0800724d

08007dc4 <_read_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4c07      	ldr	r4, [pc, #28]	; (8007de4 <_read_r+0x20>)
 8007dc8:	4605      	mov	r5, r0
 8007dca:	4608      	mov	r0, r1
 8007dcc:	4611      	mov	r1, r2
 8007dce:	2200      	movs	r2, #0
 8007dd0:	6022      	str	r2, [r4, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f7fa fa44 	bl	8002260 <_read>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_read_r+0x1e>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_read_r+0x1e>
 8007de0:	602b      	str	r3, [r5, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	2000439c 	.word	0x2000439c

08007de8 <_fstat_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4c07      	ldr	r4, [pc, #28]	; (8007e08 <_fstat_r+0x20>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4605      	mov	r5, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	f7fa fa78 	bl	80022ea <_fstat>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d102      	bne.n	8007e04 <_fstat_r+0x1c>
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	b103      	cbz	r3, 8007e04 <_fstat_r+0x1c>
 8007e02:	602b      	str	r3, [r5, #0]
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	bf00      	nop
 8007e08:	2000439c 	.word	0x2000439c

08007e0c <_isatty_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4c06      	ldr	r4, [pc, #24]	; (8007e28 <_isatty_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4605      	mov	r5, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	6023      	str	r3, [r4, #0]
 8007e18:	f7fa fa77 	bl	800230a <_isatty>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_isatty_r+0x1a>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_isatty_r+0x1a>
 8007e24:	602b      	str	r3, [r5, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	2000439c 	.word	0x2000439c

08007e2c <pow>:
 8007e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	ed2d 8b04 	vpush	{d8-d9}
 8007e34:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008108 <pow+0x2dc>
 8007e38:	b08d      	sub	sp, #52	; 0x34
 8007e3a:	ec57 6b10 	vmov	r6, r7, d0
 8007e3e:	ec55 4b11 	vmov	r4, r5, d1
 8007e42:	f000 f965 	bl	8008110 <__ieee754_pow>
 8007e46:	f999 3000 	ldrsb.w	r3, [r9]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	eeb0 8a40 	vmov.f32	s16, s0
 8007e52:	eef0 8a60 	vmov.f32	s17, s1
 8007e56:	46c8      	mov	r8, r9
 8007e58:	d05f      	beq.n	8007f1a <pow+0xee>
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f8 fe73 	bl	8000b4c <__aeabi_dcmpun>
 8007e66:	4683      	mov	fp, r0
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d156      	bne.n	8007f1a <pow+0xee>
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	463b      	mov	r3, r7
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fe6a 	bl	8000b4c <__aeabi_dcmpun>
 8007e78:	9001      	str	r0, [sp, #4]
 8007e7a:	b1e8      	cbz	r0, 8007eb8 <pow+0x8c>
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	4620      	mov	r0, r4
 8007e82:	4629      	mov	r1, r5
 8007e84:	f7f8 fe30 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d046      	beq.n	8007f1a <pow+0xee>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	9302      	str	r3, [sp, #8]
 8007e90:	4b96      	ldr	r3, [pc, #600]	; (80080ec <pow+0x2c0>)
 8007e92:	9303      	str	r3, [sp, #12]
 8007e94:	4b96      	ldr	r3, [pc, #600]	; (80080f0 <pow+0x2c4>)
 8007e96:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ea0:	9b00      	ldr	r3, [sp, #0]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ea8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007eac:	d033      	beq.n	8007f16 <pow+0xea>
 8007eae:	a802      	add	r0, sp, #8
 8007eb0:	f000 fefd 	bl	8008cae <matherr>
 8007eb4:	bb48      	cbnz	r0, 8007f0a <pow+0xde>
 8007eb6:	e05d      	b.n	8007f74 <pow+0x148>
 8007eb8:	f04f 0a00 	mov.w	sl, #0
 8007ebc:	f04f 0b00 	mov.w	fp, #0
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	f7f8 fe0e 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ecc:	ec4b ab19 	vmov	d9, sl, fp
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d054      	beq.n	8007f7e <pow+0x152>
 8007ed4:	4652      	mov	r2, sl
 8007ed6:	465b      	mov	r3, fp
 8007ed8:	4620      	mov	r0, r4
 8007eda:	4629      	mov	r1, r5
 8007edc:	f7f8 fe04 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	b318      	cbz	r0, 8007f2c <pow+0x100>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	9302      	str	r3, [sp, #8]
 8007ee8:	4b80      	ldr	r3, [pc, #512]	; (80080ec <pow+0x2c0>)
 8007eea:	9303      	str	r3, [sp, #12]
 8007eec:	9b01      	ldr	r3, [sp, #4]
 8007eee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef0:	9b00      	ldr	r3, [sp, #0]
 8007ef2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ef6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007efa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0d5      	beq.n	8007eae <pow+0x82>
 8007f02:	4b7b      	ldr	r3, [pc, #492]	; (80080f0 <pow+0x2c4>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f0c:	b11b      	cbz	r3, 8007f16 <pow+0xea>
 8007f0e:	f7ff f867 	bl	8006fe0 <__errno>
 8007f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007f1a:	eeb0 0a48 	vmov.f32	s0, s16
 8007f1e:	eef0 0a68 	vmov.f32	s1, s17
 8007f22:	b00d      	add	sp, #52	; 0x34
 8007f24:	ecbd 8b04 	vpop	{d8-d9}
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	ec45 4b10 	vmov	d0, r4, r5
 8007f30:	f000 feb5 	bl	8008c9e <finite>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d0f0      	beq.n	8007f1a <pow+0xee>
 8007f38:	4652      	mov	r2, sl
 8007f3a:	465b      	mov	r3, fp
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 fddc 	bl	8000afc <__aeabi_dcmplt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d0e8      	beq.n	8007f1a <pow+0xee>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	4b67      	ldr	r3, [pc, #412]	; (80080ec <pow+0x2c0>)
 8007f4e:	9303      	str	r3, [sp, #12]
 8007f50:	f999 3000 	ldrsb.w	r3, [r9]
 8007f54:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007f58:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007f5c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007f60:	b913      	cbnz	r3, 8007f68 <pow+0x13c>
 8007f62:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007f66:	e7a2      	b.n	8007eae <pow+0x82>
 8007f68:	4962      	ldr	r1, [pc, #392]	; (80080f4 <pow+0x2c8>)
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d19c      	bne.n	8007eae <pow+0x82>
 8007f74:	f7ff f834 	bl	8006fe0 <__errno>
 8007f78:	2321      	movs	r3, #33	; 0x21
 8007f7a:	6003      	str	r3, [r0, #0]
 8007f7c:	e7c5      	b.n	8007f0a <pow+0xde>
 8007f7e:	eeb0 0a48 	vmov.f32	s0, s16
 8007f82:	eef0 0a68 	vmov.f32	s1, s17
 8007f86:	f000 fe8a 	bl	8008c9e <finite>
 8007f8a:	9000      	str	r0, [sp, #0]
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f040 8081 	bne.w	8008094 <pow+0x268>
 8007f92:	ec47 6b10 	vmov	d0, r6, r7
 8007f96:	f000 fe82 	bl	8008c9e <finite>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d07a      	beq.n	8008094 <pow+0x268>
 8007f9e:	ec45 4b10 	vmov	d0, r4, r5
 8007fa2:	f000 fe7c 	bl	8008c9e <finite>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d074      	beq.n	8008094 <pow+0x268>
 8007faa:	ec53 2b18 	vmov	r2, r3, d8
 8007fae:	ee18 0a10 	vmov	r0, s16
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f7f8 fdca 	bl	8000b4c <__aeabi_dcmpun>
 8007fb8:	f999 9000 	ldrsb.w	r9, [r9]
 8007fbc:	4b4b      	ldr	r3, [pc, #300]	; (80080ec <pow+0x2c0>)
 8007fbe:	b1b0      	cbz	r0, 8007fee <pow+0x1c2>
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fc6:	9b00      	ldr	r3, [sp, #0]
 8007fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8007fca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007fce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007fd2:	f1b9 0f00 	cmp.w	r9, #0
 8007fd6:	d0c4      	beq.n	8007f62 <pow+0x136>
 8007fd8:	4652      	mov	r2, sl
 8007fda:	465b      	mov	r3, fp
 8007fdc:	4650      	mov	r0, sl
 8007fde:	4659      	mov	r1, fp
 8007fe0:	f7f8 fc44 	bl	800086c <__aeabi_ddiv>
 8007fe4:	f1b9 0f02 	cmp.w	r9, #2
 8007fe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fec:	e7c1      	b.n	8007f72 <pow+0x146>
 8007fee:	2203      	movs	r2, #3
 8007ff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ff4:	900a      	str	r0, [sp, #40]	; 0x28
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4b3e      	ldr	r3, [pc, #248]	; (80080f8 <pow+0x2cc>)
 8007ffe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008002:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008006:	f7f8 fb07 	bl	8000618 <__aeabi_dmul>
 800800a:	4604      	mov	r4, r0
 800800c:	460d      	mov	r5, r1
 800800e:	f1b9 0f00 	cmp.w	r9, #0
 8008012:	d124      	bne.n	800805e <pow+0x232>
 8008014:	4b39      	ldr	r3, [pc, #228]	; (80080fc <pow+0x2d0>)
 8008016:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800801a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800801e:	4630      	mov	r0, r6
 8008020:	4652      	mov	r2, sl
 8008022:	465b      	mov	r3, fp
 8008024:	4639      	mov	r1, r7
 8008026:	f7f8 fd69 	bl	8000afc <__aeabi_dcmplt>
 800802a:	2800      	cmp	r0, #0
 800802c:	d056      	beq.n	80080dc <pow+0x2b0>
 800802e:	ec45 4b10 	vmov	d0, r4, r5
 8008032:	f000 fe49 	bl	8008cc8 <rint>
 8008036:	4622      	mov	r2, r4
 8008038:	462b      	mov	r3, r5
 800803a:	ec51 0b10 	vmov	r0, r1, d0
 800803e:	f7f8 fd53 	bl	8000ae8 <__aeabi_dcmpeq>
 8008042:	b920      	cbnz	r0, 800804e <pow+0x222>
 8008044:	4b2e      	ldr	r3, [pc, #184]	; (8008100 <pow+0x2d4>)
 8008046:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800804a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800804e:	f998 3000 	ldrsb.w	r3, [r8]
 8008052:	2b02      	cmp	r3, #2
 8008054:	d142      	bne.n	80080dc <pow+0x2b0>
 8008056:	f7fe ffc3 	bl	8006fe0 <__errno>
 800805a:	2322      	movs	r3, #34	; 0x22
 800805c:	e78d      	b.n	8007f7a <pow+0x14e>
 800805e:	4b29      	ldr	r3, [pc, #164]	; (8008104 <pow+0x2d8>)
 8008060:	2200      	movs	r2, #0
 8008062:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008066:	4630      	mov	r0, r6
 8008068:	4652      	mov	r2, sl
 800806a:	465b      	mov	r3, fp
 800806c:	4639      	mov	r1, r7
 800806e:	f7f8 fd45 	bl	8000afc <__aeabi_dcmplt>
 8008072:	2800      	cmp	r0, #0
 8008074:	d0eb      	beq.n	800804e <pow+0x222>
 8008076:	ec45 4b10 	vmov	d0, r4, r5
 800807a:	f000 fe25 	bl	8008cc8 <rint>
 800807e:	4622      	mov	r2, r4
 8008080:	462b      	mov	r3, r5
 8008082:	ec51 0b10 	vmov	r0, r1, d0
 8008086:	f7f8 fd2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800808a:	2800      	cmp	r0, #0
 800808c:	d1df      	bne.n	800804e <pow+0x222>
 800808e:	2200      	movs	r2, #0
 8008090:	4b18      	ldr	r3, [pc, #96]	; (80080f4 <pow+0x2c8>)
 8008092:	e7da      	b.n	800804a <pow+0x21e>
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	ec51 0b18 	vmov	r0, r1, d8
 800809c:	f7f8 fd24 	bl	8000ae8 <__aeabi_dcmpeq>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f43f af3a 	beq.w	8007f1a <pow+0xee>
 80080a6:	ec47 6b10 	vmov	d0, r6, r7
 80080aa:	f000 fdf8 	bl	8008c9e <finite>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f af33 	beq.w	8007f1a <pow+0xee>
 80080b4:	ec45 4b10 	vmov	d0, r4, r5
 80080b8:	f000 fdf1 	bl	8008c9e <finite>
 80080bc:	2800      	cmp	r0, #0
 80080be:	f43f af2c 	beq.w	8007f1a <pow+0xee>
 80080c2:	2304      	movs	r3, #4
 80080c4:	9302      	str	r3, [sp, #8]
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <pow+0x2c0>)
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	2300      	movs	r3, #0
 80080cc:	930a      	str	r3, [sp, #40]	; 0x28
 80080ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80080d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80080d6:	ed8d 9b08 	vstr	d9, [sp, #32]
 80080da:	e7b8      	b.n	800804e <pow+0x222>
 80080dc:	a802      	add	r0, sp, #8
 80080de:	f000 fde6 	bl	8008cae <matherr>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f47f af11 	bne.w	8007f0a <pow+0xde>
 80080e8:	e7b5      	b.n	8008056 <pow+0x22a>
 80080ea:	bf00      	nop
 80080ec:	08009117 	.word	0x08009117
 80080f0:	3ff00000 	.word	0x3ff00000
 80080f4:	fff00000 	.word	0xfff00000
 80080f8:	3fe00000 	.word	0x3fe00000
 80080fc:	47efffff 	.word	0x47efffff
 8008100:	c7efffff 	.word	0xc7efffff
 8008104:	7ff00000 	.word	0x7ff00000
 8008108:	20000074 	.word	0x20000074
 800810c:	00000000 	.word	0x00000000

08008110 <__ieee754_pow>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	b091      	sub	sp, #68	; 0x44
 8008116:	ed8d 1b00 	vstr	d1, [sp]
 800811a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800811e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008122:	ea58 0302 	orrs.w	r3, r8, r2
 8008126:	ec57 6b10 	vmov	r6, r7, d0
 800812a:	f000 84be 	beq.w	8008aaa <__ieee754_pow+0x99a>
 800812e:	4b7a      	ldr	r3, [pc, #488]	; (8008318 <__ieee754_pow+0x208>)
 8008130:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008134:	429c      	cmp	r4, r3
 8008136:	463d      	mov	r5, r7
 8008138:	ee10 aa10 	vmov	sl, s0
 800813c:	dc09      	bgt.n	8008152 <__ieee754_pow+0x42>
 800813e:	d103      	bne.n	8008148 <__ieee754_pow+0x38>
 8008140:	b93e      	cbnz	r6, 8008152 <__ieee754_pow+0x42>
 8008142:	45a0      	cmp	r8, r4
 8008144:	dc0d      	bgt.n	8008162 <__ieee754_pow+0x52>
 8008146:	e001      	b.n	800814c <__ieee754_pow+0x3c>
 8008148:	4598      	cmp	r8, r3
 800814a:	dc02      	bgt.n	8008152 <__ieee754_pow+0x42>
 800814c:	4598      	cmp	r8, r3
 800814e:	d10e      	bne.n	800816e <__ieee754_pow+0x5e>
 8008150:	b16a      	cbz	r2, 800816e <__ieee754_pow+0x5e>
 8008152:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008156:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800815a:	ea54 030a 	orrs.w	r3, r4, sl
 800815e:	f000 84a4 	beq.w	8008aaa <__ieee754_pow+0x99a>
 8008162:	486e      	ldr	r0, [pc, #440]	; (800831c <__ieee754_pow+0x20c>)
 8008164:	b011      	add	sp, #68	; 0x44
 8008166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816a:	f000 bda5 	b.w	8008cb8 <nan>
 800816e:	2d00      	cmp	r5, #0
 8008170:	da53      	bge.n	800821a <__ieee754_pow+0x10a>
 8008172:	4b6b      	ldr	r3, [pc, #428]	; (8008320 <__ieee754_pow+0x210>)
 8008174:	4598      	cmp	r8, r3
 8008176:	dc4d      	bgt.n	8008214 <__ieee754_pow+0x104>
 8008178:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800817c:	4598      	cmp	r8, r3
 800817e:	dd4c      	ble.n	800821a <__ieee754_pow+0x10a>
 8008180:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008184:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008188:	2b14      	cmp	r3, #20
 800818a:	dd26      	ble.n	80081da <__ieee754_pow+0xca>
 800818c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008190:	fa22 f103 	lsr.w	r1, r2, r3
 8008194:	fa01 f303 	lsl.w	r3, r1, r3
 8008198:	4293      	cmp	r3, r2
 800819a:	d13e      	bne.n	800821a <__ieee754_pow+0x10a>
 800819c:	f001 0101 	and.w	r1, r1, #1
 80081a0:	f1c1 0b02 	rsb	fp, r1, #2
 80081a4:	2a00      	cmp	r2, #0
 80081a6:	d15b      	bne.n	8008260 <__ieee754_pow+0x150>
 80081a8:	4b5b      	ldr	r3, [pc, #364]	; (8008318 <__ieee754_pow+0x208>)
 80081aa:	4598      	cmp	r8, r3
 80081ac:	d124      	bne.n	80081f8 <__ieee754_pow+0xe8>
 80081ae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80081b2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80081b6:	ea53 030a 	orrs.w	r3, r3, sl
 80081ba:	f000 8476 	beq.w	8008aaa <__ieee754_pow+0x99a>
 80081be:	4b59      	ldr	r3, [pc, #356]	; (8008324 <__ieee754_pow+0x214>)
 80081c0:	429c      	cmp	r4, r3
 80081c2:	dd2d      	ble.n	8008220 <__ieee754_pow+0x110>
 80081c4:	f1b9 0f00 	cmp.w	r9, #0
 80081c8:	f280 8473 	bge.w	8008ab2 <__ieee754_pow+0x9a2>
 80081cc:	2000      	movs	r0, #0
 80081ce:	2100      	movs	r1, #0
 80081d0:	ec41 0b10 	vmov	d0, r0, r1
 80081d4:	b011      	add	sp, #68	; 0x44
 80081d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081da:	2a00      	cmp	r2, #0
 80081dc:	d13e      	bne.n	800825c <__ieee754_pow+0x14c>
 80081de:	f1c3 0314 	rsb	r3, r3, #20
 80081e2:	fa48 f103 	asr.w	r1, r8, r3
 80081e6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ea:	4543      	cmp	r3, r8
 80081ec:	f040 8469 	bne.w	8008ac2 <__ieee754_pow+0x9b2>
 80081f0:	f001 0101 	and.w	r1, r1, #1
 80081f4:	f1c1 0b02 	rsb	fp, r1, #2
 80081f8:	4b4b      	ldr	r3, [pc, #300]	; (8008328 <__ieee754_pow+0x218>)
 80081fa:	4598      	cmp	r8, r3
 80081fc:	d118      	bne.n	8008230 <__ieee754_pow+0x120>
 80081fe:	f1b9 0f00 	cmp.w	r9, #0
 8008202:	f280 845a 	bge.w	8008aba <__ieee754_pow+0x9aa>
 8008206:	4948      	ldr	r1, [pc, #288]	; (8008328 <__ieee754_pow+0x218>)
 8008208:	4632      	mov	r2, r6
 800820a:	463b      	mov	r3, r7
 800820c:	2000      	movs	r0, #0
 800820e:	f7f8 fb2d 	bl	800086c <__aeabi_ddiv>
 8008212:	e7dd      	b.n	80081d0 <__ieee754_pow+0xc0>
 8008214:	f04f 0b02 	mov.w	fp, #2
 8008218:	e7c4      	b.n	80081a4 <__ieee754_pow+0x94>
 800821a:	f04f 0b00 	mov.w	fp, #0
 800821e:	e7c1      	b.n	80081a4 <__ieee754_pow+0x94>
 8008220:	f1b9 0f00 	cmp.w	r9, #0
 8008224:	dad2      	bge.n	80081cc <__ieee754_pow+0xbc>
 8008226:	e9dd 0300 	ldrd	r0, r3, [sp]
 800822a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800822e:	e7cf      	b.n	80081d0 <__ieee754_pow+0xc0>
 8008230:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008234:	d106      	bne.n	8008244 <__ieee754_pow+0x134>
 8008236:	4632      	mov	r2, r6
 8008238:	463b      	mov	r3, r7
 800823a:	4610      	mov	r0, r2
 800823c:	4619      	mov	r1, r3
 800823e:	f7f8 f9eb 	bl	8000618 <__aeabi_dmul>
 8008242:	e7c5      	b.n	80081d0 <__ieee754_pow+0xc0>
 8008244:	4b39      	ldr	r3, [pc, #228]	; (800832c <__ieee754_pow+0x21c>)
 8008246:	4599      	cmp	r9, r3
 8008248:	d10a      	bne.n	8008260 <__ieee754_pow+0x150>
 800824a:	2d00      	cmp	r5, #0
 800824c:	db08      	blt.n	8008260 <__ieee754_pow+0x150>
 800824e:	ec47 6b10 	vmov	d0, r6, r7
 8008252:	b011      	add	sp, #68	; 0x44
 8008254:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008258:	f000 bc68 	b.w	8008b2c <__ieee754_sqrt>
 800825c:	f04f 0b00 	mov.w	fp, #0
 8008260:	ec47 6b10 	vmov	d0, r6, r7
 8008264:	f000 fd12 	bl	8008c8c <fabs>
 8008268:	ec51 0b10 	vmov	r0, r1, d0
 800826c:	f1ba 0f00 	cmp.w	sl, #0
 8008270:	d127      	bne.n	80082c2 <__ieee754_pow+0x1b2>
 8008272:	b124      	cbz	r4, 800827e <__ieee754_pow+0x16e>
 8008274:	4b2c      	ldr	r3, [pc, #176]	; (8008328 <__ieee754_pow+0x218>)
 8008276:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800827a:	429a      	cmp	r2, r3
 800827c:	d121      	bne.n	80082c2 <__ieee754_pow+0x1b2>
 800827e:	f1b9 0f00 	cmp.w	r9, #0
 8008282:	da05      	bge.n	8008290 <__ieee754_pow+0x180>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	2000      	movs	r0, #0
 800828a:	4927      	ldr	r1, [pc, #156]	; (8008328 <__ieee754_pow+0x218>)
 800828c:	f7f8 faee 	bl	800086c <__aeabi_ddiv>
 8008290:	2d00      	cmp	r5, #0
 8008292:	da9d      	bge.n	80081d0 <__ieee754_pow+0xc0>
 8008294:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008298:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800829c:	ea54 030b 	orrs.w	r3, r4, fp
 80082a0:	d108      	bne.n	80082b4 <__ieee754_pow+0x1a4>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4610      	mov	r0, r2
 80082a8:	4619      	mov	r1, r3
 80082aa:	f7f7 fffd 	bl	80002a8 <__aeabi_dsub>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	e7ac      	b.n	800820e <__ieee754_pow+0xfe>
 80082b4:	f1bb 0f01 	cmp.w	fp, #1
 80082b8:	d18a      	bne.n	80081d0 <__ieee754_pow+0xc0>
 80082ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082be:	4619      	mov	r1, r3
 80082c0:	e786      	b.n	80081d0 <__ieee754_pow+0xc0>
 80082c2:	0fed      	lsrs	r5, r5, #31
 80082c4:	1e6b      	subs	r3, r5, #1
 80082c6:	930d      	str	r3, [sp, #52]	; 0x34
 80082c8:	ea5b 0303 	orrs.w	r3, fp, r3
 80082cc:	d102      	bne.n	80082d4 <__ieee754_pow+0x1c4>
 80082ce:	4632      	mov	r2, r6
 80082d0:	463b      	mov	r3, r7
 80082d2:	e7e8      	b.n	80082a6 <__ieee754_pow+0x196>
 80082d4:	4b16      	ldr	r3, [pc, #88]	; (8008330 <__ieee754_pow+0x220>)
 80082d6:	4598      	cmp	r8, r3
 80082d8:	f340 80fe 	ble.w	80084d8 <__ieee754_pow+0x3c8>
 80082dc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80082e0:	4598      	cmp	r8, r3
 80082e2:	dd0a      	ble.n	80082fa <__ieee754_pow+0x1ea>
 80082e4:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <__ieee754_pow+0x214>)
 80082e6:	429c      	cmp	r4, r3
 80082e8:	dc0d      	bgt.n	8008306 <__ieee754_pow+0x1f6>
 80082ea:	f1b9 0f00 	cmp.w	r9, #0
 80082ee:	f6bf af6d 	bge.w	80081cc <__ieee754_pow+0xbc>
 80082f2:	a307      	add	r3, pc, #28	; (adr r3, 8008310 <__ieee754_pow+0x200>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	e79f      	b.n	800823a <__ieee754_pow+0x12a>
 80082fa:	4b0e      	ldr	r3, [pc, #56]	; (8008334 <__ieee754_pow+0x224>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	ddf4      	ble.n	80082ea <__ieee754_pow+0x1da>
 8008300:	4b09      	ldr	r3, [pc, #36]	; (8008328 <__ieee754_pow+0x218>)
 8008302:	429c      	cmp	r4, r3
 8008304:	dd18      	ble.n	8008338 <__ieee754_pow+0x228>
 8008306:	f1b9 0f00 	cmp.w	r9, #0
 800830a:	dcf2      	bgt.n	80082f2 <__ieee754_pow+0x1e2>
 800830c:	e75e      	b.n	80081cc <__ieee754_pow+0xbc>
 800830e:	bf00      	nop
 8008310:	8800759c 	.word	0x8800759c
 8008314:	7e37e43c 	.word	0x7e37e43c
 8008318:	7ff00000 	.word	0x7ff00000
 800831c:	080090e9 	.word	0x080090e9
 8008320:	433fffff 	.word	0x433fffff
 8008324:	3fefffff 	.word	0x3fefffff
 8008328:	3ff00000 	.word	0x3ff00000
 800832c:	3fe00000 	.word	0x3fe00000
 8008330:	41e00000 	.word	0x41e00000
 8008334:	3feffffe 	.word	0x3feffffe
 8008338:	2200      	movs	r2, #0
 800833a:	4b63      	ldr	r3, [pc, #396]	; (80084c8 <__ieee754_pow+0x3b8>)
 800833c:	f7f7 ffb4 	bl	80002a8 <__aeabi_dsub>
 8008340:	a355      	add	r3, pc, #340	; (adr r3, 8008498 <__ieee754_pow+0x388>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	4604      	mov	r4, r0
 8008348:	460d      	mov	r5, r1
 800834a:	f7f8 f965 	bl	8000618 <__aeabi_dmul>
 800834e:	a354      	add	r3, pc, #336	; (adr r3, 80084a0 <__ieee754_pow+0x390>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	4606      	mov	r6, r0
 8008356:	460f      	mov	r7, r1
 8008358:	4620      	mov	r0, r4
 800835a:	4629      	mov	r1, r5
 800835c:	f7f8 f95c 	bl	8000618 <__aeabi_dmul>
 8008360:	2200      	movs	r2, #0
 8008362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008366:	4b59      	ldr	r3, [pc, #356]	; (80084cc <__ieee754_pow+0x3bc>)
 8008368:	4620      	mov	r0, r4
 800836a:	4629      	mov	r1, r5
 800836c:	f7f8 f954 	bl	8000618 <__aeabi_dmul>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	a14c      	add	r1, pc, #304	; (adr r1, 80084a8 <__ieee754_pow+0x398>)
 8008376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800837a:	f7f7 ff95 	bl	80002a8 <__aeabi_dsub>
 800837e:	4622      	mov	r2, r4
 8008380:	462b      	mov	r3, r5
 8008382:	f7f8 f949 	bl	8000618 <__aeabi_dmul>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	2000      	movs	r0, #0
 800838c:	4950      	ldr	r1, [pc, #320]	; (80084d0 <__ieee754_pow+0x3c0>)
 800838e:	f7f7 ff8b 	bl	80002a8 <__aeabi_dsub>
 8008392:	4622      	mov	r2, r4
 8008394:	462b      	mov	r3, r5
 8008396:	4680      	mov	r8, r0
 8008398:	4689      	mov	r9, r1
 800839a:	4620      	mov	r0, r4
 800839c:	4629      	mov	r1, r5
 800839e:	f7f8 f93b 	bl	8000618 <__aeabi_dmul>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4640      	mov	r0, r8
 80083a8:	4649      	mov	r1, r9
 80083aa:	f7f8 f935 	bl	8000618 <__aeabi_dmul>
 80083ae:	a340      	add	r3, pc, #256	; (adr r3, 80084b0 <__ieee754_pow+0x3a0>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f7f8 f930 	bl	8000618 <__aeabi_dmul>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083c0:	f7f7 ff72 	bl	80002a8 <__aeabi_dsub>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	4604      	mov	r4, r0
 80083ca:	460d      	mov	r5, r1
 80083cc:	4630      	mov	r0, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	f7f7 ff6c 	bl	80002ac <__adddf3>
 80083d4:	2000      	movs	r0, #0
 80083d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083da:	4632      	mov	r2, r6
 80083dc:	463b      	mov	r3, r7
 80083de:	f7f7 ff63 	bl	80002a8 <__aeabi_dsub>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4620      	mov	r0, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	f7f7 ff5d 	bl	80002a8 <__aeabi_dsub>
 80083ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083f0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80083f4:	4313      	orrs	r3, r2
 80083f6:	4606      	mov	r6, r0
 80083f8:	460f      	mov	r7, r1
 80083fa:	f040 81eb 	bne.w	80087d4 <__ieee754_pow+0x6c4>
 80083fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80084b8 <__ieee754_pow+0x3a8>
 8008402:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008406:	2400      	movs	r4, #0
 8008408:	4622      	mov	r2, r4
 800840a:	462b      	mov	r3, r5
 800840c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008410:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008414:	f7f7 ff48 	bl	80002a8 <__aeabi_dsub>
 8008418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800841c:	f7f8 f8fc 	bl	8000618 <__aeabi_dmul>
 8008420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008424:	4680      	mov	r8, r0
 8008426:	4689      	mov	r9, r1
 8008428:	4630      	mov	r0, r6
 800842a:	4639      	mov	r1, r7
 800842c:	f7f8 f8f4 	bl	8000618 <__aeabi_dmul>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4640      	mov	r0, r8
 8008436:	4649      	mov	r1, r9
 8008438:	f7f7 ff38 	bl	80002ac <__adddf3>
 800843c:	4622      	mov	r2, r4
 800843e:	462b      	mov	r3, r5
 8008440:	4680      	mov	r8, r0
 8008442:	4689      	mov	r9, r1
 8008444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008448:	f7f8 f8e6 	bl	8000618 <__aeabi_dmul>
 800844c:	460b      	mov	r3, r1
 800844e:	4604      	mov	r4, r0
 8008450:	460d      	mov	r5, r1
 8008452:	4602      	mov	r2, r0
 8008454:	4649      	mov	r1, r9
 8008456:	4640      	mov	r0, r8
 8008458:	e9cd 4500 	strd	r4, r5, [sp]
 800845c:	f7f7 ff26 	bl	80002ac <__adddf3>
 8008460:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <__ieee754_pow+0x3c4>)
 8008462:	4299      	cmp	r1, r3
 8008464:	4606      	mov	r6, r0
 8008466:	460f      	mov	r7, r1
 8008468:	468b      	mov	fp, r1
 800846a:	f340 82f7 	ble.w	8008a5c <__ieee754_pow+0x94c>
 800846e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008472:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008476:	4303      	orrs	r3, r0
 8008478:	f000 81ea 	beq.w	8008850 <__ieee754_pow+0x740>
 800847c:	a310      	add	r3, pc, #64	; (adr r3, 80084c0 <__ieee754_pow+0x3b0>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008486:	f7f8 f8c7 	bl	8000618 <__aeabi_dmul>
 800848a:	a30d      	add	r3, pc, #52	; (adr r3, 80084c0 <__ieee754_pow+0x3b0>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	e6d5      	b.n	800823e <__ieee754_pow+0x12e>
 8008492:	bf00      	nop
 8008494:	f3af 8000 	nop.w
 8008498:	60000000 	.word	0x60000000
 800849c:	3ff71547 	.word	0x3ff71547
 80084a0:	f85ddf44 	.word	0xf85ddf44
 80084a4:	3e54ae0b 	.word	0x3e54ae0b
 80084a8:	55555555 	.word	0x55555555
 80084ac:	3fd55555 	.word	0x3fd55555
 80084b0:	652b82fe 	.word	0x652b82fe
 80084b4:	3ff71547 	.word	0x3ff71547
 80084b8:	00000000 	.word	0x00000000
 80084bc:	bff00000 	.word	0xbff00000
 80084c0:	8800759c 	.word	0x8800759c
 80084c4:	7e37e43c 	.word	0x7e37e43c
 80084c8:	3ff00000 	.word	0x3ff00000
 80084cc:	3fd00000 	.word	0x3fd00000
 80084d0:	3fe00000 	.word	0x3fe00000
 80084d4:	408fffff 	.word	0x408fffff
 80084d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	da05      	bge.n	80084ee <__ieee754_pow+0x3de>
 80084e2:	4bd3      	ldr	r3, [pc, #844]	; (8008830 <__ieee754_pow+0x720>)
 80084e4:	f7f8 f898 	bl	8000618 <__aeabi_dmul>
 80084e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80084ec:	460c      	mov	r4, r1
 80084ee:	1523      	asrs	r3, r4, #20
 80084f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80084f4:	4413      	add	r3, r2
 80084f6:	9309      	str	r3, [sp, #36]	; 0x24
 80084f8:	4bce      	ldr	r3, [pc, #824]	; (8008834 <__ieee754_pow+0x724>)
 80084fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80084fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008502:	429c      	cmp	r4, r3
 8008504:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008508:	dd08      	ble.n	800851c <__ieee754_pow+0x40c>
 800850a:	4bcb      	ldr	r3, [pc, #812]	; (8008838 <__ieee754_pow+0x728>)
 800850c:	429c      	cmp	r4, r3
 800850e:	f340 815e 	ble.w	80087ce <__ieee754_pow+0x6be>
 8008512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008514:	3301      	adds	r3, #1
 8008516:	9309      	str	r3, [sp, #36]	; 0x24
 8008518:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800851c:	f04f 0a00 	mov.w	sl, #0
 8008520:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008524:	930c      	str	r3, [sp, #48]	; 0x30
 8008526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008528:	4bc4      	ldr	r3, [pc, #784]	; (800883c <__ieee754_pow+0x72c>)
 800852a:	4413      	add	r3, r2
 800852c:	ed93 7b00 	vldr	d7, [r3]
 8008530:	4629      	mov	r1, r5
 8008532:	ec53 2b17 	vmov	r2, r3, d7
 8008536:	ed8d 7b06 	vstr	d7, [sp, #24]
 800853a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800853e:	f7f7 feb3 	bl	80002a8 <__aeabi_dsub>
 8008542:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008546:	4606      	mov	r6, r0
 8008548:	460f      	mov	r7, r1
 800854a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800854e:	f7f7 fead 	bl	80002ac <__adddf3>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	2000      	movs	r0, #0
 8008558:	49b9      	ldr	r1, [pc, #740]	; (8008840 <__ieee754_pow+0x730>)
 800855a:	f7f8 f987 	bl	800086c <__aeabi_ddiv>
 800855e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4630      	mov	r0, r6
 8008568:	4639      	mov	r1, r7
 800856a:	f7f8 f855 	bl	8000618 <__aeabi_dmul>
 800856e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008572:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008576:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800857a:	2300      	movs	r3, #0
 800857c:	9302      	str	r3, [sp, #8]
 800857e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008582:	106d      	asrs	r5, r5, #1
 8008584:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008588:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800858c:	2200      	movs	r2, #0
 800858e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008592:	4640      	mov	r0, r8
 8008594:	4649      	mov	r1, r9
 8008596:	4614      	mov	r4, r2
 8008598:	461d      	mov	r5, r3
 800859a:	f7f8 f83d 	bl	8000618 <__aeabi_dmul>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4630      	mov	r0, r6
 80085a4:	4639      	mov	r1, r7
 80085a6:	f7f7 fe7f 	bl	80002a8 <__aeabi_dsub>
 80085aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085ae:	4606      	mov	r6, r0
 80085b0:	460f      	mov	r7, r1
 80085b2:	4620      	mov	r0, r4
 80085b4:	4629      	mov	r1, r5
 80085b6:	f7f7 fe77 	bl	80002a8 <__aeabi_dsub>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085c2:	f7f7 fe71 	bl	80002a8 <__aeabi_dsub>
 80085c6:	4642      	mov	r2, r8
 80085c8:	464b      	mov	r3, r9
 80085ca:	f7f8 f825 	bl	8000618 <__aeabi_dmul>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f7 fe67 	bl	80002a8 <__aeabi_dsub>
 80085da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80085de:	f7f8 f81b 	bl	8000618 <__aeabi_dmul>
 80085e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80085ea:	4610      	mov	r0, r2
 80085ec:	4619      	mov	r1, r3
 80085ee:	f7f8 f813 	bl	8000618 <__aeabi_dmul>
 80085f2:	a37b      	add	r3, pc, #492	; (adr r3, 80087e0 <__ieee754_pow+0x6d0>)
 80085f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f8:	4604      	mov	r4, r0
 80085fa:	460d      	mov	r5, r1
 80085fc:	f7f8 f80c 	bl	8000618 <__aeabi_dmul>
 8008600:	a379      	add	r3, pc, #484	; (adr r3, 80087e8 <__ieee754_pow+0x6d8>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f7 fe51 	bl	80002ac <__adddf3>
 800860a:	4622      	mov	r2, r4
 800860c:	462b      	mov	r3, r5
 800860e:	f7f8 f803 	bl	8000618 <__aeabi_dmul>
 8008612:	a377      	add	r3, pc, #476	; (adr r3, 80087f0 <__ieee754_pow+0x6e0>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f7f7 fe48 	bl	80002ac <__adddf3>
 800861c:	4622      	mov	r2, r4
 800861e:	462b      	mov	r3, r5
 8008620:	f7f7 fffa 	bl	8000618 <__aeabi_dmul>
 8008624:	a374      	add	r3, pc, #464	; (adr r3, 80087f8 <__ieee754_pow+0x6e8>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f7f7 fe3f 	bl	80002ac <__adddf3>
 800862e:	4622      	mov	r2, r4
 8008630:	462b      	mov	r3, r5
 8008632:	f7f7 fff1 	bl	8000618 <__aeabi_dmul>
 8008636:	a372      	add	r3, pc, #456	; (adr r3, 8008800 <__ieee754_pow+0x6f0>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f7f7 fe36 	bl	80002ac <__adddf3>
 8008640:	4622      	mov	r2, r4
 8008642:	462b      	mov	r3, r5
 8008644:	f7f7 ffe8 	bl	8000618 <__aeabi_dmul>
 8008648:	a36f      	add	r3, pc, #444	; (adr r3, 8008808 <__ieee754_pow+0x6f8>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	f7f7 fe2d 	bl	80002ac <__adddf3>
 8008652:	4622      	mov	r2, r4
 8008654:	4606      	mov	r6, r0
 8008656:	460f      	mov	r7, r1
 8008658:	462b      	mov	r3, r5
 800865a:	4620      	mov	r0, r4
 800865c:	4629      	mov	r1, r5
 800865e:	f7f7 ffdb 	bl	8000618 <__aeabi_dmul>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4630      	mov	r0, r6
 8008668:	4639      	mov	r1, r7
 800866a:	f7f7 ffd5 	bl	8000618 <__aeabi_dmul>
 800866e:	4642      	mov	r2, r8
 8008670:	4604      	mov	r4, r0
 8008672:	460d      	mov	r5, r1
 8008674:	464b      	mov	r3, r9
 8008676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800867a:	f7f7 fe17 	bl	80002ac <__adddf3>
 800867e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008682:	f7f7 ffc9 	bl	8000618 <__aeabi_dmul>
 8008686:	4622      	mov	r2, r4
 8008688:	462b      	mov	r3, r5
 800868a:	f7f7 fe0f 	bl	80002ac <__adddf3>
 800868e:	4642      	mov	r2, r8
 8008690:	4606      	mov	r6, r0
 8008692:	460f      	mov	r7, r1
 8008694:	464b      	mov	r3, r9
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	f7f7 ffbd 	bl	8000618 <__aeabi_dmul>
 800869e:	2200      	movs	r2, #0
 80086a0:	4b68      	ldr	r3, [pc, #416]	; (8008844 <__ieee754_pow+0x734>)
 80086a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80086a6:	f7f7 fe01 	bl	80002ac <__adddf3>
 80086aa:	4632      	mov	r2, r6
 80086ac:	463b      	mov	r3, r7
 80086ae:	f7f7 fdfd 	bl	80002ac <__adddf3>
 80086b2:	9802      	ldr	r0, [sp, #8]
 80086b4:	460d      	mov	r5, r1
 80086b6:	4604      	mov	r4, r0
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4640      	mov	r0, r8
 80086be:	4649      	mov	r1, r9
 80086c0:	f7f7 ffaa 	bl	8000618 <__aeabi_dmul>
 80086c4:	2200      	movs	r2, #0
 80086c6:	4680      	mov	r8, r0
 80086c8:	4689      	mov	r9, r1
 80086ca:	4b5e      	ldr	r3, [pc, #376]	; (8008844 <__ieee754_pow+0x734>)
 80086cc:	4620      	mov	r0, r4
 80086ce:	4629      	mov	r1, r5
 80086d0:	f7f7 fdea 	bl	80002a8 <__aeabi_dsub>
 80086d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80086d8:	f7f7 fde6 	bl	80002a8 <__aeabi_dsub>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4630      	mov	r0, r6
 80086e2:	4639      	mov	r1, r7
 80086e4:	f7f7 fde0 	bl	80002a8 <__aeabi_dsub>
 80086e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ec:	f7f7 ff94 	bl	8000618 <__aeabi_dmul>
 80086f0:	4622      	mov	r2, r4
 80086f2:	4606      	mov	r6, r0
 80086f4:	460f      	mov	r7, r1
 80086f6:	462b      	mov	r3, r5
 80086f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086fc:	f7f7 ff8c 	bl	8000618 <__aeabi_dmul>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4630      	mov	r0, r6
 8008706:	4639      	mov	r1, r7
 8008708:	f7f7 fdd0 	bl	80002ac <__adddf3>
 800870c:	4606      	mov	r6, r0
 800870e:	460f      	mov	r7, r1
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4640      	mov	r0, r8
 8008716:	4649      	mov	r1, r9
 8008718:	f7f7 fdc8 	bl	80002ac <__adddf3>
 800871c:	9802      	ldr	r0, [sp, #8]
 800871e:	a33c      	add	r3, pc, #240	; (adr r3, 8008810 <__ieee754_pow+0x700>)
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
 8008728:	f7f7 ff76 	bl	8000618 <__aeabi_dmul>
 800872c:	4642      	mov	r2, r8
 800872e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008732:	464b      	mov	r3, r9
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f7 fdb6 	bl	80002a8 <__aeabi_dsub>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f7 fdb0 	bl	80002a8 <__aeabi_dsub>
 8008748:	a333      	add	r3, pc, #204	; (adr r3, 8008818 <__ieee754_pow+0x708>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 ff63 	bl	8000618 <__aeabi_dmul>
 8008752:	a333      	add	r3, pc, #204	; (adr r3, 8008820 <__ieee754_pow+0x710>)
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	4606      	mov	r6, r0
 800875a:	460f      	mov	r7, r1
 800875c:	4620      	mov	r0, r4
 800875e:	4629      	mov	r1, r5
 8008760:	f7f7 ff5a 	bl	8000618 <__aeabi_dmul>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4630      	mov	r0, r6
 800876a:	4639      	mov	r1, r7
 800876c:	f7f7 fd9e 	bl	80002ac <__adddf3>
 8008770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008772:	4b35      	ldr	r3, [pc, #212]	; (8008848 <__ieee754_pow+0x738>)
 8008774:	4413      	add	r3, r2
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	f7f7 fd97 	bl	80002ac <__adddf3>
 800877e:	4604      	mov	r4, r0
 8008780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008782:	460d      	mov	r5, r1
 8008784:	f7f7 fede 	bl	8000544 <__aeabi_i2d>
 8008788:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800878a:	4b30      	ldr	r3, [pc, #192]	; (800884c <__ieee754_pow+0x73c>)
 800878c:	4413      	add	r3, r2
 800878e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008792:	4606      	mov	r6, r0
 8008794:	460f      	mov	r7, r1
 8008796:	4622      	mov	r2, r4
 8008798:	462b      	mov	r3, r5
 800879a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800879e:	f7f7 fd85 	bl	80002ac <__adddf3>
 80087a2:	4642      	mov	r2, r8
 80087a4:	464b      	mov	r3, r9
 80087a6:	f7f7 fd81 	bl	80002ac <__adddf3>
 80087aa:	4632      	mov	r2, r6
 80087ac:	463b      	mov	r3, r7
 80087ae:	f7f7 fd7d 	bl	80002ac <__adddf3>
 80087b2:	9802      	ldr	r0, [sp, #8]
 80087b4:	4632      	mov	r2, r6
 80087b6:	463b      	mov	r3, r7
 80087b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087bc:	f7f7 fd74 	bl	80002a8 <__aeabi_dsub>
 80087c0:	4642      	mov	r2, r8
 80087c2:	464b      	mov	r3, r9
 80087c4:	f7f7 fd70 	bl	80002a8 <__aeabi_dsub>
 80087c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087cc:	e607      	b.n	80083de <__ieee754_pow+0x2ce>
 80087ce:	f04f 0a01 	mov.w	sl, #1
 80087d2:	e6a5      	b.n	8008520 <__ieee754_pow+0x410>
 80087d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008828 <__ieee754_pow+0x718>
 80087d8:	e613      	b.n	8008402 <__ieee754_pow+0x2f2>
 80087da:	bf00      	nop
 80087dc:	f3af 8000 	nop.w
 80087e0:	4a454eef 	.word	0x4a454eef
 80087e4:	3fca7e28 	.word	0x3fca7e28
 80087e8:	93c9db65 	.word	0x93c9db65
 80087ec:	3fcd864a 	.word	0x3fcd864a
 80087f0:	a91d4101 	.word	0xa91d4101
 80087f4:	3fd17460 	.word	0x3fd17460
 80087f8:	518f264d 	.word	0x518f264d
 80087fc:	3fd55555 	.word	0x3fd55555
 8008800:	db6fabff 	.word	0xdb6fabff
 8008804:	3fdb6db6 	.word	0x3fdb6db6
 8008808:	33333303 	.word	0x33333303
 800880c:	3fe33333 	.word	0x3fe33333
 8008810:	e0000000 	.word	0xe0000000
 8008814:	3feec709 	.word	0x3feec709
 8008818:	dc3a03fd 	.word	0xdc3a03fd
 800881c:	3feec709 	.word	0x3feec709
 8008820:	145b01f5 	.word	0x145b01f5
 8008824:	be3e2fe0 	.word	0xbe3e2fe0
 8008828:	00000000 	.word	0x00000000
 800882c:	3ff00000 	.word	0x3ff00000
 8008830:	43400000 	.word	0x43400000
 8008834:	0003988e 	.word	0x0003988e
 8008838:	000bb679 	.word	0x000bb679
 800883c:	08009120 	.word	0x08009120
 8008840:	3ff00000 	.word	0x3ff00000
 8008844:	40080000 	.word	0x40080000
 8008848:	08009140 	.word	0x08009140
 800884c:	08009130 	.word	0x08009130
 8008850:	a3b4      	add	r3, pc, #720	; (adr r3, 8008b24 <__ieee754_pow+0xa14>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	4640      	mov	r0, r8
 8008858:	4649      	mov	r1, r9
 800885a:	f7f7 fd27 	bl	80002ac <__adddf3>
 800885e:	4622      	mov	r2, r4
 8008860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008864:	462b      	mov	r3, r5
 8008866:	4630      	mov	r0, r6
 8008868:	4639      	mov	r1, r7
 800886a:	f7f7 fd1d 	bl	80002a8 <__aeabi_dsub>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008876:	f7f8 f95f 	bl	8000b38 <__aeabi_dcmpgt>
 800887a:	2800      	cmp	r0, #0
 800887c:	f47f adfe 	bne.w	800847c <__ieee754_pow+0x36c>
 8008880:	4aa3      	ldr	r2, [pc, #652]	; (8008b10 <__ieee754_pow+0xa00>)
 8008882:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008886:	4293      	cmp	r3, r2
 8008888:	f340 810a 	ble.w	8008aa0 <__ieee754_pow+0x990>
 800888c:	151b      	asrs	r3, r3, #20
 800888e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008892:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008896:	fa4a f303 	asr.w	r3, sl, r3
 800889a:	445b      	add	r3, fp
 800889c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80088a0:	4e9c      	ldr	r6, [pc, #624]	; (8008b14 <__ieee754_pow+0xa04>)
 80088a2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80088a6:	4116      	asrs	r6, r2
 80088a8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80088ac:	2000      	movs	r0, #0
 80088ae:	ea23 0106 	bic.w	r1, r3, r6
 80088b2:	f1c2 0214 	rsb	r2, r2, #20
 80088b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80088ba:	fa4a fa02 	asr.w	sl, sl, r2
 80088be:	f1bb 0f00 	cmp.w	fp, #0
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4620      	mov	r0, r4
 80088c8:	4629      	mov	r1, r5
 80088ca:	bfb8      	it	lt
 80088cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80088d0:	f7f7 fcea 	bl	80002a8 <__aeabi_dsub>
 80088d4:	e9cd 0100 	strd	r0, r1, [sp]
 80088d8:	4642      	mov	r2, r8
 80088da:	464b      	mov	r3, r9
 80088dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088e0:	f7f7 fce4 	bl	80002ac <__adddf3>
 80088e4:	2000      	movs	r0, #0
 80088e6:	a378      	add	r3, pc, #480	; (adr r3, 8008ac8 <__ieee754_pow+0x9b8>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	4604      	mov	r4, r0
 80088ee:	460d      	mov	r5, r1
 80088f0:	f7f7 fe92 	bl	8000618 <__aeabi_dmul>
 80088f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088f8:	4606      	mov	r6, r0
 80088fa:	460f      	mov	r7, r1
 80088fc:	4620      	mov	r0, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	f7f7 fcd2 	bl	80002a8 <__aeabi_dsub>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4640      	mov	r0, r8
 800890a:	4649      	mov	r1, r9
 800890c:	f7f7 fccc 	bl	80002a8 <__aeabi_dsub>
 8008910:	a36f      	add	r3, pc, #444	; (adr r3, 8008ad0 <__ieee754_pow+0x9c0>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fe7f 	bl	8000618 <__aeabi_dmul>
 800891a:	a36f      	add	r3, pc, #444	; (adr r3, 8008ad8 <__ieee754_pow+0x9c8>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	4680      	mov	r8, r0
 8008922:	4689      	mov	r9, r1
 8008924:	4620      	mov	r0, r4
 8008926:	4629      	mov	r1, r5
 8008928:	f7f7 fe76 	bl	8000618 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4640      	mov	r0, r8
 8008932:	4649      	mov	r1, r9
 8008934:	f7f7 fcba 	bl	80002ac <__adddf3>
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f7 fcb2 	bl	80002ac <__adddf3>
 8008948:	4632      	mov	r2, r6
 800894a:	463b      	mov	r3, r7
 800894c:	4680      	mov	r8, r0
 800894e:	4689      	mov	r9, r1
 8008950:	f7f7 fcaa 	bl	80002a8 <__aeabi_dsub>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4620      	mov	r0, r4
 800895a:	4629      	mov	r1, r5
 800895c:	f7f7 fca4 	bl	80002a8 <__aeabi_dsub>
 8008960:	4642      	mov	r2, r8
 8008962:	4606      	mov	r6, r0
 8008964:	460f      	mov	r7, r1
 8008966:	464b      	mov	r3, r9
 8008968:	4640      	mov	r0, r8
 800896a:	4649      	mov	r1, r9
 800896c:	f7f7 fe54 	bl	8000618 <__aeabi_dmul>
 8008970:	a35b      	add	r3, pc, #364	; (adr r3, 8008ae0 <__ieee754_pow+0x9d0>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	4604      	mov	r4, r0
 8008978:	460d      	mov	r5, r1
 800897a:	f7f7 fe4d 	bl	8000618 <__aeabi_dmul>
 800897e:	a35a      	add	r3, pc, #360	; (adr r3, 8008ae8 <__ieee754_pow+0x9d8>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f7f7 fc90 	bl	80002a8 <__aeabi_dsub>
 8008988:	4622      	mov	r2, r4
 800898a:	462b      	mov	r3, r5
 800898c:	f7f7 fe44 	bl	8000618 <__aeabi_dmul>
 8008990:	a357      	add	r3, pc, #348	; (adr r3, 8008af0 <__ieee754_pow+0x9e0>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 fc89 	bl	80002ac <__adddf3>
 800899a:	4622      	mov	r2, r4
 800899c:	462b      	mov	r3, r5
 800899e:	f7f7 fe3b 	bl	8000618 <__aeabi_dmul>
 80089a2:	a355      	add	r3, pc, #340	; (adr r3, 8008af8 <__ieee754_pow+0x9e8>)
 80089a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a8:	f7f7 fc7e 	bl	80002a8 <__aeabi_dsub>
 80089ac:	4622      	mov	r2, r4
 80089ae:	462b      	mov	r3, r5
 80089b0:	f7f7 fe32 	bl	8000618 <__aeabi_dmul>
 80089b4:	a352      	add	r3, pc, #328	; (adr r3, 8008b00 <__ieee754_pow+0x9f0>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f7f7 fc77 	bl	80002ac <__adddf3>
 80089be:	4622      	mov	r2, r4
 80089c0:	462b      	mov	r3, r5
 80089c2:	f7f7 fe29 	bl	8000618 <__aeabi_dmul>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4640      	mov	r0, r8
 80089cc:	4649      	mov	r1, r9
 80089ce:	f7f7 fc6b 	bl	80002a8 <__aeabi_dsub>
 80089d2:	4604      	mov	r4, r0
 80089d4:	460d      	mov	r5, r1
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4640      	mov	r0, r8
 80089dc:	4649      	mov	r1, r9
 80089de:	f7f7 fe1b 	bl	8000618 <__aeabi_dmul>
 80089e2:	2200      	movs	r2, #0
 80089e4:	e9cd 0100 	strd	r0, r1, [sp]
 80089e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089ec:	4620      	mov	r0, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7f7 fc5a 	bl	80002a8 <__aeabi_dsub>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089fc:	f7f7 ff36 	bl	800086c <__aeabi_ddiv>
 8008a00:	4632      	mov	r2, r6
 8008a02:	4604      	mov	r4, r0
 8008a04:	460d      	mov	r5, r1
 8008a06:	463b      	mov	r3, r7
 8008a08:	4640      	mov	r0, r8
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	f7f7 fe04 	bl	8000618 <__aeabi_dmul>
 8008a10:	4632      	mov	r2, r6
 8008a12:	463b      	mov	r3, r7
 8008a14:	f7f7 fc4a 	bl	80002ac <__adddf3>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fc42 	bl	80002a8 <__aeabi_dsub>
 8008a24:	4642      	mov	r2, r8
 8008a26:	464b      	mov	r3, r9
 8008a28:	f7f7 fc3e 	bl	80002a8 <__aeabi_dsub>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	2000      	movs	r0, #0
 8008a32:	4939      	ldr	r1, [pc, #228]	; (8008b18 <__ieee754_pow+0xa08>)
 8008a34:	f7f7 fc38 	bl	80002a8 <__aeabi_dsub>
 8008a38:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008a3c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	da2f      	bge.n	8008aa6 <__ieee754_pow+0x996>
 8008a46:	4650      	mov	r0, sl
 8008a48:	ec43 2b10 	vmov	d0, r2, r3
 8008a4c:	f000 f9c0 	bl	8008dd0 <scalbn>
 8008a50:	ec51 0b10 	vmov	r0, r1, d0
 8008a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a58:	f7ff bbf1 	b.w	800823e <__ieee754_pow+0x12e>
 8008a5c:	4b2f      	ldr	r3, [pc, #188]	; (8008b1c <__ieee754_pow+0xa0c>)
 8008a5e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008a62:	429e      	cmp	r6, r3
 8008a64:	f77f af0c 	ble.w	8008880 <__ieee754_pow+0x770>
 8008a68:	4b2d      	ldr	r3, [pc, #180]	; (8008b20 <__ieee754_pow+0xa10>)
 8008a6a:	440b      	add	r3, r1
 8008a6c:	4303      	orrs	r3, r0
 8008a6e:	d00b      	beq.n	8008a88 <__ieee754_pow+0x978>
 8008a70:	a325      	add	r3, pc, #148	; (adr r3, 8008b08 <__ieee754_pow+0x9f8>)
 8008a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a7a:	f7f7 fdcd 	bl	8000618 <__aeabi_dmul>
 8008a7e:	a322      	add	r3, pc, #136	; (adr r3, 8008b08 <__ieee754_pow+0x9f8>)
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	f7ff bbdb 	b.w	800823e <__ieee754_pow+0x12e>
 8008a88:	4622      	mov	r2, r4
 8008a8a:	462b      	mov	r3, r5
 8008a8c:	f7f7 fc0c 	bl	80002a8 <__aeabi_dsub>
 8008a90:	4642      	mov	r2, r8
 8008a92:	464b      	mov	r3, r9
 8008a94:	f7f8 f846 	bl	8000b24 <__aeabi_dcmpge>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	f43f aef1 	beq.w	8008880 <__ieee754_pow+0x770>
 8008a9e:	e7e7      	b.n	8008a70 <__ieee754_pow+0x960>
 8008aa0:	f04f 0a00 	mov.w	sl, #0
 8008aa4:	e718      	b.n	80088d8 <__ieee754_pow+0x7c8>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	e7d4      	b.n	8008a54 <__ieee754_pow+0x944>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	491a      	ldr	r1, [pc, #104]	; (8008b18 <__ieee754_pow+0xa08>)
 8008aae:	f7ff bb8f 	b.w	80081d0 <__ieee754_pow+0xc0>
 8008ab2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab6:	f7ff bb8b 	b.w	80081d0 <__ieee754_pow+0xc0>
 8008aba:	4630      	mov	r0, r6
 8008abc:	4639      	mov	r1, r7
 8008abe:	f7ff bb87 	b.w	80081d0 <__ieee754_pow+0xc0>
 8008ac2:	4693      	mov	fp, r2
 8008ac4:	f7ff bb98 	b.w	80081f8 <__ieee754_pow+0xe8>
 8008ac8:	00000000 	.word	0x00000000
 8008acc:	3fe62e43 	.word	0x3fe62e43
 8008ad0:	fefa39ef 	.word	0xfefa39ef
 8008ad4:	3fe62e42 	.word	0x3fe62e42
 8008ad8:	0ca86c39 	.word	0x0ca86c39
 8008adc:	be205c61 	.word	0xbe205c61
 8008ae0:	72bea4d0 	.word	0x72bea4d0
 8008ae4:	3e663769 	.word	0x3e663769
 8008ae8:	c5d26bf1 	.word	0xc5d26bf1
 8008aec:	3ebbbd41 	.word	0x3ebbbd41
 8008af0:	af25de2c 	.word	0xaf25de2c
 8008af4:	3f11566a 	.word	0x3f11566a
 8008af8:	16bebd93 	.word	0x16bebd93
 8008afc:	3f66c16c 	.word	0x3f66c16c
 8008b00:	5555553e 	.word	0x5555553e
 8008b04:	3fc55555 	.word	0x3fc55555
 8008b08:	c2f8f359 	.word	0xc2f8f359
 8008b0c:	01a56e1f 	.word	0x01a56e1f
 8008b10:	3fe00000 	.word	0x3fe00000
 8008b14:	000fffff 	.word	0x000fffff
 8008b18:	3ff00000 	.word	0x3ff00000
 8008b1c:	4090cbff 	.word	0x4090cbff
 8008b20:	3f6f3400 	.word	0x3f6f3400
 8008b24:	652b82fe 	.word	0x652b82fe
 8008b28:	3c971547 	.word	0x3c971547

08008b2c <__ieee754_sqrt>:
 8008b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b30:	4955      	ldr	r1, [pc, #340]	; (8008c88 <__ieee754_sqrt+0x15c>)
 8008b32:	ec55 4b10 	vmov	r4, r5, d0
 8008b36:	43a9      	bics	r1, r5
 8008b38:	462b      	mov	r3, r5
 8008b3a:	462a      	mov	r2, r5
 8008b3c:	d112      	bne.n	8008b64 <__ieee754_sqrt+0x38>
 8008b3e:	ee10 2a10 	vmov	r2, s0
 8008b42:	ee10 0a10 	vmov	r0, s0
 8008b46:	4629      	mov	r1, r5
 8008b48:	f7f7 fd66 	bl	8000618 <__aeabi_dmul>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	4620      	mov	r0, r4
 8008b52:	4629      	mov	r1, r5
 8008b54:	f7f7 fbaa 	bl	80002ac <__adddf3>
 8008b58:	4604      	mov	r4, r0
 8008b5a:	460d      	mov	r5, r1
 8008b5c:	ec45 4b10 	vmov	d0, r4, r5
 8008b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b64:	2d00      	cmp	r5, #0
 8008b66:	ee10 0a10 	vmov	r0, s0
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	dc0f      	bgt.n	8008b8e <__ieee754_sqrt+0x62>
 8008b6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008b72:	4330      	orrs	r0, r6
 8008b74:	d0f2      	beq.n	8008b5c <__ieee754_sqrt+0x30>
 8008b76:	b155      	cbz	r5, 8008b8e <__ieee754_sqrt+0x62>
 8008b78:	ee10 2a10 	vmov	r2, s0
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4629      	mov	r1, r5
 8008b80:	f7f7 fb92 	bl	80002a8 <__aeabi_dsub>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	f7f7 fe70 	bl	800086c <__aeabi_ddiv>
 8008b8c:	e7e4      	b.n	8008b58 <__ieee754_sqrt+0x2c>
 8008b8e:	151b      	asrs	r3, r3, #20
 8008b90:	d073      	beq.n	8008c7a <__ieee754_sqrt+0x14e>
 8008b92:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b96:	07dd      	lsls	r5, r3, #31
 8008b98:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008b9c:	bf48      	it	mi
 8008b9e:	0fc8      	lsrmi	r0, r1, #31
 8008ba0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008ba4:	bf44      	itt	mi
 8008ba6:	0049      	lslmi	r1, r1, #1
 8008ba8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008bac:	2500      	movs	r5, #0
 8008bae:	1058      	asrs	r0, r3, #1
 8008bb0:	0fcb      	lsrs	r3, r1, #31
 8008bb2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008bb6:	0049      	lsls	r1, r1, #1
 8008bb8:	2316      	movs	r3, #22
 8008bba:	462c      	mov	r4, r5
 8008bbc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008bc0:	19a7      	adds	r7, r4, r6
 8008bc2:	4297      	cmp	r7, r2
 8008bc4:	bfde      	ittt	le
 8008bc6:	19bc      	addle	r4, r7, r6
 8008bc8:	1bd2      	suble	r2, r2, r7
 8008bca:	19ad      	addle	r5, r5, r6
 8008bcc:	0fcf      	lsrs	r7, r1, #31
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008bd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008bd8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008bdc:	d1f0      	bne.n	8008bc0 <__ieee754_sqrt+0x94>
 8008bde:	f04f 0c20 	mov.w	ip, #32
 8008be2:	469e      	mov	lr, r3
 8008be4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008be8:	42a2      	cmp	r2, r4
 8008bea:	eb06 070e 	add.w	r7, r6, lr
 8008bee:	dc02      	bgt.n	8008bf6 <__ieee754_sqrt+0xca>
 8008bf0:	d112      	bne.n	8008c18 <__ieee754_sqrt+0xec>
 8008bf2:	428f      	cmp	r7, r1
 8008bf4:	d810      	bhi.n	8008c18 <__ieee754_sqrt+0xec>
 8008bf6:	2f00      	cmp	r7, #0
 8008bf8:	eb07 0e06 	add.w	lr, r7, r6
 8008bfc:	da42      	bge.n	8008c84 <__ieee754_sqrt+0x158>
 8008bfe:	f1be 0f00 	cmp.w	lr, #0
 8008c02:	db3f      	blt.n	8008c84 <__ieee754_sqrt+0x158>
 8008c04:	f104 0801 	add.w	r8, r4, #1
 8008c08:	1b12      	subs	r2, r2, r4
 8008c0a:	428f      	cmp	r7, r1
 8008c0c:	bf88      	it	hi
 8008c0e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008c12:	1bc9      	subs	r1, r1, r7
 8008c14:	4433      	add	r3, r6
 8008c16:	4644      	mov	r4, r8
 8008c18:	0052      	lsls	r2, r2, #1
 8008c1a:	f1bc 0c01 	subs.w	ip, ip, #1
 8008c1e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008c22:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008c26:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008c2a:	d1dd      	bne.n	8008be8 <__ieee754_sqrt+0xbc>
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	d006      	beq.n	8008c3e <__ieee754_sqrt+0x112>
 8008c30:	1c5c      	adds	r4, r3, #1
 8008c32:	bf13      	iteet	ne
 8008c34:	3301      	addne	r3, #1
 8008c36:	3501      	addeq	r5, #1
 8008c38:	4663      	moveq	r3, ip
 8008c3a:	f023 0301 	bicne.w	r3, r3, #1
 8008c3e:	106a      	asrs	r2, r5, #1
 8008c40:	085b      	lsrs	r3, r3, #1
 8008c42:	07e9      	lsls	r1, r5, #31
 8008c44:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008c48:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008c4c:	bf48      	it	mi
 8008c4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008c52:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008c56:	461c      	mov	r4, r3
 8008c58:	e780      	b.n	8008b5c <__ieee754_sqrt+0x30>
 8008c5a:	0aca      	lsrs	r2, r1, #11
 8008c5c:	3815      	subs	r0, #21
 8008c5e:	0549      	lsls	r1, r1, #21
 8008c60:	2a00      	cmp	r2, #0
 8008c62:	d0fa      	beq.n	8008c5a <__ieee754_sqrt+0x12e>
 8008c64:	02d6      	lsls	r6, r2, #11
 8008c66:	d50a      	bpl.n	8008c7e <__ieee754_sqrt+0x152>
 8008c68:	f1c3 0420 	rsb	r4, r3, #32
 8008c6c:	fa21 f404 	lsr.w	r4, r1, r4
 8008c70:	1e5d      	subs	r5, r3, #1
 8008c72:	4099      	lsls	r1, r3
 8008c74:	4322      	orrs	r2, r4
 8008c76:	1b43      	subs	r3, r0, r5
 8008c78:	e78b      	b.n	8008b92 <__ieee754_sqrt+0x66>
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	e7f0      	b.n	8008c60 <__ieee754_sqrt+0x134>
 8008c7e:	0052      	lsls	r2, r2, #1
 8008c80:	3301      	adds	r3, #1
 8008c82:	e7ef      	b.n	8008c64 <__ieee754_sqrt+0x138>
 8008c84:	46a0      	mov	r8, r4
 8008c86:	e7bf      	b.n	8008c08 <__ieee754_sqrt+0xdc>
 8008c88:	7ff00000 	.word	0x7ff00000

08008c8c <fabs>:
 8008c8c:	ec51 0b10 	vmov	r0, r1, d0
 8008c90:	ee10 2a10 	vmov	r2, s0
 8008c94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c98:	ec43 2b10 	vmov	d0, r2, r3
 8008c9c:	4770      	bx	lr

08008c9e <finite>:
 8008c9e:	ee10 3a90 	vmov	r3, s1
 8008ca2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008ca6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008caa:	0fc0      	lsrs	r0, r0, #31
 8008cac:	4770      	bx	lr

08008cae <matherr>:
 8008cae:	2000      	movs	r0, #0
 8008cb0:	4770      	bx	lr
 8008cb2:	0000      	movs	r0, r0
 8008cb4:	0000      	movs	r0, r0
	...

08008cb8 <nan>:
 8008cb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008cc0 <nan+0x8>
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	00000000 	.word	0x00000000
 8008cc4:	7ff80000 	.word	0x7ff80000

08008cc8 <rint>:
 8008cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cca:	ec51 0b10 	vmov	r0, r1, d0
 8008cce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008cd2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008cd6:	2e13      	cmp	r6, #19
 8008cd8:	460b      	mov	r3, r1
 8008cda:	ee10 4a10 	vmov	r4, s0
 8008cde:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008ce2:	dc56      	bgt.n	8008d92 <rint+0xca>
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	da2b      	bge.n	8008d40 <rint+0x78>
 8008ce8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008cec:	4302      	orrs	r2, r0
 8008cee:	d023      	beq.n	8008d38 <rint+0x70>
 8008cf0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008cf4:	4302      	orrs	r2, r0
 8008cf6:	4254      	negs	r4, r2
 8008cf8:	4314      	orrs	r4, r2
 8008cfa:	0c4b      	lsrs	r3, r1, #17
 8008cfc:	0b24      	lsrs	r4, r4, #12
 8008cfe:	045b      	lsls	r3, r3, #17
 8008d00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008d04:	ea44 0103 	orr.w	r1, r4, r3
 8008d08:	460b      	mov	r3, r1
 8008d0a:	492f      	ldr	r1, [pc, #188]	; (8008dc8 <rint+0x100>)
 8008d0c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008d10:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008d14:	4602      	mov	r2, r0
 8008d16:	4639      	mov	r1, r7
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7f7 fac7 	bl	80002ac <__adddf3>
 8008d1e:	e9cd 0100 	strd	r0, r1, [sp]
 8008d22:	463b      	mov	r3, r7
 8008d24:	4632      	mov	r2, r6
 8008d26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d2a:	f7f7 fabd 	bl	80002a8 <__aeabi_dsub>
 8008d2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008d36:	4639      	mov	r1, r7
 8008d38:	ec41 0b10 	vmov	d0, r0, r1
 8008d3c:	b003      	add	sp, #12
 8008d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d40:	4a22      	ldr	r2, [pc, #136]	; (8008dcc <rint+0x104>)
 8008d42:	4132      	asrs	r2, r6
 8008d44:	ea01 0702 	and.w	r7, r1, r2
 8008d48:	4307      	orrs	r7, r0
 8008d4a:	d0f5      	beq.n	8008d38 <rint+0x70>
 8008d4c:	0852      	lsrs	r2, r2, #1
 8008d4e:	4011      	ands	r1, r2
 8008d50:	430c      	orrs	r4, r1
 8008d52:	d00b      	beq.n	8008d6c <rint+0xa4>
 8008d54:	ea23 0202 	bic.w	r2, r3, r2
 8008d58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d5c:	2e13      	cmp	r6, #19
 8008d5e:	fa43 f306 	asr.w	r3, r3, r6
 8008d62:	bf0c      	ite	eq
 8008d64:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008d68:	2400      	movne	r4, #0
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	4916      	ldr	r1, [pc, #88]	; (8008dc8 <rint+0x100>)
 8008d6e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008d72:	4622      	mov	r2, r4
 8008d74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d78:	4620      	mov	r0, r4
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	f7f7 fa96 	bl	80002ac <__adddf3>
 8008d80:	e9cd 0100 	strd	r0, r1, [sp]
 8008d84:	4622      	mov	r2, r4
 8008d86:	462b      	mov	r3, r5
 8008d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d8c:	f7f7 fa8c 	bl	80002a8 <__aeabi_dsub>
 8008d90:	e7d2      	b.n	8008d38 <rint+0x70>
 8008d92:	2e33      	cmp	r6, #51	; 0x33
 8008d94:	dd07      	ble.n	8008da6 <rint+0xde>
 8008d96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008d9a:	d1cd      	bne.n	8008d38 <rint+0x70>
 8008d9c:	ee10 2a10 	vmov	r2, s0
 8008da0:	f7f7 fa84 	bl	80002ac <__adddf3>
 8008da4:	e7c8      	b.n	8008d38 <rint+0x70>
 8008da6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dae:	40f2      	lsrs	r2, r6
 8008db0:	4210      	tst	r0, r2
 8008db2:	d0c1      	beq.n	8008d38 <rint+0x70>
 8008db4:	0852      	lsrs	r2, r2, #1
 8008db6:	4210      	tst	r0, r2
 8008db8:	bf1f      	itttt	ne
 8008dba:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008dbe:	ea20 0202 	bicne.w	r2, r0, r2
 8008dc2:	4134      	asrne	r4, r6
 8008dc4:	4314      	orrne	r4, r2
 8008dc6:	e7d1      	b.n	8008d6c <rint+0xa4>
 8008dc8:	08009150 	.word	0x08009150
 8008dcc:	000fffff 	.word	0x000fffff

08008dd0 <scalbn>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	ec55 4b10 	vmov	r4, r5, d0
 8008dd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008dda:	4606      	mov	r6, r0
 8008ddc:	462b      	mov	r3, r5
 8008dde:	b9aa      	cbnz	r2, 8008e0c <scalbn+0x3c>
 8008de0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008de4:	4323      	orrs	r3, r4
 8008de6:	d03b      	beq.n	8008e60 <scalbn+0x90>
 8008de8:	4b31      	ldr	r3, [pc, #196]	; (8008eb0 <scalbn+0xe0>)
 8008dea:	4629      	mov	r1, r5
 8008dec:	2200      	movs	r2, #0
 8008dee:	ee10 0a10 	vmov	r0, s0
 8008df2:	f7f7 fc11 	bl	8000618 <__aeabi_dmul>
 8008df6:	4b2f      	ldr	r3, [pc, #188]	; (8008eb4 <scalbn+0xe4>)
 8008df8:	429e      	cmp	r6, r3
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	da12      	bge.n	8008e26 <scalbn+0x56>
 8008e00:	a327      	add	r3, pc, #156	; (adr r3, 8008ea0 <scalbn+0xd0>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 fc07 	bl	8000618 <__aeabi_dmul>
 8008e0a:	e009      	b.n	8008e20 <scalbn+0x50>
 8008e0c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008e10:	428a      	cmp	r2, r1
 8008e12:	d10c      	bne.n	8008e2e <scalbn+0x5e>
 8008e14:	ee10 2a10 	vmov	r2, s0
 8008e18:	4620      	mov	r0, r4
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	f7f7 fa46 	bl	80002ac <__adddf3>
 8008e20:	4604      	mov	r4, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	e01c      	b.n	8008e60 <scalbn+0x90>
 8008e26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	3a36      	subs	r2, #54	; 0x36
 8008e2e:	4432      	add	r2, r6
 8008e30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008e34:	428a      	cmp	r2, r1
 8008e36:	dd0b      	ble.n	8008e50 <scalbn+0x80>
 8008e38:	ec45 4b11 	vmov	d1, r4, r5
 8008e3c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008ea8 <scalbn+0xd8>
 8008e40:	f000 f83c 	bl	8008ebc <copysign>
 8008e44:	a318      	add	r3, pc, #96	; (adr r3, 8008ea8 <scalbn+0xd8>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	ec51 0b10 	vmov	r0, r1, d0
 8008e4e:	e7da      	b.n	8008e06 <scalbn+0x36>
 8008e50:	2a00      	cmp	r2, #0
 8008e52:	dd08      	ble.n	8008e66 <scalbn+0x96>
 8008e54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008e60:	ec45 4b10 	vmov	d0, r4, r5
 8008e64:	bd70      	pop	{r4, r5, r6, pc}
 8008e66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008e6a:	da0d      	bge.n	8008e88 <scalbn+0xb8>
 8008e6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008e70:	429e      	cmp	r6, r3
 8008e72:	ec45 4b11 	vmov	d1, r4, r5
 8008e76:	dce1      	bgt.n	8008e3c <scalbn+0x6c>
 8008e78:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008ea0 <scalbn+0xd0>
 8008e7c:	f000 f81e 	bl	8008ebc <copysign>
 8008e80:	a307      	add	r3, pc, #28	; (adr r3, 8008ea0 <scalbn+0xd0>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	e7e0      	b.n	8008e4a <scalbn+0x7a>
 8008e88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e8c:	3236      	adds	r2, #54	; 0x36
 8008e8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <scalbn+0xe8>)
 8008e9e:	e7b2      	b.n	8008e06 <scalbn+0x36>
 8008ea0:	c2f8f359 	.word	0xc2f8f359
 8008ea4:	01a56e1f 	.word	0x01a56e1f
 8008ea8:	8800759c 	.word	0x8800759c
 8008eac:	7e37e43c 	.word	0x7e37e43c
 8008eb0:	43500000 	.word	0x43500000
 8008eb4:	ffff3cb0 	.word	0xffff3cb0
 8008eb8:	3c900000 	.word	0x3c900000

08008ebc <copysign>:
 8008ebc:	ec51 0b10 	vmov	r0, r1, d0
 8008ec0:	ee11 0a90 	vmov	r0, s3
 8008ec4:	ee10 2a10 	vmov	r2, s0
 8008ec8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008ed0:	ea41 0300 	orr.w	r3, r1, r0
 8008ed4:	ec43 2b10 	vmov	d0, r2, r3
 8008ed8:	4770      	bx	lr
	...

08008edc <_init>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_fini>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	bf00      	nop
 8008eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eee:	bc08      	pop	{r3}
 8008ef0:	469e      	mov	lr, r3
 8008ef2:	4770      	bx	lr
